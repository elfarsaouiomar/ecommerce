************* Module django.contrib.admin.options
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:356: [W0511(fixme), ] TODO: this should be handled by some parameter to the ChangeList.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1: [C0302(too-many-lines), ] Too many lines in module (2195/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:65: [C0415(import-outside-toplevel), get_content_type_for_model] Import outside toplevel (django.contrib.contenttypes.models.ContentType)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:165: [E1101(no-member), BaseModelAdmin.formfield_for_dbfield] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:175: [E1101(no-member), BaseModelAdmin.formfield_for_dbfield] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:214: [E1101(no-member), BaseModelAdmin.get_field_queryset] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:229: [E1101(no-member), BaseModelAdmin.formfield_for_foreignkey] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:231: [E1101(no-member), BaseModelAdmin.formfield_for_foreignkey] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:257: [E1101(no-member), BaseModelAdmin.formfield_for_manytomany] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:259: [E1101(no-member), BaseModelAdmin.formfield_for_manytomany] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:290: [R1705(no-else-return), BaseModelAdmin.get_view_on_site_url] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:291: [E1102(not-callable), BaseModelAdmin.get_view_on_site_url] self.view_on_site is not callable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:286: [R1710(inconsistent-return-statements), BaseModelAdmin.get_view_on_site_url] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:306: [E1101(no-member), BaseModelAdmin.get_empty_value_display] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:321: [E1101(no-member), BaseModelAdmin.get_fields] Instance of 'BaseModelAdmin' has no '_get_form_for_get_fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:355: [E1101(no-member), BaseModelAdmin.get_queryset] Instance of 'BaseModelAdmin' has no 'model' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:364: [E1101(no-member), BaseModelAdmin.get_sortable_by] Instance of 'BaseModelAdmin' has no 'get_list_display' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:367: [C0415(import-outside-toplevel), BaseModelAdmin.lookup_allowed] Import outside toplevel (django.contrib.admin.filters.SimpleListFilter)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:369: [E1101(no-member), BaseModelAdmin.lookup_allowed] Instance of 'BaseModelAdmin' has no 'model' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:405: [E1101(no-member), BaseModelAdmin.lookup_allowed] Instance of 'BaseModelAdmin' has no 'date_hierarchy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:406: [E1101(no-member), BaseModelAdmin.lookup_allowed] Instance of 'BaseModelAdmin' has no 'list_filter' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:417: [W0631(undefined-loop-variable), BaseModelAdmin.lookup_allowed] Using possibly undefined loop variable 'part'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:425: [E1101(no-member), BaseModelAdmin.to_field_allowed] Instance of 'BaseModelAdmin' has no 'model' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:446: [E1101(no-member), BaseModelAdmin.to_field_allowed] Instance of 'BaseModelAdmin' has no 'admin_site' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:470: [E1101(no-member), BaseModelAdmin.has_add_permission] Instance of 'BaseModelAdmin' has no 'opts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:485: [E1101(no-member), BaseModelAdmin.has_change_permission] Instance of 'BaseModelAdmin' has no 'opts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:500: [E1101(no-member), BaseModelAdmin.has_delete_permission] Instance of 'BaseModelAdmin' has no 'opts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:515: [E1101(no-member), BaseModelAdmin.has_view_permission] Instance of 'BaseModelAdmin' has no 'opts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:537: [E1101(no-member), BaseModelAdmin.has_module_permission] Instance of 'BaseModelAdmin' has no 'opts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:602: [C0415(import-outside-toplevel), ModelAdmin.get_urls] Import outside toplevel (django.urls.path)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:689: [E1101(no-member), ModelAdmin.get_form] Class 'ModelForm' has no 'declared_fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:716: [C0415(import-outside-toplevel), ModelAdmin.get_changelist] Import outside toplevel (django.contrib.admin.views.main.ChangeList)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:799: [W0622(redefined-builtin), ModelAdmin.log_addition] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:805: [C0415(import-outside-toplevel), ModelAdmin.log_addition] Import outside toplevel (django.contrib.admin.models.LogEntry, django.contrib.admin.models.ADDITION)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:815: [W0622(redefined-builtin), ModelAdmin.log_change] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:821: [C0415(import-outside-toplevel), ModelAdmin.log_change] Import outside toplevel (django.contrib.admin.models.LogEntry, django.contrib.admin.models.CHANGE)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:831: [W0622(redefined-builtin), ModelAdmin.log_deletion] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:838: [C0415(import-outside-toplevel), ModelAdmin.log_deletion] Import outside toplevel (django.contrib.admin.models.LogEntry, django.contrib.admin.models.DELETION)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:871: [W0622(redefined-builtin), ModelAdmin._filter_actions_by_permissions] Redefining built-in 'callable'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:899: [W0102(dangerous-default-value), ModelAdmin.get_action_choices] Dangerous default value BLANK_CHOICE_DASH (builtins.list) as argument
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:905: [W0612(unused-variable), ModelAdmin.get_action_choices] Unused variable 'func'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:953: [R1705(no-else-return), ModelAdmin.get_list_display_links] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:987: [R1705(no-else-return), ModelAdmin.get_search_results.construct_search] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1188: [R1705(no-else-return), ModelAdmin.response_add] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1274: [R1705(no-else-return), ModelAdmin.response_change] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1402: [R1705(no-else-return), ModelAdmin.response_action] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1473: [R0914(too-many-locals), ModelAdmin.get_inline_formsets] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1531: [R0914(too-many-locals), ModelAdmin._changeform_view] Too many local variables (25/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1575: [R1705(no-else-return), ModelAdmin._changeform_view] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1531: [R0912(too-many-branches), ModelAdmin._changeform_view] Too many branches (25/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1531: [R0915(too-many-statements), ModelAdmin._changeform_view] Too many statements (67/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1674: [R0914(too-many-locals), ModelAdmin.changelist_view] Too many local variables (23/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1678: [C0415(import-outside-toplevel), ModelAdmin.changelist_view] Import outside toplevel (django.contrib.admin.views.main.ERROR_FLAG)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1712: [R1705(no-else-return), ModelAdmin.changelist_view] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1728: [R1705(no-else-return), ModelAdmin.changelist_view] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1674: [R0911(too-many-return-statements), ModelAdmin.changelist_view] Too many return statements (7/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1674: [R0912(too-many-branches), ModelAdmin.changelist_view] Too many branches (24/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1674: [R0915(too-many-statements), ModelAdmin.changelist_view] Too many statements (65/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1840: [R0914(too-many-locals), ModelAdmin._delete_view] Too many local variables (18/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1900: [C0415(import-outside-toplevel), ModelAdmin.history_view] Import outside toplevel (django.contrib.admin.models.LogEntry)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1937: [R0914(too-many-locals), ModelAdmin._create_formsets] Too many local variables (16/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:1966: [W0640(cell-var-from-loop), ModelAdmin._create_formsets.user_deleted_form] Cell variable inline defined in loop
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:540: [R0904(too-many-public-methods), ModelAdmin] Too many public methods (53/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:2023: [E1135(unsupported-membership-test), InlineModelAdmin.media] Value 'self.classes' doesn't support membership test
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/options.py:2160: [W0221(arguments-differ), InlineModelAdmin.has_add_permission] Parameters differ from overridden 'has_add_permission' method
************* Module django.contrib.admin.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:1: [C0302(too-many-lines), ] Too many lines in module (523/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:24: [W0107(unnecessary-pass), FieldIsAForeignKeyColumnName] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:96: [W0612(unused-variable), flatten_fieldsets] Unused variable 'name'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:128: [R1705(no-else-return), get_deleted_objects.format_callback] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:169: [W0221(arguments-differ), NestedObjects.collect] Parameters differ from overridden 'collect' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:214: [W0222(signature-differs), NestedObjects.can_fast_delete] Signature differs from overridden 'can_fast_delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:360: [R1705(no-else-return), label_for_field] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:306: [R0912(too-many-branches), label_for_field] Too many branches (20/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:379: [C0415(import-outside-toplevel), display_for_field] Import outside toplevel (django.contrib.admin.templatetags.admin_list._boolean_icon)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:381: [R1705(no-else-return), display_for_field] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:378: [R0911(too-many-return-statements), display_for_field] Too many return statements (9/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:404: [C0415(import-outside-toplevel), display_for_value] Import outside toplevel (django.contrib.admin.templatetags.admin_list._boolean_icon)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:406: [R1705(no-else-return), display_for_value] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:403: [R0911(too-many-return-statements), display_for_value] Too many return statements (8/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/utils.py:429: [R1705(no-else-return), get_model_from_relation] Unnecessary "else" after "return"
************* Module django.contrib.admin.widgets
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:249: [W0511(fixme), ] XXX: The UX does not support multiple selected values.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:252: [W0511(fixme), ] XXX: The deletion UX can be confusing when dealing with cascading deletion.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:61: [W0622(redefined-builtin), AdminDateWidget.__init__] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:73: [W0622(redefined-builtin), AdminTimeWidget.__init__] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:88: [W0233(non-parent-init-called), AdminSplitDateTime.__init__] __init__ method from a non direct base class 'MultiWidget' is called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:84: [W0231(super-init-not-called), AdminSplitDateTime.__init__] __init__ method from base class 'SplitDateTimeWidget' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:173: [C0415(import-outside-toplevel), ForeignKeyRawIdWidget.url_parameters] Import outside toplevel (django.contrib.admin.views.main.TO_FIELD_VAR)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:220: [R1710(inconsistent-return-statements), ManyToManyRawIdWidget.value_from_datadict] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:229: [R0902(too-many-instance-attributes), RelatedFieldWidgetWrapper] Too many instance attributes (10/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:236: [W0231(super-init-not-called), RelatedFieldWidgetWrapper.__init__] __init__ method from base class 'Widget' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/widgets.py:279: [C0415(import-outside-toplevel), RelatedFieldWidgetWrapper.get_context] Import outside toplevel (django.contrib.admin.views.main.IS_POPUP_VAR, django.contrib.admin.views.main.TO_FIELD_VAR)
************* Module django.contrib.admin.helpers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/helpers.py:193: [C0415(import-outside-toplevel), AdminReadonlyField.contents] Import outside toplevel (django.contrib.admin.templatetags.admin_list._boolean_icon)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/helpers.py:223: [R0902(too-many-instance-attributes), InlineAdminFormSet] Too many instance attributes (11/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/helpers.py:227: [R0913(too-many-arguments), InlineAdminFormSet.__init__] Too many arguments (11/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/helpers.py:277: [W0612(unused-variable), InlineAdminFormSet.fields] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/helpers.py:366: [R1705(no-else-return), InlineAdminForm.fk_field] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/helpers.py:372: [C0415(import-outside-toplevel), InlineAdminForm.deletion_field] Import outside toplevel (django.forms.formsets.DELETION_FIELD_NAME)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/helpers.py:376: [C0415(import-outside-toplevel), InlineAdminForm.ordering_field] Import outside toplevel (django.forms.formsets.ORDERING_FIELD_NAME)
************* Module django.contrib.admin.filters
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/filters.py:118: [W0223(abstract-method), FieldListFilter] Method 'choices' is abstract in class 'ListFilter' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/filters.py:118: [W0223(abstract-method), FieldListFilter] Method 'expected_parameters' is abstract in class 'ListFilter' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/filters.py:156: [R1710(inconsistent-return-statements), FieldListFilter.create] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/filters.py:162: [R0902(too-many-instance-attributes), RelatedFieldListFilter] Too many instance attributes (8/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/filters.py:379: [W0612(unused-variable), AllValuesFieldListFilter.__init__] Unused variable 'reverse_path'
************* Module django.contrib.admin.sites
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:1: [C0302(too-many-lines), ] Too many lines in module (537/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:218: [C0415(import-outside-toplevel), AdminSite.admin_view.inner] Import outside toplevel (django.contrib.auth.views.redirect_to_login)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:233: [C0415(import-outside-toplevel), AdminSite.get_urls] Import outside toplevel (django.urls.include, django.urls.path, django.urls.re_path)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:237: [C0415(import-outside-toplevel), AdminSite.get_urls] Import outside toplevel (django.contrib.contenttypes.views)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:310: [C0415(import-outside-toplevel), AdminSite.password_change] Import outside toplevel (django.contrib.admin.forms.AdminPasswordChangeForm)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:311: [C0415(import-outside-toplevel), AdminSite.password_change] Import outside toplevel (django.contrib.auth.views.PasswordChangeView)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:327: [C0415(import-outside-toplevel), AdminSite.password_change_done] Import outside toplevel (django.contrib.auth.views.PasswordChangeDoneView)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:352: [C0415(import-outside-toplevel), AdminSite.logout] Import outside toplevel (django.contrib.auth.views.LogoutView)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:377: [C0415(import-outside-toplevel), AdminSite.login] Import outside toplevel (django.contrib.auth.views.LoginView)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/sites.py:381: [C0415(import-outside-toplevel), AdminSite.login] Import outside toplevel (django.contrib.admin.forms.AdminAuthenticationForm)
************* Module django.contrib.admin.tests
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:33: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_until] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:33: [E0401(import-error), AdminSeleniumTestCase.wait_until] Unable to import 'selenium.webdriver.support.wait'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:33: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_until] Import outside toplevel (selenium.webdriver.support.wait.WebDriverWait)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:47: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_for] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:47: [E0401(import-error), AdminSeleniumTestCase.wait_for] Unable to import 'selenium.webdriver.common.by'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:47: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_for] Import outside toplevel (selenium.webdriver.common.by.By)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:48: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_for] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:48: [E0401(import-error), AdminSeleniumTestCase.wait_for] Unable to import 'selenium.webdriver.support'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:48: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_for] Import outside toplevel (selenium.webdriver.support.expected_conditions)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:58: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_for_text] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:58: [E0401(import-error), AdminSeleniumTestCase.wait_for_text] Unable to import 'selenium.webdriver.common.by'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:58: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_for_text] Import outside toplevel (selenium.webdriver.common.by.By)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:59: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_for_text] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:59: [E0401(import-error), AdminSeleniumTestCase.wait_for_text] Unable to import 'selenium.webdriver.support'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:59: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_for_text] Import outside toplevel (selenium.webdriver.support.expected_conditions)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:70: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_for_value] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:70: [E0401(import-error), AdminSeleniumTestCase.wait_for_value] Unable to import 'selenium.webdriver.common.by'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:70: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_for_value] Import outside toplevel (selenium.webdriver.common.by.By)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:71: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_for_value] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:71: [E0401(import-error), AdminSeleniumTestCase.wait_for_value] Unable to import 'selenium.webdriver.support'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:71: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_for_value] Import outside toplevel (selenium.webdriver.support.expected_conditions)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:82: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_until_visible] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:82: [E0401(import-error), AdminSeleniumTestCase.wait_until_visible] Unable to import 'selenium.webdriver.common.by'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:82: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_until_visible] Import outside toplevel (selenium.webdriver.common.by.By)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:83: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_until_visible] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:83: [E0401(import-error), AdminSeleniumTestCase.wait_until_visible] Unable to import 'selenium.webdriver.support'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:83: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_until_visible] Import outside toplevel (selenium.webdriver.support.expected_conditions)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:93: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_until_invisible] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:93: [E0401(import-error), AdminSeleniumTestCase.wait_until_invisible] Unable to import 'selenium.webdriver.common.by'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:93: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_until_invisible] Import outside toplevel (selenium.webdriver.common.by.By)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:94: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_until_invisible] No name 'webdriver' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:94: [E0401(import-error), AdminSeleniumTestCase.wait_until_invisible] Unable to import 'selenium.webdriver.support'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:94: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_until_invisible] Import outside toplevel (selenium.webdriver.support.expected_conditions)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:104: [E0611(no-name-in-module), AdminSeleniumTestCase.wait_page_loaded] No name 'common' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:104: [E0401(import-error), AdminSeleniumTestCase.wait_page_loaded] Unable to import 'selenium.common.exceptions'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:104: [C0415(import-outside-toplevel), AdminSeleniumTestCase.wait_page_loaded] Import outside toplevel (selenium.common.exceptions.TimeoutException)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:141: [E0611(no-name-in-module), AdminSeleniumTestCase.get_select_option] No name 'common' in module 'selenium'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:141: [E0401(import-error), AdminSeleniumTestCase.get_select_option] Unable to import 'selenium.common.exceptions'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/tests.py:141: [C0415(import-outside-toplevel), AdminSeleniumTestCase.get_select_option] Import outside toplevel (selenium.common.exceptions.NoSuchElementException)
************* Module django.contrib.admin.checks
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:908: [C0330(bad-continuation), ] Wrong continued indentation (remove 2 spaces).
                    obj.list_display_links is not None):
                  | ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1: [C0302(too-many-lines), ] Too many lines in module (1134/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:53: [C0415(import-outside-toplevel), check_admin_app] Import outside toplevel (django.contrib.admin.sites.all_sites)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:60: [R0912(too-many-branches), check_dependencies] Too many branches (13/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:155: [R1705(no-else-return), BaseModelAdminChecks._check_autocomplete_fields] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:180: [R1705(no-else-return), BaseModelAdminChecks._check_autocomplete_fields_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:210: [R1705(no-else-return), BaseModelAdminChecks._check_raw_id_fields] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:228: [R1705(no-else-return), BaseModelAdminChecks._check_raw_id_fields_item] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:238: [R1705(no-else-return), BaseModelAdminChecks._check_fields] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:269: [R1705(no-else-return), BaseModelAdminChecks._check_fieldsets] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:284: [R1705(no-else-return), BaseModelAdminChecks._check_fieldsets_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:280: [R0911(too-many-return-statements), BaseModelAdminChecks._check_fieldsets_item] Too many return statements (7/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:320: [R1705(no-else-return), BaseModelAdminChecks._check_field_spec] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:329: [R1705(no-else-return), BaseModelAdminChecks._check_field_spec_item] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:342: [R1705(no-else-return), BaseModelAdminChecks._check_field_spec_item] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:359: [R1705(no-else-return), BaseModelAdminChecks._check_exclude] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:376: [R1705(no-else-return), BaseModelAdminChecks._check_form] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:384: [R1705(no-else-return), BaseModelAdminChecks._check_filter_vertical] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:394: [R1705(no-else-return), BaseModelAdminChecks._check_filter_horizontal] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:411: [R1705(no-else-return), BaseModelAdminChecks._check_filter_item] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:418: [R1705(no-else-return), BaseModelAdminChecks._check_radio_fields] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:436: [R1705(no-else-return), BaseModelAdminChecks._check_radio_fields_key] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:453: [C0415(import-outside-toplevel), BaseModelAdminChecks._check_radio_fields_value] Import outside toplevel (django.contrib.admin.options.HORIZONTAL, django.contrib.admin.options.VERTICAL)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:455: [R1705(no-else-return), BaseModelAdminChecks._check_radio_fields_value] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:467: [R1705(no-else-return), BaseModelAdminChecks._check_view_on_site_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:481: [R1705(no-else-return), BaseModelAdminChecks._check_prepopulated_fields] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:500: [R1705(no-else-return), BaseModelAdminChecks._check_prepopulated_fields_key] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:516: [R1705(no-else-return), BaseModelAdminChecks._check_prepopulated_fields_value] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:539: [R1705(no-else-return), BaseModelAdminChecks._check_ordering] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:558: [R1705(no-else-return), BaseModelAdminChecks._check_ordering_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:549: [R0911(too-many-return-statements), BaseModelAdminChecks._check_ordering_item] Too many return statements (7/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:589: [R1705(no-else-return), BaseModelAdminChecks._check_readonly_fields] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:600: [R1705(no-else-return), BaseModelAdminChecks._check_readonly_fields_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:647: [R1705(no-else-return), ModelAdminChecks._check_save_as] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:656: [R1705(no-else-return), ModelAdminChecks._check_save_on_top] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:665: [R1705(no-else-return), ModelAdminChecks._check_inlines] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:686: [C0415(import-outside-toplevel), ModelAdminChecks._check_inlines_item] Import outside toplevel (django.contrib.admin.options.InlineModelAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:688: [R1705(no-else-return), ModelAdminChecks._check_inlines_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:713: [R1705(no-else-return), ModelAdminChecks._check_list_display] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:722: [R1705(no-else-return), ModelAdminChecks._check_list_display_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:757: [C0415(import-outside-toplevel), ModelAdminChecks._check_list_display_links] Import outside toplevel (django.contrib.admin.options.ModelAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:759: [R1705(no-else-return), ModelAdminChecks._check_list_display_links] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:772: [R1705(no-else-return), ModelAdminChecks._check_list_display_links_item] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:786: [R1705(no-else-return), ModelAdminChecks._check_list_filter] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:803: [C0415(import-outside-toplevel), ModelAdminChecks._check_list_filter_item] Import outside toplevel (django.contrib.admin.ListFilter, django.contrib.admin.FieldListFilter)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:807: [R1705(no-else-return), ModelAdminChecks._check_list_filter_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:824: [R1705(no-else-return), ModelAdminChecks._check_list_filter_item] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:794: [R0911(too-many-return-statements), ModelAdminChecks._check_list_filter_item] Too many return statements (7/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:849: [R1705(no-else-return), ModelAdminChecks._check_list_select_related] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:857: [R1705(no-else-return), ModelAdminChecks._check_list_per_page] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:865: [R1705(no-else-return), ModelAdminChecks._check_list_max_show_all] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:874: [R1705(no-else-return), ModelAdminChecks._check_list_editable] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:888: [R1705(no-else-return), ModelAdminChecks._check_list_editable_item] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:935: [R1705(no-else-return), ModelAdminChecks._check_search_fields] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:943: [R1705(no-else-return), ModelAdminChecks._check_date_hierarchy] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:958: [R1705(no-else-return), ModelAdminChecks._check_date_hierarchy] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:970: [W0612(unused-variable), ModelAdminChecks._check_action_permission_methods] Unused variable 'name'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1004: [W0221(arguments-differ), InlineModelAdminChecks.check] Parameters differ from overridden 'check' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1032: [R1705(no-else-return), InlineModelAdminChecks._check_exclude_of_parent_model] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1057: [R1705(no-else-return), InlineModelAdminChecks._check_extra] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1065: [R1705(no-else-return), InlineModelAdminChecks._check_max_num] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1075: [R1705(no-else-return), InlineModelAdminChecks._check_min_num] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1085: [R1705(no-else-return), InlineModelAdminChecks._check_formset] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1105: [W0622(redefined-builtin), must_be] Redefining built-in 'type'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1105: [W0622(redefined-builtin), must_be] Redefining built-in 'id'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1115: [W0622(redefined-builtin), must_inherit_from] Redefining built-in 'id'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/checks.py:1125: [W0622(redefined-builtin), refer_to_missing_field] Redefining built-in 'id'
************* Module django.contrib.admin.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/models.py:75: [R1705(no-else-return), LogEntry.__str__] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/models.py:101: [R1705(no-else-return), LogEntry.get_change_message] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/models.py:101: [E1136(unsubscriptable-object), LogEntry.get_change_message] Value 'self.change_message' is unsubscriptable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/models.py:138: [E1101(no-member), LogEntry.get_edited_object] Instance of 'ForeignKey' has no 'get_object_for_this_type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/models.py:145: [E1101(no-member), LogEntry.get_admin_url] Instance of 'ForeignKey' has no 'app_label' member
************* Module django.contrib.admin.decorators
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/decorators.py:12: [C0415(import-outside-toplevel), register] Import outside toplevel (django.contrib.admin.ModelAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/decorators.py:13: [C0415(import-outside-toplevel), register] Import outside toplevel (django.contrib.admin.sites.site, django.contrib.admin.sites.AdminSite)
************* Module django.contrib.admin.exceptions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/exceptions.py:6: [W0107(unnecessary-pass), DisallowedModelAdminLookup] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/exceptions.py:11: [W0107(unnecessary-pass), DisallowedModelAdminToField] Unnecessary pass statement
************* Module django.contrib.admin.views.main
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:38: [R0902(too-many-instance-attributes), ChangeList] Too many instance attributes (36/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:39: [R0913(too-many-arguments), ChangeList.__init__] Too many arguments (14/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:39: [R0914(too-many-locals), ChangeList.__init__] Too many local variables (16/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:105: [R0914(too-many-locals), ChangeList.get_filters] Too many local variables (19/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:105: [R0912(too-many-branches), ChangeList.get_filters] Too many branches (19/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:287: [W0612(unused-variable), ChangeList.get_ordering] Unused variable 'none'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:308: [R0912(too-many-branches), ChangeList._get_deterministic_ordering] Too many branches (13/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:394: [W0612(unused-variable), ChangeList.get_ordering_field_columns] Unused variable 'none'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:362: [R0912(too-many-branches), ChangeList.get_ordering_field_columns] Too many branches (13/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/main.py:442: [R1705(no-else-return), ChangeList.get_queryset] Unnecessary "else" after "return"
************* Module django.contrib.admin.views.autocomplete
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/autocomplete.py:38: [W0222(signature-differs), AutocompleteJsonView.get_paginator] Signature differs from overridden 'get_paginator' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/autocomplete.py:26: [W0201(attribute-defined-outside-init), AutocompleteJsonView.get] Attribute 'term' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/views/autocomplete.py:28: [W0201(attribute-defined-outside-init), AutocompleteJsonView.get] Attribute 'object_list' defined outside __init__
************* Module django.contrib.admin.templatetags.admin_list
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:34: [R1705(no-else-return), paginator_number] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:105: [R0914(too-many-locals), result_headers] Too many local variables (20/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:204: [R1705(no-else-return), _coerce_field_name] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:211: [R0914(too-many-locals), items_for_result] Too many local variables (21/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:211: [R0912(too-many-branches), items_for_result] Too many branches (21/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:211: [R0915(too-many-statements), items_for_result] Too many statements (57/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:320: [W0612(unused-variable), result_hidden_fields] Unused variable 'res'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:380: [R1705(no-else-return), date_hierarchy] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py:353: [R1710(inconsistent-return-statements), date_hierarchy] Either all return statements in a function should return an expression, or none of them should.
************* Module django.contrib.admin.templatetags.admin_modify
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_modify.py:106: [W0612(unused-variable), cell_count] Unused variable 'field'
************* Module django.contrib.admin.templatetags.base
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/base.py:12: [R0914(too-many-locals), InclusionAdminNode.__init__] Too many local variables (16/15)
************* Module django.contrib.admin.templatetags.admin_urls
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_urls.py:47: [C0415(import-outside-toplevel), add_preserved_filters] Import outside toplevel (django.contrib.admin.options.IS_POPUP_VAR)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_urls.py:50: [C0415(import-outside-toplevel), add_preserved_filters] Import outside toplevel (django.contrib.admin.options.TO_FIELD_VAR)
************* Module django.contrib.auth
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/__init__.py:68: [W1505(deprecated-method), authenticate] Using deprecated method getcallargs()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/__init__.py:156: [C0415(import-outside-toplevel), logout] Import outside toplevel (django.contrib.auth.models.AnonymousUser)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/__init__.py:179: [C0415(import-outside-toplevel), get_user] Import outside toplevel (models.AnonymousUser)
************* Module django.contrib.auth.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/apps.py:25: [C0415(import-outside-toplevel), AuthConfig.ready] Import outside toplevel (models.update_last_login)
************* Module django.contrib.auth.admin
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/admin.py:72: [W0221(arguments-differ), UserAdmin.get_form] Parameters differ from overridden 'get_form' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/admin.py:129: [W0622(redefined-builtin), UserAdmin.user_change_password] Redefining built-in 'id'
************* Module django.contrib.auth.backends
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/backends.py:16: [R1710(inconsistent-return-statements), ModelBackend.authenticate] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/backends.py:128: [W0221(arguments-differ), RemoteUserBackend.authenticate] Parameters differ from overridden 'authenticate' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/backends.py:152: [W1505(deprecated-method), RemoteUserBackend.authenticate] Using deprecated method getcallargs()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/backends.py:128: [R1710(inconsistent-return-statements), RemoteUserBackend.authenticate] Either all return statements in a function should return an expression, or none of them should.
************* Module django.contrib.auth.hashers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:331: [C0330(bad-continuation), ] Wrong continued indentation (remove 3 spaces).
            salt, data) = self._decode(encoded)
         |  ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:346: [C0330(bad-continuation), ] Wrong continued indentation (remove 3 spaces).
            salt, data) = self._decode(encoded)
         |  ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:1: [C0302(too-many-lines), ] Too many lines in module (637/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:113: [R1705(no-else-return), get_hasher] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:150: [W0622(redefined-builtin), mask_hash] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:175: [W0612(unused-variable), BasePasswordHasher._load_library] Unused variable 'name'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:246: [W0622(redefined-builtin), PBKDF2PasswordHasher.encode] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:242: [W0221(arguments-differ), PBKDF2PasswordHasher.encode] Parameters differ from overridden 'encode' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:251: [W0622(redefined-builtin), PBKDF2PasswordHasher.verify] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:251: [W0612(unused-variable), PBKDF2PasswordHasher.verify] Unused variable 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:257: [W0622(redefined-builtin), PBKDF2PasswordHasher.safe_summary] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:267: [W0622(redefined-builtin), PBKDF2PasswordHasher.must_update] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:267: [W0612(unused-variable), PBKDF2PasswordHasher.must_update] Unused variable 'algorithm'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:267: [W0612(unused-variable), PBKDF2PasswordHasher.must_update] Unused variable 'salt'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:267: [W0612(unused-variable), PBKDF2PasswordHasher.must_update] Unused variable 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:271: [W0622(redefined-builtin), PBKDF2PasswordHasher.harden_runtime] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:271: [W0612(unused-variable), PBKDF2PasswordHasher.harden_runtime] Unused variable 'algorithm'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:271: [W0612(unused-variable), PBKDF2PasswordHasher.harden_runtime] Unused variable 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:345: [W0612(unused-variable), Argon2PasswordHasher.must_update] Unused variable 'variety'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:346: [W0612(unused-variable), Argon2PasswordHasher.must_update] Unused variable 'salt'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:346: [W0612(unused-variable), Argon2PasswordHasher.must_update] Unused variable 'data'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:426: [W0612(unused-variable), BCryptSHA256PasswordHasher.safe_summary] Unused variable 'empty'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:426: [W0612(unused-variable), BCryptSHA256PasswordHasher.safe_summary] Unused variable 'algostr'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:437: [W0612(unused-variable), BCryptSHA256PasswordHasher.must_update] Unused variable 'algorithm'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:437: [W0612(unused-variable), BCryptSHA256PasswordHasher.must_update] Unused variable 'empty'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:437: [W0612(unused-variable), BCryptSHA256PasswordHasher.must_update] Unused variable 'algostr'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:437: [W0612(unused-variable), BCryptSHA256PasswordHasher.must_update] Unused variable 'data'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:477: [W0622(redefined-builtin), SHA1PasswordHasher.encode] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:481: [W0622(redefined-builtin), SHA1PasswordHasher.verify] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:481: [W0612(unused-variable), SHA1PasswordHasher.verify] Unused variable 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:487: [W0622(redefined-builtin), SHA1PasswordHasher.safe_summary] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:508: [W0622(redefined-builtin), MD5PasswordHasher.encode] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:512: [W0622(redefined-builtin), MD5PasswordHasher.verify] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:512: [W0612(unused-variable), MD5PasswordHasher.verify] Unused variable 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:518: [W0622(redefined-builtin), MD5PasswordHasher.safe_summary] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:546: [W0622(redefined-builtin), UnsaltedSHA1PasswordHasher.encode] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:555: [W0622(redefined-builtin), UnsaltedSHA1PasswordHasher.safe_summary] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/hashers.py:623: [W0612(unused-variable), CryptPasswordHasher.verify] Unused variable 'salt'
************* Module django.contrib.auth.base_user
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/base_user.py:65: [W0222(signature-differs), AbstractBaseUser.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/base_user.py:73: [E1101(no-member), AbstractBaseUser.get_username] Instance of 'AbstractBaseUser' has no 'USERNAME_FIELD' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/base_user.py:76: [E1101(no-member), AbstractBaseUser.clean] Instance of 'AbstractBaseUser' has no 'USERNAME_FIELD' member
************* Module django.contrib.auth.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/views.py:172: [W0622(redefined-builtin), redirect_to_login] Redefining built-in 'next'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/views.py:260: [W0201(attribute-defined-outside-init), PasswordResetConfirmView.dispatch] Attribute 'validlink' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/views.py:269: [W0201(attribute-defined-outside-init), PasswordResetConfirmView.dispatch] Attribute 'validlink' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/views.py:261: [W0201(attribute-defined-outside-init), PasswordResetConfirmView.dispatch] Attribute 'user' defined outside __init__
************* Module django.contrib.auth.context_processors
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/context_processors.py:57: [C0415(import-outside-toplevel), auth] Import outside toplevel (django.contrib.auth.models.AnonymousUser)
************* Module django.contrib.auth.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/forms.py:185: [W1113(keyword-arg-before-vararg), AuthenticationForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/forms.py:206: [R1720(no-else-raise), AuthenticationForm.clean] Unnecessary "else" after "raise"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/forms.py:279: [R0914(too-many-locals), PasswordResetForm.save] Too many local variables (18/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/forms.py:435: [W0236(invalid-overridden-method), AdminPasswordChangeForm.changed_data] Method 'changed_data' was expected to be 'method', found it instead as 'property'
************* Module django.contrib.auth.middleware
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/middleware.py:69: [R1705(no-else-return), RemoteUserMiddleware.process_request] Unnecessary "else" after "return"
************* Module django.contrib.auth.password_validation
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/password_validation.py:62: [W0621(redefined-outer-name), password_changed] Redefining name 'password_changed' from outer scope (line 54)
************* Module django.contrib.auth.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/models.py:75: [E1101(no-member), Permission.__str__] Instance of 'ForeignKey' has no 'app_label' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/models.py:81: [E1101(no-member), Permission.natural_key] Instance of 'ForeignKey' has no 'natural_key' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/models.py:125: [E0307(invalid-str-returned), Group.__str__] __str__ does not return str
************* Module django.contrib.auth.decorators
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/decorators.py:31: [C0415(import-outside-toplevel), user_passes_test.decorator._wrapped_view] Import outside toplevel (django.contrib.auth.views.redirect_to_login)
************* Module django.contrib.auth.migrations.0011_update_proxy_permissions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/migrations/0011_update_proxy_permissions.py:18: [R0914(too-many-locals), update_proxy_model_permissions] Too many local variables (20/15)
************* Module django.contrib.auth.management
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/management/__init__.py:35: [R0914(too-many-locals), create_permissions] Too many local variables (16/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/management/__init__.py:114: [C0415(import-outside-toplevel), get_default_username] Import outside toplevel (django.contrib.auth.models)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/auth/management/__init__.py:140: [E1101(no-member), get_default_username] Function '_default_manager' has no 'get' member
************* Module django.contrib.contenttypes.admin
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/admin.py:28: [R1705(no-else-return), GenericInlineModelAdminChecks._check_relation] Unnecessary "else" after "return"
************* Module django.contrib.contenttypes.fields
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:1: [C0302(too-many-lines), ] Too many lines in module (688/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:18: [R0902(too-many-instance-attributes), GenericForeignKey] Too many instance attributes (8/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:82: [R1705(no-else-return), GenericForeignKey._check_field_name] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:127: [R1705(no-else-return), GenericForeignKey._check_content_type_field] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:161: [W0622(redefined-builtin), GenericForeignKey.get_content_type] Redefining built-in 'id'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:162: [R1705(no-else-return), GenericForeignKey.get_content_type] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:200: [R1705(no-else-return), GenericForeignKey.get_prefetch_queryset.gfk_key] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:233: [R1705(no-else-return), GenericForeignKey.__get__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:50: [W0201(attribute-defined-outside-init), GenericForeignKey.contribute_to_class] Attribute 'name' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:51: [W0201(attribute-defined-outside-init), GenericForeignKey.contribute_to_class] Attribute 'model' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:334: [R1705(no-else-return), GenericRelation._check_generic_foreign_key_existence] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:397: [R1705(no-else-return), GenericRelation.get_path_info] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:428: [W0221(arguments-differ), GenericRelation.contribute_to_class] Parameters differ from overridden 'contribute_to_class' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:464: [W0221(arguments-differ), GenericRelation.get_extra_restriction] Parameters differ from overridden 'get_extra_restriction' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:431: [W0201(attribute-defined-outside-init), GenericRelation.contribute_to_class] Attribute 'model' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:511: [R0902(too-many-instance-attributes), create_generic_related_manager.GenericRelatedObjectManager] Too many instance attributes (8/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/fields.py:504: [R0915(too-many-statements), create_generic_related_manager] Too many statements (89/50)
************* Module django.contrib.contenttypes.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/views.py:84: [R1705(no-else-return), shortcut] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/views.py:9: [R0912(too-many-branches), shortcut] Too many branches (17/12)
************* Module django.contrib.contenttypes.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:18: [E1101(no-member), BaseGenericInlineFormSet.__init__] Instance of 'BaseGenericInlineFormSet' has no 'ct_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:18: [E1101(no-member), BaseGenericInlineFormSet.__init__] Instance of 'BaseGenericInlineFormSet' has no 'ct_fk_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:27: [E1101(no-member), BaseGenericInlineFormSet.__init__] Instance of 'BaseGenericInlineFormSet' has no 'ct_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:28: [E1101(no-member), BaseGenericInlineFormSet.__init__] Instance of 'BaseGenericInlineFormSet' has no 'for_concrete_model' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:29: [E1101(no-member), BaseGenericInlineFormSet.__init__] Instance of 'BaseGenericInlineFormSet' has no 'ct_fk_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:43: [E1101(no-member), BaseGenericInlineFormSet.get_default_prefix] Class 'BaseGenericInlineFormSet' has no 'ct_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:43: [E1101(no-member), BaseGenericInlineFormSet.get_default_prefix] Class 'BaseGenericInlineFormSet' has no 'ct_fk_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:47: [E1101(no-member), BaseGenericInlineFormSet.save_new] Instance of 'BaseGenericInlineFormSet' has no 'ct_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:48: [E1101(no-member), BaseGenericInlineFormSet.save_new] Instance of 'BaseGenericInlineFormSet' has no 'ct_fk_field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:52: [R0913(too-many-arguments), generic_inlineformset_factory] Too many arguments (16/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/forms.py:52: [R0914(too-many-locals), generic_inlineformset_factory] Too many local variables (18/15)
************* Module django.contrib.contenttypes.checks
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/checks.py:8: [C0415(import-outside-toplevel), check_generic_foreign_keys] Import outside toplevel (fields.GenericForeignKey)
************* Module django.contrib.contenttypes.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/models.py:55: [W0612(unused-variable), ContentTypeManager.get_for_model] Unused variable 'created'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/models.py:62: [W0621(redefined-outer-name), ContentTypeManager.get_for_models] Redefining name 'models' from outer scope (line 4)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/models.py:104: [W0622(redefined-builtin), ContentTypeManager.get_for_id] Redefining built-in 'id'
************* Module django.contrib.contenttypes.management
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/contenttypes/management/__init__.py:68: [R1723(no-else-break), inject_rename_contenttypes_operations] Unnecessary "else" after "break"
************* Module django.contrib.sessions.base_session
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/base_session.py:38: [E0307(invalid-str-returned), AbstractBaseSession.__str__] __str__ does not return str
************* Module django.contrib.sessions.middleware
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/middleware.py:13: [W0231(super-init-not-called), SessionMiddleware.__init__] __init__ method from base class 'MiddlewareMixin' is not called
************* Module django.contrib.sessions.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/models.py:31: [C0415(import-outside-toplevel), Session.get_session_store_class] Import outside toplevel (django.contrib.sessions.backends.db.SessionStore)
************* Module django.contrib.sessions.exceptions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/exceptions.py:6: [W0107(unnecessary-pass), InvalidSessionKey] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/exceptions.py:11: [W0107(unnecessary-pass), SuspiciousSession] Unnecessary pass statement
************* Module django.contrib.sessions.backends.cache
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/cache.py:27: [W0703(broad-except), SessionStore.load] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/cache.py:42: [W0612(unused-variable), SessionStore.create] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/cache.py:54: [R1710(inconsistent-return-statements), SessionStore.save] Either all return statements in a function should return an expression, or none of them should.
************* Module django.contrib.sessions.backends.cached_db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/cached_db.py:29: [W0703(broad-except), SessionStore.load] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/cached_db.py:44: [R1706(consider-using-ternary), SessionStore.exists] Consider using ternary (self.cache_key_prefix + session_key in self._cache if session_key else super().exists(session_key))
************* Module django.contrib.sessions.backends.file
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/file.py:150: [W0622(redefined-builtin), SessionStore.save] Redefining built-in 'dir'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/file.py:111: [R1710(inconsistent-return-statements), SessionStore.save] Either all return statements in a function should return an expression, or none of them should.
************* Module django.contrib.sessions.backends.base
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:25: [W0107(unnecessary-pass), CreateError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:32: [W0107(unnecessary-pass), UpdateError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:73: [R1705(no-else-return), SessionBase.setdefault] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:96: [W0622(redefined-builtin), SessionBase.encode] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:103: [W0622(redefined-builtin), SessionBase.decode] Redefining built-in 'hash'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:109: [W0703(broad-except), SessionBase.decode] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:105: [R1720(no-else-raise), SessionBase.decode] Unnecessary "else" after "raise"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:137: [W0201(attribute-defined-outside-init), SessionBase.clear] Attribute '_session_cache' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:192: [W0201(attribute-defined-outside-init), SessionBase._get_session] Attribute '_session_cache' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:194: [W0201(attribute-defined-outside-init), SessionBase._get_session] Attribute '_session_cache' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:298: [W0201(attribute-defined-outside-init), SessionBase.cycle_key] Attribute '_session_cache' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:175: [W0201(attribute-defined-outside-init), SessionBase._set_session_key] Attribute '__session_key' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/base.py:177: [W0201(attribute-defined-outside-init), SessionBase._set_session_key] Attribute '__session_key' defined outside __init__
************* Module django.contrib.sessions.backends.signed_cookies
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/signed_cookies.py:22: [W0703(broad-except), SessionStore.load] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/signed_cookies.py:59: [W0201(attribute-defined-outside-init), SessionStore.delete] Attribute '_session_cache' defined outside __init__
************* Module django.contrib.sessions.backends.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/db.py:16: [W0235(useless-super-delegation), SessionStore.__init__] Useless super delegation in method '__init__'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/db.py:23: [C0415(import-outside-toplevel), SessionStore.get_model_class] Import outside toplevel (django.contrib.sessions.models.Session)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sessions/backends/db.py:74: [R1710(inconsistent-return-statements), SessionStore.save] Either all return statements in a function should return an expression, or none of them should.
************* Module django.contrib.messages.storage.base
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py:78: [W0612(unused-variable), BaseStorage._loaded_messages] Unused variable 'all_retrieved'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py:123: [R1705(no-else-return), BaseStorage.update] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py:115: [R1710(inconsistent-return-statements), BaseStorage.update] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py:79: [W0201(attribute-defined-outside-init), BaseStorage._loaded_messages] Attribute '_loaded_data' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py:155: [W0201(attribute-defined-outside-init), BaseStorage._get_level] Attribute '_level' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/base.py:168: [W0201(attribute-defined-outside-init), BaseStorage._set_level] Attribute '_level' defined outside __init__
************* Module django.contrib.messages.storage.cookie
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py:16: [W0221(arguments-differ), MessageEncoder.default] Parameters differ from overridden 'default' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py:47: [W0221(arguments-differ), MessageDecoder.decode] Parameters differ from overridden 'decode' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py:94: [W1113(keyword-arg-before-vararg), CookieStorage._store] Keyword argument before variable positional arguments list in the definition of _store function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py:94: [W0221(arguments-differ), CookieStorage._store] Parameters differ from overridden '_store' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py:131: [R1710(inconsistent-return-statements), CookieStorage._encode] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py:155: [W0622(redefined-builtin), CookieStorage._decode] Redefining built-in 'hash'
************* Module django.contrib.staticfiles.finders
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:31: [W0622(redefined-builtin), BaseFinder.find] Redefining built-in 'all'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:53: [W1113(keyword-arg-before-vararg), FileSystemFinder.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:96: [W0622(redefined-builtin), FileSystemFinder.find] Redefining built-in 'all'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:111: [R1710(inconsistent-return-statements), FileSystemFinder.find_location] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:129: [W0612(unused-variable), FileSystemFinder.list] Unused variable 'prefix'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:135: [W0223(abstract-method), AppDirectoriesFinder] Method 'check' is abstract in class 'BaseFinder' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:143: [W1113(keyword-arg-before-vararg), AppDirectoriesFinder.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:170: [W0622(redefined-builtin), AppDirectoriesFinder.find] Redefining built-in 'all'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:186: [R1710(inconsistent-return-statements), AppDirectoriesFinder.find_in_app] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:199: [W0223(abstract-method), BaseStorageFinder] Method 'check' is abstract in class 'BaseFinder' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:206: [W1113(keyword-arg-before-vararg), BaseStorageFinder.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:218: [W0622(redefined-builtin), BaseStorageFinder.find] Redefining built-in 'all'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:244: [W0223(abstract-method), DefaultStorageFinder] Method 'check' is abstract in class 'BaseFinder' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/finders.py:259: [W0622(redefined-builtin), find] Redefining built-in 'all'
************* Module django.contrib.staticfiles.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/utils.py:34: [W0622(redefined-builtin), get_files] Redefining built-in 'dir'
************* Module django.contrib.staticfiles.handlers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/handlers.py:54: [C0415(import-outside-toplevel), StaticFilesHandler.get_response] Import outside toplevel (django.http.Http404)
************* Module django.contrib.staticfiles.storage
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:1: [C0302(too-many-lines), ] Too many lines in module (501/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:29: [W1113(keyword-arg-before-vararg), StaticFilesStorage.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:89: [R1706(consider-using-ternary), HashedFilesMixin.hashed_name] Consider using ternary (urlsplit(unquote(filename)).path.strip() if filename else clean_name)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:242: [W0612(unused-variable), HashedFilesMixin.post_process] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:257: [R0914(too-many-locals), HashedFilesMixin._post_process] Too many local variables (25/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:257: [R0912(too-many-branches), HashedFilesMixin._post_process] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:358: [R1705(no-else-return), HashedFilesMixin.stored_name] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:354: [W0612(unused-variable), HashedFilesMixin.stored_name] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:401: [W0222(signature-differs), ManifestFilesMixin.post_process] Signature differs from overridden 'post_process' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/staticfiles/storage.py:493: [W0107(unnecessary-pass), ManifestStaticFilesStorage] Unnecessary pass statement
************* Module weShop.admin
weShop/admin.py:15: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:18: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:19: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:20: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:25: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:28: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:28: [C0326(bad-whitespace), ] Exactly one space required after comma
      list_display = ('email','dateDeCreation')
                             ^
weShop/admin.py:29: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:30: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:34: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:37: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:38: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
weShop/admin.py:39: [C0304(missing-final-newline), ] Final newline missing
weShop/admin.py:39: [W0311(bad-indentation), ] Bad indentation. Found 6 spaces, expected 4
************* Module weShop.urls
weShop/urls.py:18: [C0305(trailing-newlines), ] Trailing newlines
************* Module weShop.forms
weShop/forms.py:5: [C0301(line-too-long), ] Line too long (191/160)
weShop/forms.py:6: [C0326(bad-whitespace), ] Exactly one space required after comma
    fName = forms.CharField(max_length=100, label='First name :',  required=True, widget=forms.TextInput(attrs={'class': "form-control"}))
                                                                ^
weShop/forms.py:12: [C0301(line-too-long), ] Line too long (181/160)
weShop/forms.py:81: [C0305(trailing-newlines), ] Trailing newlines
************* Module weShop.Models.models
weShop/Models/models.py:111: [C0305(trailing-newlines), ] Trailing newlines
weShop/Models/models.py:25: [E0307(invalid-str-returned), Contact.__str__] __str__ does not return str
weShop/Models/models.py:31: [E0307(invalid-str-returned), Size.__str__] __str__ does not return str
weShop/Models/models.py:39: [E0307(invalid-str-returned), Service.__str__] __str__ does not return str
weShop/Models/models.py:46: [E0307(invalid-str-returned), Category.__str__] __str__ does not return str
weShop/Models/models.py:65: [E0307(invalid-str-returned), Product.__str__] __str__ does not return str
weShop/Models/models.py:79: [E1101(no-member), OrderItem.get_total_item_price] Instance of 'ForeignKey' has no 'price' member
weShop/Models/models.py:85: [E0307(invalid-str-returned), Country.__str__] __str__ does not return str
weShop/Models/models.py:2: [W0611(unused-import), ] Unused ManyToManyField imported from django.db.models
weShop/Models/models.py:5: [W0611(unused-import), ] Unused datetime imported from datetime
weShop/Models/models.py:5: [W0611(unused-import), ] Unused date imported from datetime
weShop/Models/models.py:5: [C0411(wrong-import-order), ] standard import "from datetime import datetime, date" should be placed before "from django.db import models"
************* Module weShop.Dto.ContactDto
weShop/Dto/ContactDto.py:66: [C0304(missing-final-newline), ] Final newline missing
weShop/Dto/ContactDto.py:54: [W0703(broad-except), ContactDto.validate] Catching too general exception Exception
weShop/Dto/ContactDto.py:57: [E1102(not-callable), ContactDto.validate] ERROR is not callable
weShop/Dto/ContactDto.py:16: [R1710(inconsistent-return-statements), ContactDto.validate] Either all return statements in a function should return an expression, or none of them should.
weShop/Dto/ContactDto.py:65: [W0703(broad-except), ContactDto.paramsLenght] Catching too general exception Exception
weShop/Dto/ContactDto.py:65: [W0612(unused-variable), ContactDto.paramsLenght] Unused variable 'e'
weShop/Dto/ContactDto.py:2: [C0411(wrong-import-order), ] standard import "from logging import ERROR" should be placed before "from validate_email import validate_email"
************* Module weShop.Controllers.views
weShop/Controllers/views.py:55: [W0511(fixme), ] TODO add validation more validation
weShop/Controllers/views.py:1: [C0326(bad-whitespace), ] No space allowed before comma
from django.shortcuts import render, get_object_or_404 , redirect
                                                       ^
weShop/Controllers/views.py:50: [C0326(bad-whitespace), ] No space allowed before bracket
        print (err)
              ^
weShop/Controllers/views.py:263: [C0304(missing-final-newline), ] Final newline missing
weShop/Controllers/views.py:49: [W0703(broad-except), categorys] Catching too general exception Exception
weShop/Controllers/views.py:38: [R1705(no-else-return), categorys] Unnecessary "else" after "return"
weShop/Controllers/views.py:62: [W0703(broad-except), singleProduct] Catching too general exception Exception
weShop/Controllers/views.py:104: [R1705(no-else-return), addOrUpdate] Unnecessary "else" after "return"
weShop/Controllers/views.py:132: [W0621(redefined-outer-name), getTotal] Redefining name 'cart' from outer scope (line 66)
weShop/Controllers/views.py:191: [W0703(broad-except), checkout] Catching too general exception Exception
weShop/Controllers/views.py:156: [R1705(no-else-return), checkout] Unnecessary "elif" after "return"
weShop/Controllers/views.py:152: [R1710(inconsistent-return-statements), checkout] Either all return statements in a function should return an expression, or none of them should.
weShop/Controllers/views.py:211: [W0621(redefined-outer-name), subscribe] Redefining name 'subscribe' from outer scope (line 197)
weShop/Controllers/views.py:220: [W0703(broad-except), subscribe] Catching too general exception Exception
weShop/Controllers/views.py:210: [R1705(no-else-return), subscribe] Unnecessary "else" after "return"
weShop/Controllers/views.py:229: [R1705(no-else-return), contact] Unnecessary "elif" after "return"
weShop/Controllers/views.py:243: [W0104(pointless-statement), contact] Statement seems to have no effect
weShop/Controllers/views.py:249: [W0101(unreachable), contact] Unreachable code
weShop/Controllers/views.py:11: [W0611(unused-import), ] Unused Order imported from weShop.Models.models
weShop/Controllers/views.py:12: [W0611(unused-import), ] Unused settings imported from django.conf
weShop/Controllers/views.py:3: [C0411(wrong-import-order), ] standard import "from json import dumps" should be placed before "from django.shortcuts import render, get_object_or_404, redirect"
weShop/Controllers/views.py:8: [C0411(wrong-import-order), ] first party import "from weShop.forms import orderForm" should be placed before "from .AbstractController import parmsToMaps"
weShop/Controllers/views.py:9: [C0411(wrong-import-order), ] first party import "from weShop.Application.ContactApp import ContactApp" should be placed before "from .AbstractController import parmsToMaps"
weShop/Controllers/views.py:10: [C0411(wrong-import-order), ] first party import "from weShop.Dto.ContactDto import ContactDto" should be placed before "from .AbstractController import parmsToMaps"
weShop/Controllers/views.py:11: [C0411(wrong-import-order), ] first party import "from weShop.Models.models import Subscribe, Product, Category, Service, OrderItem, Order, Country" should be placed before "from .AbstractController import parmsToMaps"
weShop/Controllers/views.py:12: [C0411(wrong-import-order), ] third party import "from django.conf import settings" should be placed before "from weShop.forms import orderForm"
weShop/Controllers/views.py:12: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module weShop.Controllers.AbstractController
weShop/Controllers/AbstractController.py:21: [C0304(missing-final-newline), ] Final newline missing
************* Module weShop.Dao.ContactDao
weShop/Dao/ContactDao.py:8: [W0511(fixme), ] TODO // add raise here
weShop/Dao/ContactDao.py:12: [C0326(bad-whitespace), ] No space allowed before bracket
            print (e)
                  ^
weShop/Dao/ContactDao.py:11: [W0703(broad-except), ContactDao.add] Catching too general exception Exception
************* Module weShop.Application.ContactApp
weShop/Application/ContactApp.py:35: [C0305(trailing-newlines), ] Trailing newlines
weShop/Application/ContactApp.py:25: [W0703(broad-except), ContactApp.add] Catching too general exception Exception
weShop/Application/ContactApp.py:26: [E1102(not-callable), ContactApp.add] ERROR is not callable
weShop/Application/ContactApp.py:29: [W0150(lost-exception), ContactApp.add] return statement in finally block may swallow exception
weShop/Application/ContactApp.py:2: [W0611(unused-import), ] Unused ContactDto imported from weShop.Dto.ContactDto
weShop/Application/ContactApp.py:3: [C0411(wrong-import-order), ] standard import "from logging import ERROR" should be placed before "from weShop.Service.ContactService import ContactService"
************* Module accounts.admin
accounts/admin.py:4: [W0611(unused-import), ] Unused admin imported from django.contrib
************* Module accounts.Controllers.views
accounts/Controllers/views.py:24: [W0511(fixme), ] Todo = add validation to secure redirect
accounts/Controllers/views.py:42: [C0305(trailing-newlines), ] Trailing newlines
accounts/Controllers/views.py:6: [W0611(unused-import), ] Unused OrderItem imported from weShop.Models.models
************* Module django.contrib.sites.shortcuts
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/shortcuts.py:11: [R1705(no-else-return), get_current_site] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/shortcuts.py:12: [C0415(import-outside-toplevel), get_current_site] Import outside toplevel (models.Site)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/shortcuts.py:15: [C0415(import-outside-toplevel), get_current_site] Import outside toplevel (requests.RequestSite)
************* Module django.contrib.sites.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/models.py:43: [W0612(unused-variable), SiteManager._get_site_by_request] Unused variable 'port'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/models.py:55: [C0415(import-outside-toplevel), SiteManager.get_current] Import outside toplevel (django.conf.settings)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/models.py:56: [R1705(no-else-return), SiteManager.get_current] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/models.py:71: [W0603(global-statement), SiteManager.clear_cache] Using the global statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/sites/models.py:96: [E0307(invalid-str-returned), Site.__str__] __str__ does not return str
************* Module django.contrib.flatpages.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/flatpages/views.py:39: [R1705(no-else-return), flatpage] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/flatpages/views.py:56: [C0415(import-outside-toplevel), render_flatpage] Import outside toplevel (django.contrib.auth.views.redirect_to_login)
************* Module django.contrib.flatpages.middleware
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/flatpages/middleware.py:17: [W0703(broad-except), FlatpageFallbackMiddleware.process_response] Catching too general exception Exception
************* Module django.contrib.flatpages.templatetags.flatpages
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django/contrib/flatpages/templatetags/flatpages.py:77: [R1705(no-else-return), get_flatpages] Unnecessary "else" after "return"
************* Module django_jenkins.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/apps.py:18: [W0105(pointless-string-statement), JenkinsConfig.__init__] String statement has no effect
************* Module django_jenkins.runner
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/runner.py:103: [W0612(unused-variable), EXMLTestResult._add_tb_to_test] Unused variable 'tb'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/runner.py:29: [W0201(attribute-defined-outside-init), EXMLTestResult.addSuccess] Attribute 'testcase' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/runner.py:33: [W0201(attribute-defined-outside-init), EXMLTestResult.addFailure] Attribute 'testcase' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/runner.py:39: [W0201(attribute-defined-outside-init), EXMLTestResult.addError] Attribute 'testcase' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/runner.py:45: [W0201(attribute-defined-outside-init), EXMLTestResult.addUnexpectedSuccess] Attribute 'testcase' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/runner.py:51: [W0201(attribute-defined-outside-init), EXMLTestResult.addSkip] Attribute 'testcase' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/runner.py:57: [W0201(attribute-defined-outside-init), EXMLTestResult.addExpectedFailure] Attribute 'testcase' defined outside __init__
************* Module django_jenkins.tasks.run_pylint
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pylint.py:19: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
************* Module django_jenkins.tasks.run_flake8
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_flake8.py:11: [E0401(import-error), ] Unable to import 'flake8.api.legacy'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_flake8.py:17: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_flake8.py:82: [R1710(inconsistent-return-statements), Reporter.get_config_path] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_flake8.py:3: [C0411(wrong-import-order), ] standard import "import sys" should be placed before "import pep8"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_flake8.py:12: [C0411(wrong-import-order), ] third party import "from django.conf import settings" should be placed before "from flake8.api.legacy import get_style_guide"
************* Module django_jenkins.tasks.with_coverage
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/with_coverage.py:56: [C0325(superfluous-parens), ] Unnecessary parens after 'not' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/with_coverage.py:57: [C0325(superfluous-parens), ] Unnecessary parens after 'not' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/with_coverage.py:8: [R0205(useless-object-inheritance), CoverageReporter] Class 'CoverageReporter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/with_coverage.py:11: [C0415(import-outside-toplevel), CoverageReporter.__init__] Import outside toplevel (coverage)
************* Module django_jenkins.tasks.run_sloccount
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_sloccount.py:6: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
************* Module django_jenkins.tasks.run_jshint
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_jshint.py:10: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
************* Module django_jenkins.tasks.run_scsslint
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_scsslint.py:10: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
************* Module django_jenkins.tasks.run_csslint
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_csslint.py:10: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
************* Module django_jenkins.tasks.run_pyflakes
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pyflakes.py:13: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pyflakes.py:27: [R1702(too-many-nested-blocks), Reporter.run] Too many nested blocks (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pyflakes.py:30: [W0612(unused-variable), Reporter.run] Unused variable 'dirnames'
************* Module django_jenkins.tasks.run_pep8
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pep8.py:19: [R1707(trailing-comma-tuple), ] Disallow trailing comma tuple
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pep8.py:9: [R0205(useless-object-inheritance), Reporter] Class 'Reporter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pep8.py:18: [W0106(expression-not-assigned), Reporter.add_arguments] Expression "(parser.add_argument('--pep8-ignore', dest='pep8-ignore', help='skip errors and warnings (e.g. E4,W)'), )" is assigned to nothing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pep8.py:30: [E0213(no-self-argument), Reporter.run.JenkinsReport.error] Method should have "self" as first argument
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/tasks/run_pep8.py:63: [R1710(inconsistent-return-statements), Reporter.get_config_path] Either all return statements in a function should return an expression, or none of them should.
************* Module django_jenkins.management.commands.jenkins
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:55: [R1707(trailing-comma-tuple), ] Disallow trailing comma tuple
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:58: [R1707(trailing-comma-tuple), ] Disallow trailing comma tuple
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:61: [R1707(trailing-comma-tuple), ] Disallow trailing comma tuple
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:65: [R1707(trailing-comma-tuple), ] Disallow trailing comma tuple
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:69: [R1707(trailing-comma-tuple), ] Disallow trailing comma tuple
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:72: [R1707(trailing-comma-tuple), ] Disallow trailing comma tuple
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:13: [W0621(redefined-outer-name), get_runner] Redefining name 'settings' from outer scope (line 7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:54: [W0106(expression-not-assigned), Command.add_arguments] Expression "(parser.add_argument('--output-dir', dest='output_dir', default='reports', help='Report files directory'), )" is assigned to nothing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:56: [W0106(expression-not-assigned), Command.add_arguments] Expression "(parser.add_argument('--enable-coverage', action='store_true', default=False, help='Measure code coverage'), )" is assigned to nothing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:59: [W0106(expression-not-assigned), Command.add_arguments] Expression "(parser.add_argument('--debug', action='store_true', dest='debug', default=False, help='Do not intercept stdout and stderr, friendly for console debuggers'), )" is assigned to nothing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:62: [W0106(expression-not-assigned), Command.add_arguments] Expression "(parser.add_argument('--coverage-rcfile', dest='coverage_rcfile', default='', help='Specify configuration file.'), )" is assigned to nothing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:66: [W0106(expression-not-assigned), Command.add_arguments] Expression "(parser.add_argument('--coverage-format', dest='coverage_format', default='xml', help='Specify coverage output formats html,xml,bin'), )" is assigned to nothing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_jenkins/management/commands/jenkins.py:70: [W0106(expression-not-assigned), Command.add_arguments] Expression "(parser.add_argument('--coverage-exclude', action='append', default=[], dest='coverage_excludes', help='Module name to exclude'), )" is assigned to nothing
************* Module oscar.config
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:13: [R0902(too-many-instance-attributes), Shop] Too many instance attributes (9/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:17: [C0415(import-outside-toplevel), Shop.ready] Import outside toplevel (django.contrib.auth.forms.SetPasswordForm)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:31: [C0415(import-outside-toplevel), Shop.get_urls] Import outside toplevel (django.contrib.auth.views)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:33: [C0415(import-outside-toplevel), Shop.get_urls] Import outside toplevel (oscar.views.decorators.login_forbidden)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:19: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'catalogue_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:20: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'customer_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:21: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'basket_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:22: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'checkout_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:23: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'search_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:24: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'dashboard_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:25: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'offer_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:27: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'password_reset_form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:28: [W0201(attribute-defined-outside-init), Shop.ready] Attribute 'set_password_form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/config.py:4: [W0611(unused-import), ] Unused settings imported from django.conf
************* Module oscar.views.generic
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/views/generic.py:11: [R0205(useless-object-inheritance), PostActionMixin] Class 'PostActionMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/views/generic.py:25: [R1705(no-else-return), PostActionMixin.post] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/views/generic.py:33: [R0205(useless-object-inheritance), BulkEditMixin] Class 'BulkEditMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/views/generic.py:90: [E1101(no-member), ObjectLookupView.get_queryset] Instance of 'ObjectLookupView' has no 'model' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/views/generic.py:122: [W0201(attribute-defined-outside-init), ObjectLookupView.get] Attribute 'request' defined outside __init__
************* Module oscar.views.decorators
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/views/decorators.py:39: [R1705(no-else-return), check_permissions] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/views/decorators.py:62: [R1720(no-else-raise), permissions_required._check_permissions] Unnecessary "else" after "raise"
************* Module oscar.forms.fields
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/fields.py:17: [W1113(keyword-arg-before-vararg), ExtendedURLField.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/fields.py:18: [E1003(bad-super-call), ExtendedURLField.__init__] Bad first argument 'URLField' given to super()
************* Module oscar.forms.widgets
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:48: [W0622(redefined-builtin), datetime_format_to_js_date_format] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:57: [W0622(redefined-builtin), datetime_format_to_js_time_format] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:78: [W0622(redefined-builtin), datetime_format_to_js_datetime_format] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:100: [W0622(redefined-builtin), datetime_format_to_js_input_mask] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:103: [W0622(redefined-builtin), datetime_format_to_js_input_mask.multiple_replace] Redefining built-in 'dict'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:123: [R0205(useless-object-inheritance), DateTimeWidgetMixin] Class 'DateTimeWidgetMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:237: [W0222(signature-differs), RemoteSelect.build_attrs] Signature differs from overridden 'build_attrs' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:266: [E1101(no-member), RemoteSelect.optgroups] Instance of 'list' has no 'field' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/widgets.py:270: [E1101(no-member), RemoteSelect.optgroups] Instance of 'list' has no 'queryset' member
************* Module oscar.forms.mixins
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/mixins.py:8: [R0205(useless-object-inheritance), PhoneNumberMixin] Class 'PhoneNumberMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/mixins.py:52: [R1705(no-else-return), PhoneNumberMixin.get_country] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/forms/mixins.py:50: [R1710(inconsistent-return-statements), PhoneNumberMixin.get_country] Either all return statements in a function should return an expression, or none of them should.
************* Module oscar.models.fields.autoslugfield
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/autoslugfield.py:67: [R1720(no-else-raise), AutoSlugField.__init__] Unnecessary "else" after "raise"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/autoslugfield.py:120: [W0622(redefined-builtin), AutoSlugField.create_slug] Redefining built-in 'next'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/autoslugfield.py:36: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.models.fields
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/__init__.py:10: [W0127(self-assigning-variable), ] Assigning the same variable 'AutoSlugField' to itself
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/__init__.py:11: [W0127(self-assigning-variable), ] Assigning the same variable 'PhoneNumberField' to itself
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/__init__.py:15: [R0205(useless-object-inheritance), Creator] Class 'Creator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/__init__.py:22: [W0622(redefined-builtin), Creator.__get__] Redefining built-in 'type'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/__init__.py:79: [W0221(arguments-differ), UppercaseCharField.contribute_to_class] Parameters differ from overridden 'contribute_to_class' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/__init__.py:92: [R1705(no-else-return), UppercaseCharField.to_python] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/models/fields/__init__.py:114: [W0221(arguments-differ), NullCharField.contribute_to_class] Parameters differ from overridden 'contribute_to_class' method
************* Module oscar.core.thumbnails
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:6: [R0205(useless-object-inheritance), AbstractThumbnailer] Class 'AbstractThumbnailer' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:21: [C0415(import-outside-toplevel), SorlThumbnail.generate_thumbnail] Import outside toplevel (sorl.thumbnail.get_thumbnail)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:32: [C0415(import-outside-toplevel), SorlThumbnail.delete_thumbnails] Import outside toplevel (sorl.thumbnail.delete)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:33: [C0415(import-outside-toplevel), SorlThumbnail.delete_thumbnails] Import outside toplevel (sorl.thumbnail.helpers.ThumbnailError)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:47: [W0621(redefined-outer-name), EasyThumbnails.generate_thumbnail] Redefining name 'get_thumbnailer' from outer scope (line 59)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:47: [E0401(import-error), EasyThumbnails.generate_thumbnail] Unable to import 'easy_thumbnails.files'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:47: [C0415(import-outside-toplevel), EasyThumbnails.generate_thumbnail] Import outside toplevel (easy_thumbnails.files.get_thumbnailer)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:55: [W0621(redefined-outer-name), EasyThumbnails.delete_thumbnails] Redefining name 'get_thumbnailer' from outer scope (line 59)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:55: [E0401(import-error), EasyThumbnails.delete_thumbnails] Unable to import 'easy_thumbnails.files'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/thumbnails.py:55: [C0415(import-outside-toplevel), EasyThumbnails.delete_thumbnails] Import outside toplevel (easy_thumbnails.files.get_thumbnailer)
************* Module oscar.core.ajax
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/ajax.py:4: [R0205(useless-object-inheritance), FlashMessages] Class 'FlashMessages' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/ajax.py:18: [W0621(redefined-outer-name), FlashMessages.add_messages] Redefining name 'messages' from outer scope (line 1)
************* Module oscar.core.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/utils.py:64: [R1705(no-else-return), default_slugifier] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/utils.py:111: [W0622(redefined-builtin), format_datetime] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/utils.py:147: [R1705(no-else-return), safe_referrer] Unnecessary "else" after "return"
************* Module oscar.core.prices
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/prices.py:8: [R0205(useless-object-inheritance), Price] Class 'Price' inherits from object, can be safely removed from bases in python3
************* Module oscar.core.application
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/application.py:16: [R0205(useless-object-inheritance), OscarConfigMixin] Class 'OscarConfigMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/application.py:101: [W0126(missing-parentheses-for-call-in-test), OscarConfigMixin.post_process_urls] Using a conditional statement with potentially wrong function or method call due to missing parentheses
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/application.py:101: [W0125(using-constant-test), OscarConfigMixin.post_process_urls] Using a conditional statement with a constant value
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/application.py:136: [C0415(import-outside-toplevel), OscarConfigMixin.get_url_decorator] Import outside toplevel (oscar.views.decorators.permissions_required)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/application.py:123: [R1710(inconsistent-return-statements), OscarConfigMixin.get_url_decorator] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/application.py:10: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.core.compat
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/compat.py:44: [R1718(consider-using-set-comprehension), get_user_model] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/compat.py:45: [R1718(consider-using-set-comprehension), get_user_model] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/compat.py:74: [W0105(pointless-string-statement), ] String statement has no effect
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/compat.py:102: [W0622(redefined-builtin), UnicodeCSVReader.__exit__] Redefining built-in 'type'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/compat.py:97: [W0201(attribute-defined-outside-init), UnicodeCSVReader.__enter__] Attribute 'f' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/compat.py:98: [W0201(attribute-defined-outside-init), UnicodeCSVReader.__enter__] Attribute 'reader' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/compat.py:146: [W0622(redefined-builtin), UnicodeCSVWriter.__exit__] Redefining built-in 'type'
************* Module oscar.core.customisation
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/customisation.py:123: [C0330(bad-continuation), ] Wrong hanging indentation (remove 20 spaces).
                            class_module=app_config.__module__,
        |                   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/customisation.py:124: [C0330(bad-continuation), ] Wrong hanging indentation (remove 20 spaces).
                            class_name=app_config.__class__.__name__)
        |                   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/customisation.py:126: [C0330(bad-continuation), ] Wrong hanging indentation (remove 26 spaces).
                                  local_app_name=local_app_name,
        |                         ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/customisation.py:127: [C0330(bad-continuation), ] Wrong hanging indentation (remove 26 spaces).
                                  class_name=app_config.__class__.__name__)
        |                         ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/customisation.py:49: [R0914(too-many-locals), fork_app] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/customisation.py:88: [W1202(logging-format-interpolation), fork_app] Use lazy % formatting in logging functions
************* Module oscar.core.loading
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/loading.py:12: [W0622(redefined-builtin), ] Redefining built-in 'ModuleNotFoundError'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/loading.py:179: [C0415(import-outside-toplevel), _find_registered_app_name] Import outside toplevel (oscar.core.application.OscarConfig)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/loading.py:230: [R1705(no-else-return), get_model] Unnecessary "else" after "return"
************* Module oscar.core.decorators
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/decorators.py:7: [R1705(no-else-return), deprecated] Unnecessary "else" after "return"
************* Module oscar.core.exceptions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/core/exceptions.py:4: [W0622(redefined-builtin), ModuleNotFoundError] Redefining built-in 'ModuleNotFoundError'
************* Module oscar.test.testcases
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/testcases.py:5: [E0401(import-error), ] Unable to import 'django_webtest'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/testcases.py:6: [C0411(wrong-import-order), ] third party import "from purl import URL" should be placed before "from django_webtest import WebTest"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/testcases.py:8: [C0411(wrong-import-order), ] third party import "from oscar.core.compat import get_user_model" should be placed before "from django_webtest import WebTest"
************* Module oscar.test.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/utils.py:105: [W0221(arguments-differ), RequestFactory.request] Parameters differ from overridden 'request' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/utils.py:128: [W0703(broad-except), run_concurrently.worker] Catching too general exception Exception
************* Module oscar.test.factories.payment
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/factories/payment.py:37: [W0221(arguments-differ), TransactionFactory._create] Parameters differ from overridden '_create' method
************* Module oscar.test.factories
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/factories/__init__.py:185: [W0622(redefined-builtin), create_offer] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/factories/__init__.py:203: [W0621(redefined-outer-name), create_offer] Redefining name 'now' from outer scope (line 20)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/factories/__init__.py:233: [E1101(no-member), create_voucher] Instance of 'VoucherFactory' has no 'offers' member
************* Module oscar.test.factories.order
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/factories/order.py:84: [W0221(arguments-differ), OrderFactory._create] Parameters differ from overridden '_create' method
************* Module oscar.test.factories.basket
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/factories/basket.py:18: [W0201(attribute-defined-outside-init), BasketFactory.set_strategy] Attribute 'strategy' defined outside __init__
************* Module oscar.test.factories.partner
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/test/factories/partner.py:25: [E1101(no-member), PartnerFactory.users] Method 'users' has no 'add' member
************* Module oscar.management.commands.oscar_import_catalogue
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/management/commands/oscar_import_catalogue.py:38: [W1201(logging-not-lazy), Command.handle] Use lazy % formatting in logging functions
************* Module oscar.management.commands.oscar_populate_countries
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/management/commands/oscar_populate_countries.py:13: [W0511(fixme), ] TODO: Allow setting locale to fetch country names in right locale
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/management/commands/oscar_populate_countries.py:32: [C0415(import-outside-toplevel), Command.handle] Import outside toplevel (pycountry)
************* Module oscar.management.commands.oscar_send_alerts
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/management/commands/oscar_send_alerts.py:19: [W0221(arguments-differ), Command.handle] Parameters differ from overridden 'handle' method
************* Module oscar.apps.search.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:21: [C0415(import-outside-toplevel), SearchConfig.get_urls] Import outside toplevel (haystack.views.search_view_factory)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:38: [C0415(import-outside-toplevel), SearchConfig.get_sqs] Import outside toplevel (oscar.apps.search.facets)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:16: [W0201(attribute-defined-outside-init), SearchConfig.ready] Attribute 'search_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:18: [W0201(attribute-defined-outside-init), SearchConfig.ready] Attribute 'search_form' defined outside __init__
************* Module oscar.apps.search.facets
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/facets.py:22: [R0205(useless-object-inheritance), FacetMunger] Class 'FacetMunger' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.search.search_handlers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:12: [R0205(useless-object-inheritance), SearchHandler] Class 'SearchHandler' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:76: [E1102(not-callable), SearchHandler.get_search_form] self.form_class is not callable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:85: [E1133(not-an-iterable), SearchHandler.get_search_queryset] Non-iterable value self.model_whitelist is used in an iterating context
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:162: [R1705(no-else-return), SearchHandler.get_paginated_objects] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:163: [E0203(access-member-before-definition), SearchHandler.get_paginated_objects] Access to member '_objects' before its definition line 166
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:166: [W0201(attribute-defined-outside-init), SearchHandler.get_paginated_objects] Attribute '_objects' defined outside __init__
************* Module oscar.apps.search.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/forms.py:98: [W0621(redefined-outer-name), SearchForm.selected_multi_facets] Redefining name 'field_name' from outer scope (line 27)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/forms.py:115: [E1003(bad-super-call), SearchForm.search] Bad first argument 'FacetedSearchForm' given to super()
************* Module oscar.apps.search.search_indexes
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:48: [R1710(inconsistent-return-statements), ProductIndex.prepare_category] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:53: [R1710(inconsistent-return-statements), ProductIndex.prepare_rating] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:66: [R1710(inconsistent-return-statements), ProductIndex.prepare_price] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:81: [R1705(no-else-return), ProductIndex.prepare_num_in_stock] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:79: [R1710(inconsistent-return-statements), ProductIndex.prepare_num_in_stock] Either all return statements in a function should return an expression, or none of them should.
************* Module oscar.apps.checkout.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:10: [R0902(too-many-instance-attributes), CheckoutConfig] Too many instance attributes (8/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:18: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:19: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'shipping_address_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:20: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'user_address_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:22: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'user_address_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:24: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'shipping_method_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:25: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'payment_method_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:26: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'payment_details_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:27: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'thankyou_view' defined outside __init__
************* Module oscar.apps.checkout.calculators
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/calculators.py:4: [R0205(useless-object-inheritance), OrderTotalCalculator] Class 'OrderTotalCalculator' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.checkout.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:159: [C0330(bad-continuation), ] Wrong hanging indentation (add 4 spaces).
            '-is_default_for_shipping')
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:1: [C0302(too-many-lines), ] Too many lines in module (687/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:169: [R1705(no-else-return), ShippingAddressView.post] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:272: [R1705(no-else-return), ShippingMethodView.get] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:249: [W0201(attribute-defined-outside-init), ShippingMethodView.post] Attribute '_methods' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:271: [W0201(attribute-defined-outside-init), ShippingMethodView.get] Attribute '_methods' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:608: [W0703(broad-except), PaymentDetailsView.submit] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:656: [W0221(arguments-differ), ThankYouView.get_object] Parameters differ from overridden 'get_object' method
************* Module oscar.apps.checkout.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/utils.py:1: [R0205(useless-object-inheritance), CheckoutSessionData] Class 'CheckoutSessionData' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.checkout.session
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:24: [R0205(useless-object-inheritance), CheckoutSessionMixin] Class 'CheckoutSessionMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:122: [W0621(redefined-outer-name), CheckoutSessionMixin.check_basket_is_valid] Redefining name 'messages' from outer scope (line 4)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:310: [R1710(inconsistent-return-statements), CheckoutSessionMixin.get_shipping_address] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:352: [R1710(inconsistent-return-statements), CheckoutSessionMixin.get_shipping_method] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:367: [R1710(inconsistent-return-statements), CheckoutSessionMixin.get_billing_address] Either all return statements in a function should return an expression, or none of them should.
************* Module oscar.apps.checkout.mixins
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/mixins.py:65: [W0107(unnecessary-pass), OrderPlacementMixin.handle_payment] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/mixins.py:133: [E1128(assignment-from-none), OrderPlacementMixin.place_order] Assigning result of a function call, where the function returns None
************* Module oscar.apps.checkout.exceptions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/exceptions.py:3: [W0231(super-init-not-called), FailedPreCondition.__init__] __init__ method from base class 'Exception' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/exceptions.py:18: [W0231(super-init-not-called), PassedSkipCondition.__init__] __init__ method from base class 'Exception' is not called
************* Module oscar.apps.payment.bankcards
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/bankcards.py:71: [C0325(superfluous-parens), ] Unnecessary parens after 'not' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/bankcards.py:65: [W0622(redefined-builtin), luhn] Redefining built-in 'sum'
************* Module oscar.apps.payment.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/forms.py:20: [R1718(consider-using-set-comprehension), ] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/forms.py:74: [W0223(abstract-method), BankcardMonthField] Method 'compress' is abstract in class 'MultiValueField' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/forms.py:248: [W0222(signature-differs), BankcardForm.save] Signature differs from overridden 'save' method
************* Module oscar.apps.payment.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:122: [W0222(signature-differs), AbstractSource.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:141: [E1101(no-member), AbstractSource._create_transaction] Instance of 'AbstractSource' has no 'transactions' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:219: [E0307(invalid-str-returned), AbstractSourceType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:294: [W0222(signature-differs), AbstractBankcard.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:313: [W0622(redefined-builtin), AbstractBankcard.start_month] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:316: [W0622(redefined-builtin), AbstractBankcard.expiry_month] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:317: [E1101(no-member), AbstractBankcard.expiry_month] Instance of 'DateField' has no 'strftime' member
************* Module oscar.apps.payment.exceptions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:11: [W0107(unnecessary-pass), UserCancelled] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:34: [W0107(unnecessary-pass), InsufficientPaymentSources] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:42: [W0231(super-init-not-called), RedirectRequired.__init__] __init__ method from base class 'PaymentError' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:52: [W0107(unnecessary-pass), UnableToTakePayment] Unnecessary pass statement
************* Module oscar.apps.payment.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/migrations/0001_initial.py:60: [C0301(line-too-long), ] Line too long (242/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/migrations/0001_initial.py:7: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/migrations/0001_initial.py:6: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.apps.order.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:18: [R0205(useless-object-inheritance), OrderNumberGenerator] Class 'OrderNumberGenerator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:33: [R0205(useless-object-inheritance), OrderCreator] Class 'OrderCreator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:38: [R0913(too-many-arguments), OrderCreator.place_order] Too many arguments (11/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:38: [R0914(too-many-locals), OrderCreator.place_order] Too many local variables (20/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:101: [R0913(too-many-arguments), OrderCreator.create_order_model] Too many arguments (11/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:203: [W0107(unnecessary-pass), OrderCreator.create_additional_line_models] Unnecessary pass statement
************* Module oscar.apps.order.processing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/processing.py:8: [R0205(useless-object-inheritance), EventHandler] Class 'EventHandler' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.order.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (1203/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:142: [E1101(no-member), AbstractOrder.set_status] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:160: [E1101(no-member), AbstractOrder._create_order_status_change] Instance of 'AbstractOrder' has no 'status_changes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:175: [E1101(no-member), AbstractOrder.basket_total_before_discounts_incl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:185: [E1101(no-member), AbstractOrder.basket_total_before_discounts_excl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:219: [E1101(no-member), AbstractOrder.total_discount_incl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:226: [E1101(no-member), AbstractOrder.total_discount_excl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:236: [E1101(no-member), AbstractOrder.num_lines] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:244: [E1101(no-member), AbstractOrder.num_items] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:259: [E1101(no-member), AbstractOrder.shipping_status] Instance of 'AbstractOrder' has no 'shipping_events' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:260: [C1801(len-as-condition), AbstractOrder.shipping_status] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:299: [E1101(no-member), AbstractOrder._is_event_complete] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:362: [E1101(no-member), AbstractOrder.email] Instance of 'ForeignKey' has no 'email' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:368: [E1101(no-member), AbstractOrder.basket_discounts] Instance of 'AbstractOrder' has no 'discounts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:373: [E1101(no-member), AbstractOrder.shipping_discounts] Instance of 'AbstractOrder' has no 'discounts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:378: [E1101(no-member), AbstractOrder.post_order_actions] Instance of 'AbstractOrder' has no 'discounts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:385: [W0222(signature-differs), AbstractOrder.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:460: [E1101(no-member), AbstractOrderStatusChange.__str__] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:490: [E1101(no-member), AbstractCommunicationEvent.__str__] Instance of 'ForeignKey' has no 'number' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:610: [E1101(no-member), AbstractLine.__str__] Instance of 'ForeignKey' has no 'title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:666: [E1101(no-member), AbstractLine.description] Instance of 'AbstractLine' has no 'attributes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:708: [E1307(bad-string-format-type), AbstractLine.shipping_status] Argument 'django.db.models.fields.PositiveIntegerField' does not match format type 'd'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:735: [E1101(no-member), AbstractLine.shipping_event_quantity] Instance of 'AbstractLine' has no 'shipping_event_quantities' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:737: [R1705(no-else-return), AbstractLine.shipping_event_quantity] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:765: [E1101(no-member), AbstractLine.shipping_event_breakdown] Instance of 'AbstractLine' has no 'shipping_events' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:795: [E1101(no-member), AbstractLine.payment_event_quantity] Instance of 'AbstractLine' has no 'payment_event_quantities' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:797: [R1705(no-else-return), AbstractLine.payment_event_quantity] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:917: [E0307(invalid-str-returned), AbstractPaymentEventType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:969: [E1101(no-member), AbstractPaymentEvent.num_affected_lines] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1030: [E1101(no-member), AbstractShippingEvent.__str__] Instance of 'ForeignKey' has no 'number' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1034: [E1101(no-member), AbstractShippingEvent.num_affected_lines] Instance of 'ManyToManyField' has no 'count' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1062: [W0222(signature-differs), ShippingEventQuantity.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1065: [E1101(no-member), ShippingEventQuantity.save] Instance of 'ForeignKey' has no 'quantity' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1067: [E1101(no-member), ShippingEventQuantity.save] Instance of 'ForeignKey' has no 'is_shipping_event_permitted' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1068: [E1101(no-member), ShippingEventQuantity.save] Instance of 'ForeignKey' has no 'event_type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1074: [E1101(no-member), ShippingEventQuantity.__str__] Instance of 'ForeignKey' has no 'product' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1097: [E0307(invalid-str-returned), AbstractShippingEventType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1167: [W0221(arguments-differ), AbstractOrderDiscount.save] Parameters differ from overridden 'save' method
************* Module oscar.apps.order.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0401(wildcard-import), ] Wildcard import oscar.apps.order.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import hashlib from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import logging from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import warnings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import logger from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import OrderedDict from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import D from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import ImproperlyConfigured from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import BadSignature from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import Signer from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import models from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import Sum from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import timezone from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import constant_time_compare from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import now from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import pgettext_lazy from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import order_line_status_changed from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import order_status_changed from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import AUTH_USER_MODEL from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import get_model from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import get_default_currency from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import AutoSlugField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import RemovedInOscar21Warning from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import exceptions from wildcard import
************* Module oscar.apps.order.migrations.0006_orderstatuschange
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0006_orderstatuschange.py:21: [C0301(line-too-long), ] Line too long (176/160)
************* Module oscar.apps.order.migrations.0004_auto_20160111_1108
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0004_auto_20160111_1108.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.order.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:28: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:68: [C0301(line-too-long), ] Line too long (202/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:75: [C0301(line-too-long), ] Line too long (161/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:76: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:98: [C0301(line-too-long), ] Line too long (181/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:142: [C0301(line-too-long), ] Line too long (183/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:156: [C0301(line-too-long), ] Line too long (198/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:226: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:240: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:250: [C0301(line-too-long), ] Line too long (170/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:295: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:358: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:370: [C0301(line-too-long), ] Line too long (178/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:388: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:7: [C0412(ungrouped-imports), ] Imports from package oscar are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:8: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.apps.analytics.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/apps.py:12: [C0415(import-outside-toplevel), AnalyticsConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/apps.py:12: [W0611(unused-import), AnalyticsConfig.ready] Unused receivers imported from 
************* Module oscar.apps.analytics.scores
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/scores.py:8: [R0205(useless-object-inheritance), Calculator] Class 'Calculator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/scores.py:27: [C0201(consider-iterating-dictionary), Calculator.calculate_scores] Consider iterating the dictionary directly instead of calling .keys()
************* Module oscar.apps.analytics.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
************* Module oscar.apps.address.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (618/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:256: [W0222(signature-differs), AbstractAddress.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:274: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'AbstractAddress' has no 'country_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:275: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'ForeignKey' has no 'iso_3166_1_a2' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:282: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'AbstractAddress' has no 'country_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:284: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'UppercaseCharField' has no 'upper' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:285: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'ForeignKey' has no 'iso_3166_1_a2' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:339: [E1101(no-member), AbstractAddress.get_field_values] Instance of 'AbstractAddress' has no 'get_title_display' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:342: [E1101(no-member), AbstractAddress.get_field_values] Instance of 'ForeignKey' has no 'printable_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:494: [E1101(no-member), AbstractShippingAddress.order] Instance of 'AbstractShippingAddress' has no 'order_set' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:555: [E1101(no-member), AbstractUserAddress._ensure_defaults_integrity] Function '_default_manager' has no 'filter' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:559: [E1101(no-member), AbstractUserAddress._ensure_defaults_integrity] Function '_default_manager' has no 'filter' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:598: [E1101(no-member), AbstractBillingAddress.order] Instance of 'AbstractBillingAddress' has no 'order_set' member
************* Module oscar.apps.address.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:24: [C0301(line-too-long), ] Line too long (188/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:39: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:49: [C0301(line-too-long), ] Line too long (170/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:6: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.apps.customer.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:10: [R0902(too-many-instance-attributes), CustomerConfig] Too many instance attributes (36/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:18: [C0415(import-outside-toplevel), CustomerConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:19: [W0404(reimported), CustomerConfig.ready] Reimport 'receivers' (imported line 18)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:19: [C0415(import-outside-toplevel), CustomerConfig.ready] Import outside toplevel (alerts.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:18: [W0611(unused-import), CustomerConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:21: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'summary_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:22: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'order_history_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:23: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'order_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:24: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'anon_order_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:26: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'order_line_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:28: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:29: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:30: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:31: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:32: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_change_status_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:35: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'email_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:36: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'email_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:37: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'login_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:38: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'logout_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:39: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'register_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:40: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'profile_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:41: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'profile_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:42: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'profile_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:43: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'change_password_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:45: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_inbox_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:47: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_archive_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:49: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:51: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:54: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:56: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:58: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_confirm_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:60: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_cancel_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:63: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_add_product_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:65: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:67: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:69: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:71: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_create_with_product_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:73: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:75: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:77: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_remove_product_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:79: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_move_product_to_another_view' defined outside __init__
************* Module oscar.apps.customer.history
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/history.py:50: [C0325(superfluous-parens), ] Unnecessary parens after 'if' keyword
************* Module oscar.apps.customer.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:599: [C0330(bad-continuation), ] Wrong hanging indentation (add 8 spaces).
                'qty': line.quantity, 'product': line.product}
                ^       |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:1: [C0302(too-many-lines), ] Too many lines in module (725/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:124: [R1705(no-else-return), AccountAuthView.post] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:452: [W0201(attribute-defined-outside-init), OrderHistoryView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:472: [W0201(attribute-defined-outside-init), OrderHistoryView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:454: [W0201(attribute-defined-outside-init), OrderHistoryView.get] Attribute 'object_list' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:534: [W0201(attribute-defined-outside-init), OrderDetailView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:551: [W0201(attribute-defined-outside-init), OrderDetailView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:557: [W0201(attribute-defined-outside-init), OrderDetailView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:574: [W0201(attribute-defined-outside-init), OrderLineView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:586: [W0201(attribute-defined-outside-init), OrderLineView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:711: [W1113(keyword-arg-before-vararg), AddressChangeStatusView.get] Keyword argument before variable positional arguments list in the definition of get function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:711: [W0221(arguments-differ), AddressChangeStatusView.get] Parameters differ from overridden 'get' method
************* Module oscar.apps.customer.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:17: [R0205(useless-object-inheritance), Dispatcher] Class 'Dispatcher' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:28: [R1710(inconsistent-return-statements), Dispatcher.dispatch_direct_messages] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:73: [R1710(inconsistent-return-statements), Dispatcher.create_customer_email] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:118: [W1201(logging-not-lazy), Dispatcher.send_email_messages] Use lazy % formatting in logging functions
************* Module oscar.apps.customer.mixins
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/mixins.py:19: [R0205(useless-object-inheritance), PageTitleMixin] Class 'PageTitleMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/mixins.py:40: [R0205(useless-object-inheritance), RegisterUserMixin] Class 'RegisterUserMixin' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.customer.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:44: [W0221(arguments-differ), PasswordResetForm.save] Parameters differ from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:91: [R1710(inconsistent-return-statements), EmailAuthenticationForm.clean_redirect_url] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:130: [W1113(keyword-arg-before-vararg), EmailUserCreationForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:202: [R1705(no-else-return), OrderSearchForm.description] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:306: [R1718(consider-using-set-comprehension), UserAndProfileForm.__init__] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:345: [W0222(signature-differs), UserAndProfileForm.save] Signature differs from overridden 'save' method
************* Module oscar.apps.customer.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:111: [E1101(no-member), AbstractUser._migrate_alerts_to_user] Instance of 'AbstractUser' has no 'alerts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:149: [R1705(no-else-return), AbstractEmail.__str__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:151: [E1101(no-member), AbstractEmail.__str__] Instance of 'ForeignKey' has no 'get_username' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:235: [E1101(no-member), AbstractCommunicationEventType.get_messages] Instance of 'AutoSlugField' has no 'lower' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:263: [E1101(no-member), AbstractCommunicationEventType.get_messages] Instance of 'str' has no 'render' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:271: [E0307(invalid-str-returned), AbstractCommunicationEventType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:319: [E0307(invalid-str-returned), AbstractNotification.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:425: [R1705(no-else-return), AbstractProductAlert.get_email_address] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:426: [E1101(no-member), AbstractProductAlert.get_email_address] Instance of 'ForeignKey' has no 'email' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:430: [W0222(signature-differs), AbstractProductAlert.save] Signature differs from overridden 'save' method
************* Module oscar.apps.customer.auth_backends
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/auth_backends.py:23: [W1113(keyword-arg-before-vararg), EmailBackend._authenticate] Keyword argument before variable positional arguments list in the definition of _authenticate function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/auth_backends.py:44: [R1705(no-else-return), EmailBackend._authenticate] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/auth_backends.py:56: [W0222(signature-differs), EmailBackend.authenticate] Signature differs from overridden 'authenticate' method
************* Module oscar.apps.customer.migrations.0004_email_save
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0004_email_save.py:25: [C0301(line-too-long), ] Line too long (165/160)
************* Module oscar.apps.customer.migrations.0002_auto_20150807_1725
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0002_auto_20150807_1725.py:19: [C0301(line-too-long), ] Line too long (444/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0002_auto_20150807_1725.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.customer.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:21: [C0301(line-too-long), ] Line too long (255/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (193/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:82: [C0301(line-too-long), ] Line too long (221/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:88: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:6: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.apps.customer.wishlists.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:53: [R1705(no-else-return), WishListDetailView.get_wishlist_or_404] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:48: [W0201(attribute-defined-outside-init), WishListDetailView.dispatch] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:209: [W0201(attribute-defined-outside-init), WishListAddProduct.dispatch] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:210: [W0201(attribute-defined-outside-init), WishListAddProduct.dispatch] Attribute 'wishlist' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:244: [R0205(useless-object-inheritance), LineMixin] Class 'LineMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:310: [R1705(no-else-return), WishListRemoveProduct.get_success_url] Unnecessary "else" after "return"
************* Module oscar.apps.customer.alerts.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:51: [W0201(attribute-defined-outside-init), ProductAlertCreateView.post] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:92: [W0221(arguments-differ), ProductAlertConfirmView.get_redirect_url] Parameters differ from overridden 'get_redirect_url' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:80: [W0201(attribute-defined-outside-init), ProductAlertConfirmView.get] Attribute 'alert' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:128: [W0221(arguments-differ), ProductAlertCancelView.get_redirect_url] Parameters differ from overridden 'get_redirect_url' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:109: [W0201(attribute-defined-outside-init), ProductAlertCancelView.get] Attribute 'alert' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:111: [W0201(attribute-defined-outside-init), ProductAlertCancelView.get] Attribute 'alert' defined outside __init__
************* Module oscar.apps.customer.alerts.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/utils.py:48: [R0914(too-many-locals), send_product_alerts] Too many local variables (23/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/utils.py:48: [R0912(too-many-branches), send_product_alerts] Too many branches (13/12)
************* Module oscar.apps.customer.alerts.receivers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/receivers.py:10: [C0415(import-outside-toplevel), send_product_alerts] Import outside toplevel (oscar.apps.customer.alerts.utils)
************* Module oscar.apps.customer.notifications.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/notifications/views.py:96: [W0221(arguments-differ), UpdateView.delete] Parameters differ from overridden 'delete' method
************* Module oscar.apps.voucher.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/apps.py:12: [C0415(import-outside-toplevel), VoucherConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/apps.py:12: [W0611(unused-import), VoucherConfig.ready] Unused receivers imported from 
************* Module oscar.apps.voucher.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:52: [E0307(invalid-str-returned), AbstractVoucherSet.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:57: [E1101(no-member), AbstractVoucherSet.generate_vouchers] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:58: [W0612(unused-variable), AbstractVoucherSet.generate_vouchers] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:83: [W0222(signature-differs), AbstractVoucherSet.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:84: [E1101(no-member), AbstractVoucherSet.save] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:88: [E1101(no-member), AbstractVoucherSet.save] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:95: [E1101(no-member), AbstractVoucherSet.num_basket_additions] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:100: [E1101(no-member), AbstractVoucherSet.num_orders] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:105: [E1101(no-member), AbstractVoucherSet.total_discount] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:167: [E0307(invalid-str-returned), AbstractVoucher.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:176: [W0222(signature-differs), AbstractVoucher.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:203: [E1101(no-member), AbstractVoucher.is_available_to_user] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:214: [E1101(no-member), AbstractVoucher.is_available_to_user] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:233: [E1101(no-member), AbstractVoucher.is_available_for_basket] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:245: [E1101(no-member), AbstractVoucher.record_usage] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:247: [E1101(no-member), AbstractVoucher.record_usage] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:268: [E1101(no-member), AbstractVoucher.benefit] Instance of 'ManyToManyField' has no 'all' member
************* Module oscar.apps.voucher.migrations.0003_auto_20171212_0411
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0003_auto_20171212_0411.py:16: [C0301(line-too-long), ] Line too long (162/160)
************* Module oscar.apps.voucher.migrations.0004_auto_20180228_0940
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0004_auto_20180228_0940.py:28: [C0301(line-too-long), ] Line too long (195/160)
************* Module oscar.apps.voucher.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0001_initial.py:22: [C0301(line-too-long), ] Line too long (167/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0001_initial.py:24: [C0301(line-too-long), ] Line too long (293/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
************* Module oscar.apps.voucher.migrations.0005_auto_20180402_1425
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0005_auto_20180402_1425.py:17: [C0301(line-too-long), ] Line too long (230/160)
************* Module oscar.apps.shipping.methods
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/methods.py:8: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/methods.py:98: [W0223(abstract-method), OfferDiscount] Method 'calculate' is abstract in class 'Base' but is not overridden
************* Module oscar.apps.shipping.scales
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/scales.py:6: [R0205(useless-object-inheritance), Scale] Class 'Scale' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.shipping.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:37: [E0307(invalid-str-returned), AbstractBase.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:150: [E1101(no-member), AbstractWeightBased.get_charge] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:154: [R1705(no-else-return), AbstractWeightBased.get_charge] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:159: [R1705(no-else-return), AbstractWeightBased.get_charge] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:170: [E1101(no-member), AbstractWeightBased.get_band_for_weight] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:177: [E1101(no-member), AbstractWeightBased.num_bands] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:182: [E1101(no-member), AbstractWeightBased.top_band] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:207: [E1101(no-member), AbstractWeightBand.weight_from] Instance of 'ForeignKey' has no 'bands' member
************* Module oscar.apps.shipping.repository
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/repository.py:14: [R0205(useless-object-inheritance), Repository] Class 'Repository' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/repository.py:90: [R1705(no-else-return), Repository.apply_shipping_offer] Unnecessary "else" after "return"
************* Module oscar.apps.shipping.migrations.0003_auto_20181115_1953
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0003_auto_20181115_1953.py:23: [C0301(line-too-long), ] Line too long (306/160)
************* Module oscar.apps.shipping.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:21: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:41: [C0301(line-too-long), ] Line too long (306/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:42: [C0301(line-too-long), ] Line too long (176/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:56: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:59: [C0301(line-too-long), ] Line too long (296/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
************* Module oscar.apps.basket.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:17: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'summary_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:18: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'saved_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:19: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'add_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:20: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'add_voucher_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:21: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'remove_voucher_view' defined outside __init__
************* Module oscar.apps.basket.formsets
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/formsets.py:32: [E1101(no-member), BaseBasketLineFormSet._should_delete_form] Instance of 'BaseBasketLineFormSet' has no 'can_delete' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/formsets.py:20: [R1710(inconsistent-return-statements), BaseBasketLineFormSet._should_delete_form] Either all return statements in a function should return an expression, or none of them should.
************* Module oscar.apps.basket.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/views.py:60: [R1710(inconsistent-return-statements), BasketView.get_default_shipping_address] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/views.py:258: [W0201(attribute-defined-outside-init), BasketAddView.post] Attribute 'product' defined outside __init__
************* Module oscar.apps.basket.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:12: [R0205(useless-object-inheritance), BasketMessageGenerator] Class 'BasketMessageGenerator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:52: [W0621(redefined-outer-name), BasketMessageGenerator.get_messages] Redefining name 'messages' from outer scope (line 3)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:70: [R0205(useless-object-inheritance), LineOfferConsumer] Class 'LineOfferConsumer' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:160: [C1801(len-as-condition), LineOfferConsumer.available] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
************* Module oscar.apps.basket.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/forms.py:37: [R1710(inconsistent-return-statements), BasketLineForm.full_clean] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/forms.py:39: [W0201(attribute-defined-outside-init), BasketLineForm.full_clean] Attribute 'cleaned_data' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/forms.py:200: [W0201(attribute-defined-outside-init), AddToBasketForm.clean_child_id] Attribute 'child_product' defined outside __init__
************* Module oscar.apps.basket.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:214: [C0330(bad-continuation), ] Wrong continued indentation (add 13 spaces).
                % (stock_info.price.currency, price_currency))
                ^            |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (940/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:127: [E1101(no-member), AbstractBasket.all_lines] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:130: [E1101(no-member), AbstractBasket.all_lines] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:173: [E1101(no-member), AbstractBasket.flush] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:236: [E1101(no-member), AbstractBasket.add_product] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:278: [E1101(no-member), AbstractBasket.merge_line] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:315: [E1101(no-member), AbstractBasket.merge] Instance of 'ManyToManyField' has no 'add' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:372: [W0622(redefined-builtin), AbstractBasket._get_total] Redefining built-in 'property'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:389: [W0107(unnecessary-pass), AbstractBasket._get_total] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:496: [E1101(no-member), AbstractBasket.num_items] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:519: [R0206(property-with-parameters), AbstractBasket.time_since_creation] Cannot have defined parameters for properties
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:528: [E1101(no-member), AbstractBasket.contains_a_voucher] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:559: [E1101(no-member), AbstractBasket.contains_voucher] Instance of 'ManyToManyField' has no 'get' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:572: [E1101(no-member), AbstractBasket.product_quantity] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:582: [E1101(no-member), AbstractBasket.line_quantity] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:114: [W0201(attribute-defined-outside-init), AbstractBasket._set_strategy] Attribute '_strategy' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:673: [W0222(signature-differs), AbstractLine.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:674: [E1101(no-member), AbstractLine.save] Instance of 'ForeignKey' has no 'can_be_edited' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:677: [E1101(no-member), AbstractLine.save] Instance of 'ForeignKey' has no 'status' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:808: [E1101(no-member), AbstractLine.purchase_info] Instance of 'ForeignKey' has no 'strategy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:836: [R1710(inconsistent-return-statements), AbstractLine.line_price_excl_tax] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:859: [R1705(no-else-return), AbstractLine.line_price_incl_tax_incl_discounts] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:867: [R1710(inconsistent-return-statements), AbstractLine.line_tax] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:872: [R1710(inconsistent-return-statements), AbstractLine.line_price_incl_tax] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:880: [E1101(no-member), AbstractLine.description] Instance of 'AbstractLine' has no 'attributes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:894: [E1101(no-member), AbstractLine.get_warning] Instance of 'ForeignKey' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:905: [E1101(no-member), AbstractLine.get_warning] Instance of 'ForeignKey' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:909: [R1705(no-else-return), AbstractLine.get_warning] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:886: [R1710(inconsistent-return-statements), AbstractLine.get_warning] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:808: [W0201(attribute-defined-outside-init), AbstractLine.purchase_info] Attribute '_info' defined outside __init__
************* Module oscar.apps.basket.middleware
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/middleware.py:45: [R1710(inconsistent-return-statements), BasketMiddleware.__call__.load_basket_hash] Either all return statements in a function should return an expression, or none of them should.
************* Module oscar.apps.basket.migrations.0006_auto_20160111_1108
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/migrations/0006_auto_20160111_1108.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.basket.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/migrations/0001_initial.py:17: [C0301(line-too-long), ] Line too long (371/160)
************* Module oscar.apps.offer.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:16: [C0415(import-outside-toplevel), OfferConfig.ready] Import outside toplevel (.signals)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:16: [W0611(unused-import), OfferConfig.ready] Unused signals imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:18: [W0201(attribute-defined-outside-init), OfferConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:19: [W0201(attribute-defined-outside-init), OfferConfig.ready] Attribute 'list_view' defined outside __init__
************* Module oscar.apps.offer.applicator
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/applicator.py:61: [C0330(bad-continuation), ] Wrong continued indentation (add 15 spaces).
            key=lambda o: o.priority, reverse=True))
            ^              |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/applicator.py:14: [R0205(useless-object-inheritance), Applicator] Class 'Applicator' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.offer.conditions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/conditions.py:63: [W0201(attribute-defined-outside-init), CountCondition._get_num_matches] Attribute '_num_matches' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/conditions.py:176: [W0612(unused-variable), CoverageCondition.consume_items] Unused variable 'quantity'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/conditions.py:263: [W0201(attribute-defined-outside-init), ValueCondition._get_value_of_matches] Attribute '_value_of_matches' defined outside __init__
************* Module oscar.apps.offer.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/views.py:34: [W0201(attribute-defined-outside-init), OfferDetailView.get] Attribute 'offer' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/views.py:60: [W0201(attribute-defined-outside-init), RangeDetailView.dispatch] Attribute 'range' defined outside __init__
************* Module oscar.apps.offer.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/utils.py:9: [W0622(redefined-builtin), range_anchor] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/utils.py:6: [W0611(unused-import), ] Unused Applicator imported from oscar.apps.offer.applicator
************* Module oscar.apps.offer.results
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/results.py:4: [R0205(useless-object-inheritance), OfferApplications] Class 'OfferApplications' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/results.py:106: [R1717(consider-using-dict-comprehension), OfferApplications.offers] Consider using a dictionary comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/results.py:110: [R0205(useless-object-inheritance), ApplicationResult] Class 'ApplicationResult' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.offer.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (1140/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:223: [W0222(signature-differs), AbstractConditionalOffer.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:236: [E0307(invalid-str-returned), AbstractConditionalOffer.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:281: [E1101(no-member), AbstractConditionalOffer.is_condition_satisfied] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:284: [E1101(no-member), AbstractConditionalOffer.is_condition_partially_satisfied] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:287: [E1101(no-member), AbstractConditionalOffer.get_upsell_message] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:295: [E1101(no-member), AbstractConditionalOffer.apply_benefit] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:296: [E1101(no-member), AbstractConditionalOffer.apply_benefit] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:303: [E1101(no-member), AbstractConditionalOffer.apply_deferred_benefit] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:340: [E1101(no-member), AbstractConditionalOffer.shipping_discount] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:357: [R0912(too-many-branches), AbstractConditionalOffer.availability_restrictions] Too many branches (13/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:432: [E1101(no-member), AbstractConditionalOffer.has_products] Instance of 'ForeignKey' has no 'range' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:442: [E1101(no-member), AbstractConditionalOffer.products] Instance of 'ForeignKey' has no 'range' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:527: [E1101(no-member), AbstractBenefit.clean] Instance of 'CharField' has no 'lower' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:642: [W0622(redefined-builtin), AbstractBenefit.get_applicable_lines] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:745: [E1101(no-member), AbstractCondition.can_apply_condition] Instance of 'ForeignKey' has no 'contains_product' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:822: [E0307(invalid-str-returned), AbstractRange.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:830: [R1710(inconsistent-return-statements), AbstractRange.proxy] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:858: [E1101(no-member), AbstractRange.add_product] Instance of 'ManyToManyField' has no 'remove' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:871: [E1101(no-member), AbstractRange.remove_product] Instance of 'ManyToManyField' has no 'add' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:875: [R0911(too-many-return-statements), AbstractRange.contains_product] Too many return statements (8/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:938: [E1101(no-member), AbstractRange._included_categories] Instance of 'ManyToManyField' has no 'none' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:940: [E1101(no-member), AbstractRange._included_categories] Instance of 'ManyToManyField' has no 'only' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:962: [E1101(no-member), AbstractRange._class_ids] Instance of 'ManyToManyField' has no 'values_list' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:1108: [E1101(no-member), AbstractRangeProductFileUpload.process] Instance of 'ForeignKey' has no 'all_products' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:1122: [E1101(no-member), AbstractRangeProductFileUpload.process] Instance of 'ForeignKey' has no 'add_product' member
************* Module oscar.apps.offer.benefits
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:156: [W0511(fixme), ] XXX: spreading the discount is a policy decision that may not apply
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:56: [R0914(too-many-locals), PercentageDiscountBenefit.apply] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:122: [R0914(too-many-locals), AbsoluteDiscountBenefit.apply] Too many local variables (21/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:204: [R0914(too-many-locals), FixedPriceBenefit.apply] Too many local variables (18/15)
************* Module oscar.apps.offer.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0401(wildcard-import), ] Wildcard import oscar.apps.offer.benefits
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.benefits import *" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0401(wildcard-import), ] Wildcard import oscar.apps.offer.conditions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.conditions import *" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:63: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.benefits import __all__ as benefit_classes" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:64: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.conditions import __all__ as condition_classes" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import Benefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import CoverageCondition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ValueCondition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import range_anchor from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import apply_discount from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import PercentageDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import AbsoluteDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import FixedPriceBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import MultibuyDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingAbsoluteDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingFixedPriceBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingPercentageDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import D from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import get_class from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import get_classes from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import get_model from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import currency from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import Condition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import unit_price from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import CountCondition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import ROUND_UP from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import ungettext from wildcard import
************* Module oscar.apps.offer.migrations.0002_auto_20151210_1053
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0002_auto_20151210_1053.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.offer.migrations.0006_auto_20170504_0616
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0006_auto_20170504_0616.py:18: [C0301(line-too-long), ] Line too long (188/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0006_auto_20170504_0616.py:23: [C0301(line-too-long), ] Line too long (190/160)
************* Module oscar.apps.offer.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (602/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:25: [C0301(line-too-long), ] Line too long (233/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:38: [C0301(line-too-long), ] Line too long (349/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:53: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:55: [C0301(line-too-long), ] Line too long (417/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:59: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:60: [C0301(line-too-long), ] Line too long (217/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:61: [C0301(line-too-long), ] Line too long (198/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:62: [C0301(line-too-long), ] Line too long (219/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:63: [C0301(line-too-long), ] Line too long (256/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:84: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:92: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:119: [C0301(line-too-long), ] Line too long (186/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:142: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:8: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.apps.dashboard.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:9: [R0902(too-many-instance-attributes), DashboardConfig] Too many instance attributes (13/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:36: [C0415(import-outside-toplevel), DashboardConfig.get_urls] Import outside toplevel (django.contrib.auth.views)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:37: [C0415(import-outside-toplevel), DashboardConfig.get_urls] Import outside toplevel (django.contrib.auth.forms.AuthenticationForm)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:20: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:22: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'catalogue_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:23: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'reports_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:24: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'orders_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:25: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'users_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:26: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'pages_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:27: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'partners_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:28: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'offers_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:29: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'ranges_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:30: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'reviews_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:31: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'vouchers_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:32: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'comms_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:33: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'shipping_app' defined outside __init__
************* Module oscar.apps.dashboard.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:36: [R1705(no-else-return), IndexView.get_template_names] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:62: [R0914(too-many-locals), IndexView.get_hourly_report] Too many local variables (19/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:77: [W0612(unused-variable), IndexView.get_hourly_report] Unused variable 'hour'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:298: [R1705(no-else-return), PopUpWindowDeleteMixin.delete] Unnecessary "else" after "return"
************* Module oscar.apps.dashboard.widgets
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/widgets.py:19: [W0231(super-init-not-called), RelatedFieldWidgetWrapper.__init__] __init__ method from base class 'Widget' is not called
************* Module oscar.apps.dashboard.nav
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/nav.py:16: [R0205(useless-object-inheritance), Node] Class 'Node' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/nav.py:105: [W1202(logging-format-interpolation), default_access_fn] Use lazy % formatting in logging functions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/nav.py:120: [W1202(logging-format-interpolation), default_access_fn] Use lazy % formatting in logging functions
************* Module oscar.apps.dashboard.vouchers.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:8: [R0902(too-many-instance-attributes), VouchersDashboardConfig] Too many instance attributes (10/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:16: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:17: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:18: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:19: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:20: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'stats_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:22: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:24: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:26: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:28: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:30: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_download_view' defined outside __init__
************* Module oscar.apps.dashboard.vouchers.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:43: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'description_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:50: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:53: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:157: [W0201(attribute-defined-outside-init), VoucherUpdateView.get_voucher] Attribute 'voucher' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:291: [W0201(attribute-defined-outside-init), VoucherSetUpdateView.get_voucherset] Attribute 'voucherset' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:365: [W0201(attribute-defined-outside-init), VoucherSetDetailView.dispatch] Attribute 'voucher_set' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:378: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'description_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:387: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:390: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'form' defined outside __init__
************* Module oscar.apps.dashboard.vouchers.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/forms.py:45: [W1113(keyword-arg-before-vararg), VoucherForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
************* Module oscar.apps.dashboard.communications.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/apps.py:16: [W0201(attribute-defined-outside-init), CommunicationsDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/apps.py:17: [W0201(attribute-defined-outside-init), CommunicationsDashboardConfig.ready] Attribute 'update_view' defined outside __init__
************* Module oscar.apps.dashboard.communications.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/forms.py:27: [W1113(keyword-arg-before-vararg), CommunicationEventTypeForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/forms.py:63: [W0201(attribute-defined-outside-init), CommunicationEventTypeForm.clean_preview_order_number] Attribute 'preview_order' defined outside __init__
************* Module oscar.apps.dashboard.partners.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:8: [R0902(too-many-instance-attributes), PartnersDashboardConfig] Too many instance attributes (9/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:16: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:17: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:18: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'manage_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:19: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:21: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_link_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:23: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_unlink_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:25: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:27: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_select_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:29: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_update_view' defined outside __init__
************* Module oscar.apps.dashboard.partners.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:35: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:48: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:39: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:49: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:40: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:89: [W0201(attribute-defined-outside-init), PartnerManageView.get_object] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:136: [W0201(attribute-defined-outside-init), PartnerUserCreateView.dispatch] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:184: [R1705(no-else-return), PartnerUserSelectView.get_queryset] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:165: [W0201(attribute-defined-outside-init), PartnerUserSelectView.dispatch] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:174: [W0201(attribute-defined-outside-init), PartnerUserSelectView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:280: [W0201(attribute-defined-outside-init), PartnerUserUpdateView.get_object] Attribute 'partner' defined outside __init__
************* Module oscar.apps.dashboard.partners.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/forms.py:101: [W0221(arguments-differ), ExistingUserForm.save] Parameters differ from overridden 'save' method
************* Module oscar.apps.dashboard.ranges.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:16: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:17: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:18: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:19: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:20: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'products_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:21: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'reorder_view' defined outside __init__
************* Module oscar.apps.dashboard.ranges.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:40: [R1705(no-else-return), RangeCreateView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:61: [W0221(arguments-differ), RangeUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:68: [R1705(no-else-return), RangeUpdateView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:120: [W0622(redefined-builtin), RangeProductListView.get_context_data] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:127: [W0622(redefined-builtin), RangeProductListView.remove_selected_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:137: [W0622(redefined-builtin), RangeProductListView.add_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:148: [W0622(redefined-builtin), RangeProductListView.handle_query_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:175: [W0622(redefined-builtin), RangeProductListView.handle_file_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:191: [W0622(redefined-builtin), RangeProductListView.create_upload_object] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:104: [W0201(attribute-defined-outside-init), RangeProductListView.post] Attribute 'object_list' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:111: [W0201(attribute-defined-outside-init), RangeProductListView.get_range] Attribute '_range' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:223: [W0622(redefined-builtin), RangeReorderView._save_page_order] Redefining built-in 'range'
************* Module oscar.apps.dashboard.ranges.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:32: [W0622(redefined-builtin), RangeProductForm.__init__] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:62: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'products' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:74: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'missing_skus' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:75: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'duplicate_skus' defined outside __init__
************* Module oscar.apps.dashboard.offers.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:16: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:17: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'metadata_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:18: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'condition_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:19: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'benefit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:20: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'restrictions_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:22: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:23: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'detail_view' defined outside __init__
************* Module oscar.apps.dashboard.offers.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:45: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:58: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:49: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:59: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:61: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:50: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:114: [W0622(redefined-builtin), OfferWizardStepView._store_form_kwargs] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:144: [R1710(inconsistent-return-statements), OfferWizardStepView._fetch_object] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:172: [E1101(no-member), OfferWizardStepView.get_form_kwargs] Instance of 'OfferWizardStepView' has no 'get_instance' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:203: [R1705(no-else-return), OfferWizardStepView.form_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:244: [E1101(no-member), OfferWizardStepView.get_success_url] Instance of 'OfferWizardStepView' has no 'success_url_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:246: [E1101(no-member), OfferWizardStepView.get_success_url] Instance of 'OfferWizardStepView' has no 'success_url_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:88: [W0201(attribute-defined-outside-init), OfferWizardStepView.dispatch] Attribute 'offer' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:338: [R1705(no-else-return), OfferDetailView.post] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:337: [R1710(inconsistent-return-statements), OfferDetailView.post] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:373: [W0221(arguments-differ), OfferDetailView.render_to_response] Parameters differ from overridden 'render_to_response' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:334: [W0201(attribute-defined-outside-init), OfferDetailView.dispatch] Attribute 'offer' defined outside __init__
************* Module oscar.apps.dashboard.offers.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/forms.py:96: [W0222(signature-differs), ConditionForm.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/forms.py:154: [W0222(signature-differs), BenefitForm.save] Signature differs from overridden 'save' method
************* Module oscar.apps.dashboard.shipping.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:16: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:18: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:20: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_edit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:22: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:25: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:27: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_band_edit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:29: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_band_delete_view' defined outside __init__
************* Module oscar.apps.dashboard.shipping.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:41: [W0201(attribute-defined-outside-init), WeightBasedDetailView.dispatch] Attribute 'method' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:87: [W0201(attribute-defined-outside-init), WeightBandUpdateView.dispatch] Attribute 'method' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:115: [W0201(attribute-defined-outside-init), WeightBandDeleteView.dispatch] Attribute 'method' defined outside __init__
************* Module oscar.apps.dashboard.orders.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:24: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:25: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:26: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'shipping_address_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:28: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'line_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:29: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_stats_view' defined outside __init__
************* Module oscar.apps.dashboard.orders.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:1: [C0302(too-many-lines), ] Too many lines in module (823/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:54: [R1705(no-else-return), queryset_orders_for_user] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:169: [W0622(redefined-builtin), OrderListView.get_queryset] Redefining built-in 'filter'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:141: [R0912(too-many-branches), OrderListView.get_queryset] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:236: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:243: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:250: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:261: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:272: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:281: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:291: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:300: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:309: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:319: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:329: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:123: [W0201(attribute-defined-outside-init), OrderListView.dispatch] Attribute 'base_queryset' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:148: [W0201(attribute-defined-outside-init), OrderListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:501: [R1705(no-else-return), OrderDetailView.handle_line_action] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:459: [W0201(attribute-defined-outside-init), OrderDetailView.post] Attribute 'object' defined outside __init__
************* Module oscar.apps.dashboard.orders.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:44: [C0330(bad-continuation), ] Wrong hanging indentation (add 22 spaces).
                'date_from': date_from,
                ^                     |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:45: [C0330(bad-continuation), ] Wrong hanging indentation (add 22 spaces).
                'date_to': date_to}
                ^                     |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:102: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
************* Module oscar.apps.dashboard.reviews.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:16: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:17: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:18: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
************* Module oscar.apps.dashboard.reviews.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:34: [W0201(attribute-defined-outside-init), ReviewListView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:80: [W0201(attribute-defined-outside-init), ReviewListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:72: [W0201(attribute-defined-outside-init), ReviewListView.get_queryset] Attribute 'desc_ctx' defined outside __init__
************* Module oscar.apps.dashboard.reviews.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/utils.py:14: [R0205(useless-object-inheritance), GeneratorRepository] Class 'GeneratorRepository' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.dashboard.users.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:16: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:17: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'user_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:18: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'password_reset_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:20: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:22: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:24: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_delete_view' defined outside __init__
************* Module oscar.apps.dashboard.users.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:66: [R1705(no-else-return), IndexView.apply_search] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:39: [W0201(attribute-defined-outside-init), IndexView.dispatch] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:61: [W0201(attribute-defined-outside-init), IndexView.apply_search] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:132: [W0201(attribute-defined-outside-init), PasswordResetView.post] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:166: [W0201(attribute-defined-outside-init), ProductAlertListView.get_queryset] Attribute 'form' defined outside __init__
************* Module oscar.apps.dashboard.catalogue.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:8: [R0902(too-many-instance-attributes), CatalogueDashboardConfig] Too many instance attributes (23/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:26: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:28: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_lookup_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:30: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_create_redirect_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:32: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_createupdate_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:34: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:37: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:39: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:41: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:43: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:46: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:48: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_detail_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:50: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:52: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:54: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:57: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'stock_alert_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:60: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:62: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:64: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:66: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:69: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:70: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:71: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:72: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_delete_view' defined outside __init__
************* Module oscar.apps.dashboard.catalogue.formsets
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/formsets.py:91: [R1718(consider-using-set-comprehension), StockRecordFormSet.clean] Consider using a set comprehension
************* Module oscar.apps.dashboard.catalogue.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:1: [C0302(too-many-lines), ] Too many lines in module (1031/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:139: [W0201(attribute-defined-outside-init), ProductListView.apply_search] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:188: [W0221(arguments-differ), ProductCreateRedirectView.get_redirect_url] Parameters differ from overridden 'get_redirect_url' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:190: [R1705(no-else-return), ProductCreateRedirectView.get_redirect_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:236: [R1710(inconsistent-return-statements), ProductCreateUpdateView.check_objects_or_redirect] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:265: [R1705(no-else-return), ProductCreateUpdateView.get_object] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:302: [R1705(no-else-return), ProductCreateUpdateView.get_page_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:309: [R1705(no-else-return), ProductCreateUpdateView.get_page_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:343: [R1705(no-else-return), ProductCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:264: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'creating' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:270: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:277: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:284: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:274: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:278: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:283: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:329: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:375: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.forms_valid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:404: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.forms_invalid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:516: [R1705(no-else-return), ProductDeleteView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:482: [W0201(attribute-defined-outside-init), ProductDeleteView.delete] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:542: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:549: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:545: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:548: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:584: [R0205(useless-object-inheritance), CategoryListMixin] Class 'CategoryListMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:588: [R1705(no-else-return), CategoryListMixin.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:670: [E1101(no-member), ProductClassCreateUpdateView.process_all_forms] Instance of 'ProductClassCreateUpdateView' has no 'creating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:679: [R1705(no-else-return), ProductClassCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:715: [E1101(no-member), ProductClassCreateUpdateView.get_context_data] Instance of 'ProductClassCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:672: [W0201(attribute-defined-outside-init), ProductClassCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:724: [W0221(arguments-differ), ProductClassCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:746: [W0221(arguments-differ), ProductClassUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:798: [E1101(no-member), AttributeOptionGroupCreateUpdateView.process_all_forms] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'creating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:807: [R1705(no-else-return), AttributeOptionGroupCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:815: [R1705(no-else-return), AttributeOptionGroupCreateUpdateView.forms_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:815: [E1101(no-member), AttributeOptionGroupCreateUpdateView.forms_valid] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'is_popup' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:816: [E1101(no-member), AttributeOptionGroupCreateUpdateView.forms_valid] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'popup_response' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:840: [E1101(no-member), AttributeOptionGroupCreateUpdateView.get_context_data] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:800: [W0201(attribute-defined-outside-init), AttributeOptionGroupCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:854: [W0221(arguments-differ), AttributeOptionGroupCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:870: [W0221(arguments-differ), AttributeOptionGroupUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:952: [R1705(no-else-return), OptionCreateUpdateView.form_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:952: [E1101(no-member), OptionCreateUpdateView.form_valid] Instance of 'OptionCreateUpdateView' has no 'is_popup' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:953: [E1101(no-member), OptionCreateUpdateView.form_valid] Instance of 'OptionCreateUpdateView' has no 'popup_response' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:959: [E1101(no-member), OptionCreateUpdateView.get_context_data] Instance of 'OptionCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:951: [W0201(attribute-defined-outside-init), OptionCreateUpdateView.form_valid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:974: [W0221(arguments-differ), OptionCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:989: [W0221(arguments-differ), OptionUpdateView.get_object] Parameters differ from overridden 'get_object' method
************* Module oscar.apps.dashboard.catalogue.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:195: [W1113(keyword-arg-before-vararg), ProductForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:312: [W1113(keyword-arg-before-vararg), ProductImageForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
************* Module oscar.apps.dashboard.reports.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/apps.py:16: [W0201(attribute-defined-outside-init), ReportsDashboardConfig.ready] Attribute 'index_view' defined outside __init__
************* Module oscar.apps.dashboard.reports.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py:47: [R1705(no-else-return), IndexView.get] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py:62: [W0201(attribute-defined-outside-init), IndexView.set_list_view_attrs] Attribute 'object_list' defined outside __init__
************* Module oscar.apps.dashboard.reports.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/utils.py:14: [R0205(useless-object-inheritance), GeneratorRepository] Class 'GeneratorRepository' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.dashboard.reports.reports
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:12: [R0205(useless-object-inheritance), ReportGenerator] Class 'ReportGenerator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:28: [E1101(no-member), ReportGenerator.__init__] Instance of 'ReportGenerator' has no 'formatters' member; maybe 'formatter'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:87: [R0205(useless-object-inheritance), ReportFormatter] Class 'ReportFormatter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:102: [E1101(no-member), ReportFormatter.filename] Instance of 'ReportFormatter' has no 'filename_template' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:114: [E1101(no-member), ReportCSVFormatter.generate_response] Instance of 'ReportCSVFormatter' has no 'generate_csv' member
************* Module oscar.apps.dashboard.pages.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:16: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:17: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:18: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:19: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
************* Module oscar.apps.dashboard.pages.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:36: [W0201(attribute-defined-outside-init), PageListView.get_queryset] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:42: [W0201(attribute-defined-outside-init), PageListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:66: [R0205(useless-object-inheritance), PageCreateUpdateMixin] Class 'PageCreateUpdateMixin' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.catalogue.categories
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/categories.py:10: [R1705(no-else-return), create_from_sequence] Unnecessary "else" after "return"
************* Module oscar.apps.catalogue.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:17: [C0415(import-outside-toplevel), CatalogueOnlyConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:17: [W0611(unused-import), CatalogueOnlyConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:21: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:22: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'catalogue_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:23: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'category_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:24: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'range_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:46: [C0415(import-outside-toplevel), CatalogueReviewsOnlyConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:46: [W0611(unused-import), CatalogueReviewsOnlyConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:50: [W0201(attribute-defined-outside-init), CatalogueReviewsOnlyConfig.ready] Attribute 'reviews_app' defined outside __init__
************* Module oscar.apps.catalogue.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:40: [W0621(redefined-outer-name), ProductDetailView.get] Redefining name 'redirect' from outer scope (line 4)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:34: [W0221(arguments-differ), ProductDetailView.get] Parameters differ from overridden 'get' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:57: [R1705(no-else-return), ProductDetailView.get_object] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:62: [R1710(inconsistent-return-statements), ProductDetailView.redirect_if_necessary] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:38: [W0201(attribute-defined-outside-init), ProductDetailView.get] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:130: [W0201(attribute-defined-outside-init), CatalogueView.get] Attribute 'search_handler' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:178: [R1710(inconsistent-return-statements), ProductCategoryView.redirect_if_necessary] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:160: [W0201(attribute-defined-outside-init), ProductCategoryView.get] Attribute 'category' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:167: [W0201(attribute-defined-outside-init), ProductCategoryView.get] Attribute 'search_handler' defined outside __init__
************* Module oscar.apps.catalogue.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/utils.py:24: [R0205(useless-object-inheritance), Importer] Class 'Importer' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.catalogue.search_handlers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/search_handlers.py:24: [R1705(no-else-return), get_product_search_handler_class] Unnecessary "elif" after "return"
************* Module oscar.apps.catalogue.managers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/managers.py:33: [R1705(no-else-return), AttributeFilter._selector] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/managers.py:33: [R1714(consider-using-in), AttributeFilter._selector] Consider merging these comparisons with "in" to "attribute_type in ('option', 'multi_option')"
************* Module oscar.apps.catalogue.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:664: [C0330(bad-continuation), ] Wrong continued indentation (remove 30 spaces).
                                              .select_related('recommendation').all()]
                |                             ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (1222/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:72: [E0307(invalid-str-returned), AbstractProductClass.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:77: [E1101(no-member), AbstractProductClass.has_attributes] Instance of 'AbstractProductClass' has no 'attributes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:149: [W0222(signature-differs), AbstractCategory.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:369: [R1705(no-else-return), AbstractProduct.__str__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:420: [E1101(no-member), AbstractProduct._clean_standalone] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:427: [E1101(no-member), AbstractProduct._clean_child] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:429: [E1101(no-member), AbstractProduct._clean_child] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:429: [E1101(no-member), AbstractProduct._clean_child] Instance of 'ForeignKey' has no 'is_parent' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:435: [E1101(no-member), AbstractProduct._clean_child] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:439: [E1101(no-member), AbstractProduct._clean_child] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:452: [W0222(signature-differs), AbstractProduct.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:484: [R1705(no-else-return), AbstractProduct.can_be_parent] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:496: [E1101(no-member), AbstractProduct.options] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:506: [E1101(no-member), AbstractProduct.has_options] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:517: [E1101(no-member), AbstractProduct.has_stockrecords] Instance of 'AbstractProduct' has no 'stockrecords' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:521: [E1101(no-member), AbstractProduct.num_stockrecords] Instance of 'AbstractProduct' has no 'stockrecords' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:528: [E1101(no-member), AbstractProduct.attribute_summary] Instance of 'AbstractProduct' has no 'attribute_values' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:537: [E1101(no-member), AbstractProduct.get_title] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:538: [E1101(no-member), AbstractProduct.get_title] Instance of 'ForeignKey' has no 'title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:546: [R1705(no-else-return), AbstractProduct.get_product_class] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:547: [E1101(no-member), AbstractProduct.get_product_class] Instance of 'ForeignKey' has no 'product_class' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:557: [R1705(no-else-return), AbstractProduct.get_is_discountable] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:558: [E1101(no-member), AbstractProduct.get_is_discountable] Instance of 'ForeignKey' has no 'is_discountable' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:566: [R1705(no-else-return), AbstractProduct.get_categories] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:567: [E1101(no-member), AbstractProduct.get_categories] Instance of 'ForeignKey' has no 'categories' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:583: [E1101(no-member), AbstractProduct.get_all_images] Instance of 'AbstractProduct' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:584: [E1101(no-member), AbstractProduct.get_all_images] Instance of 'ForeignKey' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:585: [E1101(no-member), AbstractProduct.get_all_images] Instance of 'AbstractProduct' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:593: [E1101(no-member), AbstractProduct.primary_image] Instance of 'AbstractProduct' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:625: [E1101(no-member), AbstractProduct.calculate_rating] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:626: [E1101(no-member), AbstractProduct.calculate_rating] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:639: [E1101(no-member), AbstractProduct.has_review_by] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:651: [R1705(no-else-return), AbstractProduct.is_review_permitted] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:658: [E1101(no-member), AbstractProduct.num_approved_reviews] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:663: [E1101(no-member), AbstractProduct.sorted_recommended_products] Instance of 'AbstractProduct' has no 'primary_recommendations' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:778: [E0307(invalid-str-returned), AbstractProductAttribute.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:784: [R1705(no-else-return), AbstractProductAttribute._save_file] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:862: [R1701(consider-merging-isinstance), AbstractProductAttribute._validate_date] Consider merging these isinstance calls to isinstance(value, (date, datetime))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:870: [C0123(unidiomatic-typecheck), AbstractProductAttribute._validate_boolean] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:885: [E1101(no-member), AbstractProductAttribute._validate_multi_option] Instance of 'ForeignKey' has no 'options' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:887: [R1704(redefined-argument-from-local), AbstractProductAttribute._validate_multi_option] Redefining argument with the local name 'value'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:897: [E1101(no-member), AbstractProductAttribute._validate_option] Instance of 'ForeignKey' has no 'options' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:964: [E1101(no-member), AbstractProductAttributeValue._get_value] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:970: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:972: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'is_option' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:974: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'option_group' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:976: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'is_multi_option' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1009: [E1101(no-member), AbstractProductAttributeValue.value_as_text] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1014: [E1101(no-member), AbstractProductAttributeValue._multi_option_as_text] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1040: [E1101(no-member), AbstractProductAttributeValue.value_as_html] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1057: [E0307(invalid-str-returned), AbstractAttributeOptionGroup.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1068: [E1101(no-member), AbstractAttributeOptionGroup.option_summary] Instance of 'AbstractAttributeOptionGroup' has no 'options' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1084: [E0307(invalid-str-returned), AbstractAttributeOption.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1125: [E0307(invalid-str-returned), AbstractOption.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1133: [R0205(useless-object-inheritance), MissingProductImage] Class 'MissingProductImage' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1170: [W1201(logging-not-lazy), MissingProductImage.symlink_missing_image] Use lazy % formatting in logging functions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1214: [W0222(signature-differs), AbstractProductImage.delete] Signature differs from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1220: [E1101(no-member), AbstractProductImage.delete] Instance of 'ForeignKey' has no 'images' member
************* Module oscar.apps.catalogue.receivers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/receivers.py:15: [W0621(redefined-outer-name), delete_image_files] Redefining name 'sender' from outer scope (line 29)
************* Module oscar.apps.catalogue.product_attributes
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/product_attributes.py:5: [R0205(useless-object-inheritance), ProductAttributesContainer] Class 'ProductAttributesContainer' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.catalogue.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0401(wildcard-import), ] Wildcard import oscar.apps.catalogue.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import logging from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import os from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import BrowsableProductManager from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ProductQuerySet from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import MissingProductImage from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import date from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import datetime from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import GenericForeignKey from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ContentType from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import find from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import cache from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ImproperlyConfigured from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ValidationError from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import File from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import RegexValidator from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import models from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import Count from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import Sum from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import reverse from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import cached_property from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import strip_tags from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import mark_safe from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_language from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import pgettext_lazy from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import MP_Node from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_class from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_model from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import slugify from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import non_python_keyword from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import AutoSlugField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import NullCharField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import SlugField from wildcard import
************* Module oscar.apps.catalogue.migrations.0002_auto_20150217_1221
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0002_auto_20150217_1221.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.catalogue.migrations.0007_auto_20151207_1440
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0007_auto_20151207_1440.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.catalogue.migrations.0012_auto_20170609_1902
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0012_auto_20170609_1902.py:23: [C0301(line-too-long), ] Line too long (375/160)
************* Module oscar.apps.catalogue.migrations.0008_auto_20160304_1652
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0008_auto_20160304_1652.py:19: [C0301(line-too-long), ] Line too long (311/160)
************* Module oscar.apps.catalogue.migrations.0013_auto_20170821_1548
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0013_auto_20170821_1548.py:19: [C0301(line-too-long), ] Line too long (282/160)
************* Module oscar.apps.catalogue.migrations.0006_auto_20150807_1725
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0006_auto_20150807_1725.py:19: [C0301(line-too-long), ] Line too long (310/160)
************* Module oscar.apps.catalogue.migrations.0014_auto_20181115_1953
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0014_auto_20181115_1953.py:21: [C0301(line-too-long), ] Line too long (193/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0014_auto_20181115_1953.py:26: [C0301(line-too-long), ] Line too long (223/160)
************* Module oscar.apps.catalogue.migrations.0003_data_migration_slugs
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0003_data_migration_slugs.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.catalogue.migrations.0005_auto_20150604_1450
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0005_auto_20150604_1450.py:18: [C0301(line-too-long), ] Line too long (236/160)
************* Module oscar.apps.catalogue.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:70: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:71: [C0301(line-too-long), ] Line too long (249/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:84: [C0301(line-too-long), ] Line too long (226/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:85: [C0301(line-too-long), ] Line too long (252/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:92: [C0301(line-too-long), ] Line too long (184/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:107: [C0301(line-too-long), ] Line too long (287/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:108: [C0301(line-too-long), ] Line too long (323/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:110: [C0301(line-too-long), ] Line too long (226/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:136: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:165: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:184: [C0301(line-too-long), ] Line too long (195/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:200: [C0301(line-too-long), ] Line too long (219/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:201: [C0301(line-too-long), ] Line too long (169/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:231: [C0301(line-too-long), ] Line too long (170/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:237: [C0301(line-too-long), ] Line too long (260/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:249: [C0301(line-too-long), ] Line too long (397/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:255: [C0301(line-too-long), ] Line too long (224/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:261: [C0301(line-too-long), ] Line too long (297/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:267: [C0301(line-too-long), ] Line too long (241/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:8: [C0412(ungrouped-imports), ] Imports from package oscar are not grouped
************* Module oscar.apps.catalogue.migrations.0010_auto_20170420_0439
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0010_auto_20170420_0439.py:19: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0010_auto_20170420_0439.py:24: [C0301(line-too-long), ] Line too long (247/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0010_auto_20170420_0439.py:29: [C0301(line-too-long), ] Line too long (349/160)
************* Module oscar.apps.catalogue.reviews.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:17: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:18: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:19: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'vote_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:20: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'list_view' defined outside __init__
************* Module oscar.apps.catalogue.reviews.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/views.py:28: [W0201(attribute-defined-outside-init), CreateProductReview.dispatch] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/views.py:118: [W0201(attribute-defined-outside-init), ProductReviewList.get_queryset] Attribute 'form' defined outside __init__
************* Module oscar.apps.catalogue.reviews.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/forms.py:14: [W1113(keyword-arg-before-vararg), ProductReviewForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
************* Module oscar.apps.catalogue.reviews.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:84: [E1101(no-member), AbstractProductReview.get_absolute_url] Instance of 'ForeignKey' has no 'slug' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:101: [E1101(no-member), AbstractProductReview.vote_up] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:104: [E1101(no-member), AbstractProductReview.vote_down] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:106: [W0222(signature-differs), AbstractProductReview.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:108: [E1101(no-member), AbstractProductReview.save] Instance of 'ForeignKey' has no 'update_rating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:110: [W0222(signature-differs), AbstractProductReview.delete] Signature differs from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:113: [E1101(no-member), AbstractProductReview.delete] Instance of 'ForeignKey' has no 'update_rating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:149: [R1705(no-else-return), AbstractProductReview.reviewer_name] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:150: [E1101(no-member), AbstractProductReview.reviewer_name] Instance of 'ForeignKey' has no 'get_full_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:161: [E1101(no-member), AbstractProductReview.update_totals] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:174: [E1101(no-member), AbstractProductReview.can_user_vote] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:217: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'is_anonymous' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:217: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'user' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:223: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:228: [W0222(signature-differs), AbstractVote.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:230: [E1101(no-member), AbstractVote.save] Instance of 'ForeignKey' has no 'update_totals' member
************* Module oscar.apps.catalogue.reviews.migrations.0003_auto_20160802_1358
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/migrations/0003_auto_20160802_1358.py:19: [C0301(line-too-long), ] Line too long (208/160)
************* Module oscar.apps.catalogue.reviews.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/migrations/0001_initial.py:7: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.apps.wishlists.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:55: [W0222(signature-differs), AbstractWishList.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:72: [R1705(no-else-return), AbstractWishList.is_allowed_to_see] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:95: [E1101(no-member), AbstractWishList.add] Instance of 'AbstractWishList' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:97: [E1101(no-member), AbstractWishList.add] Instance of 'AbstractWishList' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:127: [R1705(no-else-return), AbstractLine.get_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:128: [E1101(no-member), AbstractLine.get_title] Instance of 'ForeignKey' has no 'get_title' member
************* Module oscar.apps.wishlists.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0401(wildcard-import), ] Wildcard import abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import models from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import reverse from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_random_string from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import pgettext_lazy from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import AUTH_USER_MODEL from wildcard import
************* Module oscar.apps.wishlists.migrations.0002_auto_20160111_1108
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/migrations/0002_auto_20160111_1108.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.wishlists.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (196/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/migrations/0001_initial.py:37: [C0301(line-too-long), ] Line too long (346/160)
************* Module oscar.apps.partner.apps
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/apps.py:12: [C0415(import-outside-toplevel), PartnerConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/apps.py:12: [W0611(unused-import), PartnerConfig.ready] Unused receivers imported from 
************* Module oscar.apps.partner.strategy
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:18: [R0205(useless-object-inheritance), Selector] Class 'Selector' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:46: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:188: [R0205(useless-object-inheritance), UseFirstStockRecord] Class 'UseFirstStockRecord' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:204: [R0205(useless-object-inheritance), StockRequired] Class 'StockRequired' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:214: [R1705(no-else-return), StockRequired.availability_policy] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:222: [W0612(unused-variable), StockRequired.parent_availability_policy] Unused variable 'child'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:229: [R0205(useless-object-inheritance), NoTax] Class 'NoTax' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:257: [R0205(useless-object-inheritance), FixedRateTax] Class 'FixedRateTax' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:313: [R0205(useless-object-inheritance), DeferredTax] Class 'DeferredTax' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.partner.prices
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/prices.py:4: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/prices.py:88: [W0231(super-init-not-called), TaxInclusiveFixedPrice.__init__] __init__ method from base class 'FixedPrice' is not called
************* Module oscar.apps.partner.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:210: [C0330(bad-continuation), ] Wrong continued indentation (remove 3 spaces).
            .filter(pk=self.pk)
         |  ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:211: [C0330(bad-continuation), ] Wrong continued indentation (remove 3 spaces).
            .update(num_allocated=(
         |  ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:50: [E1101(no-member), AbstractPartner.primary_address] Instance of 'AbstractPartner' has no 'addresses' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:51: [R1705(no-else-return), AbstractPartner.primary_address] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:155: [E1101(no-member), AbstractStockRecord.__str__] Instance of 'ForeignKey' has no 'display_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:185: [E1101(no-member), AbstractStockRecord.can_track_allocations] Instance of 'ForeignKey' has no 'get_product_class' member
************* Module oscar.apps.partner.importers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/importers.py:19: [R0205(useless-object-inheritance), CatalogueImporter] Class 'CatalogueImporter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/importers.py:120: [R0205(useless-object-inheritance), Validator] Class 'Validator' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.partner.availability
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/availability.py:4: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
************* Module oscar.apps.partner.migrations.0004_auto_20160107_1755
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0004_auto_20160107_1755.py:16: [C0301(line-too-long), ] Line too long (201/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0004_auto_20160107_1755.py:4: [W0611(unused-import), ] Unused models imported from django.db
************* Module oscar.apps.partner.migrations.0001_initial
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0001_initial.py:39: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0001_initial.py:7: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module oscar.templatetags.category_tags
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/templatetags/category_tags.py:9: [R0205(useless-object-inheritance), PassThrough] Class 'PassThrough' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/templatetags/category_tags.py:131: [R0124(comparison-with-itself), get_annotated_list] Redundant comparison - prev_depth > prev_depth
************* Module oscar.templatetags.image_tags
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/templatetags/image_tags.py:48: [R1710(inconsistent-return-statements), DynamicImageNode.render] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/templatetags/image_tags.py:112: [W0703(broad-except), ThumbnailNode.render] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/templatetags/image_tags.py:129: [R1705(no-else-return), ThumbnailNode._render] Unnecessary "else" after "return"
************* Module oscar.templatetags.display_tags
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/templatetags/display_tags.py:66: [R1705(no-else-return), ConditionalOutputNode.render] Unnecessary "else" after "return"
************* Module oscar.templatetags.currency_filters
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/templatetags/currency_filters.py:13: [W0621(redefined-outer-name), currency] Redefining name 'currency' from outer scope (line 13)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/apps.py:12: [C0415(import-outside-toplevel), AnalyticsConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/apps.py:12: [W0611(unused-import), AnalyticsConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/scores.py:8: [R0205(useless-object-inheritance), Calculator] Class 'Calculator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/scores.py:27: [C0201(consider-iterating-dictionary), Calculator.calculate_scores] Consider iterating the dictionary directly instead of calling .keys()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/analytics/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:10: [R0902(too-many-instance-attributes), CheckoutConfig] Too many instance attributes (8/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:18: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:19: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'shipping_address_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:20: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'user_address_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:22: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'user_address_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:24: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'shipping_method_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:25: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'payment_method_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:26: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'payment_details_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/apps.py:27: [W0201(attribute-defined-outside-init), CheckoutConfig.ready] Attribute 'thankyou_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/calculators.py:4: [R0205(useless-object-inheritance), OrderTotalCalculator] Class 'OrderTotalCalculator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:159: [C0330(bad-continuation), ] Wrong hanging indentation (add 4 spaces).
            '-is_default_for_shipping')
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:1: [C0302(too-many-lines), ] Too many lines in module (687/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:169: [R1705(no-else-return), ShippingAddressView.post] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:272: [R1705(no-else-return), ShippingMethodView.get] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:249: [W0201(attribute-defined-outside-init), ShippingMethodView.post] Attribute '_methods' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:271: [W0201(attribute-defined-outside-init), ShippingMethodView.get] Attribute '_methods' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:608: [W0703(broad-except), PaymentDetailsView.submit] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:513: [R0912(too-many-branches), PaymentDetailsView.submit] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/views.py:656: [W0221(arguments-differ), ThankYouView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/utils.py:1: [R0205(useless-object-inheritance), CheckoutSessionData] Class 'CheckoutSessionData' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:24: [R0205(useless-object-inheritance), CheckoutSessionMixin] Class 'CheckoutSessionMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:122: [W0621(redefined-outer-name), CheckoutSessionMixin.check_basket_is_valid] Redefining name 'messages' from outer scope (line 4)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:310: [R1710(inconsistent-return-statements), CheckoutSessionMixin.get_shipping_address] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:352: [R1710(inconsistent-return-statements), CheckoutSessionMixin.get_shipping_method] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:367: [R1710(inconsistent-return-statements), CheckoutSessionMixin.get_billing_address] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/session.py:367: [R0912(too-many-branches), CheckoutSessionMixin.get_billing_address] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/mixins.py:65: [W0107(unnecessary-pass), OrderPlacementMixin.handle_payment] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/mixins.py:133: [E1128(assignment-from-none), OrderPlacementMixin.place_order] Assigning result of a function call, where the function returns None
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/exceptions.py:3: [W0231(super-init-not-called), FailedPreCondition.__init__] __init__ method from base class 'Exception' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/checkout/exceptions.py:18: [W0231(super-init-not-called), PassedSkipCondition.__init__] __init__ method from base class 'Exception' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (618/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:256: [W0222(signature-differs), AbstractAddress.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:274: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'AbstractAddress' has no 'country_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:275: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'ForeignKey' has no 'iso_3166_1_a2' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:282: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'AbstractAddress' has no 'country_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:284: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'UppercaseCharField' has no 'upper' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:285: [E1101(no-member), AbstractAddress.ensure_postcode_is_valid_for_country] Instance of 'ForeignKey' has no 'iso_3166_1_a2' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:339: [E1101(no-member), AbstractAddress.get_field_values] Instance of 'AbstractAddress' has no 'get_title_display' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:342: [E1101(no-member), AbstractAddress.get_field_values] Instance of 'ForeignKey' has no 'printable_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:494: [E1101(no-member), AbstractShippingAddress.order] Instance of 'AbstractShippingAddress' has no 'order_set' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:555: [E1101(no-member), AbstractUserAddress._ensure_defaults_integrity] Function '_default_manager' has no 'filter' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:559: [E1101(no-member), AbstractUserAddress._ensure_defaults_integrity] Function '_default_manager' has no 'filter' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/abstract_models.py:598: [E1101(no-member), AbstractBillingAddress.order] Instance of 'AbstractBillingAddress' has no 'order_set' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:24: [C0301(line-too-long), ] Line too long (188/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:39: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:49: [C0301(line-too-long), ] Line too long (170/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/address/migrations/0001_initial.py:6: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/methods.py:8: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/methods.py:98: [W0223(abstract-method), OfferDiscount] Method 'calculate' is abstract in class 'Base' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/scales.py:6: [R0205(useless-object-inheritance), Scale] Class 'Scale' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:37: [E0307(invalid-str-returned), AbstractBase.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:150: [E1101(no-member), AbstractWeightBased.get_charge] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:154: [R1705(no-else-return), AbstractWeightBased.get_charge] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:159: [R1705(no-else-return), AbstractWeightBased.get_charge] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:170: [E1101(no-member), AbstractWeightBased.get_band_for_weight] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:177: [E1101(no-member), AbstractWeightBased.num_bands] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:182: [E1101(no-member), AbstractWeightBased.top_band] Instance of 'AbstractWeightBased' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/abstract_models.py:207: [E1101(no-member), AbstractWeightBand.weight_from] Instance of 'ForeignKey' has no 'bands' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/repository.py:14: [R0205(useless-object-inheritance), Repository] Class 'Repository' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/repository.py:90: [R1705(no-else-return), Repository.apply_shipping_offer] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0003_auto_20181115_1953.py:23: [C0301(line-too-long), ] Line too long (306/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:21: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:41: [C0301(line-too-long), ] Line too long (306/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:42: [C0301(line-too-long), ] Line too long (176/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:56: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:59: [C0301(line-too-long), ] Line too long (296/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/shipping/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/categories.py:10: [R1705(no-else-return), create_from_sequence] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:17: [C0415(import-outside-toplevel), CatalogueOnlyConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:17: [W0611(unused-import), CatalogueOnlyConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:21: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:22: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'catalogue_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:23: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'category_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:24: [W0201(attribute-defined-outside-init), CatalogueOnlyConfig.ready] Attribute 'range_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:46: [C0415(import-outside-toplevel), CatalogueReviewsOnlyConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:46: [W0611(unused-import), CatalogueReviewsOnlyConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/apps.py:50: [W0201(attribute-defined-outside-init), CatalogueReviewsOnlyConfig.ready] Attribute 'reviews_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:40: [W0621(redefined-outer-name), ProductDetailView.get] Redefining name 'redirect' from outer scope (line 4)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:34: [W0221(arguments-differ), ProductDetailView.get] Parameters differ from overridden 'get' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:57: [R1705(no-else-return), ProductDetailView.get_object] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:62: [R1710(inconsistent-return-statements), ProductDetailView.redirect_if_necessary] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:38: [W0201(attribute-defined-outside-init), ProductDetailView.get] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:130: [W0201(attribute-defined-outside-init), CatalogueView.get] Attribute 'search_handler' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:178: [R1710(inconsistent-return-statements), ProductCategoryView.redirect_if_necessary] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:160: [W0201(attribute-defined-outside-init), ProductCategoryView.get] Attribute 'category' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/views.py:167: [W0201(attribute-defined-outside-init), ProductCategoryView.get] Attribute 'search_handler' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/utils.py:24: [R0205(useless-object-inheritance), Importer] Class 'Importer' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/utils.py:33: [R0912(too-many-branches), Importer.handle] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/search_handlers.py:24: [R1705(no-else-return), get_product_search_handler_class] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/managers.py:33: [R1705(no-else-return), AttributeFilter._selector] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/managers.py:33: [R1714(consider-using-in), AttributeFilter._selector] Consider merging these comparisons with "in" to "attribute_type in ('option', 'multi_option')"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:664: [C0330(bad-continuation), ] Wrong continued indentation (remove 30 spaces).
                                              .select_related('recommendation').all()]
                |                             ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (1222/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:72: [E0307(invalid-str-returned), AbstractProductClass.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:77: [E1101(no-member), AbstractProductClass.has_attributes] Instance of 'AbstractProductClass' has no 'attributes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:149: [W0222(signature-differs), AbstractCategory.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:369: [R1705(no-else-return), AbstractProduct.__str__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:420: [E1101(no-member), AbstractProduct._clean_standalone] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:427: [E1101(no-member), AbstractProduct._clean_child] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:429: [E1101(no-member), AbstractProduct._clean_child] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:429: [E1101(no-member), AbstractProduct._clean_child] Instance of 'ForeignKey' has no 'is_parent' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:435: [E1101(no-member), AbstractProduct._clean_child] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:439: [E1101(no-member), AbstractProduct._clean_child] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:452: [W0222(signature-differs), AbstractProduct.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:484: [R1705(no-else-return), AbstractProduct.can_be_parent] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:496: [E1101(no-member), AbstractProduct.options] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:506: [E1101(no-member), AbstractProduct.has_options] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:517: [E1101(no-member), AbstractProduct.has_stockrecords] Instance of 'AbstractProduct' has no 'stockrecords' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:521: [E1101(no-member), AbstractProduct.num_stockrecords] Instance of 'AbstractProduct' has no 'stockrecords' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:528: [E1101(no-member), AbstractProduct.attribute_summary] Instance of 'AbstractProduct' has no 'attribute_values' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:537: [E1101(no-member), AbstractProduct.get_title] Instance of 'AbstractProduct' has no 'parent_id' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:538: [E1101(no-member), AbstractProduct.get_title] Instance of 'ForeignKey' has no 'title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:546: [R1705(no-else-return), AbstractProduct.get_product_class] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:547: [E1101(no-member), AbstractProduct.get_product_class] Instance of 'ForeignKey' has no 'product_class' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:557: [R1705(no-else-return), AbstractProduct.get_is_discountable] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:558: [E1101(no-member), AbstractProduct.get_is_discountable] Instance of 'ForeignKey' has no 'is_discountable' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:566: [R1705(no-else-return), AbstractProduct.get_categories] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:567: [E1101(no-member), AbstractProduct.get_categories] Instance of 'ForeignKey' has no 'categories' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:583: [E1101(no-member), AbstractProduct.get_all_images] Instance of 'AbstractProduct' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:584: [E1101(no-member), AbstractProduct.get_all_images] Instance of 'ForeignKey' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:585: [E1101(no-member), AbstractProduct.get_all_images] Instance of 'AbstractProduct' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:593: [E1101(no-member), AbstractProduct.primary_image] Instance of 'AbstractProduct' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:625: [E1101(no-member), AbstractProduct.calculate_rating] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:626: [E1101(no-member), AbstractProduct.calculate_rating] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:639: [E1101(no-member), AbstractProduct.has_review_by] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:651: [R1705(no-else-return), AbstractProduct.is_review_permitted] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:658: [E1101(no-member), AbstractProduct.num_approved_reviews] Instance of 'AbstractProduct' has no 'reviews' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:663: [E1101(no-member), AbstractProduct.sorted_recommended_products] Instance of 'AbstractProduct' has no 'primary_recommendations' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:778: [E0307(invalid-str-returned), AbstractProductAttribute.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:784: [R1705(no-else-return), AbstractProductAttribute._save_file] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:862: [R1701(consider-merging-isinstance), AbstractProductAttribute._validate_date] Consider merging these isinstance calls to isinstance(value, (date, datetime))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:870: [C0123(unidiomatic-typecheck), AbstractProductAttribute._validate_boolean] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:885: [E1101(no-member), AbstractProductAttribute._validate_multi_option] Instance of 'ForeignKey' has no 'options' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:887: [R1704(redefined-argument-from-local), AbstractProductAttribute._validate_multi_option] Redefining argument with the local name 'value'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:897: [E1101(no-member), AbstractProductAttribute._validate_option] Instance of 'ForeignKey' has no 'options' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:964: [E1101(no-member), AbstractProductAttributeValue._get_value] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:970: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:972: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'is_option' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:974: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'option_group' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:976: [E1101(no-member), AbstractProductAttributeValue._set_value] Instance of 'ForeignKey' has no 'is_multi_option' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1009: [E1101(no-member), AbstractProductAttributeValue.value_as_text] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1014: [E1101(no-member), AbstractProductAttributeValue._multi_option_as_text] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1040: [E1101(no-member), AbstractProductAttributeValue.value_as_html] Instance of 'ForeignKey' has no 'type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1057: [E0307(invalid-str-returned), AbstractAttributeOptionGroup.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1068: [E1101(no-member), AbstractAttributeOptionGroup.option_summary] Instance of 'AbstractAttributeOptionGroup' has no 'options' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1084: [E0307(invalid-str-returned), AbstractAttributeOption.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1125: [E0307(invalid-str-returned), AbstractOption.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1133: [R0205(useless-object-inheritance), MissingProductImage] Class 'MissingProductImage' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1170: [W1201(logging-not-lazy), MissingProductImage.symlink_missing_image] Use lazy % formatting in logging functions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1214: [W0222(signature-differs), AbstractProductImage.delete] Signature differs from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/abstract_models.py:1220: [E1101(no-member), AbstractProductImage.delete] Instance of 'ForeignKey' has no 'images' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/receivers.py:15: [W0621(redefined-outer-name), delete_image_files] Redefining name 'sender' from outer scope (line 29)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/product_attributes.py:5: [R0205(useless-object-inheritance), ProductAttributesContainer] Class 'ProductAttributesContainer' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0401(wildcard-import), ] Wildcard import oscar.apps.catalogue.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import logging from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import os from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import BrowsableProductManager from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ProductQuerySet from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import MissingProductImage from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import date from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import datetime from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import GenericForeignKey from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ContentType from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import find from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import cache from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ImproperlyConfigured from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import ValidationError from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import File from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import RegexValidator from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import models from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import Count from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import Sum from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import reverse from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import cached_property from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import strip_tags from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import mark_safe from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_language from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import pgettext_lazy from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import MP_Node from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_class from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_model from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import slugify from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import non_python_keyword from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import AutoSlugField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import NullCharField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/models.py:4: [W0614(unused-wildcard-import), ] Unused import SlugField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0002_auto_20150217_1221.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0007_auto_20151207_1440.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0012_auto_20170609_1902.py:23: [C0301(line-too-long), ] Line too long (375/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0008_auto_20160304_1652.py:19: [C0301(line-too-long), ] Line too long (311/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0013_auto_20170821_1548.py:19: [C0301(line-too-long), ] Line too long (282/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0006_auto_20150807_1725.py:19: [C0301(line-too-long), ] Line too long (310/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0014_auto_20181115_1953.py:21: [C0301(line-too-long), ] Line too long (193/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0014_auto_20181115_1953.py:26: [C0301(line-too-long), ] Line too long (223/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0003_data_migration_slugs.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0005_auto_20150604_1450.py:18: [C0301(line-too-long), ] Line too long (236/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:70: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:71: [C0301(line-too-long), ] Line too long (249/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:84: [C0301(line-too-long), ] Line too long (226/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:85: [C0301(line-too-long), ] Line too long (252/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:92: [C0301(line-too-long), ] Line too long (184/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:107: [C0301(line-too-long), ] Line too long (287/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:108: [C0301(line-too-long), ] Line too long (323/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:110: [C0301(line-too-long), ] Line too long (226/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:136: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:165: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:184: [C0301(line-too-long), ] Line too long (195/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:200: [C0301(line-too-long), ] Line too long (219/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:201: [C0301(line-too-long), ] Line too long (169/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:231: [C0301(line-too-long), ] Line too long (170/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:237: [C0301(line-too-long), ] Line too long (260/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:249: [C0301(line-too-long), ] Line too long (397/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:255: [C0301(line-too-long), ] Line too long (224/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:261: [C0301(line-too-long), ] Line too long (297/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:267: [C0301(line-too-long), ] Line too long (241/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0001_initial.py:8: [C0412(ungrouped-imports), ] Imports from package oscar are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0010_auto_20170420_0439.py:19: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0010_auto_20170420_0439.py:24: [C0301(line-too-long), ] Line too long (247/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/migrations/0010_auto_20170420_0439.py:29: [C0301(line-too-long), ] Line too long (349/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:17: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:18: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:19: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'vote_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:20: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/views.py:28: [W0201(attribute-defined-outside-init), CreateProductReview.dispatch] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/views.py:118: [W0201(attribute-defined-outside-init), ProductReviewList.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/forms.py:14: [W1113(keyword-arg-before-vararg), ProductReviewForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:84: [E1101(no-member), AbstractProductReview.get_absolute_url] Instance of 'ForeignKey' has no 'slug' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:101: [E1101(no-member), AbstractProductReview.vote_up] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:104: [E1101(no-member), AbstractProductReview.vote_down] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:106: [W0222(signature-differs), AbstractProductReview.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:108: [E1101(no-member), AbstractProductReview.save] Instance of 'ForeignKey' has no 'update_rating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:110: [W0222(signature-differs), AbstractProductReview.delete] Signature differs from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:113: [E1101(no-member), AbstractProductReview.delete] Instance of 'ForeignKey' has no 'update_rating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:149: [R1705(no-else-return), AbstractProductReview.reviewer_name] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:150: [E1101(no-member), AbstractProductReview.reviewer_name] Instance of 'ForeignKey' has no 'get_full_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:161: [E1101(no-member), AbstractProductReview.update_totals] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:174: [E1101(no-member), AbstractProductReview.can_user_vote] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:217: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'is_anonymous' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:217: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'user' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:223: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:228: [W0222(signature-differs), AbstractVote.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:230: [E1101(no-member), AbstractVote.save] Instance of 'ForeignKey' has no 'update_totals' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/migrations/0003_auto_20160802_1358.py:19: [C0301(line-too-long), ] Line too long (208/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/migrations/0001_initial.py:7: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:17: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:18: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:19: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'vote_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/apps.py:20: [W0201(attribute-defined-outside-init), CatalogueReviewsConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/views.py:28: [W0201(attribute-defined-outside-init), CreateProductReview.dispatch] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/views.py:88: [R0912(too-many-branches), AddVoteView.post] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/views.py:118: [W0201(attribute-defined-outside-init), ProductReviewList.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/forms.py:14: [W1113(keyword-arg-before-vararg), ProductReviewForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:84: [E1101(no-member), AbstractProductReview.get_absolute_url] Instance of 'ForeignKey' has no 'slug' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:101: [E1101(no-member), AbstractProductReview.vote_up] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:104: [E1101(no-member), AbstractProductReview.vote_down] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:106: [W0222(signature-differs), AbstractProductReview.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:108: [E1101(no-member), AbstractProductReview.save] Instance of 'ForeignKey' has no 'update_rating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:110: [W0222(signature-differs), AbstractProductReview.delete] Signature differs from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:113: [E1101(no-member), AbstractProductReview.delete] Instance of 'ForeignKey' has no 'update_rating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:149: [R1705(no-else-return), AbstractProductReview.reviewer_name] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:150: [E1101(no-member), AbstractProductReview.reviewer_name] Instance of 'ForeignKey' has no 'get_full_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:161: [E1101(no-member), AbstractProductReview.update_totals] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:174: [E1101(no-member), AbstractProductReview.can_user_vote] Instance of 'AbstractProductReview' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:217: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'is_anonymous' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:217: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'user' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:223: [E1101(no-member), AbstractVote.clean] Instance of 'ForeignKey' has no 'votes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:228: [W0222(signature-differs), AbstractVote.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/abstract_models.py:230: [E1101(no-member), AbstractVote.save] Instance of 'ForeignKey' has no 'update_totals' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/migrations/0003_auto_20160802_1358.py:19: [C0301(line-too-long), ] Line too long (208/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/catalogue/reviews/migrations/0001_initial.py:7: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/apps.py:12: [C0415(import-outside-toplevel), PartnerConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/apps.py:12: [W0611(unused-import), PartnerConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:18: [R0205(useless-object-inheritance), Selector] Class 'Selector' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:46: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:188: [R0205(useless-object-inheritance), UseFirstStockRecord] Class 'UseFirstStockRecord' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:204: [R0205(useless-object-inheritance), StockRequired] Class 'StockRequired' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:214: [R1705(no-else-return), StockRequired.availability_policy] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:222: [W0612(unused-variable), StockRequired.parent_availability_policy] Unused variable 'child'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:229: [R0205(useless-object-inheritance), NoTax] Class 'NoTax' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:257: [R0205(useless-object-inheritance), FixedRateTax] Class 'FixedRateTax' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/strategy.py:313: [R0205(useless-object-inheritance), DeferredTax] Class 'DeferredTax' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/prices.py:4: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/prices.py:88: [W0231(super-init-not-called), TaxInclusiveFixedPrice.__init__] __init__ method from base class 'FixedPrice' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:210: [C0330(bad-continuation), ] Wrong continued indentation (remove 3 spaces).
            .filter(pk=self.pk)
         |  ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:211: [C0330(bad-continuation), ] Wrong continued indentation (remove 3 spaces).
            .update(num_allocated=(
         |  ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:50: [E1101(no-member), AbstractPartner.primary_address] Instance of 'AbstractPartner' has no 'addresses' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:51: [R1705(no-else-return), AbstractPartner.primary_address] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:155: [E1101(no-member), AbstractStockRecord.__str__] Instance of 'ForeignKey' has no 'display_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/abstract_models.py:185: [E1101(no-member), AbstractStockRecord.can_track_allocations] Instance of 'ForeignKey' has no 'get_product_class' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/importers.py:19: [R0205(useless-object-inheritance), CatalogueImporter] Class 'CatalogueImporter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/importers.py:120: [R0205(useless-object-inheritance), Validator] Class 'Validator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/availability.py:4: [R0205(useless-object-inheritance), Base] Class 'Base' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0004_auto_20160107_1755.py:16: [C0301(line-too-long), ] Line too long (201/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0004_auto_20160107_1755.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0001_initial.py:39: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/partner/migrations/0001_initial.py:7: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:17: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'summary_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:18: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'saved_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:19: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'add_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:20: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'add_voucher_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/apps.py:21: [W0201(attribute-defined-outside-init), BasketConfig.ready] Attribute 'remove_voucher_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/formsets.py:32: [E1101(no-member), BaseBasketLineFormSet._should_delete_form] Instance of 'BaseBasketLineFormSet' has no 'can_delete' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/formsets.py:20: [R1710(inconsistent-return-statements), BaseBasketLineFormSet._should_delete_form] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/views.py:60: [R1710(inconsistent-return-statements), BasketView.get_default_shipping_address] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/views.py:146: [R0912(too-many-branches), BasketView.formset_valid] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/views.py:258: [W0201(attribute-defined-outside-init), BasketAddView.post] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/views.py:318: [R0912(too-many-branches), VoucherAddView.apply_voucher_to_basket] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:12: [R0205(useless-object-inheritance), BasketMessageGenerator] Class 'BasketMessageGenerator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:52: [W0621(redefined-outer-name), BasketMessageGenerator.get_messages] Redefining name 'messages' from outer scope (line 3)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:70: [R0205(useless-object-inheritance), LineOfferConsumer] Class 'LineOfferConsumer' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/utils.py:160: [C1801(len-as-condition), LineOfferConsumer.available] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/forms.py:37: [R1710(inconsistent-return-statements), BasketLineForm.full_clean] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/forms.py:39: [W0201(attribute-defined-outside-init), BasketLineForm.full_clean] Attribute 'cleaned_data' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/forms.py:200: [W0201(attribute-defined-outside-init), AddToBasketForm.clean_child_id] Attribute 'child_product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:214: [C0330(bad-continuation), ] Wrong continued indentation (add 13 spaces).
                % (stock_info.price.currency, price_currency))
                ^            |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (940/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:127: [E1101(no-member), AbstractBasket.all_lines] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:130: [E1101(no-member), AbstractBasket.all_lines] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:173: [E1101(no-member), AbstractBasket.flush] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:236: [E1101(no-member), AbstractBasket.add_product] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:184: [R0912(too-many-branches), AbstractBasket.add_product] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:278: [E1101(no-member), AbstractBasket.merge_line] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:315: [E1101(no-member), AbstractBasket.merge] Instance of 'ManyToManyField' has no 'add' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:372: [W0622(redefined-builtin), AbstractBasket._get_total] Redefining built-in 'property'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:389: [W0107(unnecessary-pass), AbstractBasket._get_total] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:496: [E1101(no-member), AbstractBasket.num_items] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:519: [R0206(property-with-parameters), AbstractBasket.time_since_creation] Cannot have defined parameters for properties
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:528: [E1101(no-member), AbstractBasket.contains_a_voucher] Instance of 'ManyToManyField' has no 'exists' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:559: [E1101(no-member), AbstractBasket.contains_voucher] Instance of 'ManyToManyField' has no 'get' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:572: [E1101(no-member), AbstractBasket.product_quantity] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:582: [E1101(no-member), AbstractBasket.line_quantity] Instance of 'AbstractBasket' has no 'lines' member; maybe '_lines'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:114: [W0201(attribute-defined-outside-init), AbstractBasket._set_strategy] Attribute '_strategy' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:673: [W0222(signature-differs), AbstractLine.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:674: [E1101(no-member), AbstractLine.save] Instance of 'ForeignKey' has no 'can_be_edited' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:677: [E1101(no-member), AbstractLine.save] Instance of 'ForeignKey' has no 'status' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:808: [E1101(no-member), AbstractLine.purchase_info] Instance of 'ForeignKey' has no 'strategy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:836: [R1710(inconsistent-return-statements), AbstractLine.line_price_excl_tax] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:859: [R1705(no-else-return), AbstractLine.line_price_incl_tax_incl_discounts] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:867: [R1710(inconsistent-return-statements), AbstractLine.line_tax] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:872: [R1710(inconsistent-return-statements), AbstractLine.line_price_incl_tax] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:880: [E1101(no-member), AbstractLine.description] Instance of 'AbstractLine' has no 'attributes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:894: [E1101(no-member), AbstractLine.get_warning] Instance of 'ForeignKey' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:905: [E1101(no-member), AbstractLine.get_warning] Instance of 'ForeignKey' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:909: [R1705(no-else-return), AbstractLine.get_warning] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:886: [R1710(inconsistent-return-statements), AbstractLine.get_warning] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/abstract_models.py:808: [W0201(attribute-defined-outside-init), AbstractLine.purchase_info] Attribute '_info' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/middleware.py:45: [R1710(inconsistent-return-statements), BasketMiddleware.__call__.load_basket_hash] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/middleware.py:125: [R0912(too-many-branches), BasketMiddleware.get_basket] Too many branches (16/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/migrations/0006_auto_20160111_1108.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/basket/migrations/0001_initial.py:17: [C0301(line-too-long), ] Line too long (371/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/bankcards.py:71: [C0325(superfluous-parens), ] Unnecessary parens after 'not' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/bankcards.py:65: [W0622(redefined-builtin), luhn] Redefining built-in 'sum'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/forms.py:20: [R1718(consider-using-set-comprehension), ] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/forms.py:74: [W0223(abstract-method), BankcardMonthField] Method 'compress' is abstract in class 'MultiValueField' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/forms.py:248: [W0222(signature-differs), BankcardForm.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:122: [W0222(signature-differs), AbstractSource.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:141: [E1101(no-member), AbstractSource._create_transaction] Instance of 'AbstractSource' has no 'transactions' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:219: [E0307(invalid-str-returned), AbstractSourceType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:294: [W0222(signature-differs), AbstractBankcard.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:313: [W0622(redefined-builtin), AbstractBankcard.start_month] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:316: [W0622(redefined-builtin), AbstractBankcard.expiry_month] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/abstract_models.py:317: [E1101(no-member), AbstractBankcard.expiry_month] Instance of 'DateField' has no 'strftime' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:11: [W0107(unnecessary-pass), UserCancelled] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:34: [W0107(unnecessary-pass), InsufficientPaymentSources] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:42: [W0231(super-init-not-called), RedirectRequired.__init__] __init__ method from base class 'PaymentError' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/exceptions.py:52: [W0107(unnecessary-pass), UnableToTakePayment] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/migrations/0001_initial.py:60: [C0301(line-too-long), ] Line too long (242/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/migrations/0001_initial.py:7: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/payment/migrations/0001_initial.py:6: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:16: [C0415(import-outside-toplevel), OfferConfig.ready] Import outside toplevel (.signals)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:16: [W0611(unused-import), OfferConfig.ready] Unused signals imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:18: [W0201(attribute-defined-outside-init), OfferConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/apps.py:19: [W0201(attribute-defined-outside-init), OfferConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/applicator.py:61: [C0330(bad-continuation), ] Wrong continued indentation (add 15 spaces).
            key=lambda o: o.priority, reverse=True))
            ^              |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/applicator.py:14: [R0205(useless-object-inheritance), Applicator] Class 'Applicator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/conditions.py:63: [W0201(attribute-defined-outside-init), CountCondition._get_num_matches] Attribute '_num_matches' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/conditions.py:176: [W0612(unused-variable), CoverageCondition.consume_items] Unused variable 'quantity'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/conditions.py:168: [R0912(too-many-branches), CoverageCondition.consume_items] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/conditions.py:263: [W0201(attribute-defined-outside-init), ValueCondition._get_value_of_matches] Attribute '_value_of_matches' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/views.py:34: [W0201(attribute-defined-outside-init), OfferDetailView.get] Attribute 'offer' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/views.py:60: [W0201(attribute-defined-outside-init), RangeDetailView.dispatch] Attribute 'range' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/utils.py:9: [W0622(redefined-builtin), range_anchor] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/utils.py:6: [W0611(unused-import), ] Unused Applicator imported from oscar.apps.offer.applicator
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/results.py:4: [R0205(useless-object-inheritance), OfferApplications] Class 'OfferApplications' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/results.py:106: [R1717(consider-using-dict-comprehension), OfferApplications.offers] Consider using a dictionary comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/results.py:110: [R0205(useless-object-inheritance), ApplicationResult] Class 'ApplicationResult' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (1140/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:223: [W0222(signature-differs), AbstractConditionalOffer.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:236: [E0307(invalid-str-returned), AbstractConditionalOffer.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:281: [E1101(no-member), AbstractConditionalOffer.is_condition_satisfied] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:284: [E1101(no-member), AbstractConditionalOffer.is_condition_partially_satisfied] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:287: [E1101(no-member), AbstractConditionalOffer.get_upsell_message] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:295: [E1101(no-member), AbstractConditionalOffer.apply_benefit] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:296: [E1101(no-member), AbstractConditionalOffer.apply_benefit] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:303: [E1101(no-member), AbstractConditionalOffer.apply_deferred_benefit] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:340: [E1101(no-member), AbstractConditionalOffer.shipping_discount] Instance of 'ForeignKey' has no 'proxy' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:357: [R0912(too-many-branches), AbstractConditionalOffer.availability_restrictions] Too many branches (26/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:432: [E1101(no-member), AbstractConditionalOffer.has_products] Instance of 'ForeignKey' has no 'range' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:442: [E1101(no-member), AbstractConditionalOffer.products] Instance of 'ForeignKey' has no 'range' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:527: [E1101(no-member), AbstractBenefit.clean] Instance of 'CharField' has no 'lower' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:642: [W0622(redefined-builtin), AbstractBenefit.get_applicable_lines] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:745: [E1101(no-member), AbstractCondition.can_apply_condition] Instance of 'ForeignKey' has no 'contains_product' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:822: [E0307(invalid-str-returned), AbstractRange.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:830: [R1710(inconsistent-return-statements), AbstractRange.proxy] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:858: [E1101(no-member), AbstractRange.add_product] Instance of 'ManyToManyField' has no 'remove' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:871: [E1101(no-member), AbstractRange.remove_product] Instance of 'ManyToManyField' has no 'add' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:875: [R0911(too-many-return-statements), AbstractRange.contains_product] Too many return statements (8/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:875: [R0912(too-many-branches), AbstractRange.contains_product] Too many branches (20/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:938: [E1101(no-member), AbstractRange._included_categories] Instance of 'ManyToManyField' has no 'none' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:940: [E1101(no-member), AbstractRange._included_categories] Instance of 'ManyToManyField' has no 'only' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:962: [E1101(no-member), AbstractRange._class_ids] Instance of 'ManyToManyField' has no 'values_list' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:1108: [E1101(no-member), AbstractRangeProductFileUpload.process] Instance of 'ForeignKey' has no 'all_products' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/abstract_models.py:1122: [E1101(no-member), AbstractRangeProductFileUpload.process] Instance of 'ForeignKey' has no 'add_product' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:156: [W0511(fixme), ] XXX: spreading the discount is a policy decision that may not apply
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:56: [R0914(too-many-locals), PercentageDiscountBenefit.apply] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:122: [R0914(too-many-locals), AbsoluteDiscountBenefit.apply] Too many local variables (21/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:122: [R0912(too-many-branches), AbsoluteDiscountBenefit.apply] Too many branches (16/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:204: [R0914(too-many-locals), FixedPriceBenefit.apply] Too many local variables (18/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/benefits.py:204: [R0912(too-many-branches), FixedPriceBenefit.apply] Too many branches (20/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0401(wildcard-import), ] Wildcard import oscar.apps.offer.benefits
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.benefits import *" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0401(wildcard-import), ] Wildcard import oscar.apps.offer.conditions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.conditions import *" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:63: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.benefits import __all__ as benefit_classes" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:64: [C0413(wrong-import-position), ] Import "from oscar.apps.offer.conditions import __all__ as condition_classes" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import Benefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import CoverageCondition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ValueCondition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import range_anchor from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import apply_discount from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import PercentageDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import AbsoluteDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import FixedPriceBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import MultibuyDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingAbsoluteDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingFixedPriceBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import ShippingPercentageDiscountBenefit from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import D from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import get_class from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import get_classes from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import get_model from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:60: [W0614(unused-wildcard-import), ] Unused import currency from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import Condition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import unit_price from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import CountCondition from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import ROUND_UP from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/models.py:61: [W0614(unused-wildcard-import), ] Unused import ungettext from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0002_auto_20151210_1053.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0006_auto_20170504_0616.py:18: [C0301(line-too-long), ] Line too long (188/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0006_auto_20170504_0616.py:23: [C0301(line-too-long), ] Line too long (190/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (602/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:25: [C0301(line-too-long), ] Line too long (233/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:38: [C0301(line-too-long), ] Line too long (349/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:53: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:55: [C0301(line-too-long), ] Line too long (417/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:59: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:60: [C0301(line-too-long), ] Line too long (217/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:61: [C0301(line-too-long), ] Line too long (198/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:62: [C0301(line-too-long), ] Line too long (219/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:63: [C0301(line-too-long), ] Line too long (256/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:84: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:92: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:119: [C0301(line-too-long), ] Line too long (186/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:142: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/offer/migrations/0001_initial.py:8: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:18: [R0205(useless-object-inheritance), OrderNumberGenerator] Class 'OrderNumberGenerator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:33: [R0205(useless-object-inheritance), OrderCreator] Class 'OrderCreator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:38: [R0913(too-many-arguments), OrderCreator.place_order] Too many arguments (11/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:38: [R0914(too-many-locals), OrderCreator.place_order] Too many local variables (20/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:38: [R0912(too-many-branches), OrderCreator.place_order] Too many branches (22/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:101: [R0913(too-many-arguments), OrderCreator.create_order_model] Too many arguments (11/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/utils.py:203: [W0107(unnecessary-pass), OrderCreator.create_additional_line_models] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/processing.py:8: [R0205(useless-object-inheritance), EventHandler] Class 'EventHandler' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1: [C0302(too-many-lines), ] Too many lines in module (1203/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:142: [E1101(no-member), AbstractOrder.set_status] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:160: [E1101(no-member), AbstractOrder._create_order_status_change] Instance of 'AbstractOrder' has no 'status_changes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:175: [E1101(no-member), AbstractOrder.basket_total_before_discounts_incl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:185: [E1101(no-member), AbstractOrder.basket_total_before_discounts_excl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:219: [E1101(no-member), AbstractOrder.total_discount_incl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:226: [E1101(no-member), AbstractOrder.total_discount_excl_tax] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:236: [E1101(no-member), AbstractOrder.num_lines] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:244: [E1101(no-member), AbstractOrder.num_items] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:259: [E1101(no-member), AbstractOrder.shipping_status] Instance of 'AbstractOrder' has no 'shipping_events' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:260: [C1801(len-as-condition), AbstractOrder.shipping_status] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:299: [E1101(no-member), AbstractOrder._is_event_complete] Instance of 'AbstractOrder' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:362: [E1101(no-member), AbstractOrder.email] Instance of 'ForeignKey' has no 'email' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:368: [E1101(no-member), AbstractOrder.basket_discounts] Instance of 'AbstractOrder' has no 'discounts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:373: [E1101(no-member), AbstractOrder.shipping_discounts] Instance of 'AbstractOrder' has no 'discounts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:378: [E1101(no-member), AbstractOrder.post_order_actions] Instance of 'AbstractOrder' has no 'discounts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:385: [W0222(signature-differs), AbstractOrder.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:460: [E1101(no-member), AbstractOrderStatusChange.__str__] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:490: [E1101(no-member), AbstractCommunicationEvent.__str__] Instance of 'ForeignKey' has no 'number' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:610: [E1101(no-member), AbstractLine.__str__] Instance of 'ForeignKey' has no 'title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:666: [E1101(no-member), AbstractLine.description] Instance of 'AbstractLine' has no 'attributes' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:708: [E1307(bad-string-format-type), AbstractLine.shipping_status] Argument 'django.db.models.fields.PositiveIntegerField' does not match format type 'd'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:735: [E1101(no-member), AbstractLine.shipping_event_quantity] Instance of 'AbstractLine' has no 'shipping_event_quantities' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:737: [R1705(no-else-return), AbstractLine.shipping_event_quantity] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:765: [E1101(no-member), AbstractLine.shipping_event_breakdown] Instance of 'AbstractLine' has no 'shipping_events' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:795: [E1101(no-member), AbstractLine.payment_event_quantity] Instance of 'AbstractLine' has no 'payment_event_quantities' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:797: [R1705(no-else-return), AbstractLine.payment_event_quantity] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:917: [E0307(invalid-str-returned), AbstractPaymentEventType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:969: [E1101(no-member), AbstractPaymentEvent.num_affected_lines] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1030: [E1101(no-member), AbstractShippingEvent.__str__] Instance of 'ForeignKey' has no 'number' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1034: [E1101(no-member), AbstractShippingEvent.num_affected_lines] Instance of 'ManyToManyField' has no 'count' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1062: [W0222(signature-differs), ShippingEventQuantity.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1065: [E1101(no-member), ShippingEventQuantity.save] Instance of 'ForeignKey' has no 'quantity' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1067: [E1101(no-member), ShippingEventQuantity.save] Instance of 'ForeignKey' has no 'is_shipping_event_permitted' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1068: [E1101(no-member), ShippingEventQuantity.save] Instance of 'ForeignKey' has no 'event_type' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1074: [E1101(no-member), ShippingEventQuantity.__str__] Instance of 'ForeignKey' has no 'product' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1097: [E0307(invalid-str-returned), AbstractShippingEventType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/abstract_models.py:1167: [W0221(arguments-differ), AbstractOrderDiscount.save] Parameters differ from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0401(wildcard-import), ] Wildcard import oscar.apps.order.abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import hashlib from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import logging from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import warnings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import logger from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import OrderedDict from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import D from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import ImproperlyConfigured from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import BadSignature from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import Signer from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import models from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import Sum from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import timezone from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import constant_time_compare from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import now from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import pgettext_lazy from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import order_line_status_changed from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import order_status_changed from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import AUTH_USER_MODEL from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import get_model from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import get_default_currency from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import AutoSlugField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import RemovedInOscar21Warning from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/models.py:3: [W0614(unused-wildcard-import), ] Unused import exceptions from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0006_orderstatuschange.py:21: [C0301(line-too-long), ] Line too long (176/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0004_auto_20160111_1108.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:28: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:68: [C0301(line-too-long), ] Line too long (202/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:75: [C0301(line-too-long), ] Line too long (161/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:76: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:98: [C0301(line-too-long), ] Line too long (181/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:142: [C0301(line-too-long), ] Line too long (183/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:156: [C0301(line-too-long), ] Line too long (198/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:226: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:240: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:250: [C0301(line-too-long), ] Line too long (170/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:295: [C0301(line-too-long), ] Line too long (174/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:358: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:370: [C0301(line-too-long), ] Line too long (178/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:388: [C0301(line-too-long), ] Line too long (179/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:7: [C0412(ungrouped-imports), ] Imports from package oscar are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/order/migrations/0001_initial.py:8: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:10: [R0902(too-many-instance-attributes), CustomerConfig] Too many instance attributes (36/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:18: [C0415(import-outside-toplevel), CustomerConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:19: [W0404(reimported), CustomerConfig.ready] Reimport 'receivers' (imported line 18)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:19: [C0415(import-outside-toplevel), CustomerConfig.ready] Import outside toplevel (alerts.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:18: [W0611(unused-import), CustomerConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:21: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'summary_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:22: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'order_history_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:23: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'order_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:24: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'anon_order_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:26: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'order_line_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:28: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:29: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:30: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:31: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:32: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'address_change_status_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:35: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'email_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:36: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'email_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:37: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'login_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:38: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'logout_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:39: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'register_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:40: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'profile_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:41: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'profile_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:42: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'profile_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:43: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'change_password_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:45: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_inbox_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:47: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_archive_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:49: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:51: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'notification_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:54: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:56: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:58: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_confirm_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:60: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'alert_cancel_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:63: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_add_product_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:65: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:67: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:69: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:71: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_create_with_product_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:73: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:75: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:77: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_remove_product_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/apps.py:79: [W0201(attribute-defined-outside-init), CustomerConfig.ready] Attribute 'wishlists_move_product_to_another_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/history.py:50: [C0325(superfluous-parens), ] Unnecessary parens after 'if' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:599: [C0330(bad-continuation), ] Wrong hanging indentation (add 8 spaces).
                'qty': line.quantity, 'product': line.product}
                ^       |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:1: [C0302(too-many-lines), ] Too many lines in module (725/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:124: [R1705(no-else-return), AccountAuthView.post] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:452: [W0201(attribute-defined-outside-init), OrderHistoryView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:472: [W0201(attribute-defined-outside-init), OrderHistoryView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:454: [W0201(attribute-defined-outside-init), OrderHistoryView.get] Attribute 'object_list' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:508: [R0912(too-many-branches), OrderDetailView.do_reorder] Too many branches (20/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:534: [W0201(attribute-defined-outside-init), OrderDetailView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:551: [W0201(attribute-defined-outside-init), OrderDetailView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:557: [W0201(attribute-defined-outside-init), OrderDetailView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:574: [W0201(attribute-defined-outside-init), OrderLineView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:586: [W0201(attribute-defined-outside-init), OrderLineView.do_reorder] Attribute 'response' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:711: [W1113(keyword-arg-before-vararg), AddressChangeStatusView.get] Keyword argument before variable positional arguments list in the definition of get function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/views.py:711: [W0221(arguments-differ), AddressChangeStatusView.get] Parameters differ from overridden 'get' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:17: [R0205(useless-object-inheritance), Dispatcher] Class 'Dispatcher' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:28: [R1710(inconsistent-return-statements), Dispatcher.dispatch_direct_messages] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:73: [R1710(inconsistent-return-statements), Dispatcher.create_customer_email] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/utils.py:118: [W1201(logging-not-lazy), Dispatcher.send_email_messages] Use lazy % formatting in logging functions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/mixins.py:19: [R0205(useless-object-inheritance), PageTitleMixin] Class 'PageTitleMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/mixins.py:40: [R0205(useless-object-inheritance), RegisterUserMixin] Class 'RegisterUserMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:44: [W0221(arguments-differ), PasswordResetForm.save] Parameters differ from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:91: [R1710(inconsistent-return-statements), EmailAuthenticationForm.clean_redirect_url] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:130: [W1113(keyword-arg-before-vararg), EmailUserCreationForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:202: [R1705(no-else-return), OrderSearchForm.description] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:210: [R0912(too-many-branches), OrderSearchForm._orders_description] Too many branches (22/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:306: [R1718(consider-using-set-comprehension), UserAndProfileForm.__init__] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:345: [W0222(signature-differs), UserAndProfileForm.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/forms.py:385: [R0912(too-many-branches), ProductAlertForm.clean] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:111: [E1101(no-member), AbstractUser._migrate_alerts_to_user] Instance of 'AbstractUser' has no 'alerts' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:149: [R1705(no-else-return), AbstractEmail.__str__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:151: [E1101(no-member), AbstractEmail.__str__] Instance of 'ForeignKey' has no 'get_username' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:235: [E1101(no-member), AbstractCommunicationEventType.get_messages] Instance of 'AutoSlugField' has no 'lower' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:263: [E1101(no-member), AbstractCommunicationEventType.get_messages] Instance of 'str' has no 'render' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:271: [E0307(invalid-str-returned), AbstractCommunicationEventType.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:319: [E0307(invalid-str-returned), AbstractNotification.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:425: [R1705(no-else-return), AbstractProductAlert.get_email_address] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:426: [E1101(no-member), AbstractProductAlert.get_email_address] Instance of 'ForeignKey' has no 'email' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/abstract_models.py:430: [W0222(signature-differs), AbstractProductAlert.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/auth_backends.py:23: [W1113(keyword-arg-before-vararg), EmailBackend._authenticate] Keyword argument before variable positional arguments list in the definition of _authenticate function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/auth_backends.py:44: [R1705(no-else-return), EmailBackend._authenticate] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/auth_backends.py:56: [W0222(signature-differs), EmailBackend.authenticate] Signature differs from overridden 'authenticate' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0004_email_save.py:25: [C0301(line-too-long), ] Line too long (165/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0002_auto_20150807_1725.py:19: [C0301(line-too-long), ] Line too long (444/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0002_auto_20150807_1725.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:21: [C0301(line-too-long), ] Line too long (255/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (193/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:82: [C0301(line-too-long), ] Line too long (221/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:88: [C0301(line-too-long), ] Line too long (166/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/migrations/0001_initial.py:6: [C0412(ungrouped-imports), ] Imports from package django are not grouped
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:53: [R1705(no-else-return), WishListDetailView.get_wishlist_or_404] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:48: [W0201(attribute-defined-outside-init), WishListDetailView.dispatch] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:209: [W0201(attribute-defined-outside-init), WishListAddProduct.dispatch] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:210: [W0201(attribute-defined-outside-init), WishListAddProduct.dispatch] Attribute 'wishlist' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:244: [R0205(useless-object-inheritance), LineMixin] Class 'LineMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/wishlists/views.py:310: [R1705(no-else-return), WishListRemoveProduct.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:51: [W0201(attribute-defined-outside-init), ProductAlertCreateView.post] Attribute 'product' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:92: [W0221(arguments-differ), ProductAlertConfirmView.get_redirect_url] Parameters differ from overridden 'get_redirect_url' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:80: [W0201(attribute-defined-outside-init), ProductAlertConfirmView.get] Attribute 'alert' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:128: [W0221(arguments-differ), ProductAlertCancelView.get_redirect_url] Parameters differ from overridden 'get_redirect_url' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:109: [W0201(attribute-defined-outside-init), ProductAlertCancelView.get] Attribute 'alert' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/views.py:111: [W0201(attribute-defined-outside-init), ProductAlertCancelView.get] Attribute 'alert' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/utils.py:48: [R0914(too-many-locals), send_product_alerts] Too many local variables (23/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/utils.py:48: [R0912(too-many-branches), send_product_alerts] Too many branches (26/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/alerts/receivers.py:10: [C0415(import-outside-toplevel), send_product_alerts] Import outside toplevel (oscar.apps.customer.alerts.utils)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/customer/notifications/views.py:96: [W0221(arguments-differ), UpdateView.delete] Parameters differ from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:21: [C0415(import-outside-toplevel), SearchConfig.get_urls] Import outside toplevel (haystack.views.search_view_factory)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:38: [C0415(import-outside-toplevel), SearchConfig.get_sqs] Import outside toplevel (oscar.apps.search.facets)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:16: [W0201(attribute-defined-outside-init), SearchConfig.ready] Attribute 'search_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/apps.py:18: [W0201(attribute-defined-outside-init), SearchConfig.ready] Attribute 'search_form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/facets.py:22: [R0205(useless-object-inheritance), FacetMunger] Class 'FacetMunger' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:12: [R0205(useless-object-inheritance), SearchHandler] Class 'SearchHandler' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:76: [E1102(not-callable), SearchHandler.get_search_form] self.form_class is not callable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:85: [E1133(not-an-iterable), SearchHandler.get_search_queryset] Non-iterable value self.model_whitelist is used in an iterating context
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:162: [R1705(no-else-return), SearchHandler.get_paginated_objects] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:163: [E0203(access-member-before-definition), SearchHandler.get_paginated_objects] Access to member '_objects' before its definition line 166
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:163: [E0203(access-member-before-definition), SearchHandler.get_paginated_objects] Access to member '_objects' before its definition line 166
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_handlers.py:166: [W0201(attribute-defined-outside-init), SearchHandler.get_paginated_objects] Attribute '_objects' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/forms.py:98: [W0621(redefined-outer-name), SearchForm.selected_multi_facets] Redefining name 'field_name' from outer scope (line 27)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/forms.py:115: [E1003(bad-super-call), SearchForm.search] Bad first argument 'FacetedSearchForm' given to super()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:48: [R1710(inconsistent-return-statements), ProductIndex.prepare_category] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:53: [R1710(inconsistent-return-statements), ProductIndex.prepare_rating] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:66: [R1710(inconsistent-return-statements), ProductIndex.prepare_price] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:81: [R1705(no-else-return), ProductIndex.prepare_num_in_stock] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/search/search_indexes.py:79: [R1710(inconsistent-return-statements), ProductIndex.prepare_num_in_stock] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/apps.py:12: [C0415(import-outside-toplevel), VoucherConfig.ready] Import outside toplevel (.receivers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/apps.py:12: [W0611(unused-import), VoucherConfig.ready] Unused receivers imported from 
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:52: [E0307(invalid-str-returned), AbstractVoucherSet.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:57: [E1101(no-member), AbstractVoucherSet.generate_vouchers] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:58: [W0612(unused-variable), AbstractVoucherSet.generate_vouchers] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:83: [W0222(signature-differs), AbstractVoucherSet.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:84: [E1101(no-member), AbstractVoucherSet.save] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:88: [E1101(no-member), AbstractVoucherSet.save] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:95: [E1101(no-member), AbstractVoucherSet.num_basket_additions] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:100: [E1101(no-member), AbstractVoucherSet.num_orders] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:105: [E1101(no-member), AbstractVoucherSet.total_discount] Instance of 'AbstractVoucherSet' has no 'vouchers' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:167: [E0307(invalid-str-returned), AbstractVoucher.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:176: [W0222(signature-differs), AbstractVoucher.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:203: [E1101(no-member), AbstractVoucher.is_available_to_user] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:214: [E1101(no-member), AbstractVoucher.is_available_to_user] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:194: [R0912(too-many-branches), AbstractVoucher.is_available_to_user] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:233: [E1101(no-member), AbstractVoucher.is_available_for_basket] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:245: [E1101(no-member), AbstractVoucher.record_usage] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:247: [E1101(no-member), AbstractVoucher.record_usage] Instance of 'AbstractVoucher' has no 'applications' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/abstract_models.py:268: [E1101(no-member), AbstractVoucher.benefit] Instance of 'ManyToManyField' has no 'all' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0003_auto_20171212_0411.py:16: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0004_auto_20180228_0940.py:28: [C0301(line-too-long), ] Line too long (195/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0001_initial.py:22: [C0301(line-too-long), ] Line too long (167/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0001_initial.py:24: [C0301(line-too-long), ] Line too long (293/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0001_initial.py:6: [C0411(wrong-import-order), ] standard import "from decimal import Decimal" should be placed before "from django.db import models, migrations"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/voucher/migrations/0005_auto_20180402_1425.py:17: [C0301(line-too-long), ] Line too long (230/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:55: [W0222(signature-differs), AbstractWishList.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:72: [R1705(no-else-return), AbstractWishList.is_allowed_to_see] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:95: [E1101(no-member), AbstractWishList.add] Instance of 'AbstractWishList' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:97: [E1101(no-member), AbstractWishList.add] Instance of 'AbstractWishList' has no 'lines' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:127: [R1705(no-else-return), AbstractLine.get_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/abstract_models.py:128: [E1101(no-member), AbstractLine.get_title] Instance of 'ForeignKey' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0401(wildcard-import), ] Wildcard import abstract_models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import models from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import reverse from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import get_random_string from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import pgettext_lazy from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/models.py:4: [W0614(unused-wildcard-import), ] Unused import AUTH_USER_MODEL from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/migrations/0002_auto_20160111_1108.py:4: [W0611(unused-import), ] Unused models imported from django.db
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/migrations/0001_initial.py:23: [C0301(line-too-long), ] Line too long (196/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/wishlists/migrations/0001_initial.py:37: [C0301(line-too-long), ] Line too long (346/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:9: [R0902(too-many-instance-attributes), DashboardConfig] Too many instance attributes (13/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:36: [C0415(import-outside-toplevel), DashboardConfig.get_urls] Import outside toplevel (django.contrib.auth.views)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:37: [C0415(import-outside-toplevel), DashboardConfig.get_urls] Import outside toplevel (django.contrib.auth.forms.AuthenticationForm)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:20: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:22: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'catalogue_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:23: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'reports_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:24: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'orders_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:25: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'users_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:26: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'pages_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:27: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'partners_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:28: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'offers_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:29: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'ranges_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:30: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'reviews_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:31: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'vouchers_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:32: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'comms_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/apps.py:33: [W0201(attribute-defined-outside-init), DashboardConfig.ready] Attribute 'shipping_app' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:36: [R1705(no-else-return), IndexView.get_template_names] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:62: [R0914(too-many-locals), IndexView.get_hourly_report] Too many local variables (19/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:77: [W0612(unused-variable), IndexView.get_hourly_report] Unused variable 'hour'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:62: [R0912(too-many-branches), IndexView.get_hourly_report] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/views.py:298: [R1705(no-else-return), PopUpWindowDeleteMixin.delete] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/widgets.py:19: [W0231(super-init-not-called), RelatedFieldWidgetWrapper.__init__] __init__ method from base class 'Widget' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/nav.py:16: [R0205(useless-object-inheritance), Node] Class 'Node' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/nav.py:105: [W1202(logging-format-interpolation), default_access_fn] Use lazy % formatting in logging functions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/nav.py:120: [W1202(logging-format-interpolation), default_access_fn] Use lazy % formatting in logging functions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:8: [R0902(too-many-instance-attributes), VouchersDashboardConfig] Too many instance attributes (10/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:16: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:17: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:18: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:19: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:20: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'stats_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:22: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:24: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:26: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:28: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:30: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_download_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:43: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'description_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:50: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:53: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:157: [W0201(attribute-defined-outside-init), VoucherUpdateView.get_voucher] Attribute 'voucher' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:291: [W0201(attribute-defined-outside-init), VoucherSetUpdateView.get_voucherset] Attribute 'voucherset' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:365: [W0201(attribute-defined-outside-init), VoucherSetDetailView.dispatch] Attribute 'voucher_set' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:378: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'description_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:387: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:390: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/forms.py:45: [W1113(keyword-arg-before-vararg), VoucherForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/apps.py:16: [W0201(attribute-defined-outside-init), CommunicationsDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/apps.py:17: [W0201(attribute-defined-outside-init), CommunicationsDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/forms.py:27: [W1113(keyword-arg-before-vararg), CommunicationEventTypeForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/forms.py:63: [W0201(attribute-defined-outside-init), CommunicationEventTypeForm.clean_preview_order_number] Attribute 'preview_order' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:8: [R0902(too-many-instance-attributes), PartnersDashboardConfig] Too many instance attributes (9/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:16: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:17: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:18: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'manage_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:19: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:21: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_link_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:23: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_unlink_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:25: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:27: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_select_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:29: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:35: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:48: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:39: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:49: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:40: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:89: [W0201(attribute-defined-outside-init), PartnerManageView.get_object] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:136: [W0201(attribute-defined-outside-init), PartnerUserCreateView.dispatch] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:184: [R1705(no-else-return), PartnerUserSelectView.get_queryset] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:165: [W0201(attribute-defined-outside-init), PartnerUserSelectView.dispatch] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:174: [W0201(attribute-defined-outside-init), PartnerUserSelectView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:280: [W0201(attribute-defined-outside-init), PartnerUserUpdateView.get_object] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/forms.py:101: [W0221(arguments-differ), ExistingUserForm.save] Parameters differ from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:16: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:17: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:18: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:19: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:20: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'products_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:21: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'reorder_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:40: [R1705(no-else-return), RangeCreateView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:61: [W0221(arguments-differ), RangeUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:68: [R1705(no-else-return), RangeUpdateView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:120: [W0622(redefined-builtin), RangeProductListView.get_context_data] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:127: [W0622(redefined-builtin), RangeProductListView.remove_selected_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:137: [W0622(redefined-builtin), RangeProductListView.add_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:148: [W0622(redefined-builtin), RangeProductListView.handle_query_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:175: [W0622(redefined-builtin), RangeProductListView.handle_file_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:191: [W0622(redefined-builtin), RangeProductListView.create_upload_object] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:104: [W0201(attribute-defined-outside-init), RangeProductListView.post] Attribute 'object_list' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:111: [W0201(attribute-defined-outside-init), RangeProductListView.get_range] Attribute '_range' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:223: [W0622(redefined-builtin), RangeReorderView._save_page_order] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:32: [W0622(redefined-builtin), RangeProductForm.__init__] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:62: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'products' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:74: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'missing_skus' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:75: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'duplicate_skus' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:16: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:17: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'metadata_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:18: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'condition_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:19: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'benefit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:20: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'restrictions_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:22: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:23: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:45: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:58: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:49: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:59: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:61: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:50: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:114: [W0622(redefined-builtin), OfferWizardStepView._store_form_kwargs] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:144: [R1710(inconsistent-return-statements), OfferWizardStepView._fetch_object] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:172: [E1101(no-member), OfferWizardStepView.get_form_kwargs] Instance of 'OfferWizardStepView' has no 'get_instance' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:203: [R1705(no-else-return), OfferWizardStepView.form_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:244: [E1101(no-member), OfferWizardStepView.get_success_url] Instance of 'OfferWizardStepView' has no 'success_url_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:246: [E1101(no-member), OfferWizardStepView.get_success_url] Instance of 'OfferWizardStepView' has no 'success_url_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:88: [W0201(attribute-defined-outside-init), OfferWizardStepView.dispatch] Attribute 'offer' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:338: [R1705(no-else-return), OfferDetailView.post] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:337: [R1710(inconsistent-return-statements), OfferDetailView.post] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:373: [W0221(arguments-differ), OfferDetailView.render_to_response] Parameters differ from overridden 'render_to_response' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:334: [W0201(attribute-defined-outside-init), OfferDetailView.dispatch] Attribute 'offer' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/forms.py:96: [W0222(signature-differs), ConditionForm.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/forms.py:154: [W0222(signature-differs), BenefitForm.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:16: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:18: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:20: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_edit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:22: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:25: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:27: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_band_edit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:29: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_band_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:41: [W0201(attribute-defined-outside-init), WeightBasedDetailView.dispatch] Attribute 'method' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:87: [W0201(attribute-defined-outside-init), WeightBandUpdateView.dispatch] Attribute 'method' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:115: [W0201(attribute-defined-outside-init), WeightBandDeleteView.dispatch] Attribute 'method' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:24: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:25: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:26: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'shipping_address_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:28: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'line_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:29: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_stats_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:1: [C0302(too-many-lines), ] Too many lines in module (823/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:54: [R1705(no-else-return), queryset_orders_for_user] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:169: [W0622(redefined-builtin), OrderListView.get_queryset] Redefining built-in 'filter'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:141: [R0912(too-many-branches), OrderListView.get_queryset] Too many branches (30/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:236: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:243: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:250: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:261: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:272: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:281: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:291: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:300: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:309: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:319: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:329: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:214: [R0912(too-many-branches), OrderListView.get_search_filter_descriptions] Too many branches (24/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:123: [W0201(attribute-defined-outside-init), OrderListView.dispatch] Attribute 'base_queryset' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:148: [W0201(attribute-defined-outside-init), OrderListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:501: [R1705(no-else-return), OrderDetailView.handle_line_action] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:478: [R0912(too-many-branches), OrderDetailView.handle_line_action] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:459: [W0201(attribute-defined-outside-init), OrderDetailView.post] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:44: [C0330(bad-continuation), ] Wrong hanging indentation (add 22 spaces).
                'date_from': date_from,
                ^                     |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:45: [C0330(bad-continuation), ] Wrong hanging indentation (add 22 spaces).
                'date_to': date_to}
                ^                     |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:102: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:16: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:17: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:18: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:34: [W0201(attribute-defined-outside-init), ReviewListView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:80: [W0201(attribute-defined-outside-init), ReviewListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:72: [W0201(attribute-defined-outside-init), ReviewListView.get_queryset] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/utils.py:14: [R0205(useless-object-inheritance), GeneratorRepository] Class 'GeneratorRepository' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:16: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:17: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'user_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:18: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'password_reset_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:20: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:22: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:24: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:66: [R1705(no-else-return), IndexView.apply_search] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:39: [W0201(attribute-defined-outside-init), IndexView.dispatch] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:61: [W0201(attribute-defined-outside-init), IndexView.apply_search] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:132: [W0201(attribute-defined-outside-init), PasswordResetView.post] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:166: [W0201(attribute-defined-outside-init), ProductAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:8: [R0902(too-many-instance-attributes), CatalogueDashboardConfig] Too many instance attributes (23/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:26: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:28: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_lookup_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:30: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_create_redirect_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:32: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_createupdate_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:34: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:37: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:39: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:41: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:43: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:46: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:48: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_detail_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:50: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:52: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:54: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:57: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'stock_alert_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:60: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:62: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:64: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:66: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:69: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:70: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:71: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:72: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/formsets.py:91: [R1718(consider-using-set-comprehension), StockRecordFormSet.clean] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:1: [C0302(too-many-lines), ] Too many lines in module (1031/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:139: [W0201(attribute-defined-outside-init), ProductListView.apply_search] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:188: [W0221(arguments-differ), ProductCreateRedirectView.get_redirect_url] Parameters differ from overridden 'get_redirect_url' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:190: [R1705(no-else-return), ProductCreateRedirectView.get_redirect_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:236: [R1710(inconsistent-return-statements), ProductCreateUpdateView.check_objects_or_redirect] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:265: [R1705(no-else-return), ProductCreateUpdateView.get_object] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:302: [R1705(no-else-return), ProductCreateUpdateView.get_page_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:309: [R1705(no-else-return), ProductCreateUpdateView.get_page_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:343: [R1705(no-else-return), ProductCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:264: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'creating' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:270: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:277: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:284: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:274: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:278: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:283: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:329: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:375: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.forms_valid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:404: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.forms_invalid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:516: [R1705(no-else-return), ProductDeleteView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:482: [W0201(attribute-defined-outside-init), ProductDeleteView.delete] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:542: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:549: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:545: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:548: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:584: [R0205(useless-object-inheritance), CategoryListMixin] Class 'CategoryListMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:588: [R1705(no-else-return), CategoryListMixin.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:670: [E1101(no-member), ProductClassCreateUpdateView.process_all_forms] Instance of 'ProductClassCreateUpdateView' has no 'creating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:679: [R1705(no-else-return), ProductClassCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:715: [E1101(no-member), ProductClassCreateUpdateView.get_context_data] Instance of 'ProductClassCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:672: [W0201(attribute-defined-outside-init), ProductClassCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:724: [W0221(arguments-differ), ProductClassCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:746: [W0221(arguments-differ), ProductClassUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:798: [E1101(no-member), AttributeOptionGroupCreateUpdateView.process_all_forms] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'creating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:807: [R1705(no-else-return), AttributeOptionGroupCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:815: [R1705(no-else-return), AttributeOptionGroupCreateUpdateView.forms_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:815: [E1101(no-member), AttributeOptionGroupCreateUpdateView.forms_valid] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'is_popup' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:816: [E1101(no-member), AttributeOptionGroupCreateUpdateView.forms_valid] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'popup_response' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:840: [E1101(no-member), AttributeOptionGroupCreateUpdateView.get_context_data] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:800: [W0201(attribute-defined-outside-init), AttributeOptionGroupCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:854: [W0221(arguments-differ), AttributeOptionGroupCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:870: [W0221(arguments-differ), AttributeOptionGroupUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:952: [R1705(no-else-return), OptionCreateUpdateView.form_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:952: [E1101(no-member), OptionCreateUpdateView.form_valid] Instance of 'OptionCreateUpdateView' has no 'is_popup' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:953: [E1101(no-member), OptionCreateUpdateView.form_valid] Instance of 'OptionCreateUpdateView' has no 'popup_response' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:959: [E1101(no-member), OptionCreateUpdateView.get_context_data] Instance of 'OptionCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:951: [W0201(attribute-defined-outside-init), OptionCreateUpdateView.form_valid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:974: [W0221(arguments-differ), OptionCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:989: [W0221(arguments-differ), OptionUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:66: [R0912(too-many-branches), StockRecordForm.__init__] Too many branches (14/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:195: [W1113(keyword-arg-before-vararg), ProductForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:312: [W1113(keyword-arg-before-vararg), ProductImageForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/apps.py:16: [W0201(attribute-defined-outside-init), ReportsDashboardConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py:47: [R1705(no-else-return), IndexView.get] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py:62: [W0201(attribute-defined-outside-init), IndexView.set_list_view_attrs] Attribute 'object_list' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/utils.py:14: [R0205(useless-object-inheritance), GeneratorRepository] Class 'GeneratorRepository' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:12: [R0205(useless-object-inheritance), ReportGenerator] Class 'ReportGenerator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:28: [E1101(no-member), ReportGenerator.__init__] Instance of 'ReportGenerator' has no 'formatters' member; maybe 'formatter'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:87: [R0205(useless-object-inheritance), ReportFormatter] Class 'ReportFormatter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:102: [E1101(no-member), ReportFormatter.filename] Instance of 'ReportFormatter' has no 'filename_template' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:114: [E1101(no-member), ReportCSVFormatter.generate_response] Instance of 'ReportCSVFormatter' has no 'generate_csv' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:16: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:17: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:18: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:19: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:36: [W0201(attribute-defined-outside-init), PageListView.get_queryset] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:42: [W0201(attribute-defined-outside-init), PageListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:66: [R0205(useless-object-inheritance), PageCreateUpdateMixin] Class 'PageCreateUpdateMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/apps.py:16: [W0201(attribute-defined-outside-init), ReportsDashboardConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py:47: [R1705(no-else-return), IndexView.get] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py:36: [R0912(too-many-branches), IndexView.get] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/views.py:62: [W0201(attribute-defined-outside-init), IndexView.set_list_view_attrs] Attribute 'object_list' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/utils.py:14: [R0205(useless-object-inheritance), GeneratorRepository] Class 'GeneratorRepository' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:12: [R0205(useless-object-inheritance), ReportGenerator] Class 'ReportGenerator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:28: [E1101(no-member), ReportGenerator.__init__] Instance of 'ReportGenerator' has no 'formatters' member; maybe 'formatter'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:87: [R0205(useless-object-inheritance), ReportFormatter] Class 'ReportFormatter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:102: [E1101(no-member), ReportFormatter.filename] Instance of 'ReportFormatter' has no 'filename_template' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reports/reports.py:114: [E1101(no-member), ReportCSVFormatter.generate_response] Instance of 'ReportCSVFormatter' has no 'generate_csv' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:16: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'index_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:17: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'user_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:18: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'password_reset_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:20: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:22: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/apps.py:24: [W0201(attribute-defined-outside-init), UsersDashboardConfig.ready] Attribute 'alert_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:66: [R1705(no-else-return), IndexView.apply_search] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:39: [W0201(attribute-defined-outside-init), IndexView.dispatch] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:61: [W0201(attribute-defined-outside-init), IndexView.apply_search] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:132: [W0201(attribute-defined-outside-init), PasswordResetView.post] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:162: [R0912(too-many-branches), ProductAlertListView.get_queryset] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/users/views.py:166: [W0201(attribute-defined-outside-init), ProductAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:24: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:25: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:26: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'shipping_address_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:28: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'line_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/apps.py:29: [W0201(attribute-defined-outside-init), OrdersDashboardConfig.ready] Attribute 'order_stats_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:1: [C0302(too-many-lines), ] Too many lines in module (823/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:54: [R1705(no-else-return), queryset_orders_for_user] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:169: [W0622(redefined-builtin), OrderListView.get_queryset] Redefining built-in 'filter'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:141: [R0912(too-many-branches), OrderListView.get_queryset] Too many branches (45/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:236: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:243: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:250: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:261: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:272: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:281: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:291: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:300: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:309: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:319: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:329: [E1101(no-member), OrderListView.get_search_filter_descriptions] Instance of '__proxy__' has no 'format' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:214: [R0912(too-many-branches), OrderListView.get_search_filter_descriptions] Too many branches (36/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:359: [R0912(too-many-branches), OrderListView.download_selected_orders] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:403: [R0912(too-many-branches), OrderListView.change_order_status] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:123: [W0201(attribute-defined-outside-init), OrderListView.dispatch] Attribute 'base_queryset' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:148: [W0201(attribute-defined-outside-init), OrderListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:501: [R1705(no-else-return), OrderDetailView.handle_line_action] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:478: [R0912(too-many-branches), OrderDetailView.handle_line_action] Too many branches (21/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:634: [R0912(too-many-branches), OrderDetailView.change_line_statuses] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:664: [R0912(too-many-branches), OrderDetailView.create_shipping_event] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/views.py:459: [W0201(attribute-defined-outside-init), OrderDetailView.post] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:44: [C0330(bad-continuation), ] Wrong hanging indentation (add 22 spaces).
                'date_from': date_from,
                ^                     |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:45: [C0330(bad-continuation), ] Wrong hanging indentation (add 22 spaces).
                'date_to': date_to}
                ^                     |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:102: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:29: [R0912(too-many-branches), OrderStatsForm._determine_filter_metadata] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/orders/forms.py:98: [R0912(too-many-branches), OrderSearchForm.__init__] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:8: [R0902(too-many-instance-attributes), CatalogueDashboardConfig] Too many instance attributes (23/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:26: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:28: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_lookup_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:30: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_create_redirect_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:32: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_createupdate_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:34: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:37: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:39: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:41: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:43: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'product_class_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:46: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:48: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_detail_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:50: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:52: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:54: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'category_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:57: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'stock_alert_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:60: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:62: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:64: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:66: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'attribute_option_group_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:69: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:70: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:71: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/apps.py:72: [W0201(attribute-defined-outside-init), CatalogueDashboardConfig.ready] Attribute 'option_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/formsets.py:91: [R1718(consider-using-set-comprehension), StockRecordFormSet.clean] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:1: [C0302(too-many-lines), ] Too many lines in module (1031/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:132: [R0912(too-many-branches), ProductListView.apply_search] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:139: [W0201(attribute-defined-outside-init), ProductListView.apply_search] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:188: [W0221(arguments-differ), ProductCreateRedirectView.get_redirect_url] Parameters differ from overridden 'get_redirect_url' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:190: [R1705(no-else-return), ProductCreateRedirectView.get_redirect_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:236: [R1710(inconsistent-return-statements), ProductCreateUpdateView.check_objects_or_redirect] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:265: [R1705(no-else-return), ProductCreateUpdateView.get_object] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:302: [R1705(no-else-return), ProductCreateUpdateView.get_page_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:309: [R1705(no-else-return), ProductCreateUpdateView.get_page_title] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:300: [R0912(too-many-branches), ProductCreateUpdateView.get_page_title] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:343: [R1705(no-else-return), ProductCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:264: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'creating' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:270: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:277: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:284: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:274: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:278: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:283: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.get_object] Attribute 'product_class' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:329: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:375: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.forms_valid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:404: [W0201(attribute-defined-outside-init), ProductCreateUpdateView.forms_invalid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:516: [R1705(no-else-return), ProductDeleteView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:482: [W0201(attribute-defined-outside-init), ProductDeleteView.delete] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:542: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:549: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:545: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:548: [W0201(attribute-defined-outside-init), StockAlertListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:584: [R0205(useless-object-inheritance), CategoryListMixin] Class 'CategoryListMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:588: [R1705(no-else-return), CategoryListMixin.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:670: [E1101(no-member), ProductClassCreateUpdateView.process_all_forms] Instance of 'ProductClassCreateUpdateView' has no 'creating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:679: [R1705(no-else-return), ProductClassCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:715: [E1101(no-member), ProductClassCreateUpdateView.get_context_data] Instance of 'ProductClassCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:672: [W0201(attribute-defined-outside-init), ProductClassCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:724: [W0221(arguments-differ), ProductClassCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:746: [W0221(arguments-differ), ProductClassUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:798: [E1101(no-member), AttributeOptionGroupCreateUpdateView.process_all_forms] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'creating' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:807: [R1705(no-else-return), AttributeOptionGroupCreateUpdateView.process_all_forms] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:815: [R1705(no-else-return), AttributeOptionGroupCreateUpdateView.forms_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:815: [E1101(no-member), AttributeOptionGroupCreateUpdateView.forms_valid] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'is_popup' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:816: [E1101(no-member), AttributeOptionGroupCreateUpdateView.forms_valid] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'popup_response' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:840: [E1101(no-member), AttributeOptionGroupCreateUpdateView.get_context_data] Instance of 'AttributeOptionGroupCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:800: [W0201(attribute-defined-outside-init), AttributeOptionGroupCreateUpdateView.process_all_forms] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:854: [W0221(arguments-differ), AttributeOptionGroupCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:870: [W0221(arguments-differ), AttributeOptionGroupUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:952: [R1705(no-else-return), OptionCreateUpdateView.form_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:952: [E1101(no-member), OptionCreateUpdateView.form_valid] Instance of 'OptionCreateUpdateView' has no 'is_popup' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:953: [E1101(no-member), OptionCreateUpdateView.form_valid] Instance of 'OptionCreateUpdateView' has no 'popup_response' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:959: [E1101(no-member), OptionCreateUpdateView.get_context_data] Instance of 'OptionCreateUpdateView' has no 'get_title' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:951: [W0201(attribute-defined-outside-init), OptionCreateUpdateView.form_valid] Attribute 'object' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:974: [W0221(arguments-differ), OptionCreateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/views.py:989: [W0221(arguments-differ), OptionUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:66: [R0912(too-many-branches), StockRecordForm.__init__] Too many branches (21/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:195: [W1113(keyword-arg-before-vararg), ProductForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/catalogue/forms.py:312: [W1113(keyword-arg-before-vararg), ProductImageForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:16: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:17: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'metadata_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:18: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'condition_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:19: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'benefit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:20: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'restrictions_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:22: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/apps.py:23: [W0201(attribute-defined-outside-init), OffersDashboardConfig.ready] Attribute 'detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:45: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:58: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:49: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:59: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:61: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:50: [W0201(attribute-defined-outside-init), OfferListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:114: [W0622(redefined-builtin), OfferWizardStepView._store_form_kwargs] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:144: [R1710(inconsistent-return-statements), OfferWizardStepView._fetch_object] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:172: [E1101(no-member), OfferWizardStepView.get_form_kwargs] Instance of 'OfferWizardStepView' has no 'get_instance' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:203: [R1705(no-else-return), OfferWizardStepView.form_valid] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:244: [E1101(no-member), OfferWizardStepView.get_success_url] Instance of 'OfferWizardStepView' has no 'success_url_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:246: [E1101(no-member), OfferWizardStepView.get_success_url] Instance of 'OfferWizardStepView' has no 'success_url_name' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:88: [W0201(attribute-defined-outside-init), OfferWizardStepView.dispatch] Attribute 'offer' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:338: [R1705(no-else-return), OfferDetailView.post] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:337: [R1710(inconsistent-return-statements), OfferDetailView.post] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:373: [W0221(arguments-differ), OfferDetailView.render_to_response] Parameters differ from overridden 'render_to_response' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/views.py:334: [W0201(attribute-defined-outside-init), OfferDetailView.dispatch] Attribute 'offer' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/forms.py:96: [W0222(signature-differs), ConditionForm.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/offers/forms.py:154: [W0222(signature-differs), BenefitForm.save] Signature differs from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:8: [R0902(too-many-instance-attributes), PartnersDashboardConfig] Too many instance attributes (9/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:16: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:17: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:18: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'manage_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:19: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:21: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_link_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:23: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_unlink_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:25: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:27: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_select_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/apps.py:29: [W0201(attribute-defined-outside-init), PartnersDashboardConfig.ready] Attribute 'user_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:35: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:48: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'description' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:39: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:49: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'is_filtered' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:40: [W0201(attribute-defined-outside-init), PartnerListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:89: [W0201(attribute-defined-outside-init), PartnerManageView.get_object] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:136: [W0201(attribute-defined-outside-init), PartnerUserCreateView.dispatch] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:184: [R1705(no-else-return), PartnerUserSelectView.get_queryset] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:165: [W0201(attribute-defined-outside-init), PartnerUserSelectView.dispatch] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:174: [W0201(attribute-defined-outside-init), PartnerUserSelectView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/views.py:280: [W0201(attribute-defined-outside-init), PartnerUserUpdateView.get_object] Attribute 'partner' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/partners/forms.py:101: [W0221(arguments-differ), ExistingUserForm.save] Parameters differ from overridden 'save' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:16: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:17: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:18: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/apps.py:19: [W0201(attribute-defined-outside-init), PagesDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:36: [W0201(attribute-defined-outside-init), PageListView.get_queryset] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:42: [W0201(attribute-defined-outside-init), PageListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/pages/views.py:66: [R0205(useless-object-inheritance), PageCreateUpdateMixin] Class 'PageCreateUpdateMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:16: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:17: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:18: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:19: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:20: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'products_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/apps.py:21: [W0201(attribute-defined-outside-init), RangesDashboardConfig.ready] Attribute 'reorder_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:40: [R1705(no-else-return), RangeCreateView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:61: [W0221(arguments-differ), RangeUpdateView.get_object] Parameters differ from overridden 'get_object' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:68: [R1705(no-else-return), RangeUpdateView.get_success_url] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:120: [W0622(redefined-builtin), RangeProductListView.get_context_data] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:127: [W0622(redefined-builtin), RangeProductListView.remove_selected_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:137: [W0622(redefined-builtin), RangeProductListView.add_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:148: [W0622(redefined-builtin), RangeProductListView.handle_query_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:175: [W0622(redefined-builtin), RangeProductListView.handle_file_products] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:191: [W0622(redefined-builtin), RangeProductListView.create_upload_object] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:104: [W0201(attribute-defined-outside-init), RangeProductListView.post] Attribute 'object_list' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:111: [W0201(attribute-defined-outside-init), RangeProductListView.get_range] Attribute '_range' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/views.py:223: [W0622(redefined-builtin), RangeReorderView._save_page_order] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:32: [W0622(redefined-builtin), RangeProductForm.__init__] Redefining built-in 'range'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:62: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'products' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:74: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'missing_skus' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/ranges/forms.py:75: [W0201(attribute-defined-outside-init), RangeProductForm.clean_query] Attribute 'duplicate_skus' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:16: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:17: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/apps.py:18: [W0201(attribute-defined-outside-init), ReviewsDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:34: [W0201(attribute-defined-outside-init), ReviewListView.get] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:80: [W0201(attribute-defined-outside-init), ReviewListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/views.py:72: [W0201(attribute-defined-outside-init), ReviewListView.get_queryset] Attribute 'desc_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/reviews/utils.py:14: [R0205(useless-object-inheritance), GeneratorRepository] Class 'GeneratorRepository' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:8: [R0902(too-many-instance-attributes), VouchersDashboardConfig] Too many instance attributes (10/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:16: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:17: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:18: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:19: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:20: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'stats_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:22: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:24: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:26: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:28: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/apps.py:30: [W0201(attribute-defined-outside-init), VouchersDashboardConfig.ready] Attribute 'set_download_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:37: [R0912(too-many-branches), VoucherListView.get_queryset] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:43: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'description_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:50: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:53: [W0201(attribute-defined-outside-init), VoucherListView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:157: [W0201(attribute-defined-outside-init), VoucherUpdateView.get_voucher] Attribute 'voucher' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:291: [W0201(attribute-defined-outside-init), VoucherSetUpdateView.get_voucherset] Attribute 'voucherset' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:365: [W0201(attribute-defined-outside-init), VoucherSetDetailView.dispatch] Attribute 'voucher_set' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:378: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'description_ctx' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:387: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/views.py:390: [W0201(attribute-defined-outside-init), VoucherSetDetailView.get_queryset] Attribute 'form' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/vouchers/forms.py:45: [W1113(keyword-arg-before-vararg), VoucherForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/apps.py:16: [W0201(attribute-defined-outside-init), CommunicationsDashboardConfig.ready] Attribute 'list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/apps.py:17: [W0201(attribute-defined-outside-init), CommunicationsDashboardConfig.ready] Attribute 'update_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/forms.py:27: [W1113(keyword-arg-before-vararg), CommunicationEventTypeForm.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/communications/forms.py:63: [W0201(attribute-defined-outside-init), CommunicationEventTypeForm.clean_preview_order_number] Attribute 'preview_order' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:16: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_list_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:18: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_create_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:20: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_edit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:22: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:25: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_method_detail_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:27: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_band_edit_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/apps.py:29: [W0201(attribute-defined-outside-init), ShippingDashboardConfig.ready] Attribute 'weight_band_delete_view' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:41: [W0201(attribute-defined-outside-init), WeightBasedDetailView.dispatch] Attribute 'method' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:87: [W0201(attribute-defined-outside-init), WeightBandUpdateView.dispatch] Attribute 'method' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/oscar/apps/dashboard/shipping/views.py:115: [W0201(attribute-defined-outside-init), WeightBandDeleteView.dispatch] Attribute 'method' defined outside __init__
************* Module widget_tweaks.tests
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/widget_tweaks/tests.py:185: [W0511(fixme), ] XXX can be dropped once 1.8 is not supported
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/widget_tweaks/tests.py:282: [W0511(fixme), ] XXX can be dropped once 1.8 is not supported
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/widget_tweaks/tests.py:421: [E0102(function-redefined), RenderFieldTagFieldReuseTest.test_field_double_rendering_simple] method already defined line 359
************* Module widget_tweaks.templatetags.widget_tweaks
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/widget_tweaks/templatetags/widget_tweaks.py:129: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
        hasattr(field, "field")
        ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/widget_tweaks/templatetags/widget_tweaks.py:130: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
        and hasattr(field.field, "widget")
        ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/widget_tweaks/templatetags/widget_tweaks.py:131: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
        and field.field.widget
        ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/widget_tweaks/templatetags/widget_tweaks.py:173: [W0612(unused-variable), render_field] Unused variable 'tag_name'
************* Module haystack
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/__init__.py:9: [C0411(wrong-import-order), ] third party import "from haystack import signals" should be placed before "from pkg_resources import DistributionNotFound, get_distribution, parse_version"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/__init__.py:10: [C0411(wrong-import-order), ] third party import "from haystack.constants import DEFAULT_ALIAS" should be placed before "from pkg_resources import DistributionNotFound, get_distribution, parse_version"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/__init__.py:11: [C0411(wrong-import-order), ] third party import "from haystack.utils import loading" should be placed before "from pkg_resources import DistributionNotFound, get_distribution, parse_version"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/__init__.py:65: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module haystack.admin
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:126: [C0330(bad-continuation), ] Wrong continued indentation (add 23 spaces).
            'of %(count)d selected', len(changelist.result_list))
            ^                      |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:128: [C0330(bad-continuation), ] Wrong continued indentation (add 27 spaces).
            'All %(total_count)s selected', changelist.result_count)
            ^                          |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:26: [C0415(import-outside-toplevel), list_max_show_all] Import outside toplevel (django.contrib.admin.views.main.MAX_SHOW_ALL_ALLOWED)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:32: [R0902(too-many-instance-attributes), SearchChangeList] Too many instance attributes (8/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:37: [R1710(inconsistent-return-statements), SearchChangeList.get_results] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:113: [W0201(attribute-defined-outside-init), SearchModelAdminMixin.changelist_view] Attribute 'formset' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:69: [R0205(useless-object-inheritance), SearchModelAdminMixin] Class 'SearchModelAdminMixin' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/admin.py:113: [W0612(unused-variable), SearchModelAdminMixin.changelist_view] Unused variable 'formset'
************* Module haystack.indexes
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:223: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:1: [C0302(too-many-lines), ] Too many lines in module (501/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0401(wildcard-import), ] Wildcard import haystack.fields
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:59: [C0121(singleton-comparison), DeclarativeMetaclass.__new__] Comparison to True should be just 'expr'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:21: [R0912(too-many-branches), DeclarativeMetaclass.__new__] Too many branches (13/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:107: [E1101(no-member), SearchIndex.__init__] Instance of 'SearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:113: [C0113(unneeded-not), SearchIndex.__init__] Consider changing "not len(content_fields) == 1" to "len(content_fields) != 1"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:154: [E1128(assignment-from-none), SearchIndex.build_queryset] Assigning result of a function call, where the function returns None
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:175: [E1101(no-member), SearchIndex.build_queryset] Instance of 'SearchIndex' has no 'get_queryset' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:196: [E1101(no-member), SearchIndex.prepare] Instance of 'SearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:210: [E1101(no-member), SearchIndex.full_prepare] Instance of 'SearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:213: [E1101(no-member), SearchIndex.full_prepare] Instance of 'SearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:229: [E1101(no-member), SearchIndex.get_content_field] Instance of 'SearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:227: [R1710(inconsistent-return-statements), SearchIndex.get_content_field] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:229: [W0612(unused-variable), SearchIndex.get_content_field] Unused variable 'field_name'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:236: [E1101(no-member), SearchIndex.get_field_weights] Instance of 'SearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:360: [W0223(abstract-method), BasicSearchIndex] Method 'get_model' is abstract in class 'SearchIndex' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:427: [E1101(no-member), ModelSearchIndex.__init__] Instance of 'ModelSearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:429: [E1101(no-member), ModelSearchIndex.__init__] Instance of 'ModelSearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:433: [C0113(unneeded-not), ModelSearchIndex.__init__] Consider changing "not len(content_fields) == 1" to "len(content_fields) != 1"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:471: [E1101(no-member), ModelSearchIndex.get_fields] Instance of 'ModelSearchIndex' has no 'fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:14: [W0611(unused-import), ] Unused Indexable imported from haystack.constants
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import re from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import NOT_PROVIDED from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import DATE_REGEX from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import DATETIME_REGEX from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import LocationField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import NgramField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import EdgeNgramField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import DecimalField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import DateField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetCharField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetIntegerField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetFloatField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetDecimalField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetBooleanField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetDateField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetDateTimeField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import FacetMultiValueField from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import loader from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import datetime_safe from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import six from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import get_model_ct_tuple from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/indexes.py:15: [W0614(unused-wildcard-import), ] Unused import ismethod from wildcard import
************* Module haystack.routers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/routers.py:8: [R0205(useless-object-inheritance), BaseRouter] Class 'BaseRouter' inherits from object, can be safely removed from bases in python3
************* Module haystack.fields
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:172: [C0301(line-too-long), ] Line too long (175/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:394: [C0301(line-too-long), ] Line too long (163/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:462: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:26: [R0205(useless-object-inheritance), SearchField] Class 'SearchField' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:26: [R0902(too-many-instance-attributes), SearchField] Too many instance attributes (14/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:30: [R0913(too-many-arguments), SearchField.__init__] Too many arguments (14/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:82: [R1705(no-else-return), SearchField.prepare] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:90: [R1705(no-else-return), SearchField.prepare] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:95: [R1705(no-else-return), SearchField.prepare] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:151: [R1705(no-else-return), SearchField.get_iterable_objects] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:219: [C0415(import-outside-toplevel), LocationField.prepare] Import outside toplevel (haystack.utils.geo.ensure_point)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:231: [C0415(import-outside-toplevel), LocationField.convert] Import outside toplevel (haystack.utils.geo.ensure_point, haystack.utils.geo.Point)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:364: [R1705(no-else-return), DateField.convert] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:392: [R1705(no-else-return), DateTimeField.convert] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/fields.py:12: [C0411(wrong-import-order), ] standard import "from inspect import ismethod" should be placed before "from django.template import loader"
************* Module haystack.panels
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:7: [E0401(import-error), ] Unable to import 'debug_toolbar.panels'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:24: [E1003(bad-super-call), HaystackDebugPanel.__init__] Bad first argument 'self.__class__' given to super()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:46: [E1101(no-member), HaystackDebugPanel.nav_subtitle] Instance of 'dict' has no 'itervalues' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:5: [W0611(unused-import), ] Unused import datetime
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:8: [C0411(wrong-import-order), ] third party import "from django.template.loader import render_to_string" should be placed before "from debug_toolbar.panels import DebugPanel"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:9: [C0411(wrong-import-order), ] third party import "from django.utils import six" should be placed before "from debug_toolbar.panels import DebugPanel"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:10: [C0411(wrong-import-order), ] third party import "from django.utils.translation import ugettext_lazy as _" should be placed before "from debug_toolbar.panels import DebugPanel"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/panels.py:12: [C0411(wrong-import-order), ] third party import "from haystack import connections" should be placed before "from debug_toolbar.panels import DebugPanel"
************* Module haystack.signals
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/signals.py:54: [W0511(fixme), ] TODO: Maybe log it or let the exception bubble?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/signals.py:69: [W0511(fixme), ] TODO: Maybe log it or let the exception bubble?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/signals.py:10: [R0205(useless-object-inheritance), BaseSignalProcessor] Class 'BaseSignalProcessor' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/signals.py:30: [W0107(unnecessary-pass), BaseSignalProcessor.setup] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/signals.py:40: [W0107(unnecessary-pass), BaseSignalProcessor.teardown] Unnecessary pass statement
************* Module haystack.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:186: [C0301(line-too-long), ] Line too long (164/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:16: [R0205(useless-object-inheritance), SearchView] Class 'SearchView' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:16: [R0902(too-many-instance-attributes), SearchView] Too many instance attributes (9/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:64: [C1801(len-as-condition), SearchView.build_form] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:108: [W0104(pointless-statement), SearchView.build_page] Statement seems to have no effect
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:119: [E0102(function-redefined), SearchView.extra_context] method already defined line 18
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:155: [W1113(keyword-arg-before-vararg), search_view_factory] Keyword argument before variable positional arguments list in the definition of search_view_factory function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/views.py:180: [E1102(not-callable), FacetedSearchView.extra_context] super(FacetedSearchView, self).extra_context is not callable
************* Module haystack.generic_views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/generic_views.py:125: [R1705(no-else-return), SearchView.get] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/generic_views.py:136: [W0107(unnecessary-pass), FacetedSearchView] Unnecessary pass statement
************* Module haystack.constants
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/constants.py:34: [R0205(useless-object-inheritance), Indexable] Class 'Indexable' inherits from object, can be safely removed from bases in python3
************* Module haystack.manager
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/manager.py:71: [C0326(bad-whitespace), ] Exactly one space required after comma
        return self.get_search_queryset().raw_search(query_string,  **kwargs)
                                                                 ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/manager.py:8: [R0205(useless-object-inheritance), SearchIndexManager] Class 'SearchIndexManager' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/manager.py:82: [E0202(method-hidden), SearchIndexManager.using] An attribute defined in haystack.manager line 11 hides this method
************* Module haystack.query
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:1: [C0302(too-many-lines), ] Too many lines in module (765/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:18: [R0205(useless-object-inheritance), SearchQuerySet] Class 'SearchQuerySet' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:18: [R0902(too-many-instance-attributes), SearchQuerySet] Too many instance attributes (10/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:313: [R1705(no-else-return), SearchQuerySet.__getitem__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:329: [R1705(no-else-return), SearchQuerySet.filter] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:506: [E1101(no-member), SearchQuerySet.autocomplete] Instance of '_MovedItems' has no 'reduce' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:548: [R1705(no-else-return), SearchQuerySet.facet_counts] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:558: [R1705(no-else-return), SearchQuerySet.stats_results] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:586: [R1705(no-else-return), SearchQuerySet.spelling_suggestion] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:617: [W0201(attribute-defined-outside-init), SearchQuerySet.values_list] Attribute '_flat' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:649: [W0221(arguments-differ), EmptySearchQuerySet._fill_cache] Parameters differ from overridden '_fill_cache' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:677: [W0221(arguments-differ), ValuesListSearchQuerySet._fill_cache] Parameters differ from overridden '_fill_cache' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:711: [E1003(bad-super-call), ValuesSearchQuerySet._fill_cache] Bad first argument 'ValuesListSearchQuerySet' given to super()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/query.py:733: [R1705(no-else-return), RelatedSearchQuerySet._load_model_objects] Unnecessary "else" after "return"
************* Module haystack.inputs
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/inputs.py:12: [R0205(useless-object-inheritance), BaseInput] Class 'BaseInput' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/inputs.py:109: [R1724(no-else-continue), AutoQuery.prepare] Unnecessary "elif" after "continue"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/inputs.py:141: [W0231(super-init-not-called), AltParser.__init__] __init__ method from base class 'BaseInput' is not called
************* Module haystack.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:122: [C0301(line-too-long), ] Line too long (178/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:128: [C0301(line-too-long), ] Line too long (162/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:223: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:24: [R0205(useless-object-inheritance), SearchResult] Class 'SearchResult' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:24: [R0902(too-many-instance-attributes), SearchResult] Too many instance attributes (13/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:67: [C0415(import-outside-toplevel), SearchResult._get_searchindex] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:114: [C0415(import-outside-toplevel), SearchResult._get_distance] Import outside toplevel (haystack.utils.geo.Distance)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:197: [C0415(import-outside-toplevel), SearchResult.get_stored_fields] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:196: [E0203(access-member-before-definition), SearchResult.get_stored_fields] Access to member '_stored_fields' before its definition line 205
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:205: [W0201(attribute-defined-outside-init), SearchResult.get_stored_fields] Attribute '_stored_fields' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/models.py:235: [C0415(import-outside-toplevel), reload_indexes] Import outside toplevel (haystack.connections)
************* Module haystack.exceptions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:8: [W0107(unnecessary-pass), HaystackError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:13: [W0107(unnecessary-pass), SearchBackendError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:18: [W0107(unnecessary-pass), SearchFieldError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:23: [W0107(unnecessary-pass), MissingDependency] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:28: [W0107(unnecessary-pass), NotHandled] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:33: [W0107(unnecessary-pass), MoreLikeThisError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:38: [W0107(unnecessary-pass), FacetingError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:43: [W0107(unnecessary-pass), SpatialError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:48: [W0107(unnecessary-pass), StatsError] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/exceptions.py:53: [W0107(unnecessary-pass), SkipDocument] Unnecessary pass statement
************* Module haystack.backends.elasticsearch_backend
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:707: [W0511(fixme), ] TODO: Be stricter.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:464: [C0330(bad-continuation), ] Wrong hanging indentation (remove 4 spaces).
                        'dist': dwithin['distance'].km,
                    |   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:465: [C0330(bad-continuation), ] Wrong hanging indentation (remove 4 spaces).
                        'unit': "km"
                    |   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:637: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:638: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:1: [C0302(too-many-lines), ] Too many lines in module (979/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:41: [W0223(abstract-method), ElasticsearchSearchBackend] Method 'extract_file_contents' is abstract in class 'BaseSearchBackend' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:106: [C0113(unneeded-not), ElasticsearchSearchBackend.__init__] Consider changing "not 'URL' in connection_options" to "'URL' not in connection_options"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:109: [C0113(unneeded-not), ElasticsearchSearchBackend.__init__] Consider changing "not 'INDEX_NAME' in connection_options" to "'INDEX_NAME' not in connection_options"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:129: [W0703(broad-except), ElasticsearchSearchBackend.setup] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:147: [W0703(broad-except), ElasticsearchSearchBackend.setup] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:195: [W0221(arguments-differ), ElasticsearchSearchBackend.remove] Parameters differ from overridden 'remove' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:254: [R0913(too-many-arguments), ElasticsearchSearchBackend.build_search_kwargs] Too many arguments (18/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:254: [R0914(too-many-locals), ElasticsearchSearchBackend.build_search_kwargs] Too many local variables (44/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:413: [C1801(len-as-condition), ElasticsearchSearchBackend.build_search_kwargs] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:438: [C0415(import-outside-toplevel), ElasticsearchSearchBackend.build_search_kwargs] Import outside toplevel (haystack.utils.geo.generate_bounding_box)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:254: [R0912(too-many-branches), ElasticsearchSearchBackend.build_search_kwargs] Too many branches (36/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:254: [R0915(too-many-statements), ElasticsearchSearchBackend.build_search_kwargs] Too many statements (81/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:538: [W0221(arguments-differ), ElasticsearchSearchBackend.more_like_this] Parameters differ from overridden 'more_like_this' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:538: [R0914(too-many-locals), ElasticsearchSearchBackend.more_like_this] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:541: [C0415(import-outside-toplevel), ElasticsearchSearchBackend.more_like_this] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:574: [R0914(too-many-locals), ElasticsearchSearchBackend._process_results] Too many local variables (30/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:577: [C0415(import-outside-toplevel), ElasticsearchSearchBackend._process_results] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:600: [R1705(no-else-return), ElasticsearchSearchBackend._process_results.from_timestamp] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:647: [C0415(import-outside-toplevel), ElasticsearchSearchBackend._process_results] Import outside toplevel (haystack.utils.geo.Distance)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:574: [R0912(too-many-branches), ElasticsearchSearchBackend._process_results] Too many branches (18/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:574: [R0915(too-many-statements), ElasticsearchSearchBackend._process_results] Too many statements (51/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:671: [W0612(unused-variable), ElasticsearchSearchBackend.build_schema] Unused variable 'field_name'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:696: [R1705(no-else-return), ElasticsearchSearchBackend._iso_datetime] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:689: [R1710(inconsistent-return-statements), ElasticsearchSearchBackend._iso_datetime] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:704: [R1705(no-else-return), ElasticsearchSearchBackend._from_python] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:744: [W0703(broad-except), ElasticsearchSearchBackend._to_python] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:737: [W0123(eval-used), ElasticsearchSearchBackend._to_python] Use of eval
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:134: [W0201(attribute-defined-outside-init), ElasticsearchSearchBackend.setup] Attribute 'content_field_name' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:776: [C0415(import-outside-toplevel), ElasticsearchSearchQuery.build_query_fragment] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:863: [C1801(len-as-condition), ElasticsearchSearchQuery.build_query_fragment] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:775: [R0912(too-many-branches), ElasticsearchSearchQuery.build_query_fragment] Too many branches (28/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:775: [R0915(too-many-statements), ElasticsearchSearchQuery.build_query_fragment] Too many statements (57/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch_backend.py:883: [R0912(too-many-branches), ElasticsearchSearchQuery.build_params] Too many branches (17/12)
************* Module haystack.backends.simple_backend
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:39: [W0223(abstract-method), SimpleSearchBackend] Method 'build_schema' is abstract in class 'BaseSearchBackend' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:39: [W0223(abstract-method), SimpleSearchBackend] Method 'build_search_kwargs' is abstract in class 'BaseSearchBackend' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:39: [W0223(abstract-method), SimpleSearchBackend] Method 'extract_file_contents' is abstract in class 'BaseSearchBackend' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:40: [W0221(arguments-differ), SimpleSearchBackend.update] Parameters differ from overridden 'update' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:43: [W0221(arguments-differ), SimpleSearchBackend.remove] Parameters differ from overridden 'remove' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:50: [R0914(too-many-locals), SimpleSearchBackend.search] Too many local variables (16/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:79: [E1101(no-member), SimpleSearchBackend.search] Instance of '_MovedItems' has no 'reduce' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:62: [R1702(too-many-nested-blocks), SimpleSearchBackend.search] Too many nested blocks (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:97: [W0221(arguments-differ), SimpleSearchBackend.prep_value] Parameters differ from overridden 'prep_value' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:100: [W0221(arguments-differ), SimpleSearchBackend.more_like_this] Parameters differ from overridden 'more_like_this' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/simple_backend.py:109: [W0223(abstract-method), SimpleSearchQuery] Method 'build_query_fragment' is abstract in class 'BaseSearchQuery' but is not overridden
************* Module haystack.backends.whoosh_backend
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\.'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:49: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:161: [C0301(line-too-long), ] Line too long (164/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:623: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:624: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:732: [C0301(line-too-long), ] Line too long (161/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:1: [C0302(too-many-lines), ] Too many lines in module (904/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:37: [E0401(import-error), ] Unable to import 'whoosh'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:37: [C0413(wrong-import-position), ] Import "from whoosh import index" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:38: [E0401(import-error), ] Unable to import 'whoosh.analysis'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:38: [C0413(wrong-import-position), ] Import "from whoosh.analysis import StemmingAnalyzer" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:39: [E0401(import-error), ] Unable to import 'whoosh.fields'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:39: [C0413(wrong-import-position), ] Import "from whoosh.fields import ID as WHOOSH_ID" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:40: [E0401(import-error), ] Unable to import 'whoosh.fields'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:40: [C0413(wrong-import-position), ] Import "from whoosh.fields import BOOLEAN, DATETIME, IDLIST, KEYWORD, NGRAM, NGRAMWORDS, NUMERIC, Schema, TEXT" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:41: [E0401(import-error), ] Unable to import 'whoosh.filedb.filestore'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:41: [C0413(wrong-import-position), ] Import "from whoosh.filedb.filestore import FileStorage, RamStorage" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:42: [E0401(import-error), ] Unable to import 'whoosh.highlight'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:42: [C0413(wrong-import-position), ] Import "from whoosh.highlight import highlight as whoosh_highlight" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:43: [E0401(import-error), ] Unable to import 'whoosh.highlight'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:43: [C0413(wrong-import-position), ] Import "from whoosh.highlight import ContextFragmenter, HtmlFormatter" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:44: [E0401(import-error), ] Unable to import 'whoosh.qparser'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:44: [C0413(wrong-import-position), ] Import "from whoosh.qparser import QueryParser" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:45: [E0401(import-error), ] Unable to import 'whoosh.searching'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:45: [C0413(wrong-import-position), ] Import "from whoosh.searching import ResultsPage" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:46: [E0401(import-error), ] Unable to import 'whoosh.writing'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:46: [C0413(wrong-import-position), ] Import "from whoosh.writing import AsyncWriter" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:63: [W0223(abstract-method), WhooshSearchBackend] Method 'build_search_kwargs' is abstract in class 'BaseSearchBackend' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:63: [W0223(abstract-method), WhooshSearchBackend] Method 'extract_file_contents' is abstract in class 'BaseSearchBackend' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:63: [R0902(too-many-instance-attributes), WhooshSearchBackend] Too many instance attributes (10/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:98: [C0415(import-outside-toplevel), WhooshSearchBackend.setup] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:112: [W0603(global-statement), WhooshSearchBackend.setup] Using the global statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:143: [W0612(unused-variable), WhooshSearchBackend.build_schema] Unused variable 'field_name'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:132: [R0912(too-many-branches), WhooshSearchBackend.build_schema] Too many branches (13/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:176: [W0621(redefined-outer-name), WhooshSearchBackend.update] Redefining name 'index' from outer scope (line 37)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:200: [W0703(broad-except), WhooshSearchBackend.update] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:215: [W0221(arguments-differ), WhooshSearchBackend.remove] Parameters differ from overridden 'remove' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:224: [W0703(broad-except), WhooshSearchBackend.remove] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:249: [W0703(broad-except), WhooshSearchBackend.clear] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:302: [W0221(arguments-differ), WhooshSearchBackend.search] Parameters differ from overridden 'search' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:302: [R0913(too-many-arguments), WhooshSearchBackend.search] Too many arguments (18/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:302: [R0914(too-many-locals), WhooshSearchBackend.search] Too many local variables (36/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:373: [C1801(len-as-condition), WhooshSearchBackend.search] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:411: [R1705(no-else-return), WhooshSearchBackend.search] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:302: [R0911(too-many-return-statements), WhooshSearchBackend.search] Too many return statements (8/6)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:302: [R0912(too-many-branches), WhooshSearchBackend.search] Too many branches (38/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:302: [R0915(too-many-statements), WhooshSearchBackend.search] Too many statements (79/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:481: [W0221(arguments-differ), WhooshSearchBackend.more_like_this] Parameters differ from overridden 'more_like_this' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:481: [R0914(too-many-locals), WhooshSearchBackend.more_like_this] Too many local variables (24/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:495: [C1801(len-as-condition), WhooshSearchBackend.more_like_this] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:546: [C1801(len-as-condition), WhooshSearchBackend.more_like_this] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:481: [R0912(too-many-branches), WhooshSearchBackend.more_like_this] Too many branches (21/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:481: [R0915(too-many-statements), WhooshSearchBackend.more_like_this] Too many statements (54/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:608: [W0621(redefined-outer-name), WhooshSearchBackend._process_results] Redefining name 'index' from outer scope (line 37)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:584: [R0914(too-many-locals), WhooshSearchBackend._process_results] Too many local variables (29/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:585: [C0415(import-outside-toplevel), WhooshSearchBackend._process_results] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:614: [R0123(literal-comparison), WhooshSearchBackend._process_results] Comparison to literal
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:600: [R1702(too-many-nested-blocks), WhooshSearchBackend._process_results] Too many nested blocks (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:584: [R0912(too-many-branches), WhooshSearchBackend._process_results] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:718: [R1705(no-else-return), WhooshSearchBackend._to_python] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:110: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'storage' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:117: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'storage' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:119: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'content_field_name' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:119: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'schema' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:120: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'parser' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:123: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:126: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:128: [W0201(attribute-defined-outside-init), WhooshSearchBackend.setup] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:180: [W0201(attribute-defined-outside-init), WhooshSearchBackend.update] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:219: [W0201(attribute-defined-outside-init), WhooshSearchBackend.remove] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:234: [W0201(attribute-defined-outside-init), WhooshSearchBackend.clear] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:274: [W0201(attribute-defined-outside-init), WhooshSearchBackend.optimize] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:368: [W0201(attribute-defined-outside-init), WhooshSearchBackend.search] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:409: [W0201(attribute-defined-outside-init), WhooshSearchBackend.search] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:490: [W0201(attribute-defined-outside-init), WhooshSearchBackend.more_like_this] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:536: [W0201(attribute-defined-outside-init), WhooshSearchBackend.more_like_this] Attribute 'index' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:751: [R1705(no-else-return), WhooshSearchQuery._convert_datetime] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:781: [R0914(too-many-locals), WhooshSearchQuery.build_query_fragment] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:782: [C0415(import-outside-toplevel), WhooshSearchQuery.build_query_fragment] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:895: [C1801(len-as-condition), WhooshSearchQuery.build_query_fragment] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:781: [R0912(too-many-branches), WhooshSearchQuery.build_query_fragment] Too many branches (34/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/whoosh_backend.py:781: [R0915(too-many-statements), WhooshSearchQuery.build_query_fragment] Too many statements (73/50)
************* Module haystack.backends.solr_backend
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:443: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:444: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:445: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:1: [C0302(too-many-lines), ] Too many lines in module (832/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:83: [W0221(arguments-differ), SolrSearchBackend.remove] Parameters differ from overridden 'remove' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:151: [W0221(arguments-differ), SolrSearchBackend.build_search_kwargs] Parameters differ from overridden 'build_search_kwargs' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:151: [R0913(too-many-arguments), SolrSearchBackend.build_search_kwargs] Too many arguments (20/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:151: [R0914(too-many-locals), SolrSearchBackend.build_search_kwargs] Too many local variables (41/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:254: [C1801(len-as-condition), SolrSearchBackend.build_search_kwargs] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:282: [C0415(import-outside-toplevel), SolrSearchBackend.build_search_kwargs] Import outside toplevel (haystack.utils.geo.generate_bounding_box)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:151: [R0912(too-many-branches), SolrSearchBackend.build_search_kwargs] Too many branches (36/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:151: [R0915(too-many-statements), SolrSearchBackend.build_search_kwargs] Too many statements (88/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:313: [W0221(arguments-differ), SolrSearchBackend.more_like_this] Parameters differ from overridden 'more_like_this' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:313: [R0914(too-many-locals), SolrSearchBackend.more_like_this] Too many local variables (19/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:316: [C0415(import-outside-toplevel), SolrSearchBackend.more_like_this] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:339: [C1801(len-as-condition), SolrSearchBackend.more_like_this] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:374: [R0914(too-many-locals), SolrSearchBackend._process_results] Too many local variables (28/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:375: [C0415(import-outside-toplevel), SolrSearchBackend._process_results] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:405: [W0703(broad-except), SolrSearchBackend._process_results] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:454: [C0415(import-outside-toplevel), SolrSearchBackend._process_results] Import outside toplevel (haystack.utils.geo.Distance)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:374: [R0912(too-many-branches), SolrSearchBackend._process_results] Too many branches (21/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:374: [R0915(too-many-statements), SolrSearchBackend._process_results] Too many statements (58/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:508: [R1702(too-many-nested-blocks), SolrSearchBackend.extract_spelling_suggestions] Too many nested blocks (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:473: [R0912(too-many-branches), SolrSearchBackend.extract_spelling_suggestions] Too many branches (20/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:535: [W0612(unused-variable), SolrSearchBackend.build_schema] Unused variable 'field_name'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:531: [R0912(too-many-branches), SolrSearchBackend.build_schema] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:617: [W0703(broad-except), SolrSearchBackend.extract_file_contents] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:628: [C0415(import-outside-toplevel), SolrSearchQuery.build_query_fragment] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:712: [C1801(len-as-condition), SolrSearchQuery.build_query_fragment] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:627: [R0912(too-many-branches), SolrSearchQuery.build_query_fragment] Too many branches (26/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:627: [R0915(too-many-statements), SolrSearchQuery.build_query_fragment] Too many statements (54/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/solr_backend.py:732: [R0912(too-many-branches), SolrSearchQuery.build_params] Too many branches (19/12)
************* Module haystack.backends.__init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:480: [C0325(superfluous-parens), ] Unnecessary parens after 'del' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:1: [C0302(too-many-lines), ] Too many lines in module (1043/500)
************* Module haystack.backends
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:38: [C0415(import-outside-toplevel), log_query.wrapper] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:51: [R0205(useless-object-inheritance), EmptyResults] Class 'EmptyResults' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:59: [R1705(no-else-return), EmptyResults.__getitem__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:65: [R0205(useless-object-inheritance), BaseSearchBackend] Class 'BaseSearchBackend' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:128: [R0913(too-many-arguments), BaseSearchBackend.build_search_kwargs] Too many arguments (18/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:128: [R0914(too-many-locals), BaseSearchBackend.build_search_kwargs] Too many local variables (19/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:190: [C0415(import-outside-toplevel), BaseSearchBackend.build_models_list] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:223: [W0231(super-init-not-called), SearchNode.__init__] __init__ method from base class 'Node' is not called
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:232: [R1706(consider-using-ternary), SearchNode.__init__] Consider using ternary (children[:] if children else [])
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:251: [R0202(no-classmethod-decorator), SearchNode] Consider using a decorator instead of calling classmethod
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:289: [W0221(arguments-differ), SearchNode.add] Parameters differ from overridden 'add' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:414: [W0107(unnecessary-pass), SQ] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:417: [R0205(useless-object-inheritance), BaseSearchQuery] Class 'BaseSearchQuery' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:417: [R0902(too-many-instance-attributes), BaseSearchQuery] Too many instance attributes (29/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:470: [C0415(import-outside-toplevel), BaseSearchQuery.__init__] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:485: [C0415(import-outside-toplevel), BaseSearchQuery.__setstate__] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:493: [R0912(too-many-branches), BaseSearchQuery.build_params] Too many branches (16/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:862: [C0415(import-outside-toplevel), BaseSearchQuery.add_within] Import outside toplevel (haystack.utils.geo.ensure_point)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:871: [C0415(import-outside-toplevel), BaseSearchQuery.add_dwithin] Import outside toplevel (haystack.utils.geo.ensure_point, haystack.utils.geo.ensure_distance)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:883: [C0415(import-outside-toplevel), BaseSearchQuery.add_distance] Import outside toplevel (haystack.utils.geo.ensure_point)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:891: [C0415(import-outside-toplevel), BaseSearchQuery.add_field_facet] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:897: [C0415(import-outside-toplevel), BaseSearchQuery.add_date_facet] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:911: [C0415(import-outside-toplevel), BaseSearchQuery.add_query_facet] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:936: [C0415(import-outside-toplevel), BaseSearchQuery.post_process_facets] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:977: [C0415(import-outside-toplevel), BaseSearchQuery._clone] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/__init__.py:1009: [R0205(useless-object-inheritance), BaseEngine] Class 'BaseEngine' inherits from object, can be safely removed from bases in python3
************* Module haystack.backends.elasticsearch2_backend
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:17: [C0325(superfluous-parens), ] Unnecessary parens after 'not' keyword
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:320: [C0301(line-too-long), ] Line too long (184/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:26: [W0223(abstract-method), Elasticsearch2SearchBackend] Method 'extract_file_contents' is abstract in class 'BaseSearchBackend' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:73: [W0221(arguments-differ), Elasticsearch2SearchBackend.build_search_kwargs] Parameters differ from overridden 'build_search_kwargs' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:73: [R0913(too-many-arguments), Elasticsearch2SearchBackend.build_search_kwargs] Too many arguments (18/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:73: [R0914(too-many-locals), Elasticsearch2SearchBackend.build_search_kwargs] Too many local variables (28/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:73: [R0912(too-many-branches), Elasticsearch2SearchBackend.build_search_kwargs] Too many branches (21/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:200: [R0914(too-many-locals), Elasticsearch2SearchBackend.more_like_this] Too many local variables (22/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:203: [C0415(import-outside-toplevel), Elasticsearch2SearchBackend.more_like_this] Import outside toplevel (haystack.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:253: [C1801(len-as-condition), Elasticsearch2SearchBackend.more_like_this] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/backends/elasticsearch2_backend.py:13: [W0611(unused-import), ] Unused log imported from haystack.utils as logging
************* Module haystack.management.commands.update_index
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:34: [W0511(fixme), ] FIXME: confirm that this is still relevant with modern versions of Django:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:96: [W0511(fixme), ] FIXME: Get the right backend.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:261: [C0330(bad-continuation), ] Wrong continued indentation.
                )
                ^                ||
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:27: [R0914(too-many-locals), update_worker] Too many local variables (18/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:37: [C0415(import-outside-toplevel), update_worker] Import outside toplevel (django.db.connections)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:64: [R0914(too-many-locals), do_update] Too many local variables (18/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:104: [W0703(broad-except), do_update] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:121: [R1720(no-else-raise), do_update] Unnecessary "elif" after "raise"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:135: [R0902(too-many-instance-attributes), Command] Too many instance attributes (9/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:184: [W0221(arguments-differ), Command.handle] Parameters differ from overridden 'handle' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:211: [C0415(import-outside-toplevel), Command.handle] Import outside toplevel (dateutil.parser.parse)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:219: [C0415(import-outside-toplevel), Command.handle] Import outside toplevel (dateutil.parser.parse)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:235: [R0914(too-many-locals), Command.update_backend] Too many local variables (24/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:235: [R0912(too-many-branches), Command.update_backend] Too many branches (23/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:235: [R0915(too-many-statements), Command.update_backend] Too many statements (52/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:185: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'verbosity' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:186: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'batchsize' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:187: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'start_date' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:208: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'start_date' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:214: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'start_date' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:188: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'end_date' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:222: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'end_date' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:189: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'remove' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:190: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'workers' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:191: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'commit' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:192: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'max_retries' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:194: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'backends' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/update_index.py:196: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'backends' defined outside __init__
************* Module haystack.management.commands.build_solr_schema
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/build_solr_schema.py:49: [W0221(arguments-differ), Command.handle] Parameters differ from overridden 'handle' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/build_solr_schema.py:49: [R0912(too-many-branches), Command.handle] Too many branches (15/12)
************* Module haystack.management.commands.rebuild_index
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/rebuild_index.py:34: [W0221(arguments-differ), Command.handle] Parameters differ from overridden 'handle' method
************* Module haystack.management.commands.clear_index
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/clear_index.py:29: [W0221(arguments-differ), Command.handle] Parameters differ from overridden 'handle' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/clear_index.py:42: [E1101(no-member), Command.handle] Instance of '_MovedItems' has no 'input' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/clear_index.py:31: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'verbosity' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/clear_index.py:32: [W0201(attribute-defined-outside-init), Command.handle] Attribute 'commit' defined outside __init__
************* Module haystack.management.commands.haystack_info
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/haystack_info.py:24: [C0330(bad-continuation), ] Wrong continued indentation.
            )
            ^                ||
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/management/commands/haystack_info.py:13: [W0221(arguments-differ), Command.handle] Parameters differ from overridden 'handle' method
************* Module haystack.utils.__init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\w'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\.'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\w'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\.'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\w'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/__init__.py:15: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
************* Module haystack.utils.highlighting
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/highlighting.py:8: [R0205(useless-object-inheritance), Highlighter] Class 'Highlighter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/highlighting.py:26: [R1718(consider-using-set-comprehension), Highlighter.__init__] Consider using a set comprehension
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/highlighting.py:66: [C1801(len-as-condition), Highlighter.find_window] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/highlighting.py:73: [C1801(len-as-condition), Highlighter.find_window] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/highlighting.py:77: [C1801(len-as-condition), Highlighter.find_window] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/highlighting.py:72: [W0612(unused-variable), Highlighter.find_window] Unused variable 'word'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/highlighting.py:113: [R0914(too-many-locals), Highlighter.render_html] Too many local variables (18/15)
************* Module haystack.utils.geo
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/geo.py:61: [W0612(unused-variable), ensure_distance] Unused variable 'km'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/geo.py:5: [W0611(unused-import), ] Unused Point imported from django.contrib.gis.geos
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/geo.py:6: [W0611(unused-import), ] Unused D imported from django.contrib.gis.measure
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/geo.py:6: [W0611(unused-import), ] Unused Distance imported from django.contrib.gis.measure
************* Module haystack.utils.log
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/log.py:15: [R0205(useless-object-inheritance), LoggingFacade] Class 'LoggingFacade' inherits from object, can be safely removed from bases in python3
************* Module haystack.utils.loading
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:246: [C0301(line-too-long), ] Line too long (191/160)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:87: [R0205(useless-object-inheritance), ConnectionHandler] Class 'ConnectionHandler' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:126: [R0205(useless-object-inheritance), ConnectionRouter] Class 'ConnectionRouter' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:136: [C1801(len-as-condition), ConnectionRouter.routers] Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:170: [R0205(useless-object-inheritance), UnifiedIndex] Class 'UnifiedIndex' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:170: [R0902(too-many-instance-attributes), UnifiedIndex] Too many instance attributes (8/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:242: [R0912(too-many-branches), UnifiedIndex.collect_fields] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/utils/loading.py:332: [R1705(no-else-return), UnifiedIndex.get_facet_fieldname] Unnecessary "else" after "return"
************* Module haystack.templatetags.highlight
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/haystack/templatetags/highlight.py:58: [C0415(import-outside-toplevel), HighlightNode.render] Import outside toplevel (haystack.utils.highlighting.Highlighter)
************* Module treebeard
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/__init__.py:3: [W0105(pointless-string-statement), ] String statement has no effect
************* Module treebeard.admin
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:55: [C0330(bad-continuation), ] Wrong hanging indentation (remove 4 spaces).
                        tmpl.get('BACKEND', None) == 'django.template.backends.django.DjangoTemplates' and
                    |   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:56: [C0330(bad-continuation), ] Wrong hanging indentation (remove 4 spaces).
                        tmpl.get('APP_DIRS', False) and
                    |   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:57: [C0330(bad-continuation), ] Wrong hanging indentation (remove 4 spaces).
                        'django.template.context_processors.request' in tmpl.get('OPTIONS', {}).get('context_processors', []),
                    |   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:79: [C0330(bad-continuation), ] Wrong continued indentation (add 13 spaces).
                JavaScriptCatalog.as_view(packages=['treebeard']),
                ^            |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:80: [C0330(bad-continuation), ] Wrong continued indentation (add 13 spaces).
                name='javascript-catalog'
                ^            |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:81: [C0330(bad-continuation), ] Wrong continued indentation.
            )
            ^               ||
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:16: [E0611(no-name-in-module), ] No name 'force_unicode' in module 'django.utils.encoding'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:18: [C0413(wrong-import-position), ] Import "from treebeard.exceptions import InvalidPosition, MissingNodeOrderBy, InvalidMoveToDescendant, PathOverflow" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:20: [C0413(wrong-import-position), ] Import "from treebeard.al_tree import AL_Node" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:35: [R1705(no-else-return), TreeAdmin.get_queryset] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:73: [E0611(no-name-in-module), TreeAdmin.get_urls] No name 'javascript_catalog' in module 'django.views.i18n'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:73: [C0415(import-outside-toplevel), TreeAdmin.get_urls] Import outside toplevel (django.views.i18n.javascript_catalog)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:76: [C0415(import-outside-toplevel), TreeAdmin.get_urls] Import outside toplevel (django.views.i18n.JavaScriptCatalog)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:127: [R1719(simplifiable-if-expression), TreeAdmin.move_node] The if expression can be replaced with 'bool(test)'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:24: [W0611(unused-import), ] Unused TO_FIELD_VAR imported from django.contrib.admin.options
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/admin.py:24: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module treebeard.al_tree
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:69: [C0330(bad-continuation), ] Wrong hanging indentation (add 4 spaces).
                    'sib_order').reverse()[0].sib_order
                    ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:376: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            (pos == 'left') or
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:377: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            (pos in ('right', 'last-sibling') and
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:379: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            (pos == 'first-sibling' and
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:28: [R1705(no-else-return), get_result_class] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:45: [W0223(abstract-method), AL_Node] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:45: [W0223(abstract-method), AL_Node] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:67: [W0622(redefined-builtin), AL_Node.add_root] Redefining built-in 'max'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:81: [W0221(arguments-differ), AL_Node.get_depth] Parameters differ from overridden 'get_depth' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:119: [R1705(no-else-return), AL_Node.get_parent] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:225: [W0622(redefined-builtin), AL_Node.add_child] Redefining built-in 'max'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:308: [W0622(redefined-builtin), AL_Node._make_hole_in_db] Redefining built-in 'min'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:330: [W0622(redefined-builtin), AL_Node._make_hole_and_get_sibling_order] Redefining built-in 'min'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:375: [R0916(too-many-boolean-expressions), AL_Node.move] Too many boolean expressions in if statement (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:345: [R0912(too-many-branches), AL_Node.move] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:64: [W0201(attribute-defined-outside-init), AL_Node.add_root] Attribute '_cached_depth' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:105: [W0201(attribute-defined-outside-init), AL_Node.get_depth] Attribute '_cached_depth' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:220: [W0201(attribute-defined-outside-init), AL_Node.add_child] Attribute '_cached_depth' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:72: [W0201(attribute-defined-outside-init), AL_Node.add_root] Attribute 'sib_order' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:229: [W0201(attribute-defined-outside-init), AL_Node.add_child] Attribute 'sib_order' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:296: [W0201(attribute-defined-outside-init), AL_Node.add_sibling] Attribute 'sib_order' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:391: [W0201(attribute-defined-outside-init), AL_Node.move] Attribute 'sib_order' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:393: [W0201(attribute-defined-outside-init), AL_Node.move] Attribute 'sib_order' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:230: [W0201(attribute-defined-outside-init), AL_Node.add_child] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:386: [W0201(attribute-defined-outside-init), AL_Node.move] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:388: [W0201(attribute-defined-outside-init), AL_Node.move] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:396: [W0201(attribute-defined-outside-init), AL_Node.move] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:398: [W0201(attribute-defined-outside-init), AL_Node.move] Attribute 'parent' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:298: [W0201(attribute-defined-outside-init), AL_Node.add_sibling] Attribute 'parent_id' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/al_tree.py:4: [W0611(unused-import), ] Unused transaction imported from django.db
************* Module treebeard.ns_tree
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:73: [C0330(bad-continuation), ] Wrong continued indentation (remove 5 spaces).
                                                            tree_id)
                                                       |    ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:366: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            (pos == 'left') or
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:367: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            (pos in ('right', 'last-sibling') and
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:369: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            (pos == 'first-sibling' and
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:1: [C0302(too-many-lines), ] Too many lines in module (674/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:9: [C0413(wrong-import-position), ] Import "from django.core import serializers" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:10: [C0413(wrong-import-position), ] Import "from django.db import connection, models, transaction" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:11: [C0413(wrong-import-position), ] Import "from django.db.models import Q" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:12: [C0413(wrong-import-position), ] Import "from django.utils.translation import ugettext_noop as _" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:14: [C0413(wrong-import-position), ] Import "from treebeard.exceptions import InvalidMoveToDescendant, NodeAlreadySaved" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:15: [C0413(wrong-import-position), ] Import "from treebeard.models import Node" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:36: [R1705(no-else-return), get_result_class] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:93: [W0622(redefined-builtin), NS_NodeQuerySet.delete] Redefining built-in 'id'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:49: [W0221(arguments-differ), NS_NodeQuerySet.delete] Parameters differ from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:49: [R0914(too-many-locals), NS_NodeQuerySet.delete] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:82: [W0612(unused-variable), NS_NodeQuerySet.delete] Unused variable 'rid'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:93: [W0612(unused-variable), NS_NodeQuerySet.delete] Unused variable 'id'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:112: [W0223(abstract-method), NS_Node] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:112: [W0223(abstract-method), NS_Node] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:304: [R1723(no-else-break), NS_Node.add_sibling] Unnecessary "elif" after "break"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:257: [R1702(too-many-nested-blocks), NS_Node.add_sibling] Too many nested blocks (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:237: [R0912(too-many-branches), NS_Node.add_sibling] Too many branches (27/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:237: [R0915(too-many-statements), NS_Node.add_sibling] Too many statements (71/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:339: [R0914(too-many-locals), NS_Node.move] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:365: [R0916(too-many-boolean-expressions), NS_Node.move] Too many boolean expressions in if statement (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:392: [R1723(no-else-break), NS_Node.move] Unnecessary "elif" after "break"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:339: [R0912(too-many-branches), NS_Node.move] Too many branches (28/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:339: [R0915(too-many-statements), NS_Node.move] Too many statements (75/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:494: [W0642(self-cls-assignment), NS_Node.load_bulk] Invalid assignment to cls in method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:602: [W0642(self-cls-assignment), NS_Node.get_tree] Invalid assignment to cls in method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:649: [R1710(inconsistent-return-statements), NS_Node.get_parent] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:227: [W0201(attribute-defined-outside-init), NS_Node.add_child] Attribute '_cached_parent_obj' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:664: [W0201(attribute-defined-outside-init), NS_Node.get_parent] Attribute '_cached_parent_obj' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/ns_tree.py:10: [W0611(unused-import), ] Unused transaction imported from django.db
************* Module treebeard.mp_tree
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:300: [W0511(fixme), ] TODO: FIND OUT WHY?!?? right now I'm just blaming mysql
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:205: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
                    parentoldpath == parentnewpath and
                    ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:206: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
                    siblings and
                    ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:207: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
                    newpath < oldpath
                    ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:477: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            oldpath == self.target.path and
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:478: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
            (
            ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:904: [C0330(bad-continuation), ] Wrong hanging indentation (remove 4 spaces).
                'extrand': extrand}
            |   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1: [C0302(too-many-lines), ] Too many lines in module (1152/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:9: [C0413(wrong-import-position), ] Import "from django.core import serializers" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:10: [C0413(wrong-import-position), ] Import "from django.db import models, transaction, connection" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:11: [C0413(wrong-import-position), ] Import "from django.db.models import F, Q" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:12: [C0413(wrong-import-position), ] Import "from django.utils.translation import ugettext_noop as _" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:14: [C0413(wrong-import-position), ] Import "from treebeard.numconv import NumConv" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:15: [C0413(wrong-import-position), ] Import "from treebeard.models import Node" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:16: [C0413(wrong-import-position), ] Import "from treebeard.exceptions import InvalidMoveToDescendant, PathOverflow, NodeAlreadySaved" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:66: [R1705(no-else-return), get_result_class] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:137: [R0205(useless-object-inheritance), MP_AddHandler] Class 'MP_AddHandler' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:145: [E1101(no-member), MP_ComplexAddMoveHandler.run_sql_stmts] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:154: [E1101(no-member), MP_ComplexAddMoveHandler.get_sql_update_numchild] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:159: [R0914(too-many-locals), MP_ComplexAddMoveHandler.reorder_nodes_before_add_or_move] Too many local variables (19/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:191: [E1101(no-member), MP_ComplexAddMoveHandler.reorder_nodes_before_add_or_move] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:198: [E1101(no-member), MP_ComplexAddMoveHandler.reorder_nodes_before_add_or_move] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:200: [E1101(no-member), MP_ComplexAddMoveHandler.reorder_nodes_before_add_or_move] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:202: [E1101(no-member), MP_ComplexAddMoveHandler.reorder_nodes_before_add_or_move] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:211: [E1101(no-member), MP_ComplexAddMoveHandler.reorder_nodes_before_add_or_move] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:159: [R0912(too-many-branches), MP_ComplexAddMoveHandler.reorder_nodes_before_add_or_move] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:272: [E1101(no-member), MP_ComplexAddMoveHandler.get_sql_newpath_in_branches] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:275: [E1101(no-member), MP_ComplexAddMoveHandler.get_sql_newpath_in_branches] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:302: [E1101(no-member), MP_ComplexAddMoveHandler.get_sql_newpath_in_branches] Instance of 'MP_ComplexAddMoveHandler' has no 'node_cls' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:477: [R0916(too-many-boolean-expressions), MP_MoveHandler.process] Too many boolean expressions in if statement (6/5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:631: [W0642(self-cls-assignment), MP_Node.dump_bulk] Invalid assignment to cls in method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:691: [W0642(self-cls-assignment), MP_Node.find_problems] Invalid assignment to cls in method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:730: [W0221(arguments-differ), MP_Node.fix_tree] Parameters differ from overridden 'fix_tree' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:767: [W0642(self-cls-assignment), MP_Node.fix_tree] Invalid assignment to cls in method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:828: [W0642(self-cls-assignment), MP_Node.get_tree] Invalid assignment to cls in method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:876: [W0642(self-cls-assignment), MP_Node.get_descendants_group_count] Invalid assignment to cls in method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1000: [E1101(no-member), MP_Node.is_child_of] Instance of 'CharField' has no 'startswith' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1008: [E1101(no-member), MP_Node.is_descendant_of] Instance of 'CharField' has no 'startswith' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1042: [E1136(unsubscriptable-object), MP_Node.get_root] Value 'self.path' is unsubscriptable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1061: [E1136(unsubscriptable-object), MP_Node.get_ancestors] Value 'self.path' is unsubscriptable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1067: [R1710(inconsistent-return-statements), MP_Node.get_parent] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1123: [E1136(unsubscriptable-object), MP_Node._inc_path] Value 'self.path' is unsubscriptable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1128: [E1136(unsubscriptable-object), MP_Node._inc_path] Value 'self.path' is unsubscriptable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1135: [E1136(unsubscriptable-object), MP_Node._get_lastpos_in_path] Value 'self.path' is unsubscriptable
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1079: [E0203(access-member-before-definition), MP_Node.get_parent] Access to member '_cached_parent_obj' before its definition line 1083
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:912: [W0201(attribute-defined-outside-init), MP_Node.get_descendants_group_count] Attribute 'descendants_count' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:1083: [W0201(attribute-defined-outside-init), MP_Node.get_parent] Attribute '_cached_parent_obj' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/mp_tree.py:10: [W0611(unused-import), ] Unused transaction imported from django.db
************* Module treebeard.numconv
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/numconv.py:26: [R0205(useless-object-inheritance), NumConv] Class 'NumConv' inherits from object, can be safely removed from bases in python3
************* Module treebeard.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:115: [C0303(trailing-whitespace), ] Trailing whitespace
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:116: [C0303(trailing-whitespace), ] Trailing whitespace
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:117: [C0303(trailing-whitespace), ] Trailing whitespace
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:198: [C0326(bad-whitespace), ] Exactly one space required after comma
                         formfield_callback=None,  widgets=None):
                                                ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:97: [E1101(no-member), MoveNodeForm.__init__] Instance of 'MoveNodeForm' has no 'declared_fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:101: [E1101(no-member), MoveNodeForm.__init__] Instance of 'MoveNodeForm' has no 'declared_fields' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:5: [W0611(unused-import), ] Unused BaseModelForm imported from django.forms.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/forms.py:5: [W0611(unused-import), ] Unused model_to_dict imported from django.forms.models
************* Module treebeard.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:23: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\*'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:23: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\*'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:365: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\*'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:365: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\*'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:387: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\*'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:387: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\*'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:50: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
                field.get_internal_type() == 'ForeignKey' and
                ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:51: [C0330(bad-continuation), ] Wrong hanging indentation before block (add 4 spaces).
                field.name != 'parent'
                ^   |
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:567: [C0330(bad-continuation), ] Wrong hanging indentation (remove 1 space).
                     [Q(**{'%s__gt' % field: value})]
                    |^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:1: [C0302(too-many-lines), ] Too many lines in module (658/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:9: [C0413(wrong-import-position), ] Import "import django" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:10: [C0413(wrong-import-position), ] Import "from django.db.models import Q" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:11: [C0413(wrong-import-position), ] Import "from django.db import models, transaction, router, connections" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:13: [C0413(wrong-import-position), ] Import "from treebeard.exceptions import InvalidPosition, MissingNodeOrderBy" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:303: [R1710(inconsistent-return-statements), Node.get_prev_sibling] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:317: [R1710(inconsistent-return-statements), Node.get_next_sibling] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:508: [W0221(arguments-differ), Node.delete] Parameters differ from overridden 'delete' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:514: [E1101(no-member), Node._prepare_pos_var] Instance of 'Node' has no 'node_order_by' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:520: [E1101(no-member), Node._prepare_pos_var] Instance of 'Node' has no 'node_order_by' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:524: [E1101(no-member), Node._prepare_pos_var] Instance of 'Node' has no 'node_order_by' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:562: [E1101(no-member), Node.get_sorted_pos_queryset] Instance of 'Node' has no 'node_order_by' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:584: [W0622(redefined-builtin), Node.get_annotated_list_qs] Redefining built-in 'open'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:610: [W0612(unused-variable), Node.get_annotated_list] Unused variable 'result'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:610: [W0612(unused-variable), Node.get_annotated_list] Unused variable 'info'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:611: [W0612(unused-variable), Node.get_annotated_list] Unused variable 'start_depth'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:611: [W0612(unused-variable), Node.get_annotated_list] Unused variable 'prev_depth'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/models.py:11: [W0611(unused-import), ] Unused transaction imported from django.db
************* Module treebeard.tests.settings
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/settings.py:46: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\S'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/settings.py:17: [R1705(no-else-return), get_db_conf] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/settings.py:9: [R1710(inconsistent-return-statements), get_db_conf] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/settings.py:73: [R0205(useless-object-inheritance), DisableMigrations] Class 'DisableMigrations' inherits from object, can be safely removed from bases in python3
************* Module treebeard.tests.conftest
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/conftest.py:18: [C0413(wrong-import-position), ] Import "import django" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/conftest.py:19: [C0413(wrong-import-position), ] Import "from django.test.utils import setup_test_environment, teardown_test_environment" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/conftest.py:20: [C0413(wrong-import-position), ] Import "from django.db import connection" should be placed at the top of the module
************* Module treebeard.tests.urls
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/urls.py:1: [W0611(unused-import), ] Unused include imported from django.conf.urls
************* Module treebeard.tests.test_treebeard
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1: [C0302(too-many-lines), ] Too many lines in module (2704/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:16: [E0401(import-error), ] Unable to import 'pytest'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:130: [R0205(useless-object-inheritance), TestTreeBase] Class 'TestTreeBase' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:131: [W0621(redefined-outer-name), TestTreeBase.got] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:148: [W0621(redefined-outer-name), TestTreeBase._assert_get_annotated_list] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:155: [C0123(unidiomatic-typecheck), TestTreeBase._assert_get_annotated_list] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:160: [W0621(redefined-outer-name), TestEmptyTree.test_load_bulk_empty] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:168: [W0621(redefined-outer-name), TestEmptyTree.test_dump_bulk_empty] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:171: [W0621(redefined-outer-name), TestEmptyTree.test_add_root_empty] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:176: [W0621(redefined-outer-name), TestEmptyTree.test_get_root_nodes_empty] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:181: [W0621(redefined-outer-name), TestEmptyTree.test_get_first_root_node_empty] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:185: [W0621(redefined-outer-name), TestEmptyTree.test_get_last_root_node_empty] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:189: [W0621(redefined-outer-name), TestEmptyTree.test_get_tree] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:193: [W0621(redefined-outer-name), TestEmptyTree.test_get_annotated_list] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:202: [W0621(redefined-outer-name), TestNonEmptyTree.setup_class] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:212: [W0621(redefined-outer-name), TestClassMethods.test_load_bulk_existing] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:242: [W0621(redefined-outer-name), TestClassMethods.test_get_tree_all] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:247: [C0123(unidiomatic-typecheck), TestClassMethods.test_get_tree_all] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:249: [W0621(redefined-outer-name), TestClassMethods.test_dump_bulk_all] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:252: [W0621(redefined-outer-name), TestClassMethods.test_get_tree_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:274: [C0123(unidiomatic-typecheck), TestClassMethods.test_get_tree_node] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:276: [W0621(redefined-outer-name), TestClassMethods.test_get_tree_leaf] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:279: [C0122(misplaced-comparison-constant), TestClassMethods.test_get_tree_leaf] Comparison should be node.get_children_count() == 0
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:285: [C0123(unidiomatic-typecheck), TestClassMethods.test_get_tree_leaf] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:287: [W0621(redefined-outer-name), TestClassMethods.test_get_annotated_list_all] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:295: [W0621(redefined-outer-name), TestClassMethods.test_get_annotated_list_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:302: [W0621(redefined-outer-name), TestClassMethods.test_get_annotated_list_leaf] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:307: [W0621(redefined-outer-name), TestClassMethods.test_dump_bulk_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:318: [W0621(redefined-outer-name), TestClassMethods.test_load_and_dump_bulk_keeping_ids] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:329: [W0621(redefined-outer-name), TestClassMethods.test_load_and_dump_bulk_with_fk] Redefining name 'related_model' from outer scope (line 91)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:332: [W0612(unused-variable), TestClassMethods.test_load_and_dump_bulk_with_fk] Unused variable 'created'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:353: [W0621(redefined-outer-name), TestClassMethods.test_get_root_nodes] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:357: [C0123(unidiomatic-typecheck), TestClassMethods.test_get_root_nodes] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:359: [W0621(redefined-outer-name), TestClassMethods.test_get_first_root_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:362: [C0123(unidiomatic-typecheck), TestClassMethods.test_get_first_root_node] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:364: [W0621(redefined-outer-name), TestClassMethods.test_get_last_root_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:367: [C0123(unidiomatic-typecheck), TestClassMethods.test_get_last_root_node] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:369: [W0621(redefined-outer-name), TestClassMethods.test_add_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:374: [C0123(unidiomatic-typecheck), TestClassMethods.test_add_root] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:376: [W0621(redefined-outer-name), TestClassMethods.test_add_root_with_passed_instance] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:382: [C0123(unidiomatic-typecheck), TestClassMethods.test_add_root_with_passed_instance] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:384: [W0621(redefined-outer-name), TestClassMethods.test_add_root_with_already_saved_instance] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:391: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_is_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:405: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_is_leaf] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:415: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:428: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_root] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:430: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_parent] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:447: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_parent] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:461: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_parent] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:465: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_children] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:474: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_children] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:476: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_children_count] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:486: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_siblings] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:495: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_siblings] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:497: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_first_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:510: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_first_sibling] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:512: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_prev_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:528: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_prev_sibling] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:530: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_next_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:546: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_next_sibling] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:548: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_last_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:561: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_last_sibling] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:563: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_first_child] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:576: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_first_child] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:578: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_last_child] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:591: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_last_child] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:593: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_ancestors] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:602: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_ancestors] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:604: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_descendants] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:615: [C0123(unidiomatic-typecheck), TestSimpleNodeMethods.test_get_descendants] Using type() instead of isinstance() for a typecheck.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:617: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_get_descendant_count] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:629: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_is_sibling_of] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:644: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_is_child_of] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:658: [W0621(redefined-outer-name), TestSimpleNodeMethods.test_is_descendant_of] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:674: [W0621(redefined-outer-name), TestAddChild.test_add_child_to_leaf] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:689: [W0621(redefined-outer-name), TestAddChild.test_add_child_to_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:704: [W0621(redefined-outer-name), TestAddChild.test_add_child_with_passed_instance] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:721: [W0621(redefined-outer-name), TestAddChild.test_add_child_with_already_saved_instance] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:728: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_invalid_pos] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:732: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_missing_nodeorderby] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:737: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_last_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:743: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_last] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:749: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_first_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:766: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_first] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:783: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_left_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:800: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_left] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:817: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_left_noleft_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:834: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_left_noleft] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:851: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_right_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:868: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_right] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:885: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_right_noright_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:902: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_right_noright] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:919: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_with_passed_instance] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:927: [W0621(redefined-outer-name), TestAddSibling.test_add_sibling_already_saved_instance] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:939: [W0621(redefined-outer-name), TestDelete.setup_class] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:947: [W0621(redefined-outer-name), TestDelete.test_delete_leaf] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:960: [W0621(redefined-outer-name), TestDelete.test_delete_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:972: [W0621(redefined-outer-name), TestDelete.test_delete_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:980: [W0621(redefined-outer-name), TestDelete.test_delete_filter_root_nodes] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:987: [W0621(redefined-outer-name), TestDelete.test_delete_filter_children] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:995: [W0621(redefined-outer-name), TestDelete.test_delete_nonexistant_nodes] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:999: [W0621(redefined-outer-name), TestDelete.test_delete_same_node_twice] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1007: [W0621(redefined-outer-name), TestDelete.test_delete_all_root_nodes] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1012: [W0621(redefined-outer-name), TestDelete.test_delete_all_nodes] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1019: [W0621(redefined-outer-name), TestMoveErrors.test_move_invalid_pos] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1024: [W0621(redefined-outer-name), TestMoveErrors.test_move_to_descendant] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1030: [W0621(redefined-outer-name), TestMoveErrors.test_move_missing_nodeorderby] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1040: [W0621(redefined-outer-name), TestMoveSortedErrors.test_nonsorted_move_in_sorted] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1047: [W0621(redefined-outer-name), TestMoveLeafRoot.test_move_leaf_last_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1062: [W0621(redefined-outer-name), TestMoveLeafRoot.test_move_leaf_first_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1077: [W0621(redefined-outer-name), TestMoveLeafRoot.test_move_leaf_left_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1092: [W0621(redefined-outer-name), TestMoveLeafRoot.test_move_leaf_right_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1107: [W0621(redefined-outer-name), TestMoveLeafRoot.test_move_leaf_last_child_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1122: [W0621(redefined-outer-name), TestMoveLeafRoot.test_move_leaf_first_child_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1139: [W0621(redefined-outer-name), TestMoveLeaf.test_move_leaf_last_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1154: [W0621(redefined-outer-name), TestMoveLeaf.test_move_leaf_first_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1169: [W0621(redefined-outer-name), TestMoveLeaf.test_move_leaf_left_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1184: [W0621(redefined-outer-name), TestMoveLeaf.test_move_leaf_right_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1199: [W0621(redefined-outer-name), TestMoveLeaf.test_move_leaf_left_sibling_itself] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1204: [W0621(redefined-outer-name), TestMoveLeaf.test_move_leaf_last_child] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1219: [W0621(redefined-outer-name), TestMoveLeaf.test_move_leaf_first_child] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1236: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_first_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1251: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_last_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1266: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_left_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1281: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_right_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1296: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_left_noleft_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1311: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_right_noright_sibling_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1326: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_first_child_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1341: [W0621(redefined-outer-name), TestMoveBranchRoot.test_move_branch_last_child_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1358: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_first_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1373: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_last_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1388: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_left_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1403: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_right_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1418: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_left_noleft_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1433: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_right_noright_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1448: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_left_itself_sibling] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1453: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_first_child] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1468: [W0621(redefined-outer-name), TestMoveBranch.test_move_branch_last_child] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1486: [W0621(redefined-outer-name), TestTreeSorted.got] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1486: [W0221(arguments-differ), TestTreeSorted.got] Parameters differ from overridden 'got' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1490: [W0621(redefined-outer-name), TestTreeSorted.test_add_root_sorted] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1509: [W0621(redefined-outer-name), TestTreeSorted.test_add_child_root_sorted] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1530: [W0621(redefined-outer-name), TestTreeSorted.test_add_child_nonroot_sorted] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1550: [W0621(redefined-outer-name), TestTreeSorted.test_move_sorted] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1576: [W0621(redefined-outer-name), TestTreeSorted.test_move_sortedsibling] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1611: [W0621(redefined-outer-name), TestInheritedModels.setup_class] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1611: [W0621(redefined-outer-name), TestInheritedModels.setup_class] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1630: [W0621(redefined-outer-name), TestInheritedModels.test_get_tree_all] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1644: [W0621(redefined-outer-name), TestInheritedModels.test_get_tree_node] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1656: [W0621(redefined-outer-name), TestInheritedModels.test_get_root_nodes] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1661: [W0621(redefined-outer-name), TestInheritedModels.test_get_first_root_node] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1665: [W0621(redefined-outer-name), TestInheritedModels.test_get_last_root_node] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1669: [W0621(redefined-outer-name), TestInheritedModels.test_is_root] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1675: [W0621(redefined-outer-name), TestInheritedModels.test_is_leaf] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1681: [W0621(redefined-outer-name), TestInheritedModels.test_get_root] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1687: [W0621(redefined-outer-name), TestInheritedModels.test_get_parent] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1693: [W0621(redefined-outer-name), TestInheritedModels.test_get_children] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1699: [W0621(redefined-outer-name), TestInheritedModels.test_get_children_count] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1705: [W0621(redefined-outer-name), TestInheritedModels.test_get_siblings] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1711: [W0621(redefined-outer-name), TestInheritedModels.test_get_first_sibling] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1717: [W0621(redefined-outer-name), TestInheritedModels.test_get_prev_sibling] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1723: [W0621(redefined-outer-name), TestInheritedModels.test_get_next_sibling] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1729: [W0621(redefined-outer-name), TestInheritedModels.test_get_last_sibling] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1735: [W0621(redefined-outer-name), TestInheritedModels.test_get_first_child] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1741: [W0621(redefined-outer-name), TestInheritedModels.test_get_last_child] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1747: [W0621(redefined-outer-name), TestInheritedModels.test_get_ancestors] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1753: [W0621(redefined-outer-name), TestInheritedModels.test_get_descendants] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1760: [W0621(redefined-outer-name), TestInheritedModels.test_get_descendant_count] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1766: [W0621(redefined-outer-name), TestInheritedModels.test_cascading_deletion] Redefining name 'inherited_model' from outer scope (line 96)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1785: [W0621(redefined-outer-name), TestMP_TreeAlphabet.test_alphabet] Redefining name 'mpalphabet_model' from outer scope (line 111)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1782: [W1508(invalid-envvar-default), TestMP_TreeAlphabet.test_alphabet] os.getenv default type is builtins.bool. Expected str or None.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1828: [W0621(redefined-outer-name), TestHelpers.setup_class] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1838: [W0621(redefined-outer-name), TestHelpers.test_descendants_group_count_root] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1845: [W0621(redefined-outer-name), TestHelpers.test_descendants_group_count_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1860: [W0621(redefined-outer-name), TestMP_TreeSortedAutoNow.test_sorted_by_autonow_workaround] Redefining name 'mpsortedautonow_model' from outer scope (line 116)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1866: [W0621(redefined-outer-name), TestMP_TreeSortedAutoNow.test_sorted_by_autonow_FAIL] Redefining name 'mpsortedautonow_model' from outer scope (line 116)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1877: [W0621(redefined-outer-name), TestMP_TreeStepOverflow.test_add_root] Redefining name 'mpsmallstep_model' from outer scope (line 121)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1879: [W0612(unused-variable), TestMP_TreeStepOverflow.test_add_root] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1884: [W0621(redefined-outer-name), TestMP_TreeStepOverflow.test_add_child] Redefining name 'mpsmallstep_model' from outer scope (line 121)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1887: [W0612(unused-variable), TestMP_TreeStepOverflow.test_add_child] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1892: [W0621(redefined-outer-name), TestMP_TreeStepOverflow.test_add_sibling] Redefining name 'mpsmallstep_model' from outer scope (line 121)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1894: [W0612(unused-variable), TestMP_TreeStepOverflow.test_add_sibling] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1901: [W0621(redefined-outer-name), TestMP_TreeStepOverflow.test_move] Redefining name 'mpsmallstep_model' from outer scope (line 121)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1903: [W0612(unused-variable), TestMP_TreeStepOverflow.test_move] Unused variable 'i'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1922: [W0621(redefined-outer-name), TestMP_TreeShortPath.test_short_path] Redefining name 'mpshortnotsorted_model' from outer scope (line 106)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:1930: [W0621(redefined-outer-name), TestMP_TreeFindProblems.test_find_problems] Redefining name 'mpalphabet_model' from outer scope (line 111)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2023: [W0621(redefined-outer-name), TestMP_TreeFix.got] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2027: [W0621(redefined-outer-name), TestMP_TreeFix.add_broken_test_data] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2043: [W0621(redefined-outer-name), TestMP_TreeFix.test_fix_tree_non_destructive] Redefining name 'mpshort_model' from outer scope (line 101)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2051: [W0621(redefined-outer-name), TestMP_TreeFix.test_fix_tree_destructive] Redefining name 'mpshort_model' from outer scope (line 101)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2063: [W0621(redefined-outer-name), TestIssues.test_many_to_many_django_user_anonymous] Redefining name 'mpm2muser_model' from outer scope (line 126)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2118: [C0122(misplaced-comparison-constant), TestMoveNodeForm._assert_nodes_in_choices] Comparison should be choices.pop(0)[0] == 0
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2134: [W0621(redefined-outer-name), TestMoveNodeForm.test_form_root_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2140: [W0621(redefined-outer-name), TestMoveNodeForm.test_form_leaf_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2146: [W0621(redefined-outer-name), TestMoveNodeForm.test_form_admin] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2169: [W0621(redefined-outer-name), TestModelAdmin.test_default_fields] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2179: [W0621(redefined-outer-name), TestSortedForm.test_sorted_form] Redefining name 'sorted_model' from outer scope (line 86)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2202: [W0621(redefined-outer-name), TestForm.test_form] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2214: [W0621(redefined-outer-name), TestForm.test_move_node_form] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2227: [W0621(redefined-outer-name), TestForm.test_get_position_ref_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2258: [W0621(redefined-outer-name), TestForm.test_clean_cleaned_data] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2274: [W0621(redefined-outer-name), TestForm.test_save_edit] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2312: [W0621(redefined-outer-name), TestForm.test_save_new] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2362: [W0621(redefined-outer-name), TestAdminTree.test_result_tree] Redefining name 'model_without_proxy' from outer scope (line 76)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2367: [W0621(redefined-outer-name), TestAdminTree.test_result_tree] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2387: [W0622(redefined-builtin), TestAdminTree.test_result_tree] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2362: [R0914(too-many-locals), TestAdminTree.test_result_tree] Too many local variables (17/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2375: [E1120(no-value-for-parameter), TestAdminTree.test_result_tree] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2395: [W0621(redefined-outer-name), TestAdminTree.test_unicode_result_tree] Redefining name 'model_with_unicode' from outer scope (line 81)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2400: [W0621(redefined-outer-name), TestAdminTree.test_unicode_result_tree] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2426: [W0622(redefined-builtin), TestAdminTree.test_unicode_result_tree] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2395: [R0914(too-many-locals), TestAdminTree.test_unicode_result_tree] Too many local variables (18/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2414: [E1120(no-value-for-parameter), TestAdminTree.test_unicode_result_tree] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2434: [W0621(redefined-outer-name), TestAdminTree.test_result_filtered] Redefining name 'model_without_proxy' from outer scope (line 76)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2437: [W0621(redefined-outer-name), TestAdminTree.test_result_filtered] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2446: [E1120(no-value-for-parameter), TestAdminTree.test_result_filtered] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2462: [E1120(no-value-for-parameter), TestAdminTree.test_result_filtered] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2478: [E1120(no-value-for-parameter), TestAdminTree.test_result_filtered] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2495: [W0621(redefined-outer-name), TestAdminTreeList.test_result_tree_list] Redefining name 'model_without_proxy' from outer scope (line 76)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2500: [W0621(redefined-outer-name), TestAdminTreeList.test_result_tree_list] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2518: [W0622(redefined-builtin), TestAdminTreeList.test_result_tree_list] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2495: [R0914(too-many-locals), TestAdminTreeList.test_result_tree_list] Too many local variables (16/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2508: [E1120(no-value-for-parameter), TestAdminTreeList.test_result_tree_list] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2522: [W0621(redefined-outer-name), TestAdminTreeList.test_result_tree_list_with_action] Redefining name 'model_without_proxy' from outer scope (line 76)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2523: [W0621(redefined-outer-name), TestAdminTreeList.test_result_tree_list_with_action] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2544: [W0622(redefined-builtin), TestAdminTreeList.test_result_tree_list_with_action] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2522: [R0914(too-many-locals), TestAdminTreeList.test_result_tree_list_with_action] Too many local variables (16/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2531: [E1120(no-value-for-parameter), TestAdminTreeList.test_result_tree_list_with_action] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2549: [W0621(redefined-outer-name), TestAdminTreeList.test_result_tree_list_with_get] Redefining name 'model_without_proxy' from outer scope (line 76)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2550: [W0621(redefined-outer-name), TestAdminTreeList.test_result_tree_list_with_get] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2570: [W0622(redefined-builtin), TestAdminTreeList.test_result_tree_list_with_get] Redefining built-in 'object'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2549: [R0914(too-many-locals), TestAdminTreeList.test_result_tree_list_with_get] Too many local variables (16/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2561: [E1120(no-value-for-parameter), TestAdminTreeList.test_result_tree_list_with_get] No value for argument 'sortable_by' in constructor call
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2611: [W0621(redefined-outer-name), TestTreeAdmin.test_get_node] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2616: [W0621(redefined-outer-name), TestTreeAdmin.test_move_node_validate_keyerror] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2625: [W0621(redefined-outer-name), TestTreeAdmin.test_move_node_validate_valueerror] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2633: [W0621(redefined-outer-name), TestTreeAdmin.test_move_validate_missing_nodeorderby] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2645: [W0621(redefined-outer-name), TestTreeAdmin.test_move_validate_invalid_pos] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2653: [W0621(redefined-outer-name), TestTreeAdmin.test_move_validate_to_descendant] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2662: [W0621(redefined-outer-name), TestTreeAdmin.test_move_left] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:2684: [W0621(redefined-outer-name), TestTreeAdmin.test_move_last_child] Redefining name 'model' from outer scope (line 71)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:18: [C0411(wrong-import-order), ] third party import "from treebeard import numconv" should be placed before "import pytest"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:19: [C0411(wrong-import-order), ] third party import "from treebeard.admin import admin_factory, TO_FIELD_VAR" should be placed before "import pytest"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:20: [C0411(wrong-import-order), ] third party import "from treebeard.exceptions import InvalidPosition, InvalidMoveToDescendant, PathOverflow, MissingNodeOrderBy, NodeAlreadySaved" should be placed before "import pytest"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:22: [C0411(wrong-import-order), ] third party import "from treebeard.forms import movenodeform_factory" should be placed before "import pytest"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:23: [C0411(wrong-import-order), ] third party import "from treebeard.templatetags.admin_tree import get_static_url" should be placed before "import pytest"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:24: [C0411(wrong-import-order), ] third party import "from treebeard.tests import models" should be placed before "import pytest"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/test_treebeard.py:25: [C0411(wrong-import-order), ] third party import "from treebeard.tests.admin import register_all as admin_register_all" should be placed before "import pytest"
************* Module treebeard.tests.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:12: [E0307(invalid-str-returned), RelatedModel.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:30: [E0307(invalid-str-returned), MP_UnicodeNode.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:55: [W0223(abstract-method), NS_TestNode] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:55: [W0223(abstract-method), NS_TestNode] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:62: [W0223(abstract-method), NS_UnicodetNode] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:62: [W0223(abstract-method), NS_UnicodetNode] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:65: [E0307(invalid-str-returned), NS_UnicodetNode.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:76: [W0223(abstract-method), NS_TestNodeRelated] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:76: [W0223(abstract-method), NS_TestNodeRelated] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:84: [W0223(abstract-method), NS_TestNodeInherited] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:84: [W0223(abstract-method), NS_TestNodeInherited] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:88: [W0223(abstract-method), AL_TestNode] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:88: [W0223(abstract-method), AL_TestNode] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:101: [W0223(abstract-method), AL_UnicodeNode] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:101: [W0223(abstract-method), AL_UnicodeNode] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:110: [E0307(invalid-str-returned), AL_UnicodeNode.__str__] __str__ does not return str
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:121: [W0223(abstract-method), AL_TestNodeRelated] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:121: [W0223(abstract-method), AL_TestNodeRelated] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:135: [W0223(abstract-method), AL_TestNodeInherited] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:135: [W0223(abstract-method), AL_TestNodeInherited] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:150: [W0223(abstract-method), NS_TestNodeSorted] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:150: [W0223(abstract-method), NS_TestNodeSorted] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:160: [W0223(abstract-method), AL_TestNodeSorted] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:160: [W0223(abstract-method), AL_TestNodeSorted] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:222: [W0223(abstract-method), NS_TestNode_Proxy] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:222: [W0223(abstract-method), NS_TestNode_Proxy] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:227: [W0223(abstract-method), AL_TestNode_Proxy] Method 'find_problems' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:227: [W0223(abstract-method), AL_TestNode_Proxy] Method 'fix_tree' is abstract in class 'Node' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/tests/models.py:263: [W0621(redefined-outer-name), empty_models_tables] Redefining name 'models' from outer scope (line 1)
************* Module treebeard.templatetags.__init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/__init__.py:12: [C0305(trailing-newlines), ] Trailing newlines
************* Module treebeard.templatetags.admin_tree
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:298: [C0330(bad-continuation), ] Wrong hanging indentation (remove 4 spaces).
            '(function($){{jQuery = $.noConflict(true);}})(django.jQuery);'
        |   ^
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:44: [E0611(no-name-in-module), ] No name 'force_unicode' in module 'django.utils.encoding'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:45: [E0401(import-error), ] Unable to import 'urlparse'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:48: [C0413(wrong-import-position), ] Import "from django.utils.html import format_html" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:50: [C0413(wrong-import-position), ] Import "from treebeard.templatetags import needs_checkboxes" should be placed at the top of the module
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:57: [E0611(no-name-in-module), get_result_and_row_class] No name 'EMPTY_CHANGELIST_VALUE' in module 'django.contrib.admin.views.main'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:57: [C0415(import-outside-toplevel), get_result_and_row_class] Import outside toplevel (django.contrib.admin.views.main.EMPTY_CHANGELIST_VALUE)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:53: [R0912(too-many-branches), get_result_and_row_class] Too many branches (19/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/treebeard/templatetags/admin_tree.py:136: [R0914(too-many-locals), items_for_result] Too many local variables (18/15)
************* Module sorl.thumbnail
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/__init__.py:3: [C0305(trailing-newlines), ] Trailing newlines
************* Module sorl.thumbnail.images
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:91: [W0511(fixme), ] TODO: Add a customizable naming method as a signal
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:46: [R0205(useless-object-inheritance), BaseImageFile] Class 'BaseImageFile' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:216: [W0223(abstract-method), UrlStorage] Method 'get_accessed_time' is abstract in class 'Storage' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:216: [W0223(abstract-method), UrlStorage] Method 'get_created_time' is abstract in class 'Storage' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:216: [W0223(abstract-method), UrlStorage] Method 'get_modified_time' is abstract in class 'Storage' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:216: [W0223(abstract-method), UrlStorage] Method 'listdir' is abstract in class 'Storage' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:216: [W0223(abstract-method), UrlStorage] Method 'path' is abstract in class 'Storage' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:216: [W0223(abstract-method), UrlStorage] Method 'size' is abstract in class 'Storage' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/images.py:262: [W0703(broad-except), delete_all_thumbnails.walk] Catching too general exception Exception
************* Module sorl.thumbnail.log
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/log.py:14: [C0415(import-outside-toplevel), ThumbnailLogHandler.emit] Import outside toplevel (traceback)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/log.py:23: [W0703(broad-except), ThumbnailLogHandler.emit] Catching too general exception Exception
************* Module sorl.thumbnail.base
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:22: [R0205(useless-object-inheritance), ThumbnailBackend] Class 'ThumbnailBackend' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:61: [W0621(redefined-outer-name), ThumbnailBackend._get_format] Redefining name 'settings' from outer scope (line 5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:52: [R1705(no-else-return), ThumbnailBackend._get_format] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:52: [R1714(consider-using-in), ThumbnailBackend._get_format] Consider merging these comparisons with "in" to "file_extension in ('.jpg', '.jpeg')"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:61: [W0404(reimported), ThumbnailBackend._get_format] Reimport 'settings' (imported line 5)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:61: [C0415(import-outside-toplevel), ThumbnailBackend._get_format] Import outside toplevel (django.conf.settings)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:107: [R1705(no-else-return), ThumbnailBackend.get_thumbnail] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:65: [R0912(too-many-branches), ThumbnailBackend.get_thumbnail] Too many branches (13/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:165: [R0914(too-many-locals), ThumbnailBackend._create_alternative_resolutions] Too many local variables (19/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/base.py:180: [C0200(consider-using-enumerate), ThumbnailBackend._create_alternative_resolutions] Consider using enumerate instead of iterating with range and len
************* Module sorl.thumbnail.parsers
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/parsers.py:100: [R1705(no-else-return), parse_cropbox] Unnecessary "else" after "return"
************* Module sorl.thumbnail.models
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/models.py:13: [E0307(invalid-str-returned), KVStore.__str__] __str__ does not return str
************* Module sorl.thumbnail.conf
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/conf/__init__.py:6: [R0205(useless-object-inheritance), Settings] Class 'Settings' inherits from object, can be safely removed from bases in python3
************* Module sorl.thumbnail.kvstores.redis_kvstore
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/redis_kvstore.py:1: [E0401(import-error), ] Unable to import 'redis'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/redis_kvstore.py:2: [C0411(wrong-import-order), ] third party import "from sorl.thumbnail.kvstores.base import KVStoreBase" should be placed before "import redis"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/redis_kvstore.py:3: [C0411(wrong-import-order), ] third party import "from sorl.thumbnail.conf import settings" should be placed before "import redis"
************* Module sorl.thumbnail.kvstores.dynamodb_kvstore
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dynamodb_kvstore.py:1: [E0401(import-error), ] Unable to import 'boto.dynamodb2.table'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dynamodb_kvstore.py:2: [E0401(import-error), ] Unable to import 'boto'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dynamodb_kvstore.py:33: [W0106(expression-not-assigned), KVStore._delete_raw] Expression "[self.table.delete_item(key=k) for k in keys]" is assigned to nothing
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dynamodb_kvstore.py:3: [C0411(wrong-import-order), ] third party import "from sorl.thumbnail.kvstores.base import KVStoreBase" should be placed before "from boto.dynamodb2.table import Table"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dynamodb_kvstore.py:4: [C0411(wrong-import-order), ] third party import "from sorl.thumbnail.conf import settings" should be placed before "from boto.dynamodb2.table import Table"
************* Module sorl.thumbnail.kvstores.dbm_kvstore
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dbm_kvstore.py:19: [E0401(import-error), ] Unable to import 'msvcrt'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dbm_kvstore.py:36: [R0205(useless-object-inheritance), DBMContext] Class 'DBMContext' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/dbm_kvstore.py:50: [W0201(attribute-defined-outside-init), DBMContext.__enter__] Attribute 'db' defined outside __init__
************* Module sorl.thumbnail.kvstores.base
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/base.py:20: [R0205(useless-object-inheritance), KVStoreBase] Class 'KVStoreBase' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/base.py:86: [W0621(redefined-outer-name), KVStoreBase.delete_all_thumbnail_files] Redefining name 'key' from outer scope (line 83)
************* Module sorl.thumbnail.kvstores.cached_db_kvstore
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/cached_db_kvstore.py:7: [R0205(useless-object-inheritance), EMPTY_VALUE] Class 'EMPTY_VALUE' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/cached_db_kvstore.py:12: [W0235(useless-super-delegation), KVStore.__init__] Useless super delegation in method '__init__'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/kvstores/cached_db_kvstore.py:23: [W0221(arguments-differ), KVStore.clear] Parameters differ from overridden 'clear' method
************* Module sorl.thumbnail.admin.current
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/admin/current.py:24: [W0221(arguments-differ), AdminImageWidget.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/admin/current.py:34: [W0703(broad-except), AdminImageWidget.render] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/admin/current.py:38: [W0703(broad-except), AdminImageWidget.render] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/admin/current.py:53: [R0205(useless-object-inheritance), AdminImageMixin] Class 'AdminImageMixin' inherits from object, can be safely removed from bases in python3
************* Module sorl.thumbnail.management.commands.thumbnail
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/management/commands/thumbnail.py:9: [W0223(abstract-method), Command] Method 'handle_label' is abstract in class 'LabelCommand' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/management/commands/thumbnail.py:15: [R0912(too-many-branches), Command.handle] Too many branches (14/12)
************* Module sorl.thumbnail.engines.pgmagick_engine
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:1: [E0401(import-error), ] Unable to import 'pgmagick'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:2: [E0401(import-error), ] Unable to import 'pgmagick'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:14: [W0223(abstract-method), Engine] Method '_blur' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:14: [W0223(abstract-method), Engine] Method '_entropy_crop' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:14: [W0223(abstract-method), Engine] Method '_padding' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:14: [W0223(abstract-method), Engine] Method '_remove_border' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:14: [W0223(abstract-method), Engine] Method '_rounded' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:3: [C0411(wrong-import-order), ] third party import "from sorl.thumbnail.engines.base import EngineBase" should be placed before "from pgmagick import Blob, Geometry, Image, ImageType"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pgmagick_engine.py:6: [C0412(ungrouped-imports), ] Imports from package pgmagick are not grouped
************* Module sorl.thumbnail.engines.pil_engine
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pil_engine.py:28: [C0415(import-outside-toplevel), histogram_entropy_py] Import outside toplevel (math.log2, math.fsum)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pil_engine.py:86: [W0703(broad-except), Engine.is_valid_image] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pil_engine.py:95: [W0622(redefined-builtin), Engine.colorspace] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pil_engine.py:105: [W0703(broad-except), Engine._get_exif_orientation] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pil_engine.py:108: [R1705(no-else-return), Engine._get_exif_orientation] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pil_engine.py:138: [W0622(redefined-builtin), Engine._colorspace] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/pil_engine.py:138: [W0221(arguments-differ), Engine._colorspace] Parameters differ from overridden '_colorspace' method
************* Module sorl.thumbnail.engines.vipsthumbnail_engine
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_blur' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_crop' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_cropbox' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_entropy_crop' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_get_raw_data' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_padding' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_remove_border' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:17: [W0223(abstract-method), Engine] Method '_rounded' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/vipsthumbnail_engine.py:56: [W0612(unused-variable), Engine.write] Unused variable 'out'
************* Module sorl.thumbnail.engines.base
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/base.py:7: [R0205(useless-object-inheritance), EngineBase] Class 'EngineBase' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/base.py:50: [E1101(no-member), EngineBase.flip_dimensions] Instance of 'EngineBase' has no '_flip_dimensions' member; maybe 'flip_dimensions'?
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/base.py:97: [R1705(no-else-return), EngineBase.crop] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/base.py:152: [W0107(unnecessary-pass), EngineBase.cleanup] Unnecessary pass statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/base.py:43: [W0201(attribute-defined-outside-init), EngineBase.orientation] Attribute 'reoriented' defined outside __init__
************* Module sorl.thumbnail.engines.wand_engine
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:5: [E0401(import-error), ] Unable to import 'wand.image'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:6: [E0401(import-error), ] Unable to import 'wand'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:10: [W0223(abstract-method), Engine] Method '_blur' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:10: [W0223(abstract-method), Engine] Method '_entropy_crop' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:10: [W0223(abstract-method), Engine] Method '_padding' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:10: [W0223(abstract-method), Engine] Method '_remove_border' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:10: [W0223(abstract-method), Engine] Method '_rounded' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/wand_engine.py:7: [C0411(wrong-import-order), ] third party import "from sorl.thumbnail.engines.base import EngineBase" should be placed before "from wand.image import Image"
************* Module sorl.thumbnail.engines.convert_engine
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:120: [W0511(fixme), ] XXX need to get the dimensions right after a transpose.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:19: [W0223(abstract-method), Engine] Method '_blur' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:19: [W0223(abstract-method), Engine] Method '_entropy_crop' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:19: [W0223(abstract-method), Engine] Method '_get_raw_data' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:19: [W0223(abstract-method), Engine] Method '_remove_border' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:19: [W0223(abstract-method), Engine] Method '_rounded' is abstract in class 'EngineBase' but is not overridden
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:47: [C0113(unneeded-not), Engine.write] Consider changing "not flatten == 'off'" to "flatten != 'off'"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:59: [R1720(no-else-raise), Engine.write] Unnecessary "elif" after "raise"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:57: [W0612(unused-variable), Engine.write] Unused variable 'out'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/engines/convert_engine.py:113: [R1705(no-else-return), Engine._get_exif_orientation] Unnecessary "else" after "return"
************* Module sorl.thumbnail.templatetags.thumbnail
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:35: [W0703(broad-except), safe_filter.inner.wrapper] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:38: [W1201(logging-not-lazy), safe_filter.inner.wrapper] Use lazy % formatting in logging functions
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:57: [W0703(broad-except), ThumbnailNodeBase.render] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:78: [W0703(broad-except), ThumbnailNodeBase.render] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:70: [E1101(no-member), ThumbnailNodeBase.render] Instance of 'ThumbnailNodeBase' has no 'source' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:134: [W0621(redefined-outer-name), ThumbnailNode._render] Redefining name 'thumbnail' from outer scope (line 190)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:141: [R1705(no-else-return), ThumbnailNode._render] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:177: [W0621(redefined-outer-name), resolution] Redefining name 'resolution' from outer scope (line 167)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:218: [W0621(redefined-outer-name), margin] Redefining name 'margin' from outer scope (line 210)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/thumbnail.py:249: [W0621(redefined-outer-name), background_margin] Redefining name 'margin' from outer scope (line 210)
************* Module sorl.thumbnail.templatetags.sorl_thumbnail
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0401(wildcard-import), ] Wildcard import thumbnail
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import decimal from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import logging from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import sys from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import re from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import os from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import register from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import kw_pat from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import logger from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import safe_filter from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import ThumbnailNodeBase from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import ThumbnailNode from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import resolution from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import thumbnail from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import is_portrait from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import margin from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import background_margin from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import text_filter from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import markdown_thumbnails from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import html_thumbnails from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import wraps from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import Library from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import Node from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import NodeList from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import TemplateSyntaxError from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import smart_str from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import sorl_settings from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import default from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import ImageFile from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import DummyImageFile from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import parse_geometry from wildcard import
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/sorl/thumbnail/templatetags/sorl_thumbnail.py:8: [W0614(unused-wildcard-import), ] Unused import get_thumbnail from wildcard import
************* Module django_tables2.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/views.py:13: [R0205(useless-object-inheritance), TableMixinBase] Class 'TableMixinBase' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/views.py:33: [E1101(no-member), TableMixinBase.get_table_pagination] Instance of 'TableMixinBase' has no 'paginate_by' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/views.py:37: [E1101(no-member), TableMixinBase.get_table_pagination] Instance of 'TableMixinBase' has no 'paginate_by' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/views.py:97: [R1705(no-else-return), SingleTableMixin.get_table_data] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/views.py:180: [R1705(no-else-return), MultiTableMixin.get_tables] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/views.py:192: [W1308(duplicate-string-formatting-argument), MultiTableMixin.get_tables] Duplicate string formatting argument 'klass', consider passing as named argument
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/views.py:204: [W0621(redefined-outer-name), MultiTableMixin.get_context_data] Redefining name 'tables' from outer scope (line 9)
************* Module django_tables2.utils
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:1: [C0302(too-many-lines), ] Too many lines in module (584/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:40: [R1720(no-else-raise), Sequence.expand] Unnecessary "elif" after "raise"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:201: [R1714(consider-using-in), OrderByTuple.__getitem__] Consider merging these comparisons with "in" to 'index in (order_by, order_by.bare)'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:215: [R0205(useless-object-inheritance), OrderByTuple.key.Comparator] Class 'Comparator' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:228: [E1101(no-member), OrderByTuple.key.Comparator.__lt__] Instance of '_MovedItems' has no 'zip' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:356: [W0703(broad-except), Accessor.resolve] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:366: [R1710(inconsistent-return-statements), Accessor.get_field] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:473: [W0120(useless-else-on-loop), segment] Else clause on loop without a break statement
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:501: [W0621(redefined-outer-name), signature] Redefining name 'signature' from outer scope (line 479)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:488: [C0415(import-outside-toplevel), signature] Import outside toplevel (inspect)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/utils.py:493: [W1505(deprecated-method), signature] Using deprecated method getargspec()
************* Module django_tables2.data
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:6: [R0205(useless-object-inheritance), TableData] Class 'TableData' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:48: [R1705(no-else-return), TableData.from_data] Unnecessary "elif" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:107: [E1101(no-member), TableListData.order_by] Instance of 'TableListData' has no 'columns' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:161: [E1101(no-member), TableQuerysetData.ordering] Instance of 'TableQuerysetData' has no 'columns' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:181: [E1101(no-member), TableQuerysetData.order_by] Instance of 'TableQuerysetData' has no 'columns' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:207: [W0236(invalid-overridden-method), TableQuerysetData.verbose_name] Method 'verbose_name' was expected to be 'property', found it instead as 'method'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:216: [W0236(invalid-overridden-method), TableQuerysetData.verbose_name_plural] Method 'verbose_name_plural' was expected to be 'property', found it instead as 'method'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:137: [E0203(access-member-before-definition), TableQuerysetData.__len__] Access to member '_length' before its definition line 140
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:140: [W0201(attribute-defined-outside-init), TableQuerysetData.__len__] Attribute '_length' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/data.py:143: [W0201(attribute-defined-outside-init), TableQuerysetData.__len__] Attribute '_length' defined outside __init__
************* Module django_tables2.tables
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:1: [C0302(too-many-lines), ] Too many lines in module (670/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:28: [C0204(bad-mcs-classmethod-argument), DeclarativeColumnsMetaclass.__new__] Metaclass class method __new__ should have 'cls' as first argument
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:28: [R0914(too-many-locals), DeclarativeColumnsMetaclass.__new__] Too many local variables (20/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:61: [E1133(not-an-iterable), DeclarativeColumnsMetaclass.__new__] Non-iterable value opts.fields is used in an iterating context
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:28: [R0912(too-many-branches), DeclarativeColumnsMetaclass.__new__] Too many branches (20/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:104: [R0205(useless-object-inheritance), TableOptions] Class 'TableOptions' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:104: [R0902(too-many-instance-attributes), TableOptions] Too many instance attributes (20/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:148: [R0205(useless-object-inheritance), TableBase] Class 'TableBase' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:148: [R0902(too-many-instance-attributes), TableBase] Too many instance attributes (32/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:215: [R0913(too-many-arguments), TableBase.__init__] Too many arguments (21/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:215: [R0914(too-many-locals), TableBase.__init__] Too many local variables (24/15)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:258: [E1101(no-member), TableBase.__init__] Class 'TableBase' has no 'base_columns' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:215: [R0912(too-many-branches), TableBase.__init__] Too many branches (15/12)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:215: [R0915(too-many-statements), TableBase.__init__] Too many statements (55/50)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:505: [W1113(keyword-arg-before-vararg), TableBase.paginate] Keyword argument before variable positional arguments list in the definition of paginate function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:566: [E1101(no-member), TableBase.sequence] Instance of 'TableBase' has no 'base_columns' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:571: [R1705(no-else-return), TableBase.orderable] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:582: [R1705(no-else-return), TableBase.template_name] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:525: [W0201(attribute-defined-outside-init), TableBase.paginate] Attribute 'paginator' defined outside __init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/tables.py:526: [W0201(attribute-defined-outside-init), TableBase.paginate] Attribute 'page' defined outside __init__
************* Module django_tables2.config
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/config.py:7: [R0205(useless-object-inheritance), RequestConfig] Class 'RequestConfig' inherits from object, can be safely removed from bases in python3
************* Module django_tables2.rows
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:12: [R0205(useless-object-inheritance), CellAccessor] Class 'CellAccessor' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:26: [R0205(useless-object-inheritance), BoundRow] Class 'BoundRow' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:139: [W0612(unused-variable), BoundRow.__iter__] Unused variable 'column'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:171: [W0703(broad-except), BoundRow._get_and_render_with] Catching too general exception Exception
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:241: [R1705(no-else-return), BoundRow.__contains__] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:287: [R0205(useless-object-inheritance), BoundRows] Class 'BoundRows' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:321: [R1720(no-else-raise), BoundRows.generator_pinned_row] Unnecessary "else" after "raise"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/rows.py:353: [R1705(no-else-return), BoundRows.__getitem__] Unnecessary "else" after "return"
************* Module django_tables2.columns.linkcolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/linkcolumn.py:66: [W1401(anomalous-backslash-in-string), ] Anomalous backslash in string: '\d'. String constant might be missing an r prefix.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/linkcolumn.py:25: [W1113(keyword-arg-before-vararg), BaseLinkColumn.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/linkcolumn.py:56: [W0221(arguments-differ), BaseLinkColumn.value] Parameters differ from overridden 'value' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/linkcolumn.py:180: [W0221(arguments-differ), LinkColumn.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/linkcolumn.py:195: [W0221(arguments-differ), RelatedLinkColumn.compose_url] Parameters differ from overridden 'compose_url' method
************* Module django_tables2.columns.datetimecolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/datetimecolumn.py:23: [W0622(redefined-builtin), DateTimeColumn.__init__] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/datetimecolumn.py:23: [W1113(keyword-arg-before-vararg), DateTimeColumn.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/datetimecolumn.py:30: [R1710(inconsistent-return-statements), DateTimeColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.templatecolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/templatecolumn.py:55: [W0221(arguments-differ), TemplateColumn.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/templatecolumn.py:69: [R1705(no-else-return), TemplateColumn.render] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/templatecolumn.py:82: [R1705(no-else-return), TemplateColumn.value] Unnecessary "else" after "return"
************* Module django_tables2.columns.manytomanycolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/manytomanycolumn.py:47: [W0622(redefined-builtin), ManyToManyColumn.__init__] Redefining built-in 'filter'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/manytomanycolumn.py:47: [W1113(keyword-arg-before-vararg), ManyToManyColumn.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/manytomanycolumn.py:58: [E0202(method-hidden), ManyToManyColumn.transform] An attribute defined in django_tables2.columns.manytomanycolumn line 49 hides this method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/manytomanycolumn.py:64: [E0202(method-hidden), ManyToManyColumn.filter] An attribute defined in django_tables2.columns.manytomanycolumn line 51 hides this method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/manytomanycolumn.py:83: [R1710(inconsistent-return-statements), ManyToManyColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.timecolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/timecolumn.py:24: [W0622(redefined-builtin), TimeColumn.__init__] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/timecolumn.py:24: [W1113(keyword-arg-before-vararg), TimeColumn.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/timecolumn.py:31: [R1710(inconsistent-return-statements), TimeColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.booleancolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/booleancolumn.py:51: [W0221(arguments-differ), BooleanColumn.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/booleancolumn.py:63: [W0221(arguments-differ), BooleanColumn.value] Parameters differ from overridden 'value' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/booleancolumn.py:71: [R1710(inconsistent-return-statements), BooleanColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.urlcolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/urlcolumn.py:31: [W0221(arguments-differ), URLColumn.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/urlcolumn.py:35: [R1710(inconsistent-return-statements), URLColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.base
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:1: [C0302(too-many-lines), ] Too many lines in module (712/500)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:14: [R0205(useless-object-inheritance), Library] Class 'Library' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:55: [R0205(useless-object-inheritance), Column] Class 'Column' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:55: [R0902(too-many-instance-attributes), Column] Too many instance attributes (12/7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:114: [R0913(too-many-arguments), Column.__init__] Too many arguments (12/10)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:182: [R1705(no-else-return), Column.footer] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:188: [E1101(no-member), Column.footer] Instance of 'Column' has no 'render_footer' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:237: [R1710(inconsistent-return-statements), Column.from_field] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:263: [R0205(useless-object-inheritance), BoundColumn] Class 'BoundColumn' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:319: [E1101(no-member), BoundColumn.attrs] Instance of 'BoundColumn' has no 'current_record' member
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:556: [R0205(useless-object-inheritance), BoundColumns] Class 'BoundColumns' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/base.py:675: [R1705(no-else-return), BoundColumns.__contains__] Unnecessary "else" after "return"
************* Module django_tables2.columns.datecolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/datecolumn.py:23: [W0622(redefined-builtin), DateColumn.__init__] Redefining built-in 'format'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/datecolumn.py:23: [W1113(keyword-arg-before-vararg), DateColumn.__init__] Keyword argument before variable positional arguments list in the definition of __init__ function
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/datecolumn.py:30: [R1710(inconsistent-return-statements), DateColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.filecolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/filecolumn.py:50: [W0221(arguments-differ), FileColumn.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/filecolumn.py:76: [R1705(no-else-return), FileColumn.render] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/filecolumn.py:86: [R1710(inconsistent-return-statements), FileColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.jsoncolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/jsoncolumn.py:50: [W0221(arguments-differ), JSONColumn.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/jsoncolumn.py:60: [R1701(consider-merging-isinstance), JSONColumn.from_field] Consider merging these isinstance calls to isinstance(field, (HStoreField, JSONField))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/jsoncolumn.py:58: [R1710(inconsistent-return-statements), JSONColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/jsoncolumn.py:15: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module django_tables2.columns.emailcolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/emailcolumn.py:38: [W0221(arguments-differ), EmailColumn.render] Parameters differ from overridden 'render' method
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/emailcolumn.py:46: [R1710(inconsistent-return-statements), EmailColumn.from_field] Either all return statements in a function should return an expression, or none of them should.
************* Module django_tables2.columns.checkboxcolumn
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/columns/checkboxcolumn.py:63: [W0221(arguments-differ), CheckBoxColumn.render] Parameters differ from overridden 'render' method
************* Module django_tables2.export.views
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/export/views.py:6: [R0205(useless-object-inheritance), ExportMixin] Class 'ExportMixin' inherits from object, can be safely removed from bases in python3
************* Module django_tables2.export.export
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/export/export.py:14: [R0205(useless-object-inheritance), TableExport] Class 'TableExport' inherits from object, can be safely removed from bases in python3
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/export/export.py:59: [C0202(bad-classmethod-argument), TableExport.is_valid_format] Class method is_valid_format should have 'cls' as first argument
************* Module django_tables2.templatetags.django_tables2
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/django_tables2.py:76: [R1705(no-else-return), QuerystringNode.render] Unnecessary "else" after "return"
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/django_tables2.py:155: [W0621(redefined-outer-name), RenderTableNode.render] Redefining name 'template' from outer scope (line 7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/django_tables2.py:207: [W0621(redefined-outer-name), render_table] Redefining name 'template' from outer scope (line 7)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/django_tables2.py:233: [C0412(ungrouped-imports), ] Imports from package django are not grouped
************* Module django_tables2.templatetags.__init__
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.auth -> django.contrib.auth.models)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin -> django.contrib.admin.decorators -> django.contrib.admin.sites)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.checks -> django.contrib.admin.options)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.checks -> django.contrib.admin.utils -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.templatetags.admin_urls -> django.contrib.admin.options)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.actions -> django.contrib.admin.utils -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.templatetags.admin_urls -> django.contrib.admin.options -> django.contrib.admin.checks -> django.contrib.admin.sites)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.options -> django.contrib.admin.templatetags.admin_urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.helpers -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.templatetags.admin_urls -> django.contrib.admin.options)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.auth.decorators -> django.contrib.auth.views)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.options -> django.contrib.admin.widgets -> django.contrib.admin.views.main)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.templatetags.admin_list -> django.contrib.admin.templatetags.admin_urls -> django.contrib.admin.utils)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.templatetags.admin_list -> django.contrib.admin.views.main -> django.contrib.admin.utils)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin -> django.contrib.admin.decorators -> django.contrib.admin.sites -> django.contrib.admin.actions -> django.contrib.admin.helpers -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.views.main)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin -> django.contrib.admin.decorators)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin -> django.contrib.admin.helpers -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.templatetags.admin_urls -> django.contrib.admin.options -> django.contrib.admin.checks -> django.contrib.admin.sites)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.checks -> django.contrib.admin.utils -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.views.main -> django.contrib.admin.options)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin -> django.contrib.admin.filters -> django.contrib.admin.options -> django.contrib.admin.checks -> django.contrib.admin.utils -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.views.main)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin.models -> django.contrib.admin.utils -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.templatetags.admin_urls -> django.contrib.admin.options)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin -> django.contrib.admin.options -> django.contrib.admin.checks -> django.contrib.admin.utils -> django.contrib.admin.templatetags.admin_list -> django.contrib.admin.views.main)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.admin -> django.contrib.admin.options -> django.contrib.admin.checks -> django.contrib.admin.sites)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django.contrib.sessions.backends.db -> django.contrib.sessions.models)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (oscar.core.application -> oscar.core.loading)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (oscar.test.factories -> oscar.test.factories.voucher)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.rows -> django_tables2.columns.linkcolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.views -> django_tables2.tables -> django_tables2.rows -> django_tables2.columns.linkcolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.columns -> django_tables2.columns.checkboxcolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.columns -> django_tables2.columns.emailcolumn -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.columns -> django_tables2.columns.emailcolumn -> django_tables2.columns.linkcolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.checkboxcolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.emailcolumn -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.emailcolumn -> django_tables2.columns.linkcolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.datetimecolumn -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.timecolumn -> django_tables2.columns.templatecolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.manytomanycolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.timecolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.booleancolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.urlcolumn -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.datecolumn -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.filecolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0401(cyclic-import), ] Cyclic import (django_tables2 -> django_tables2.tables -> django_tables2.columns -> django_tables2.columns.jsoncolumn -> django_tables2.columns.base -> django_tables2.templatetags.django_tables2)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.abstract_models:0
==oscar.apps.catalogue.abstract_models:0
import logging
import os
from datetime import date, datetime

from django.conf import settings
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.contrib.staticfiles.finders import find
from django.core.cache import cache
from django.core.exceptions import ImproperlyConfigured, ValidationError
from django.core.files.base import File
from django.core.validators import RegexValidator
from django.db import models
from django.db.models import Count, Sum
from django.urls import reverse
from django.utils.functional import cached_property
from django.utils.html import strip_tags
from django.utils.safestring import mark_safe
from django.utils.translation import gettext_lazy as _
from django.utils.translation import get_language, pgettext_lazy
from treebeard.mp_tree import MP_Node

from oscar.core.loading import get_class, get_model
from oscar.core.utils import slugify
from oscar.core.validators import non_python_keyword
from oscar.models.fields import AutoSlugField, NullCharField
from oscar.models.fields.slugfield import SlugField

BrowsableProductManager = get_class('catalogue.managers', 'BrowsableProductManager')
ProductQuerySet = get_class('catalogue.managers', 'ProductQuerySet')
ProductAttributesContainer = get_class(
    'catalogue.product_attributes', 'ProductAttributesContainer')


class AbstractProductClass(models.Model):
    """
    Used for defining options and attributes for a subset of products.
    E.g. Books, DVDs and Toys. A product can only belong to one product class.

    At least one product class must be created when setting up a new
    Oscar deployment.

    Not necessarily equivalent to top-level categories but usually will be.
    """
    name = models.CharField(_('Name'), max_length=128)
    slug = AutoSlugField(_('Slug'), max_length=128, unique=True,
                         populate_from='name')

    #: Some product type don't require shipping (e.g. digital products) - we use
    #: this field to take some shortcuts in the checkout.
    requires_shipping = models.BooleanField(_("Requires shipping?"),
                                            default=True)

    #: Digital products generally don't require their stock levels to be
    #: tracked.
    track_stock = models.BooleanField(_("Track stock levels?"), default=True)

    #: These are the options (set by the user when they add to basket) for this
    #: item class.  For instance, a product class of "SMS message" would always
    #: require a message to be specified before it could be bought.
    #: Note that you can also set options on a per-product level.
    options = models.ManyToManyField(
        'catalogue.Option', blank=True, verbose_name=_("Options"))

    class Meta:
        abstract = True
        app_label = 'catalogue'
        ordering = ['name']
        verbose_name = _("Product class")
        verbose_name_plural = _("Product classes")

    def __str__(self):
        return self.name

    @property
    def has_attributes(self):
        return self.attributes.exists()


class AbstractCategory(MP_Node):
    """
    A product category. Merely used for navigational purposes; has no
    effects on business logic.

    Uses :py:mod:`django-treebeard`.
    """
    #: Allow comparison of categories on a limited number of fields by ranges.
    #: When the Category model is overwritten to provide CMS content, defining
    #: this avoids fetching a lot of unneeded extra data from the database.
    COMPARISON_FIELDS = ('pk', 'path', 'depth')

    name = models.CharField(_('Name'), max_length=255, db_index=True)
    description = models.TextField(_('Description'), blank=True)
    image = models.ImageField(_('Image'), upload_to='categories', blank=True,
                              null=True, max_length=255)
    slug = SlugField(_('Slug'), max_length=255, db_index=True)

    _slug_separator = '/'
    _full_name_separator = ' > '

    def __str__(self):
        return self.full_name

    @property
    def full_name(self):
        """
        Returns a string representation of the category and it's ancestors,
        e.g. 'Books > Non-fiction > Essential programming'.

        It's rarely used in Oscar, but used to be stored as a CharField and is
        hence kept for backwards compatibility. It's also sufficiently useful
        to keep around.
        """
        names = [category.name for category in self.get_ancestors_and_self()]
        return self._full_name_separator.join(names)

    def get_full_slug(self, parent_slug=None):
        if self.is_root():
            return self.slug

        cache_key = self.get_url_cache_key()
        full_slug = cache.get(cache_key)
        if full_slug is None:
            parent_slug = parent_slug if parent_slug is not None else self.get_parent().full_slug
            full_slug = "%s%s%s" % (parent_slug, self._slug_separator, self.slug)
            cache.set(cache_key, full_slug)

        return full_slug

    @property
    def full_slug(self):
        """
        Returns a string of this category's slug concatenated with the slugs
        of it's ancestors, e.g. 'books/non-fiction/essential-programming'.

        Oscar used to store this as in the 'slug' model field, but this field
        has been re-purposed to only store this category's slug and to not
        include it's ancestors' slugs.
        """
        return self.get_full_slug()

    def generate_slug(self):
        """
        Generates a slug for a category. This makes no attempt at generating
        a unique slug.
        """
        return slugify(self.name)

    def save(self, *args, **kwargs):
        """
        Oscar traditionally auto-generated slugs from names. As that is
        often convenient, we still do so if a slug is not supplied through
        other means. If you want to control slug creation, just create
        instances with a slug already set, or expose a field on the
        appropriate forms.
        """
        if not self.slug:
            self.slug = self.generate_slug()

        super().save(*args, **kwargs)

    def get_ancestors_and_self(self):
        """
        Gets ancestors and includes itself. Use treebeard's get_ancestors
        if you don't want to include the category itself. It's a separate
        function as it's commonly used in templates.
        """
        if self.is_root():
            return [self]

        return list(self.get_ancestors()) + [self]

    def get_descendants_and_self(self):
        """
        Gets descendants and includes itself. Use treebeard's get_descendants
        if you don't want to include the category itself. It's a separate
        function as it's commonly used in templates.
        """
        return list(self.get_descendants()) + [self]

    def get_url_cache_key(self):
        current_locale = get_language()
        cache_key = 'CATEGORY_URL_%s_%s' % (current_locale, self.pk)
        return cache_key

    def _get_absolute_url(self, parent_slug=None):
        """
        Our URL scheme means we have to look up the category's ancestors. As
        that is a bit more expensive, we cache the generated URL. That is
        safe even for a stale cache, as the default implementation of
        ProductCategoryView does the lookup via primary key anyway. But if
        you change that logic, you'll have to reconsider the caching
        approach.
        """
        return reverse('catalogue:category', kwargs={
            'category_slug': self.get_full_slug(parent_slug=parent_slug), 'pk': self.pk
        })

    def get_absolute_url(self):
        return self._get_absolute_url()

    class Meta:
        abstract = True
        app_label = 'catalogue'
        ordering = ['path']
        verbose_name = _('Category')
        verbose_name_plural = _('Categories')

    def has_children(self):
        return self.get_num_children() > 0

    def get_num_children(self):
        return self.get_children().count()


class AbstractProductCategory(models.Model):
    """
    Joining model between products and categories. Exists to allow customising.
    """
    product = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        verbose_name=_("Product"))
    category = models.ForeignKey(
        'catalogue.Category',
        on_delete=models.CASCADE,
        verbose_name=_("Category"))

    class Meta:
        abstract = True
        app_label = 'catalogue'
        ordering = ['product', 'category']
        unique_together = ('product', 'category')
        verbose_name = _('Product category')
        verbose_name_plural = _('Product categories')

    def __str__(self):
        return "<productcategory for product '%s'>" % self.product


class AbstractProduct(models.Model):
    """
    The base product object

    There's three kinds of products; they're distinguished by the structure
    field.

    - A stand alone product. Regular product that lives by itself.
    - A child product. All child products have a parent product. They're a
      specific version of the parent.
    - A parent product. It essentially represents a set of products.

    An example could be a yoga course, which is a parent product. The different
    times/locations of the courses would be associated with the child products.
    """
    STANDALONE, PARENT, CHILD = 'standalone', 'parent', 'child'
    STRUCTURE_CHOICES = (
        (STANDALONE, _('Stand-alone product')),
        (PARENT, _('Parent product')),
        (CHILD, _('Child product'))
    )
    structure = models.CharField(
        _("Product structure"), max_length=10, choices=STRUCTURE_CHOICES,
        default=STANDALONE)

    is_public = models.BooleanField(
        _('Is public'),
        default=True,
        help_text=_("Show this product in search results and catalogue listings."))

    upc = NullCharField(
        _("UPC"), max_length=64, blank=True, null=True, unique=True,
        help_text=_("Universal Product Code (UPC) is an identifier for "
                    "a product which is not specific to a particular "
                    " supplier. Eg an ISBN for a book."))

    parent = models.ForeignKey(
        'self',
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name='children',
        verbose_name=_("Parent product"),
        help_text=_("Only choose a parent product if you're creating a child "
                    "product.  For example if this is a size "
                    "4 of a particular t-shirt.  Leave blank if this is a "
                    "stand-alone product (i.e. there is only one version of"
                    " this product)."))

    # Title is mandatory for canonical products but optional for child products
    title = models.CharField(pgettext_lazy('Product title', 'Title'),
                             max_length=255, blank=True)
    slug = models.SlugField(_('Slug'), max_length=255, unique=False)
    description = models.TextField(_('Description'), blank=True)

    #: "Kind" of product, e.g. T-Shirt, Book, etc.
    #: None for child products, they inherit their parent's product class
    product_class = models.ForeignKey(
        'catalogue.ProductClass',
        null=True,
        blank=True,
        on_delete=models.PROTECT,
        verbose_name=_('Product type'), related_name="products",
        help_text=_("Choose what type of product this is"))
    attributes = models.ManyToManyField(
        'catalogue.ProductAttribute',
        through='ProductAttributeValue',
        verbose_name=_("Attributes"),
        help_text=_("A product attribute is something that this product may "
                    "have, such as a size, as specified by its class"))
    #: It's possible to have options product class-wide, and per product.
    product_options = models.ManyToManyField(
        'catalogue.Option', blank=True, verbose_name=_("Product options"),
        help_text=_("Options are values that can be associated with a item "
                    "when it is added to a customer's basket.  This could be "
                    "something like a personalised message to be printed on "
                    "a T-shirt."))

    recommended_products = models.ManyToManyField(
        'catalogue.Product', through='ProductRecommendation', blank=True,
        verbose_name=_("Recommended products"),
        help_text=_("These are products that are recommended to accompany the "
                    "main product."))

    # Denormalised product rating - used by reviews app.
    # Product has no ratings if rating is None
    rating = models.FloatField(_('Rating'), null=True, editable=False)

    date_created = models.DateTimeField(
        _("Date created"), auto_now_add=True, db_index=True)

    # This field is used by Haystack to reindex search
    date_updated = models.DateTimeField(
        _("Date updated"), auto_now=True, db_index=True)

    categories = models.ManyToManyField(
        'catalogue.Category', through='ProductCategory',
        verbose_name=_("Categories"))

    #: Determines if a product may be used in an offer. It is illegal to
    #: discount some types of product (e.g. ebooks) and this field helps
    #: merchants from avoiding discounting such products
    #: Note that this flag is ignored for child products; they inherit from
    #: the parent product.
    is_discountable = models.BooleanField(
        _("Is discountable?"), default=True, help_text=_(
            "This flag indicates if this product can be used in an offer "
            "or not"))

    objects = ProductQuerySet.as_manager()
    # browsable property is deprecated and will be removed in Oscar 2.1
    # Use Product.objects.browsable() instead.
    browsable = BrowsableProductManager()

    class Meta:
        abstract = True
        app_label = 'catalogue'
        ordering = ['-date_created']
        verbose_name = _('Product')
        verbose_name_plural = _('Products')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.attr = ProductAttributesContainer(product=self)

    def __str__(self):
        if self.title:
            return self.title
        if self.attribute_summary:
            return "%s (%s)" % (self.get_title(), self.attribute_summary)
        else:
            return self.get_title()

    def get_absolute_url(self):
        """
        Return a product's absolute URL
        """
        return reverse('catalogue:detail',
                       kwargs={'product_slug': self.slug, 'pk': self.id})

    def clean(self):
        """
        Validate a product. Those are the rules:

        +---------------+-------------+--------------+--------------+
        |               | stand alone | parent       | child        |
        +---------------+-------------+--------------+--------------+
        | title         | required    | required     | optional     |
        +---------------+-------------+--------------+--------------+
        | product class | required    | required     | must be None |
        +---------------+-------------+--------------+--------------+
        | parent        | forbidden   | forbidden    | required     |
        +---------------+-------------+--------------+--------------+
        | stockrecords  | 0 or more   | forbidden    | 0 or more    |
        +---------------+-------------+--------------+--------------+
        | categories    | 1 or more   | 1 or more    | forbidden    |
        +---------------+-------------+--------------+--------------+
        | attributes    | optional    | optional     | optional     |
        +---------------+-------------+--------------+--------------+
        | rec. products | optional    | optional     | unsupported  |
        +---------------+-------------+--------------+--------------+
        | options       | optional    | optional     | forbidden    |
        +---------------+-------------+--------------+--------------+

        Because the validation logic is quite complex, validation is delegated
        to the sub method appropriate for the product's structure.
        """
        getattr(self, '_clean_%s' % self.structure)()
        if not self.is_parent:
            self.attr.validate_attributes()

    def _clean_standalone(self):
        """
        Validates a stand-alone product
        """
        if not self.title:
            raise ValidationError(_("Your product must have a title."))
        if not self.product_class:
            raise ValidationError(_("Your product must have a product class."))
        if self.parent_id:
            raise ValidationError(_("Only child products can have a parent."))

    def _clean_child(self):
        """
        Validates a child product
        """
        if not self.parent_id:
            raise ValidationError(_("A child product needs a parent."))
        if self.parent_id and not self.parent.is_parent:
            raise ValidationError(
                _("You can only assign child products to parent products."))
        if self.product_class:
            raise ValidationError(
                _("A child product can't have a product class."))
        if self.pk and self.categories.exists():
            raise ValidationError(
                _("A child product can't have a category assigned."))
        # Note that we only forbid options on product level
        if self.pk and self.product_options.exists():
            raise ValidationError(
                _("A child product can't have options."))

    def _clean_parent(self):
        """
        Validates a parent product.
        """
        self._clean_standalone()
        if self.has_stockrecords:
            raise ValidationError(
                _("A parent product can't have stockrecords."))

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.get_title())
        super().save(*args, **kwargs)
        self.attr.save()

    # Properties

    @property
    def is_standalone(self):
        return self.structure == self.STANDALONE

    @property
    def is_parent(self):
        return self.structure == self.PARENT

    @property
    def is_child(self):
        return self.structure == self.CHILD

    def can_be_parent(self, give_reason=False):
        """
        Helps decide if a the product can be turned into a parent product.
        """
        reason = None
        if self.is_child:
            reason = _('The specified parent product is a child product.')
        if self.has_stockrecords:
            reason = _(
                "One can't add a child product to a product with stock"
                " records.")
        is_valid = reason is None
        if give_reason:
            return is_valid, reason
        else:
            return is_valid

    @property
    def options(self):
        """
        Returns a set of all valid options for this product.
        It's possible to have options product class-wide, and per product.
        """
        pclass_options = self.get_product_class().options.all()
        return pclass_options | self.product_options.all()

    @cached_property
    def has_options(self):
        # Extracting annotated value with number of product class options
        # from product list queryset.
        has_product_class_options = getattr(self, 'has_product_class_options', None)
        has_product_options = getattr(self, 'has_product_options', None)
        if has_product_class_options is not None and has_product_options is not None:
            return has_product_class_options or has_product_options
        return self.get_product_class().options.exists() or self.product_options.exists()

    @property
    def is_shipping_required(self):
        return self.get_product_class().requires_shipping

    @property
    def has_stockrecords(self):
        """
        Test if this product has any stockrecords
        """
        return self.stockrecords.exists()

    @property
    def num_stockrecords(self):
        return self.stockrecords.count()

    @property
    def attribute_summary(self):
        """
        Return a string of all of a product's attributes
        """
        attributes = self.attribute_values.all()
        pairs = [attribute.summary() for attribute in attributes]
        return ", ".join(pairs)

    def get_title(self):
        """
        Return a product's title or it's parent's title if it has no title
        """
        title = self.title
        if not title and self.parent_id:
            title = self.parent.title
        return title
    get_title.short_description = pgettext_lazy("Product title", "Title")

    def get_product_class(self):
        """
        Return a product's item class. Child products inherit their parent's.
        """
        if self.is_child:
            return self.parent.product_class
        else:
            return self.product_class
    get_product_class.short_description = _("Product class")

    def get_is_discountable(self):
        """
        At the moment, :py:attr:`.is_discountable` can't be set individually for child
        products; they inherit it from their parent.
        """
        if self.is_child:
            return self.parent.is_discountable
        else:
            return self.is_discountable

    def get_categories(self):
        """
        Return a product's categories or parent's if there is a parent product.
        """
        if self.is_child:
            return self.parent.categories
        else:
            return self.categories
    get_categories.short_description = _("Categories")

    # Images

    def get_missing_image(self):
        """
        Returns a missing image object.
        """
        # This class should have a 'name' property so it mimics the Django file
        # field.
        return MissingProductImage()

    def get_all_images(self):
        if self.is_child and not self.images.exists():
            return self.parent.images.all()
        return self.images.all()

    def primary_image(self):
        """
        Returns the primary image for a product. Usually used when one can
        only display one product image, e.g. in a list of products.
        """
        images = self.get_all_images()
        ordering = self.images.model.Meta.ordering
        if not ordering or ordering[0] != 'display_order':
            # Only apply order_by() if a custom model doesn't use default
            # ordering. Applying order_by() busts the prefetch cache of
            # the ProductManager
            images = images.order_by('display_order')
        try:
            return images[0]
        except IndexError:
            # We return a dict with fields that mirror the key properties of
            # the ProductImage class so this missing image can be used
            # interchangeably in templates.  Strategy pattern ftw!
            missing_image = self.get_missing_image()
            return {
                'original': missing_image.name,
                'caption': '',
                'is_missing': True}

    # Updating methods

    def update_rating(self):
        """
        Recalculate rating field
        """
        self.rating = self.calculate_rating()
        self.save()
    update_rating.alters_data = True

    def calculate_rating(self):
        """
        Calculate rating value
        """
        result = self.reviews.filter(
            status=self.reviews.model.APPROVED
        ).aggregate(
            sum=Sum('score'), count=Count('id'))
        reviews_sum = result['sum'] or 0
        reviews_count = result['count'] or 0
        rating = None
        if reviews_count > 0:
            rating = float(reviews_sum) / reviews_count
        return rating

    def has_review_by(self, user):
        if user.is_anonymous:
            return False
        return self.reviews.filter(user=user).exists()

    def is_review_permitted(self, user):
        """
        Determines whether a user may add a review on this product.

        Default implementation respects OSCAR_ALLOW_ANON_REVIEWS and only
        allows leaving one review per user and product.

        Override this if you want to alter the default behaviour; e.g. enforce
        that a user purchased the product to be allowed to leave a review.
        """
        if user.is_authenticated or settings.OSCAR_ALLOW_ANON_REVIEWS:
            return not self.has_review_by(user)
        else:
            return False

    @cached_property
    def num_approved_reviews(self):
        return self.reviews.approved().count()

    @property
    def sorted_recommended_products(self):
        """Keeping order by recommendation ranking."""
        return [r.recommendation for r in self.primary_recommendations
                                              .select_related('recommendation').all()]


class AbstractProductRecommendation(models.Model):
    """
    'Through' model for product recommendations
    """
    primary = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        related_name='primary_recommendations',
        verbose_name=_("Primary product"))
    recommendation = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        verbose_name=_("Recommended product"))
    ranking = models.PositiveSmallIntegerField(
        _('Ranking'), default=0, db_index=True,
        help_text=_('Determines order of the products. A product with a higher'
                    ' value will appear before one with a lower ranking.'))

    class Meta:
        abstract = True
        app_label = 'catalogue'
        ordering = ['primary', '-ranking']
        unique_together = ('primary', 'recommendation')
        verbose_name = _('Product recommendation')
        verbose_name_plural = _('Product recomendations')


class AbstractProductAttribute(models.Model):
    """
    Defines an attribute for a product class. (For example, number_of_pages for
    a 'book' class)
    """
    product_class = models.ForeignKey(
        'catalogue.ProductClass',
        blank=True,
        on_delete=models.CASCADE,
        related_name='attributes',
        null=True,
        verbose_name=_("Product type"))
    name = models.CharField(_('Name'), max_length=128)
    code = models.SlugField(
        _('Code'), max_length=128,
        validators=[
            RegexValidator(
                regex=r'^[a-zA-Z_][0-9a-zA-Z_]*$',
                message=_(
                    "Code can only contain the letters a-z, A-Z, digits, "
                    "and underscores, and can't start with a digit.")),
            non_python_keyword
        ])

    # Attribute types
    TEXT = "text"
    INTEGER = "integer"
    BOOLEAN = "boolean"
    FLOAT = "float"
    RICHTEXT = "richtext"
    DATE = "date"
    DATETIME = "datetime"
    OPTION = "option"
    MULTI_OPTION = "multi_option"
    ENTITY = "entity"
    FILE = "file"
    IMAGE = "image"
    TYPE_CHOICES = (
        (TEXT, _("Text")),
        (INTEGER, _("Integer")),
        (BOOLEAN, _("True / False")),
        (FLOAT, _("Float")),
        (RICHTEXT, _("Rich Text")),
        (DATE, _("Date")),
        (DATETIME, _("Datetime")),
        (OPTION, _("Option")),
        (MULTI_OPTION, _("Multi Option")),
        (ENTITY, _("Entity")),
        (FILE, _("File")),
        (IMAGE, _("Image")),
    )
    type = models.CharField(
        choices=TYPE_CHOICES, default=TYPE_CHOICES[0][0],
        max_length=20, verbose_name=_("Type"))

    option_group = models.ForeignKey(
        'catalogue.AttributeOptionGroup',
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name='product_attributes',
        verbose_name=_("Option Group"),
        help_text=_('Select an option group if using type "Option" or "Multi Option"'))
    required = models.BooleanField(_('Required'), default=False)

    class Meta:
        abstract = True
        app_label = 'catalogue'
        ordering = ['code']
        verbose_name = _('Product attribute')
        verbose_name_plural = _('Product attributes')

    @property
    def is_option(self):
        return self.type == self.OPTION

    @property
    def is_multi_option(self):
        return self.type == self.MULTI_OPTION

    @property
    def is_file(self):
        return self.type in [self.FILE, self.IMAGE]

    def __str__(self):
        return self.name

    def _save_file(self, value_obj, value):
        # File fields in Django are treated differently, see
        # django.db.models.fields.FileField and method save_form_data
        if value is None:
            # No change
            return
        elif value is False:
            # Delete file
            value_obj.delete()
        else:
            # New uploaded file
            value_obj.value = value
            value_obj.save()

    def _save_multi_option(self, value_obj, value):
        # ManyToMany fields are handled separately
        if value is None:
            value_obj.delete()
            return
        try:
            count = value.count()
        except (AttributeError, TypeError):
            count = len(value)
        if count == 0:
            value_obj.delete()
        else:
            value_obj.value = value
            value_obj.save()

    def _save_value(self, value_obj, value):
        if value is None or value == '':
            value_obj.delete()
            return
        if value != value_obj.value:
            value_obj.value = value
            value_obj.save()

    def save_value(self, product, value):   # noqa: C901 too complex
        ProductAttributeValue = get_model('catalogue', 'ProductAttributeValue')
        try:
            value_obj = product.attribute_values.get(attribute=self)
        except ProductAttributeValue.DoesNotExist:
            # FileField uses False for announcing deletion of the file
            # not creating a new value
            delete_file = self.is_file and value is False
            if value is None or value == '' or delete_file:
                return
            value_obj = ProductAttributeValue.objects.create(
                product=product, attribute=self)

        if self.is_file:
            self._save_file(value_obj, value)
        elif self.is_multi_option:
            self._save_multi_option(value_obj, value)
        else:
            self._save_value(value_obj, value)

    def validate_value(self, value):
        validator = getattr(self, '_validate_%s' % self.type)
        validator(value)

    # Validators

    def _validate_text(self, value):
        if not isinstance(value, str):
            raise ValidationError(_("Must be str"))
    _validate_richtext = _validate_text

    def _validate_float(self, value):
        try:
            float(value)
        except ValueError:
            raise ValidationError(_("Must be a float"))

    def _validate_integer(self, value):
        try:
            int(value)
        except ValueError:
            raise ValidationError(_("Must be an integer"))

    def _validate_date(self, value):
        if not (isinstance(value, datetime) or isinstance(value, date)):
            raise ValidationError(_("Must be a date or datetime"))

    def _validate_datetime(self, value):
        if not isinstance(value, datetime):
            raise ValidationError(_("Must be a datetime"))

    def _validate_boolean(self, value):
        if not type(value) == bool:
            raise ValidationError(_("Must be a boolean"))

    def _validate_entity(self, value):
        if not isinstance(value, models.Model):
            raise ValidationError(_("Must be a model instance"))

    def _validate_multi_option(self, value):
        try:
            values = iter(value)
        except TypeError:
            raise ValidationError(
                _("Must be a list or AttributeOption queryset"))
        # Validate each value as if it were an option
        # Pass in valid_values so that the DB isn't hit multiple times per iteration
        valid_values = self.option_group.options.values_list(
            'option', flat=True)
        for value in values:
            self._validate_option(value, valid_values=valid_values)

    def _validate_option(self, value, valid_values=None):
        if not isinstance(value, get_model('catalogue', 'AttributeOption')):
            raise ValidationError(
                _("Must be an AttributeOption model object instance"))
        if not value.pk:
            raise ValidationError(_("AttributeOption has not been saved yet"))
        if valid_values is None:
            valid_values = self.option_group.options.values_list(
                'option', flat=True)
        if value.option not in valid_values:
            raise ValidationError(
                _("%(enum)s is not a valid choice for %(attr)s") %
                {'enum': value, 'attr': self})

    def _validate_file(self, value):
        if value and not isinstance(value, File):
            raise ValidationError(_("Must be a file field"))
    _validate_image = _validate_file


class AbstractProductAttributeValue(models.Model):
    """
    The "through" model for the m2m relationship between :py:class:`Product <.AbstractProduct>` and
    :py:class:`ProductAttribute <.AbstractProductAttribute>`  This specifies the value of the attribute for
    a particular product

    For example: ``number_of_pages = 295``
    """
    attribute = models.ForeignKey(
        'catalogue.ProductAttribute',
        on_delete=models.CASCADE,
        verbose_name=_("Attribute"))
    product = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        related_name='attribute_values',
        verbose_name=_("Product"))

    value_text = models.TextField(_('Text'), blank=True, null=True)
    value_integer = models.IntegerField(_('Integer'), blank=True, null=True, db_index=True)
    value_boolean = models.NullBooleanField(_('Boolean'), blank=True, db_index=True)
    value_float = models.FloatField(_('Float'), blank=True, null=True, db_index=True)
    value_richtext = models.TextField(_('Richtext'), blank=True, null=True)
    value_date = models.DateField(_('Date'), blank=True, null=True, db_index=True)
    value_datetime = models.DateTimeField(_('DateTime'), blank=True, null=True, db_index=True)
    value_multi_option = models.ManyToManyField(
        'catalogue.AttributeOption', blank=True,
        related_name='multi_valued_attribute_values',
        verbose_name=_("Value multi option"))
    value_option = models.ForeignKey(
        'catalogue.AttributeOption',
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        verbose_name=_("Value option"))
    value_file = models.FileField(
        upload_to=settings.OSCAR_IMAGE_FOLDER, max_length=255,
        blank=True, null=True)
    value_image = models.ImageField(
        upload_to=settings.OSCAR_IMAGE_FOLDER, max_length=255,
        blank=True, null=True)
    value_entity = GenericForeignKey(
        'entity_content_type', 'entity_object_id')

    entity_content_type = models.ForeignKey(
        ContentType,
        blank=True,
        editable=False,
        on_delete=models.CASCADE,
        null=True)
    entity_object_id = models.PositiveIntegerField(
        null=True, blank=True, editable=False)

    def _get_value(self):
        value = getattr(self, 'value_%s' % self.attribute.type)
        if hasattr(value, 'all'):
            value = value.all()
        return value

    def _set_value(self, new_value):
        attr_name = 'value_%s' % self.attribute.type

        if self.attribute.is_option and isinstance(new_value, str):
            # Need to look up instance of AttributeOption
            new_value = self.attribute.option_group.options.get(
                option=new_value)
        elif self.attribute.is_multi_option:
            getattr(self, attr_name).set(new_value)
            return

        setattr(self, attr_name, new_value)
        return

    value = property(_get_value, _set_value)

    class Meta:
        abstract = True
        app_label = 'catalogue'
        unique_together = ('attribute', 'product')
        verbose_name = _('Product attribute value')
        verbose_name_plural = _('Product attribute values')

    def __str__(self):
        return self.summary()

    def summary(self):
        """
        Gets a string representation of both the attribute and it's value,
        used e.g in product summaries.
        """
        return "%s: %s" % (self.attribute.name, self.value_as_text)

    @property
    def value_as_text(self):
        """
        Returns a string representation of the attribute's value. To customise
        e.g. image attribute values, declare a _image_as_text property and
        return something appropriate.
        """
        property_name = '_%s_as_text' % self.attribute.type
        return getattr(self, property_name, self.value)

    @property
    def _multi_option_as_text(self):
        return ', '.join(str(option) for option in self.value_multi_option.all())

    @property
    def _option_as_text(self):
        return str(self.value_option)

    @property
    def _richtext_as_text(self):
        return strip_tags(self.value)

    @property
    def _entity_as_text(self):
        """
        Returns the unicode representation of the related model. You likely
        want to customise this (and maybe _entity_as_html) if you use entities.
        """
        return str(self.value)

    @property
    def value_as_html(self):
        """
        Returns a HTML representation of the attribute's value. To customise
        e.g. image attribute values, declare a ``_image_as_html`` property and
        return e.g. an ``<img>`` tag.  Defaults to the ``_as_text``
        representation.
        """
        property_name = '_%s_as_html' % self.attribute.type
        return getattr(self, property_name, self.value_as_text)

    @property
    def _richtext_as_html(self):
        return mark_safe(self.value)


class AbstractAttributeOptionGroup(models.Model):
    """
    Defines a group of options that collectively may be used as an
    attribute type

    For example, Language
    """
    name = models.CharField(_('Name'), max_length=128)

    def __str__(self):
        return self.name

    class Meta:
        abstract = True
        app_label = 'catalogue'
        verbose_name = _('Attribute option group')
        verbose_name_plural = _('Attribute option groups')

    @property
    def option_summary(self):
        options = [o.option for o in self.options.all()]
        return ", ".join(options)


class AbstractAttributeOption(models.Model):
    """
    Provides an option within an option group for an attribute type
    Examples: In a Language group, English, Greek, French
    """
    group = models.ForeignKey(
        'catalogue.AttributeOptionGroup',
        on_delete=models.CASCADE,
        related_name='options',
        verbose_name=_("Group"))
    option = models.CharField(_('Option'), max_length=255)

    def __str__(self):
        return self.option

    class Meta:
        abstract = True
        app_label = 'catalogue'
        unique_together = ('group', 'option')
        verbose_name = _('Attribute option')
        verbose_name_plural = _('Attribute options')


class AbstractOption(models.Model):
    """
    An option that can be selected for a particular item when the product
    is added to the basket.

    For example,  a list ID for an SMS message send, or a personalised message
    to print on a T-shirt.

    This is not the same as an 'attribute' as options do not have a fixed value
    for a particular item.  Instead, option need to be specified by a customer
    when they add the item to their basket.
    """
    name = models.CharField(_("Name"), max_length=128)
    code = AutoSlugField(_("Code"), max_length=128, unique=True,
                         populate_from='name')

    REQUIRED, OPTIONAL = ('Required', 'Optional')
    TYPE_CHOICES = (
        (REQUIRED, _("Required - a value for this option must be specified")),
        (OPTIONAL, _("Optional - a value for this option can be omitted")),
    )
    type = models.CharField(_("Status"), max_length=128, default=REQUIRED,
                            choices=TYPE_CHOICES)

    class Meta:
        abstract = True
        app_label = 'catalogue'
        verbose_name = _("Option")
        verbose_name_plural = _("Options")

    def __str__(self):
        return self.name

    @property
    def is_required(self):
        return self.type == self.REQUIRED


class MissingProductImage(object):

    """
    Mimics a Django file field by having a name property.

    :py:mod:`sorl-thumbnail` requires all it's images to be in MEDIA_ROOT. This class
    tries symlinking the default "missing image" image in STATIC_ROOT
    into MEDIA_ROOT for convenience, as that is necessary every time an Oscar
    project is setup. This avoids the less helpful NotFound IOError that would
    be raised when :py:mod:`sorl-thumbnail` tries to access it.
    """

    def __init__(self, name=None):
        self.name = name if name else settings.OSCAR_MISSING_IMAGE_URL
        media_file_path = os.path.join(settings.MEDIA_ROOT, self.name)
        # don't try to symlink if MEDIA_ROOT is not set (e.g. running tests)
        if settings.MEDIA_ROOT and not os.path.exists(media_file_path):
            self.symlink_missing_image(media_file_path)

    def symlink_missing_image(self, media_file_path):
        static_file_path = find('oscar/img/%s' % self.name)
        if static_file_path is not None:
            try:
                # Check that the target directory exists, and attempt to
                # create it if it doesn't.
                media_file_dir = os.path.dirname(media_file_path)
                if not os.path.exists(media_file_dir):
                    os.makedirs(media_file_dir)
                os.symlink(static_file_path, media_file_path)
            except OSError:
                raise ImproperlyConfigured((
                    "Please copy/symlink the "
                    "'missing image' image at %s into your MEDIA_ROOT at %s. "
                    "This exception was raised because Oscar was unable to "
                    "symlink it for you.") % (media_file_path,
                                              settings.MEDIA_ROOT))
            else:
                logging.info((
                    "Symlinked the 'missing image' image at %s into your "
                    "MEDIA_ROOT at %s") % (media_file_path,
                                           settings.MEDIA_ROOT))


class AbstractProductImage(models.Model):
    """
    An image of a product
    """
    product = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        related_name='images',
        verbose_name=_("Product"))
    original = models.ImageField(
        _("Original"), upload_to=settings.OSCAR_IMAGE_FOLDER, max_length=255)
    caption = models.CharField(_("Caption"), max_length=200, blank=True)

    #: Use display_order to determine which is the "primary" image
    display_order = models.PositiveIntegerField(
        _("Display order"), default=0, db_index=True,
        help_text=_("An image with a display order of zero will be the primary"
                    " image for a product"))
    date_created = models.DateTimeField(_("Date created"), auto_now_add=True)

    class Meta:
        abstract = True
        app_label = 'catalogue'
        # Any custom models should ensure that this ordering is unchanged, or
        # your query count will explode. See AbstractProduct.primary_image.
        ordering = ["display_order"]
        verbose_name = _('Product image')
        verbose_name_plural = _('Product images')

    def __str__(self):
        return "Image of '%s'" % self.product

    def is_primary(self):
        """
        Return bool if image display order is 0
        """
        return self.display_order == 0

    def delete(self, *args, **kwargs):
        """
        Always keep the display_order as consecutive integers. This avoids
        issue #855.
        """
        super().delete(*args, **kwargs)
        for idx, image in enumerate(self.product.images.all()):
            image.display_order = idx
            image.save()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.abstract_models:0
==oscar.apps.order.abstract_models:0
import hashlib
import logging
import warnings
from collections import OrderedDict
from decimal import Decimal as D

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.core.signing import BadSignature, Signer
from django.db import models
from django.db.models import Sum
from django.utils import timezone
from django.utils.crypto import constant_time_compare
from django.utils.timezone import now
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.apps.order.signals import (
    order_line_status_changed, order_status_changed)
from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.loading import get_model
from oscar.core.utils import get_default_currency
from oscar.models.fields import AutoSlugField
from oscar.utils.deprecation import RemovedInOscar21Warning

from . import exceptions


logger = logging.getLogger('oscar.order')


class AbstractOrder(models.Model):
    """
    The main order model
    """
    number = models.CharField(
        _("Order number"), max_length=128, db_index=True, unique=True)

    # We track the site that each order is placed within
    site = models.ForeignKey(
        'sites.Site', verbose_name=_("Site"), null=True,
        on_delete=models.SET_NULL)

    basket = models.ForeignKey(
        'basket.Basket', verbose_name=_("Basket"),
        null=True, blank=True, on_delete=models.SET_NULL)

    # Orders can be placed without the user authenticating so we don't always
    # have a customer ID.
    user = models.ForeignKey(
        AUTH_USER_MODEL, related_name='orders', null=True, blank=True,
        verbose_name=_("User"), on_delete=models.SET_NULL)

    # Billing address is not always required (eg paying by gift card)
    billing_address = models.ForeignKey(
        'order.BillingAddress', null=True, blank=True,
        verbose_name=_("Billing Address"),
        on_delete=models.SET_NULL)

    # Total price looks like it could be calculated by adding up the
    # prices of the associated lines, but in some circumstances extra
    # order-level charges are added and so we need to store it separately
    currency = models.CharField(
        _("Currency"), max_length=12, default=get_default_currency)
    total_incl_tax = models.DecimalField(
        _("Order total (inc. tax)"), decimal_places=2, max_digits=12)
    total_excl_tax = models.DecimalField(
        _("Order total (excl. tax)"), decimal_places=2, max_digits=12)

    # Shipping charges
    shipping_incl_tax = models.DecimalField(
        _("Shipping charge (inc. tax)"), decimal_places=2, max_digits=12,
        default=0)
    shipping_excl_tax = models.DecimalField(
        _("Shipping charge (excl. tax)"), decimal_places=2, max_digits=12,
        default=0)

    # Not all lines are actually shipped (such as downloads), hence shipping
    # address is not mandatory.
    shipping_address = models.ForeignKey(
        'order.ShippingAddress', null=True, blank=True,
        verbose_name=_("Shipping Address"),
        on_delete=models.SET_NULL)
    shipping_method = models.CharField(
        _("Shipping method"), max_length=128, blank=True)

    # Identifies shipping code
    shipping_code = models.CharField(blank=True, max_length=128, default="")

    # Use this field to indicate that an order is on hold / awaiting payment
    status = models.CharField(_("Status"), max_length=100, blank=True)
    guest_email = models.EmailField(_("Guest email address"), blank=True)

    # Index added to this field for reporting
    date_placed = models.DateTimeField(db_index=True)

    #: Order status pipeline.  This should be a dict where each (key, value) #:
    #: corresponds to a status and a list of possible statuses that can follow
    #: that one.
    pipeline = getattr(settings, 'OSCAR_ORDER_STATUS_PIPELINE', {})

    #: Order status cascade pipeline.  This should be a dict where each (key,
    #: value) pair corresponds to an *order* status and the corresponding
    #: *line* status that needs to be set when the order is set to the new
    #: status
    cascade = getattr(settings, 'OSCAR_ORDER_STATUS_CASCADE', {})

    @classmethod
    def all_statuses(cls):
        """
        Return all possible statuses for an order
        """
        return list(cls.pipeline.keys())

    def available_statuses(self):
        """
        Return all possible statuses that this order can move to
        """
        return self.pipeline.get(self.status, ())

    def set_status(self, new_status):
        """
        Set a new status for this order.

        If the requested status is not valid, then ``InvalidOrderStatus`` is
        raised.
        """
        if new_status == self.status:
            return

        old_status = self.status

        if new_status not in self.available_statuses():
            raise exceptions.InvalidOrderStatus(
                _("'%(new_status)s' is not a valid status for order %(number)s"
                  " (current status: '%(status)s')")
                % {'new_status': new_status,
                   'number': self.number,
                   'status': self.status})
        self.status = new_status
        if new_status in self.cascade:
            for line in self.lines.all():
                line.status = self.cascade[self.status]
                line.save()
        self.save()

        # Send signal for handling status changed
        order_status_changed.send(sender=self,
                                  order=self,
                                  old_status=old_status,
                                  new_status=new_status,
                                  )

        self._create_order_status_change(old_status, new_status)

    set_status.alters_data = True

    def _create_order_status_change(self, old_status, new_status):
        # Not setting the status on the order as that should be handled before
        self.status_changes.create(old_status=old_status, new_status=new_status)

    @property
    def is_anonymous(self):
        # It's possible for an order to be placed by a customer who then
        # deletes their profile.  Hence, we need to check that a guest email is
        # set.
        return self.user is None and bool(self.guest_email)

    @property
    def basket_total_before_discounts_incl_tax(self):
        """
        Return basket total including tax but before discounts are applied
        """
        total = D('0.00')
        for line in self.lines.all():
            total += line.line_price_before_discounts_incl_tax
        return total

    @property
    def basket_total_before_discounts_excl_tax(self):
        """
        Return basket total excluding tax but before discounts are applied
        """
        total = D('0.00')
        for line in self.lines.all():
            total += line.line_price_before_discounts_excl_tax
        return total

    @property
    def basket_total_incl_tax(self):
        """
        Return basket total including tax
        """
        return self.total_incl_tax - self.shipping_incl_tax

    @property
    def basket_total_excl_tax(self):
        """
        Return basket total excluding tax
        """
        return self.total_excl_tax - self.shipping_excl_tax

    @property
    def total_before_discounts_incl_tax(self):
        return (self.basket_total_before_discounts_incl_tax
                + self.shipping_incl_tax)

    @property
    def total_before_discounts_excl_tax(self):
        return (self.basket_total_before_discounts_excl_tax
                + self.shipping_excl_tax)

    @property
    def total_discount_incl_tax(self):
        """
        The amount of discount this order received
        """
        discount = D('0.00')
        for line in self.lines.all():
            discount += line.discount_incl_tax
        return discount

    @property
    def total_discount_excl_tax(self):
        discount = D('0.00')
        for line in self.lines.all():
            discount += line.discount_excl_tax
        return discount

    @property
    def total_tax(self):
        return self.total_incl_tax - self.total_excl_tax

    @property
    def num_lines(self):
        return self.lines.count()

    @property
    def num_items(self):
        """
        Returns the number of items in this order.
        """
        num_items = 0
        for line in self.lines.all():
            num_items += line.quantity
        return num_items

    @property
    def shipping_tax(self):
        return self.shipping_incl_tax - self.shipping_excl_tax

    @property
    def shipping_status(self):
        """Return the last complete shipping event for this order."""

        # As safeguard against identical timestamps, also sort by the primary
        # key. It's not recommended to rely on this behaviour, but in practice
        # reasonably safe if PKs are not manually set.
        events = self.shipping_events.order_by('-date_created', '-pk').all()
        if not len(events):
            return ''

        # Collect all events by event-type
        event_map = OrderedDict()
        for event in events:
            event_name = event.event_type.name
            if event_name not in event_map:
                event_map[event_name] = []
            event_map[event_name].extend(list(event.line_quantities.all()))

        # Determine last complete event
        status = _("In progress")
        for event_name, event_line_quantities in event_map.items():
            if self._is_event_complete(event_line_quantities):
                return event_name
        return status

    @property
    def has_shipping_discounts(self):
        return len(self.shipping_discounts) > 0

    @property
    def shipping_before_discounts_incl_tax(self):
        # We can construct what shipping would have been before discounts by
        # adding the discounts back onto the final shipping charge.
        total = D('0.00')
        for discount in self.shipping_discounts:
            total += discount.amount
        return self.shipping_incl_tax + total

    def _is_event_complete(self, event_quantities):
        # Form map of line to quantity
        event_map = {}
        for event_quantity in event_quantities:
            line_id = event_quantity.line_id
            event_map.setdefault(line_id, 0)
            event_map[line_id] += event_quantity.quantity

        for line in self.lines.all():
            if event_map.get(line.pk, 0) != line.quantity:
                return False
        return True

    class Meta:
        abstract = True
        app_label = 'order'
        ordering = ['-date_placed']
        verbose_name = _("Order")
        verbose_name_plural = _("Orders")

    def __str__(self):
        return "#%s" % (self.number,)

    def verification_hash(self):
        signer = Signer(salt='oscar.apps.order.Order')
        return signer.sign(self.number)

    def check_deprecated_verification_hash(self, hash_to_check):
        """
        Backward compatible check for MD5 hashes that were generated in
        Oscar 1.5 and lower.

        This must explicitly be enabled by setting OSCAR_DEPRECATED_ORDER_VERIFY_KEY,
        which must not be equal to SECRET_KEY - i.e., the project must
        have changed its SECRET_KEY since this change was applied.
        """
        old_verification_key = getattr(settings, 'OSCAR_DEPRECATED_ORDER_VERIFY_KEY', None)
        if old_verification_key is None:
            return False

        warnings.warn('Use of OSCAR_DEPRECATED_ORDER_VERIFY_KEY is deprecated', RemovedInOscar21Warning, stacklevel=2)

        if old_verification_key == settings.SECRET_KEY:
            raise ImproperlyConfigured(
                'OSCAR_DEPRECATED_ORDER_VERIFY_KEY cannot be equal to SECRET_KEY')

        logger.warning('Using insecure md5 hashing for order URL hash verification.')
        string_to_hash = '%s%s' % (self.number, old_verification_key)
        order_hash = hashlib.md5(string_to_hash.encode('utf8')).hexdigest()
        return constant_time_compare(order_hash, hash_to_check)

    def check_verification_hash(self, hash_to_check):
        """
        Checks the received verification hash against this order number.
        Returns False if the verification failed, True otherwise.
        """
        if self.check_deprecated_verification_hash(hash_to_check):
            return True

        signer = Signer(salt='oscar.apps.order.Order')
        try:
            signed_number = signer.unsign(hash_to_check)
        except BadSignature:
            return False

        return constant_time_compare(signed_number, self.number)

    @property
    def email(self):
        if not self.user:
            return self.guest_email
        return self.user.email

    @property
    def basket_discounts(self):
        # This includes both offer- and voucher- discounts.  For orders we
        # don't need to treat them differently like we do for baskets.
        return self.discounts.filter(
            category=AbstractOrderDiscount.BASKET)

    @property
    def shipping_discounts(self):
        return self.discounts.filter(
            category=AbstractOrderDiscount.SHIPPING)

    @property
    def post_order_actions(self):
        return self.discounts.filter(
            category=AbstractOrderDiscount.DEFERRED)

    def set_date_placed_default(self):
        if self.date_placed is None:
            self.date_placed = now()

    def save(self, *args, **kwargs):
        # Ensure the date_placed field works as it auto_now_add was set. But
        # this gives us the ability to set the date_placed explicitly (which is
        # useful when importing orders from another system).
        self.set_date_placed_default()
        super().save(*args, **kwargs)


class AbstractOrderNote(models.Model):
    """
    A note against an order.

    This are often used for audit purposes too.  IE, whenever an admin
    makes a change to an order, we create a note to record what happened.
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name="notes",
        verbose_name=_("Order"))

    # These are sometimes programatically generated so don't need a
    # user everytime
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        null=True,
        verbose_name=_("User"))

    # We allow notes to be classified although this isn't always needed
    INFO, WARNING, ERROR, SYSTEM = 'Info', 'Warning', 'Error', 'System'
    note_type = models.CharField(_("Note Type"), max_length=128, blank=True)

    message = models.TextField(_("Message"))
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True)
    date_updated = models.DateTimeField(_("Date Updated"), auto_now=True)

    # Notes can only be edited for 5 minutes after being created
    editable_lifetime = 300

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Order Note")
        verbose_name_plural = _("Order Notes")

    def __str__(self):
        return "'%s' (%s)" % (self.message[0:50], self.user)

    def is_editable(self):
        if self.note_type == self.SYSTEM:
            return False
        delta = timezone.now() - self.date_updated
        return delta.seconds < self.editable_lifetime


class AbstractOrderStatusChange(models.Model):
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name='status_changes',
        verbose_name=_('Order Status Changes')
    )
    old_status = models.CharField(_('Old Status'), max_length=100, blank=True)
    new_status = models.CharField(_('New Status'), max_length=100, blank=True)
    date_created = models.DateTimeField(_('Date Created'), auto_now_add=True, db_index=True)

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _('Order Status Change')
        verbose_name_plural = _('Order Status Changes')
        ordering = ['-date_created']

    def __str__(self):
        return _('{order} has changed status from {old_status} to {new_status}').format(
            order=self.order, old_status=self.old_status, new_status=self.new_status
        )


class AbstractCommunicationEvent(models.Model):
    """
    An order-level event involving a communication to the customer, such
    as an confirmation email being sent.
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name="communication_events",
        verbose_name=_("Order"))
    event_type = models.ForeignKey(
        'customer.CommunicationEventType',
        on_delete=models.CASCADE,
        verbose_name=_("Event Type"))
    date_created = models.DateTimeField(_("Date"), auto_now_add=True, db_index=True)

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Communication Event")
        verbose_name_plural = _("Communication Events")
        ordering = ['-date_created']

    def __str__(self):
        return _("'%(type)s' event for order #%(number)s") \
            % {'type': self.event_type.name, 'number': self.order.number}


# LINES


class AbstractLine(models.Model):
    """
    An order line
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name='lines',
        verbose_name=_("Order"))

    # PARTNER INFORMATION
    # -------------------
    # We store the partner and various detail their SKU and the title for cases
    # where the product has been deleted from the catalogue (but we still need
    # the data for reporting).  We also store the partner name in case the
    # partner gets deleted at a later date.

    partner = models.ForeignKey(
        'partner.Partner', related_name='order_lines', blank=True, null=True,
        on_delete=models.SET_NULL, verbose_name=_("Partner"))
    partner_name = models.CharField(
        _("Partner name"), max_length=128, blank=True)
    partner_sku = models.CharField(_("Partner SKU"), max_length=128)

    # A line reference is the ID that a partner uses to represent this
    # particular line (it's not the same as a SKU).
    partner_line_reference = models.CharField(
        _("Partner reference"), max_length=128, blank=True,
        help_text=_("This is the item number that the partner uses "
                    "within their system"))
    partner_line_notes = models.TextField(
        _("Partner Notes"), blank=True)

    # We keep a link to the stockrecord used for this line which allows us to
    # update stocklevels when it ships
    stockrecord = models.ForeignKey(
        'partner.StockRecord', on_delete=models.SET_NULL, blank=True,
        null=True, verbose_name=_("Stock record"))

    # PRODUCT INFORMATION
    # -------------------

    # We don't want any hard links between orders and the products table so we
    # allow this link to be NULLable.
    product = models.ForeignKey(
        'catalogue.Product', on_delete=models.SET_NULL, blank=True, null=True,
        verbose_name=_("Product"))
    title = models.CharField(
        pgettext_lazy("Product title", "Title"), max_length=255)
    # UPC can be null because it's usually set as the product's UPC, and that
    # can be null as well
    upc = models.CharField(_("UPC"), max_length=128, blank=True, null=True)

    quantity = models.PositiveIntegerField(_("Quantity"), default=1)

    # REPORTING INFORMATION
    # ---------------------

    # Price information (these fields are actually redundant as the information
    # can be calculated from the LinePrice models
    # Deprecated - will be removed in Oscar 2.1
    line_price_incl_tax = models.DecimalField(
        _("Price (inc. tax)"), decimal_places=2, max_digits=12)
    # Deprecated - will be removed in Oscar 2.1
    line_price_excl_tax = models.DecimalField(
        _("Price (excl. tax)"), decimal_places=2, max_digits=12)

    # Price information before discounts are applied
    line_price_before_discounts_incl_tax = models.DecimalField(
        _("Price before discounts (inc. tax)"),
        decimal_places=2, max_digits=12)
    line_price_before_discounts_excl_tax = models.DecimalField(
        _("Price before discounts (excl. tax)"),
        decimal_places=2, max_digits=12)

    # Deprecated - will be removed in Oscar 2.1
    unit_cost_price = models.DecimalField(
        _("Unit Cost Price"), decimal_places=2, max_digits=12, blank=True,
        null=True)
    # Normal site price for item (without discounts)
    unit_price_incl_tax = models.DecimalField(
        _("Unit Price (inc. tax)"), decimal_places=2, max_digits=12,
        blank=True, null=True)
    unit_price_excl_tax = models.DecimalField(
        _("Unit Price (excl. tax)"), decimal_places=2, max_digits=12,
        blank=True, null=True)
    # Deprecated - will be removed in Oscar 2.1
    unit_retail_price = models.DecimalField(
        _("Unit Retail Price"), decimal_places=2, max_digits=12,
        blank=True, null=True)

    # Partners often want to assign some status to each line to help with their
    # own business processes.
    status = models.CharField(_("Status"), max_length=255, blank=True)

    # Deprecated - will be removed in Oscar 2.1
    est_dispatch_date = models.DateField(
        _("Estimated Dispatch Date"), blank=True, null=True)

    #: Order status pipeline.  This should be a dict where each (key, value)
    #: corresponds to a status and the possible statuses that can follow that
    #: one.
    pipeline = getattr(settings, 'OSCAR_LINE_STATUS_PIPELINE', {})

    class Meta:
        abstract = True
        app_label = 'order'
        # Enforce sorting in order of creation.
        ordering = ['pk']
        verbose_name = _("Order Line")
        verbose_name_plural = _("Order Lines")

    def __str__(self):
        if self.product:
            title = self.product.title
        else:
            title = _('<missing product>')
        return _("Product '%(name)s', quantity '%(qty)s'") % {
            'name': title, 'qty': self.quantity}

    @classmethod
    def all_statuses(cls):
        """
        Return all possible statuses for an order line
        """
        return list(cls.pipeline.keys())

    def available_statuses(self):
        """
        Return all possible statuses that this order line can move to
        """
        return self.pipeline.get(self.status, ())

    def set_status(self, new_status):
        """
        Set a new status for this line

        If the requested status is not valid, then ``InvalidLineStatus`` is
        raised.
        """
        if new_status == self.status:
            return

        old_status = self.status

        if new_status not in self.available_statuses():
            raise exceptions.InvalidLineStatus(
                _("'%(new_status)s' is not a valid status (current status:"
                  " '%(status)s')")
                % {'new_status': new_status, 'status': self.status})
        self.status = new_status
        self.save()

        # Send signal for handling status changed
        order_line_status_changed.send(sender=self,
                                       line=self,
                                       old_status=old_status,
                                       new_status=new_status,
                                       )

    set_status.alters_data = True

    @property
    def description(self):
        """
        Returns a description of this line including details of any
        line attributes.
        """
        desc = self.title
        ops = []
        for attribute in self.attributes.all():
            ops.append("%s = '%s'" % (attribute.type, attribute.value))
        if ops:
            desc = "%s (%s)" % (desc, ", ".join(ops))
        return desc

    @property
    def discount_incl_tax(self):
        return self.line_price_before_discounts_incl_tax \
            - self.line_price_incl_tax

    @property
    def discount_excl_tax(self):
        return self.line_price_before_discounts_excl_tax \
            - self.line_price_excl_tax

    @property
    def line_price_tax(self):
        return self.line_price_incl_tax - self.line_price_excl_tax

    @property
    def unit_price_tax(self):
        return self.unit_price_incl_tax - self.unit_price_excl_tax

    # Shipping status helpers

    @property
    def shipping_status(self):
        """
        Returns a string summary of the shipping status of this line
        """
        status_map = self.shipping_event_breakdown
        if not status_map:
            return ''

        events = []
        last_complete_event_name = None
        for event_dict in reversed(list(status_map.values())):
            if event_dict['quantity'] == self.quantity:
                events.append(event_dict['name'])
                last_complete_event_name = event_dict['name']
            else:
                events.append("%s (%d/%d items)" % (
                    event_dict['name'], event_dict['quantity'],
                    self.quantity))

        if last_complete_event_name == list(status_map.values())[0]['name']:
            return last_complete_event_name

        return ', '.join(events)

    def is_shipping_event_permitted(self, event_type, quantity):
        """
        Test whether a shipping event with the given quantity is permitted

        This method should normally be overridden to ensure that the
        prerequisite shipping events have been passed for this line.
        """
        # Note, this calculation is simplistic - normally, you will also need
        # to check if previous shipping events have occurred.  Eg, you can't
        # return lines until they have been shipped.
        current_qty = self.shipping_event_quantity(event_type)
        return (current_qty + quantity) <= self.quantity

    def shipping_event_quantity(self, event_type):
        """
        Return the quantity of this line that has been involved in a shipping
        event of the passed type.
        """
        result = self.shipping_event_quantities.filter(
            event__event_type=event_type).aggregate(Sum('quantity'))
        if result['quantity__sum'] is None:
            return 0
        else:
            return result['quantity__sum']

    def has_shipping_event_occurred(self, event_type, quantity=None):
        """
        Test whether this line has passed a given shipping event
        """
        if not quantity:
            quantity = self.quantity
        return self.shipping_event_quantity(event_type) == quantity

    def get_event_quantity(self, event):
        """
        Fetches the ShippingEventQuantity instance for this line

        Exists as a separate method so it can be overridden to avoid
        the DB query that's caused by get().
        """
        return event.line_quantities.get(line=self)

    @property
    def shipping_event_breakdown(self):
        """
        Returns a dict of shipping events that this line has been through
        """
        status_map = OrderedDict()
        for event in self.shipping_events.all():
            event_type = event.event_type
            event_name = event_type.name
            event_quantity = self.get_event_quantity(event).quantity
            if event_name in status_map:
                status_map[event_name]['quantity'] += event_quantity
            else:
                status_map[event_name] = {
                    'event_type': event_type,
                    'name': event_name,
                    'quantity': event_quantity
                }
        return status_map

    # Payment event helpers

    def is_payment_event_permitted(self, event_type, quantity):
        """
        Test whether a payment event with the given quantity is permitted.

        Allow each payment event type to occur only once per quantity.
        """
        current_qty = self.payment_event_quantity(event_type)
        return (current_qty + quantity) <= self.quantity

    def payment_event_quantity(self, event_type):
        """
        Return the quantity of this line that has been involved in a payment
        event of the passed type.
        """
        result = self.payment_event_quantities.filter(
            event__event_type=event_type).aggregate(Sum('quantity'))
        if result['quantity__sum'] is None:
            return 0
        else:
            return result['quantity__sum']

    @property
    def is_product_deleted(self):
        return self.product is None

    def is_available_to_reorder(self, basket, strategy):
        """
        Test if this line can be re-ordered using the passed strategy and
        basket
        """
        if not self.product:
            return False, (_("'%(title)s' is no longer available") %
                           {'title': self.title})

        try:
            basket_line = basket.lines.get(product=self.product)
        except basket.lines.model.DoesNotExist:
            desired_qty = self.quantity
        else:
            desired_qty = basket_line.quantity + self.quantity

        result = strategy.fetch_for_product(self.product)
        is_available, reason = result.availability.is_purchase_permitted(
            quantity=desired_qty)
        if not is_available:
            return False, reason
        return True, None


class AbstractLineAttribute(models.Model):
    """
    An attribute of a line
    """
    line = models.ForeignKey(
        'order.Line',
        on_delete=models.CASCADE,
        related_name='attributes',
        verbose_name=_("Line"))
    option = models.ForeignKey(
        'catalogue.Option', null=True, on_delete=models.SET_NULL,
        related_name="line_attributes", verbose_name=_("Option"))
    type = models.CharField(_("Type"), max_length=128)
    value = models.CharField(_("Value"), max_length=255)

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Line Attribute")
        verbose_name_plural = _("Line Attributes")

    def __str__(self):
        return "%s = %s" % (self.type, self.value)


class AbstractLinePrice(models.Model):
    """
    For tracking the prices paid for each unit within a line.

    This is necessary as offers can lead to units within a line
    having different prices.  For example, one product may be sold at
    50% off as it's part of an offer while the remainder are full price.
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name='line_prices',
        verbose_name=_("Option"))
    line = models.ForeignKey(
        'order.Line',
        on_delete=models.CASCADE,
        related_name='prices',
        verbose_name=_("Line"))
    quantity = models.PositiveIntegerField(_("Quantity"), default=1)
    price_incl_tax = models.DecimalField(
        _("Price (inc. tax)"), decimal_places=2, max_digits=12)
    price_excl_tax = models.DecimalField(
        _("Price (excl. tax)"), decimal_places=2, max_digits=12)
    shipping_incl_tax = models.DecimalField(
        _("Shiping (inc. tax)"), decimal_places=2, max_digits=12, default=0)
    shipping_excl_tax = models.DecimalField(
        _("Shipping (excl. tax)"), decimal_places=2, max_digits=12, default=0)

    class Meta:
        abstract = True
        app_label = 'order'
        ordering = ('id',)
        verbose_name = _("Line Price")
        verbose_name_plural = _("Line Prices")

    def __str__(self):
        return _("Line '%(number)s' (quantity %(qty)d) price %(price)s") % {
            'number': self.line,
            'qty': self.quantity,
            'price': self.price_incl_tax}


# PAYMENT EVENTS


class AbstractPaymentEventType(models.Model):
    """
    Payment event types are things like 'Paid', 'Failed', 'Refunded'.

    These are effectively the transaction types.
    """
    name = models.CharField(_("Name"), max_length=128, unique=True)
    code = AutoSlugField(_("Code"), max_length=128, unique=True,
                         populate_from='name')

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Payment Event Type")
        verbose_name_plural = _("Payment Event Types")
        ordering = ('name', )

    def __str__(self):
        return self.name


class AbstractPaymentEvent(models.Model):
    """
    A payment event for an order

    For example:

    * All lines have been paid for
    * 2 lines have been refunded
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name='payment_events',
        verbose_name=_("Order"))
    amount = models.DecimalField(
        _("Amount"), decimal_places=2, max_digits=12)
    # The reference should refer to the transaction ID of the payment gateway
    # that was used for this event.
    reference = models.CharField(
        _("Reference"), max_length=128, blank=True)
    lines = models.ManyToManyField(
        'order.Line', through='PaymentEventQuantity',
        verbose_name=_("Lines"))
    event_type = models.ForeignKey(
        'order.PaymentEventType',
        on_delete=models.CASCADE,
        verbose_name=_("Event Type"))
    # Allow payment events to be linked to shipping events.  Often a shipping
    # event will trigger a payment event and so we can use this FK to capture
    # the relationship.
    shipping_event = models.ForeignKey(
        'order.ShippingEvent',
        null=True,
        on_delete=models.CASCADE,
        related_name='payment_events')
    date_created = models.DateTimeField(_("Date created"), auto_now_add=True, db_index=True)

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Payment Event")
        verbose_name_plural = _("Payment Events")
        ordering = ['-date_created']

    def __str__(self):
        return _("Payment event for order %s") % self.order

    def num_affected_lines(self):
        return self.lines.all().count()


class PaymentEventQuantity(models.Model):
    """
    A "through" model linking lines to payment events
    """
    event = models.ForeignKey(
        'order.PaymentEvent',
        on_delete=models.CASCADE,
        related_name='line_quantities',
        verbose_name=_("Event"))
    line = models.ForeignKey(
        'order.Line',
        on_delete=models.CASCADE,
        related_name="payment_event_quantities",
        verbose_name=_("Line"))
    quantity = models.PositiveIntegerField(_("Quantity"))

    class Meta:
        app_label = 'order'
        verbose_name = _("Payment Event Quantity")
        verbose_name_plural = _("Payment Event Quantities")
        unique_together = ('event', 'line')


# SHIPPING EVENTS


class AbstractShippingEvent(models.Model):
    """
    An event is something which happens to a group of lines such as
    1 item being dispatched.
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name='shipping_events',
        verbose_name=_("Order"))
    lines = models.ManyToManyField(
        'order.Line', related_name='shipping_events',
        through='ShippingEventQuantity', verbose_name=_("Lines"))
    event_type = models.ForeignKey(
        'order.ShippingEventType',
        on_delete=models.CASCADE,
        verbose_name=_("Event Type"))
    notes = models.TextField(
        _("Event notes"), blank=True,
        help_text=_("This could be the dispatch reference, or a "
                    "tracking number"))
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True, db_index=True)

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Shipping Event")
        verbose_name_plural = _("Shipping Events")
        ordering = ['-date_created']

    def __str__(self):
        return _("Order #%(number)s, type %(type)s") % {
            'number': self.order.number,
            'type': self.event_type}

    def num_affected_lines(self):
        return self.lines.count()


class ShippingEventQuantity(models.Model):
    """
    A "through" model linking lines to shipping events.

    This exists to track the quantity of a line that is involved in a
    particular shipping event.
    """
    event = models.ForeignKey(
        'order.ShippingEvent',
        on_delete=models.CASCADE,
        related_name='line_quantities',
        verbose_name=_("Event"))
    line = models.ForeignKey(
        'order.Line',
        on_delete=models.CASCADE,
        related_name="shipping_event_quantities",
        verbose_name=_("Line"))
    quantity = models.PositiveIntegerField(_("Quantity"))

    class Meta:
        app_label = 'order'
        verbose_name = _("Shipping Event Quantity")
        verbose_name_plural = _("Shipping Event Quantities")
        unique_together = ('event', 'line')

    def save(self, *args, **kwargs):
        # Default quantity to full quantity of line
        if not self.quantity:
            self.quantity = self.line.quantity
        # Ensure we don't violate quantities constraint
        if not self.line.is_shipping_event_permitted(
                self.event.event_type, self.quantity):
            raise exceptions.InvalidShippingEvent
        super().save(*args, **kwargs)

    def __str__(self):
        return _("%(product)s - quantity %(qty)d") % {
            'product': self.line.product,
            'qty': self.quantity}


class AbstractShippingEventType(models.Model):
    """
    A type of shipping/fulfilment event

    E.g.: 'Shipped', 'Cancelled', 'Returned'
    """
    # Name is the friendly description of an event
    name = models.CharField(_("Name"), max_length=255, unique=True)
    # Code is used in forms
    code = AutoSlugField(_("Code"), max_length=128, unique=True,
                         populate_from='name')

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Shipping Event Type")
        verbose_name_plural = _("Shipping Event Types")
        ordering = ('name', )

    def __str__(self):
        return self.name


# DISCOUNTS


class AbstractOrderDiscount(models.Model):
    """
    A discount against an order.

    Normally only used for display purposes so an order can be listed with
    discounts displayed separately even though in reality, the discounts are
    applied at the line level.

    This has evolved to be a slightly misleading class name as this really
    track benefit applications which aren't necessarily discounts.
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name="discounts",
        verbose_name=_("Order"))

    # We need to distinguish between basket discounts, shipping discounts and
    # 'deferred' discounts.
    BASKET, SHIPPING, DEFERRED = "Basket", "Shipping", "Deferred"
    CATEGORY_CHOICES = (
        (BASKET, _(BASKET)),
        (SHIPPING, _(SHIPPING)),
        (DEFERRED, _(DEFERRED)),
    )
    category = models.CharField(
        _("Discount category"), default=BASKET, max_length=64,
        choices=CATEGORY_CHOICES)

    offer_id = models.PositiveIntegerField(
        _("Offer ID"), blank=True, null=True)
    offer_name = models.CharField(
        _("Offer name"), max_length=128, db_index=True, blank=True)
    voucher_id = models.PositiveIntegerField(
        _("Voucher ID"), blank=True, null=True)
    voucher_code = models.CharField(
        _("Code"), max_length=128, db_index=True, blank=True)
    frequency = models.PositiveIntegerField(_("Frequency"), null=True)
    amount = models.DecimalField(
        _("Amount"), decimal_places=2, max_digits=12, default=0)

    # Post-order offer applications can return a message to indicate what
    # action was taken after the order was placed.
    message = models.TextField(blank=True)

    @property
    def is_basket_discount(self):
        return self.category == self.BASKET

    @property
    def is_shipping_discount(self):
        return self.category == self.SHIPPING

    @property
    def is_post_order_action(self):
        return self.category == self.DEFERRED

    class Meta:
        abstract = True
        app_label = 'order'
        verbose_name = _("Order Discount")
        verbose_name_plural = _("Order Discounts")

    def save(self, **kwargs):
        if self.offer_id and not self.offer_name:
            offer = self.offer
            if offer:
                self.offer_name = offer.name

        if self.voucher_id and not self.voucher_code:
            voucher = self.voucher
            if voucher:
                self.voucher_code = voucher.code

        super().save(**kwargs)

    def __str__(self):
        return _("Discount of %(amount)r from order %(order)s") % {
            'amount': self.amount, 'order': self.order}

    @property
    def offer(self):
        Offer = get_model('offer', 'ConditionalOffer')
        try:
            return Offer.objects.get(id=self.offer_id)
        except Offer.DoesNotExist:
            return None

    @property
    def voucher(self):
        Voucher = get_model('voucher', 'Voucher')
        try:
            return Voucher.objects.get(id=self.voucher_id)
        except Voucher.DoesNotExist:
            return None

    def description(self):
        if self.voucher_code:
            return self.voucher_code
        return self.offer_name or ""
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.abstract_models:0
==oscar.apps.offer.abstract_models:0
import csv
import itertools
import operator
from decimal import Decimal as D
from decimal import ROUND_DOWN

from django.conf import settings
from django.core import exceptions
from django.db import models
from django.db.models.query import Q
from django.template.defaultfilters import date as date_filter
from django.urls import reverse
from django.utils.functional import cached_property
from django.utils.timezone import get_current_timezone, now
from django.utils.translation import gettext_lazy as _

from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.decorators import deprecated
from oscar.core.loading import get_class, get_classes, get_model, cached_import_string
from oscar.models import fields
from oscar.templatetags.currency_filters import currency

ActiveOfferManager, BrowsableRangeManager \
    = get_classes('offer.managers', ['ActiveOfferManager', 'BrowsableRangeManager'])
ZERO_DISCOUNT = get_class('offer.results', 'ZERO_DISCOUNT')
load_proxy, unit_price = get_classes('offer.utils', ['load_proxy', 'unit_price'])


class BaseOfferMixin(models.Model):
    class Meta:
        abstract = True

    def proxy(self):
        """
        Return the proxy model
        """
        klassmap = self.proxy_map
        # Short-circuit logic if current class is already a proxy class.
        if self.__class__ in klassmap.values():
            return self

        field_dict = dict(self.__dict__)
        for field in list(field_dict.keys()):
            if field.startswith('_'):
                del field_dict[field]

        if self.proxy_class:
            klass = load_proxy(self.proxy_class)
            # Short-circuit again.
            if self.__class__ == klass:
                return self
            return klass(**field_dict)
        if self.type in klassmap:
            return klassmap[self.type](**field_dict)
        raise RuntimeError("Unrecognised %s type (%s)" % (self.__class__.__name__.lower(), self.type))

    def __str__(self):
        return self.name

    @property
    def name(self):
        """
        A text description of the benefit/condition. Every proxy class
        has to implement it.

        This is used in the dropdowns within the offer dashboard.
        """
        proxy_instance = self.proxy()
        if self.proxy_class and self.__class__ == proxy_instance.__class__:
            raise AssertionError('Name property is not defined on proxy class.')
        return proxy_instance.name

    @property
    def description(self):
        """
        A description of the benefit/condition.
        Defaults to the name. May contain HTML.
        """
        return self.name


class AbstractConditionalOffer(models.Model):
    """
    A conditional offer (e.g. buy 1, get 10% off)
    """
    name = models.CharField(
        _("Name"), max_length=128, unique=True,
        help_text=_("This is displayed within the customer's basket"))
    slug = fields.AutoSlugField(
        _("Slug"), max_length=128, unique=True, populate_from='name')
    description = models.TextField(_("Description"), blank=True,
                                   help_text=_("This is displayed on the offer"
                                               " browsing page"))

    # Offers come in a few different types:
    # (a) Offers that are available to all customers on the site. e.g. a
    #     3-for-2 offer.
    # (b) Offers that are linked to a voucher, and only become available once
    #     that voucher has been applied to the basket
    # (c) Offers that are linked to a user.  e.g. all students get 10% off.  The
    #     code to apply this offer needs to be coded
    # (d) Session offers - these are temporarily available to a user after some
    #     trigger event.  e.g. users coming from some affiliate site get 10%
    #     off.
    SITE, VOUCHER, USER, SESSION = ("Site", "Voucher", "User", "Session")
    TYPE_CHOICES = (
        (SITE, _("Site offer - available to all users")),
        (VOUCHER, _("Voucher offer - only available after entering "
                    "the appropriate voucher code")),
        (USER, _("User offer - available to certain types of user")),
        (SESSION, _("Session offer - temporary offer, available for "
                    "a user for the duration of their session")),
    )
    offer_type = models.CharField(
        _("Type"), choices=TYPE_CHOICES, default=SITE, max_length=128)

    exclusive = models.BooleanField(
        _("Exclusive offer"),
        help_text=_("Exclusive offers cannot be combined on the same items"),
        default=True
    )

    # We track a status variable so it's easier to load offers that are
    # 'available' in some sense.
    OPEN, SUSPENDED, CONSUMED = "Open", "Suspended", "Consumed"
    status = models.CharField(_("Status"), max_length=64, default=OPEN)

    condition = models.ForeignKey(
        'offer.Condition',
        on_delete=models.CASCADE,
        related_name='offers',
        verbose_name=_("Condition"))
    benefit = models.ForeignKey(
        'offer.Benefit',
        on_delete=models.CASCADE,
        related_name='offers',
        verbose_name=_("Benefit"))

    # Some complicated situations require offers to be applied in a set order.
    priority = models.IntegerField(
        _("Priority"), default=0, db_index=True,
        help_text=_("The highest priority offers are applied first"))

    # AVAILABILITY

    # Range of availability.  Note that if this is a voucher offer, then these
    # dates are ignored and only the dates from the voucher are used to
    # determine availability.
    start_datetime = models.DateTimeField(
        _("Start date"), blank=True, null=True,
        help_text=_("Offers are active from the start date. "
                    "Leave this empty if the offer has no start date."))
    end_datetime = models.DateTimeField(
        _("End date"), blank=True, null=True,
        help_text=_("Offers are active until the end date. "
                    "Leave this empty if the offer has no expiry date."))

    # Use this field to limit the number of times this offer can be applied in
    # total.  Note that a single order can apply an offer multiple times so
    # this is not necessarily the same as the number of orders that can use it.
    # Also see max_basket_applications.
    max_global_applications = models.PositiveIntegerField(
        _("Max global applications"),
        help_text=_("The number of times this offer can be used before it "
                    "is unavailable"), blank=True, null=True)

    # Use this field to limit the number of times this offer can be used by a
    # single user.  This only works for signed-in users - it doesn't really
    # make sense for sites that allow anonymous checkout.
    max_user_applications = models.PositiveIntegerField(
        _("Max user applications"),
        help_text=_("The number of times a single user can use this offer"),
        blank=True, null=True)

    # Use this field to limit the number of times this offer can be applied to
    # a basket (and hence a single order). Often, an offer should only be
    # usable once per basket/order, so this field will commonly be set to 1.
    max_basket_applications = models.PositiveIntegerField(
        _("Max basket applications"),
        blank=True, null=True,
        help_text=_("The number of times this offer can be applied to a "
                    "basket (and order)"))

    # Use this field to limit the amount of discount an offer can lead to.
    # This can be helpful with budgeting.
    max_discount = models.DecimalField(
        _("Max discount"), decimal_places=2, max_digits=12, null=True,
        blank=True,
        help_text=_("When an offer has given more discount to orders "
                    "than this threshold, then the offer becomes "
                    "unavailable"))

    # TRACKING
    # These fields are used to enforce the limits set by the
    # max_* fields above.

    total_discount = models.DecimalField(
        _("Total Discount"), decimal_places=2, max_digits=12,
        default=D('0.00'))
    num_applications = models.PositiveIntegerField(
        _("Number of applications"), default=0)
    num_orders = models.PositiveIntegerField(
        _("Number of Orders"), default=0)

    redirect_url = fields.ExtendedURLField(
        _("URL redirect (optional)"), blank=True)
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True)

    objects = models.Manager()
    active = ActiveOfferManager()

    # We need to track the voucher that this offer came from (if it is a
    # voucher offer)
    _voucher = None

    class Meta:
        abstract = True
        app_label = 'offer'
        ordering = ['-priority', 'pk']
        verbose_name = _("Conditional offer")
        verbose_name_plural = _("Conditional offers")

    def save(self, *args, **kwargs):
        # Check to see if consumption thresholds have been broken
        if not self.is_suspended:
            if self.get_max_applications() == 0:
                self.status = self.CONSUMED
            else:
                self.status = self.OPEN

        return super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('offer:detail', kwargs={'slug': self.slug})

    def __str__(self):
        return self.name

    def clean(self):
        if (self.start_datetime and self.end_datetime
                and self.start_datetime > self.end_datetime):
            raise exceptions.ValidationError(
                _('End date should be later than start date'))

    @property
    def is_open(self):
        return self.status == self.OPEN

    @property
    def is_suspended(self):
        return self.status == self.SUSPENDED

    def suspend(self):
        self.status = self.SUSPENDED
        self.save()
    suspend.alters_data = True

    def unsuspend(self):
        self.status = self.OPEN
        self.save()
    unsuspend.alters_data = True

    def is_available(self, user=None, test_date=None):
        """
        Test whether this offer is available to be used
        """
        if self.is_suspended:
            return False
        if test_date is None:
            test_date = now()
        predicates = []
        if self.start_datetime:
            predicates.append(self.start_datetime > test_date)
        if self.end_datetime:
            predicates.append(test_date > self.end_datetime)
        if any(predicates):
            return False
        return self.get_max_applications(user) > 0

    def is_condition_satisfied(self, basket):
        return self.condition.proxy().is_satisfied(self, basket)

    def is_condition_partially_satisfied(self, basket):
        return self.condition.proxy().is_partially_satisfied(self, basket)

    def get_upsell_message(self, basket):
        return self.condition.proxy().get_upsell_message(self, basket)

    def apply_benefit(self, basket):
        """
        Applies the benefit to the given basket and returns the discount.
        """
        if not self.is_condition_satisfied(basket):
            return ZERO_DISCOUNT
        return self.benefit.proxy().apply(
            basket, self.condition.proxy(), self)

    def apply_deferred_benefit(self, basket, order, application):
        """
        Applies any deferred benefits.  These are things like adding loyalty
        points to someone's account.
        """
        return self.benefit.proxy().apply_deferred(basket, order, application)

    def set_voucher(self, voucher):
        self._voucher = voucher

    def get_voucher(self):
        return self._voucher

    def get_max_applications(self, user=None):
        """
        Return the number of times this offer can be applied to a basket for a
        given user.
        """
        if self.max_discount and self.total_discount >= self.max_discount:
            return 0

        # Hard-code a maximum value as we need some sensible upper limit for
        # when there are not other caps.
        limits = [10000]
        if self.max_user_applications and user:
            limits.append(max(0, self.max_user_applications
                              - self.get_num_user_applications(user)))
        if self.max_basket_applications:
            limits.append(self.max_basket_applications)
        if self.max_global_applications:
            limits.append(
                max(0, self.max_global_applications - self.num_applications))
        return min(limits)

    def get_num_user_applications(self, user):
        OrderDiscount = get_model('order', 'OrderDiscount')
        aggregates = OrderDiscount.objects.filter(offer_id=self.id,
                                                  order__user=user)\
            .aggregate(total=models.Sum('frequency'))
        return aggregates['total'] if aggregates['total'] is not None else 0

    def shipping_discount(self, charge):
        return self.benefit.proxy().shipping_discount(charge)

    def record_usage(self, discount):
        self.num_applications += discount['freq']
        self.total_discount += discount['discount']
        self.num_orders += 1
        self.save()
    record_usage.alters_data = True

    def availability_description(self):
        """
        Return a description of when this offer is available
        """
        restrictions = self.availability_restrictions()
        descriptions = [r['description'] for r in restrictions]
        return "<br/>".join(descriptions)

    def availability_restrictions(self):  # noqa (too complex (15))
        restrictions = []
        if self.is_suspended:
            restrictions.append({
                'description': _("Offer is suspended"),
                'is_satisfied': False})

        if self.max_global_applications:
            remaining = self.max_global_applications - self.num_applications
            desc = _("Limited to %(total)d uses (%(remainder)d remaining)") \
                % {'total': self.max_global_applications,
                   'remainder': remaining}
            restrictions.append({'description': desc,
                                 'is_satisfied': remaining > 0})

        if self.max_user_applications:
            if self.max_user_applications == 1:
                desc = _("Limited to 1 use per user")
            else:
                desc = _("Limited to %(total)d uses per user") \
                    % {'total': self.max_user_applications}
            restrictions.append({'description': desc,
                                 'is_satisfied': True})

        if self.max_basket_applications:
            if self.max_user_applications == 1:
                desc = _("Limited to 1 use per basket")
            else:
                desc = _("Limited to %(total)d uses per basket") \
                    % {'total': self.max_basket_applications}
            restrictions.append({
                'description': desc,
                'is_satisfied': True})

        def hide_time_if_zero(dt):
            # Only show hours/minutes if they have been specified
            if dt.tzinfo:
                localtime = dt.astimezone(get_current_timezone())
            else:
                localtime = dt
            if localtime.hour == 0 and localtime.minute == 0:
                return date_filter(localtime, settings.DATE_FORMAT)
            return date_filter(localtime, settings.DATETIME_FORMAT)

        if self.start_datetime or self.end_datetime:
            today = now()
            if self.start_datetime and self.end_datetime:
                desc = _("Available between %(start)s and %(end)s") \
                    % {'start': hide_time_if_zero(self.start_datetime),
                       'end': hide_time_if_zero(self.end_datetime)}
                is_satisfied \
                    = self.start_datetime <= today <= self.end_datetime
            elif self.start_datetime:
                desc = _("Available from %(start)s") % {
                    'start': hide_time_if_zero(self.start_datetime)}
                is_satisfied = today >= self.start_datetime
            elif self.end_datetime:
                desc = _("Available until %(end)s") % {
                    'end': hide_time_if_zero(self.end_datetime)}
                is_satisfied = today <= self.end_datetime
            restrictions.append({
                'description': desc,
                'is_satisfied': is_satisfied})

        if self.max_discount:
            desc = _("Limited to a cost of %(max)s") % {
                'max': currency(self.max_discount)}
            restrictions.append({
                'description': desc,
                'is_satisfied': self.total_discount < self.max_discount})

        return restrictions

    @property
    def has_products(self):
        return self.condition.range is not None

    def products(self):
        """
        Return a queryset of products in this offer
        """
        Product = get_model('catalogue', 'Product')
        if not self.has_products:
            return Product.objects.none()

        queryset = self.condition.range.all_products()
        return queryset.filter(is_discountable=True).exclude(
            structure=Product.CHILD)


class AbstractBenefit(BaseOfferMixin, models.Model):
    range = models.ForeignKey(
        'offer.Range',
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        verbose_name=_("Range"))

    # Benefit types
    PERCENTAGE, FIXED, MULTIBUY, FIXED_PRICE = (
        "Percentage", "Absolute", "Multibuy", "Fixed price")
    SHIPPING_PERCENTAGE, SHIPPING_ABSOLUTE, SHIPPING_FIXED_PRICE = (
        'Shipping percentage', 'Shipping absolute', 'Shipping fixed price')
    TYPE_CHOICES = (
        (PERCENTAGE, _("Discount is a percentage off of the product's value")),
        (FIXED, _("Discount is a fixed amount off of the product's value")),
        (MULTIBUY, _("Discount is to give the cheapest product for free")),
        (FIXED_PRICE,
         _("Get the products that meet the condition for a fixed price")),
        (SHIPPING_ABSOLUTE,
         _("Discount is a fixed amount of the shipping cost")),
        (SHIPPING_FIXED_PRICE, _("Get shipping for a fixed price")),
        (SHIPPING_PERCENTAGE, _("Discount is a percentage off of the shipping"
                                " cost")),
    )
    type = models.CharField(
        _("Type"), max_length=128, choices=TYPE_CHOICES, blank=True)

    # The value to use with the designated type.  This can be either an integer
    # (eg for multibuy) or a decimal (eg an amount) which is slightly
    # confusing.
    value = fields.PositiveDecimalField(
        _("Value"), decimal_places=2, max_digits=12, null=True, blank=True)

    # If this is not set, then there is no upper limit on how many products
    # can be discounted by this benefit.
    max_affected_items = models.PositiveIntegerField(
        _("Max Affected Items"), blank=True, null=True,
        help_text=_("Set this to prevent the discount consuming all items "
                    "within the range that are in the basket."))

    # A custom benefit class can be used instead.  This means the
    # type/value/max_affected_items fields should all be None.
    proxy_class = fields.NullCharField(
        _("Custom class"), max_length=255, default=None)

    class Meta:
        abstract = True
        app_label = 'offer'
        verbose_name = _("Benefit")
        verbose_name_plural = _("Benefits")

    @property
    def proxy_map(self):
        return {
            self.PERCENTAGE: get_class(
                'offer.benefits', 'PercentageDiscountBenefit'),
            self.FIXED: get_class(
                'offer.benefits', 'AbsoluteDiscountBenefit'),
            self.MULTIBUY: get_class(
                'offer.benefits', 'MultibuyDiscountBenefit'),
            self.FIXED_PRICE: get_class(
                'offer.benefits', 'FixedPriceBenefit'),
            self.SHIPPING_ABSOLUTE: get_class(
                'offer.benefits', 'ShippingAbsoluteDiscountBenefit'),
            self.SHIPPING_FIXED_PRICE: get_class(
                'offer.benefits', 'ShippingFixedPriceBenefit'),
            self.SHIPPING_PERCENTAGE: get_class(
                'offer.benefits', 'ShippingPercentageDiscountBenefit')
        }

    def apply(self, basket, condition, offer):
        return ZERO_DISCOUNT

    def apply_deferred(self, basket, order, application):
        return None

    def clean(self):
        if not self.type:
            return
        method_name = 'clean_%s' % self.type.lower().replace(' ', '_')
        if hasattr(self, method_name):
            getattr(self, method_name)()

    def clean_multibuy(self):
        errors = []

        if not self.range:
            errors.append(_("Multibuy benefits require a product range"))
        if self.value:
            errors.append(_("Multibuy benefits don't require a value"))
        if self.max_affected_items:
            errors.append(_("Multibuy benefits don't require a "
                            "'max affected items' attribute"))

        if errors:
            raise exceptions.ValidationError(errors)

    def clean_percentage(self):
        errors = []

        if not self.range:
            errors.append(_("Percentage benefits require a product range"))

        if not self.value:
            errors.append(_("Percentage discount benefits require a value"))
        elif self.value > 100:
            errors.append(_("Percentage discount cannot be greater than 100"))

        if errors:
            raise exceptions.ValidationError(errors)

    def clean_shipping_absolute(self):
        errors = []
        if not self.value:
            errors.append(_("A discount value is required"))
        if self.range:
            errors.append(_("No range should be selected as this benefit does "
                            "not apply to products"))
        if self.max_affected_items:
            errors.append(_("Shipping discounts don't require a "
                            "'max affected items' attribute"))

        if errors:
            raise exceptions.ValidationError(errors)

    def clean_shipping_percentage(self):
        errors = []

        if not self.value:
            errors.append(_("Percentage discount benefits require a value"))
        elif self.value > 100:
            errors.append(_("Percentage discount cannot be greater than 100"))

        if self.range:
            errors.append(_("No range should be selected as this benefit does "
                            "not apply to products"))
        if self.max_affected_items:
            errors.append(_("Shipping discounts don't require a "
                            "'max affected items' attribute"))
        if errors:
            raise exceptions.ValidationError(errors)

    def clean_shipping_fixed_price(self):
        errors = []
        if self.range:
            errors.append(_("No range should be selected as this benefit does "
                            "not apply to products"))
        if self.max_affected_items:
            errors.append(_("Shipping discounts don't require a "
                            "'max affected items' attribute"))

        if errors:
            raise exceptions.ValidationError(errors)

    def clean_fixed_price(self):
        if self.range:
            raise exceptions.ValidationError(
                _("No range should be selected as the condition range will "
                  "be used instead."))

    def clean_absolute(self):
        errors = []
        if not self.range:
            errors.append(_("Fixed discount benefits require a product range"))
        if not self.value:
            errors.append(_("Fixed discount benefits require a value"))

        if errors:
            raise exceptions.ValidationError(errors)

    def round(self, amount):
        """
        Apply rounding to discount amount
        """
        rounding_function_path = getattr(settings, 'OSCAR_OFFER_ROUNDING_FUNCTION', None)
        if rounding_function_path:
            rounding_function = cached_import_string(rounding_function_path)
            return rounding_function(amount)

        return amount.quantize(D('.01'), ROUND_DOWN)

    def _effective_max_affected_items(self):
        """
        Return the maximum number of items that can have a discount applied
        during the application of this benefit
        """
        return self.max_affected_items if self.max_affected_items else 10000

    def can_apply_benefit(self, line):
        """
        Determines whether the benefit can be applied to a given basket line
        """
        return line.stockrecord and line.product.is_discountable

    def get_applicable_lines(self, offer, basket, range=None):
        """
        Return the basket lines that are available to be discounted

        :basket: The basket
        :range: The range of products to use for filtering.  The fixed-price
                benefit ignores its range and uses the condition range
        """
        if range is None:
            range = self.range
        line_tuples = []
        for line in basket.all_lines():
            product = line.product

            if (not range.contains_product(product) or not self.can_apply_benefit(line)):
                continue

            price = unit_price(offer, line)
            if not price:
                # Avoid zero price products
                continue
            line_tuples.append((price, line))

        # We sort lines to be cheapest first to ensure consistent applications
        return sorted(line_tuples, key=operator.itemgetter(0))

    def shipping_discount(self, charge):
        return D('0.00')


class AbstractCondition(BaseOfferMixin, models.Model):
    """
    A condition for an offer to be applied. You can either specify a custom
    proxy class, or need to specify a type, range and value.
    """
    COUNT, VALUE, COVERAGE = ("Count", "Value", "Coverage")
    TYPE_CHOICES = (
        (COUNT, _("Depends on number of items in basket that are in "
                  "condition range")),
        (VALUE, _("Depends on value of items in basket that are in "
                  "condition range")),
        (COVERAGE, _("Needs to contain a set number of DISTINCT items "
                     "from the condition range")))
    range = models.ForeignKey(
        'offer.Range',
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        verbose_name=_("Range"))
    type = models.CharField(_('Type'), max_length=128, choices=TYPE_CHOICES,
                            blank=True)
    value = fields.PositiveDecimalField(
        _('Value'), decimal_places=2, max_digits=12, null=True, blank=True)

    proxy_class = fields.NullCharField(
        _("Custom class"), max_length=255, default=None)

    class Meta:
        abstract = True
        app_label = 'offer'
        verbose_name = _("Condition")
        verbose_name_plural = _("Conditions")

    @property
    def proxy_map(self):
        return {
            self.COUNT: get_class(
                'offer.conditions', 'CountCondition'),
            self.VALUE: get_class(
                'offer.conditions', 'ValueCondition'),
            self.COVERAGE: get_class(
                'offer.conditions', 'CoverageCondition'),
        }

    def consume_items(self, offer, basket, affected_lines):
        pass

    def is_satisfied(self, offer, basket):
        """
        Determines whether a given basket meets this condition.  This is
        stubbed in this top-class object.  The subclassing proxies are
        responsible for implementing it correctly.
        """
        return False

    def is_partially_satisfied(self, offer, basket):
        """
        Determine if the basket partially meets the condition.  This is useful
        for up-selling messages to entice customers to buy something more in
        order to qualify for an offer.
        """
        return False

    def get_upsell_message(self, offer, basket):
        return None

    def can_apply_condition(self, line):
        """
        Determines whether the condition can be applied to a given basket line
        """
        if not line.stockrecord_id:
            return False
        product = line.product
        return (self.range.contains_product(product)
                and product.get_is_discountable())

    def get_applicable_lines(self, offer, basket, most_expensive_first=True):
        """
        Return line data for the lines that can be consumed by this condition
        """
        line_tuples = []
        for line in basket.all_lines():
            if not self.can_apply_condition(line):
                continue

            price = unit_price(offer, line)
            if not price:
                continue
            line_tuples.append((price, line))
        key = operator.itemgetter(0)
        if most_expensive_first:
            return sorted(line_tuples, reverse=True, key=key)
        return sorted(line_tuples, key=key)


class AbstractRange(models.Model):
    """
    Represents a range of products that can be used within an offer.

    Ranges only support adding parent or stand-alone products. Offers will
    consider child products automatically.
    """
    name = models.CharField(_("Name"), max_length=128, unique=True)
    slug = fields.AutoSlugField(
        _("Slug"), max_length=128, unique=True, populate_from="name")

    description = models.TextField(blank=True)

    # Whether this range is public
    is_public = models.BooleanField(
        _('Is public?'), default=False,
        help_text=_("Public ranges have a customer-facing page"))

    includes_all_products = models.BooleanField(
        _('Includes all products?'), default=False)

    included_products = models.ManyToManyField(
        'catalogue.Product', related_name='includes', blank=True,
        verbose_name=_("Included Products"), through='offer.RangeProduct')
    excluded_products = models.ManyToManyField(
        'catalogue.Product', related_name='excludes', blank=True,
        verbose_name=_("Excluded Products"))
    classes = models.ManyToManyField(
        'catalogue.ProductClass', related_name='classes', blank=True,
        verbose_name=_("Product Types"))
    included_categories = models.ManyToManyField(
        'catalogue.Category', related_name='includes', blank=True,
        verbose_name=_("Included Categories"))

    # Allow a custom range instance to be specified
    proxy_class = fields.NullCharField(
        _("Custom class"), max_length=255, default=None, unique=True)

    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True)

    __included_product_ids = None
    __excluded_product_ids = None
    __included_categories = None
    __class_ids = None
    __category_ids = None

    objects = models.Manager()
    browsable = BrowsableRangeManager()

    class Meta:
        abstract = True
        app_label = 'offer'
        verbose_name = _("Range")
        verbose_name_plural = _("Ranges")

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse(
            'catalogue:range', kwargs={'slug': self.slug})

    @cached_property
    def proxy(self):
        if self.proxy_class:
            return load_proxy(self.proxy_class)()

    def add_product(self, product, display_order=None):
        """ Add product to the range

        When adding product that is already in the range, prevent re-adding it.
        If display_order is specified, update it.

        Default display_order for a new product in the range is 0; this puts
        the product at the top of the list.
        """

        initial_order = display_order or 0
        RangeProduct = get_model('offer', 'RangeProduct')
        relation, __ = RangeProduct.objects.get_or_create(
            range=self, product=product,
            defaults={'display_order': initial_order})

        if (display_order is not None
                and relation.display_order != display_order):
            relation.display_order = display_order
            relation.save()

        # Remove product from excluded products if it was removed earlier and
        # re-added again, thus it returns back to the range product list.
        if product.id in self._excluded_product_ids():
            self.excluded_products.remove(product)
            self.invalidate_cached_ids()

    def remove_product(self, product):
        """
        Remove product from range. To save on queries, this function does not
        check if the product is in fact in the range.
        """
        RangeProduct = get_model('offer', 'RangeProduct')
        RangeProduct.objects.filter(range=self, product=product).delete()
        # Making sure product will be excluded from range products list by adding to
        # respective field. Otherwise, it could be included as a product from included
        # category or etc.
        self.excluded_products.add(product)
        # Invalidating cached property value with list of IDs of already excluded products.
        self.invalidate_cached_ids()

    def contains_product(self, product):  # noqa (too complex (12))
        """
        Check whether the passed product is part of this range.
        """

        # Delegate to a proxy class if one is provided
        if self.proxy:
            return self.proxy.contains_product(product)

        excluded_product_ids = self._excluded_product_ids()
        if product.id in excluded_product_ids:
            return False
        if self.includes_all_products:
            return True
        class_ids = self._class_ids()
        if class_ids and product.get_product_class().id in class_ids:
            return True
        included_product_ids = self._included_product_ids()
        # If the product's parent is in the range, the child is automatically included as well
        if product.is_child and product.parent.id in included_product_ids:
            return True
        if product.id in included_product_ids:
            return True
        test_categories = self._included_categories()
        if test_categories:
            for category in product.get_categories().only(
                    *self._category_comparison_fields):
                for test_category in test_categories:
                    if category == test_category \
                            or category.is_descendant_of(test_category):
                        return True
        return False

    # Deprecated alias
    @deprecated
    def contains(self, product):
        return self.contains_product(product)

    def __get_pks_and_child_pks(self, queryset):
        """
        Expects a product queryset; gets the primary keys of the passed
        products and their children.

        Verbose, but database and memory friendly.
        """
        # One query to get parent and children; [(4, None), (5, 10), (5, 11)]
        pk_tuples_iterable = queryset.values_list('pk', 'children__pk')
        # Flatten list without unpacking; [4, None, 5, 10, 5, 11]
        flat_iterable = itertools.chain.from_iterable(pk_tuples_iterable)
        # Ensure uniqueness and remove None; {4, 5, 10, 11}
        return set(flat_iterable) - {None}

    @cached_property
    def _category_comparison_fields(self):
        # Overwritten Category models could contain a lot of data, e.g CMS
        # content. Hence, this avoids fetching unneeded data in the costly
        # range comparison queries. Note that using .only() with an empty list
        # is a no-op essentially, so nothing breaks when the field is missing.
        Category = get_model('catalogue', 'Category')
        return getattr(Category, 'COMPARISON_FIELDS', ())

    def _included_categories(self):
        if not self.id:
            return self.included_categories.none()
        if self.__included_categories is None:
            self.__included_categories = self.included_categories.only(
                *self._category_comparison_fields)
        return self.__included_categories

    def _included_product_ids(self):
        if not self.id:
            return []
        if self.__included_product_ids is None:
            self.__included_product_ids = self.__get_pks_and_child_pks(
                self.included_products)
        return self.__included_product_ids

    def _excluded_product_ids(self):
        if not self.id:
            return []
        if self.__excluded_product_ids is None:
            self.__excluded_product_ids = self.__get_pks_and_child_pks(
                self.excluded_products)
        return self.__excluded_product_ids

    def _class_ids(self):
        if self.__class_ids is None:
            self.__class_ids = self.classes.values_list('pk', flat=True)
        return self.__class_ids

    def _category_ids(self):
        if self.__category_ids is None:
            ids = []
            for category in self._included_categories():
                children_ids = category.get_descendants().values_list(
                    'pk', flat=True)
                ids.append(category.pk)
                ids.extend(list(children_ids))

            self.__category_ids = ids

        return self.__category_ids

    def invalidate_cached_ids(self):
        self.__category_ids = None
        self.__included_categories = None
        self.__included_product_ids = None
        self.__excluded_product_ids = None

    def num_products(self):
        # Delegate to a proxy class if one is provided
        if self.proxy:
            return self.proxy.num_products()
        if self.includes_all_products:
            return None
        return self.all_products().count()

    def all_products(self):
        """
        Return a queryset containing all the products in the range

        This includes included_products plus the products contained in the
        included classes and categories, minus the products in
        excluded_products.
        """
        if self.proxy:
            return self.proxy.all_products()

        Product = get_model("catalogue", "Product")
        if self.includes_all_products:
            # Filter out child products and blacklisted products
            return Product.objects.browsable().exclude(
                id__in=self._excluded_product_ids())

        return Product.objects.filter(
            Q(id__in=self._included_product_ids())
            | Q(product_class_id__in=self._class_ids())
            | Q(productcategory__category_id__in=self._category_ids())
        ).exclude(id__in=self._excluded_product_ids()).distinct()

    @property
    def is_editable(self):
        """
        Test whether this range can be edited in the dashboard.
        """
        return not self.proxy_class

    @property
    def is_reorderable(self):
        """
        Test whether products for the range can be re-ordered.
        """
        return len(self._class_ids()) == 0 and len(self._included_categories()) == 0


class AbstractRangeProduct(models.Model):
    """
    Allow ordering products inside ranges
    Exists to allow customising.
    """
    range = models.ForeignKey('offer.Range', on_delete=models.CASCADE)
    product = models.ForeignKey('catalogue.Product', on_delete=models.CASCADE)
    display_order = models.IntegerField(default=0)

    class Meta:
        abstract = True
        app_label = 'offer'
        unique_together = ('range', 'product')


class AbstractRangeProductFileUpload(models.Model):
    range = models.ForeignKey(
        'offer.Range',
        on_delete=models.CASCADE,
        related_name='file_uploads',
        verbose_name=_("Range"))
    filepath = models.CharField(_("File Path"), max_length=255)
    size = models.PositiveIntegerField(_("Size"))
    uploaded_by = models.ForeignKey(
        AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name=_("Uploaded By"))
    date_uploaded = models.DateTimeField(_("Date Uploaded"), auto_now_add=True, db_index=True)

    PENDING, FAILED, PROCESSED = 'Pending', 'Failed', 'Processed'
    choices = (
        (PENDING, PENDING),
        (FAILED, FAILED),
        (PROCESSED, PROCESSED),
    )
    status = models.CharField(_("Status"), max_length=32, choices=choices,
                              default=PENDING)
    error_message = models.CharField(_("Error Message"), max_length=255,
                                     blank=True)

    # Post-processing audit fields
    date_processed = models.DateTimeField(_("Date Processed"), null=True)
    num_new_skus = models.PositiveIntegerField(_("Number of New SKUs"),
                                               null=True)
    num_unknown_skus = models.PositiveIntegerField(_("Number of Unknown SKUs"),
                                                   null=True)
    num_duplicate_skus = models.PositiveIntegerField(
        _("Number of Duplicate SKUs"), null=True)

    class Meta:
        abstract = True
        app_label = 'offer'
        ordering = ('-date_uploaded',)
        verbose_name = _("Range Product Uploaded File")
        verbose_name_plural = _("Range Product Uploaded Files")

    def mark_as_failed(self, message=None):
        self.date_processed = now()
        self.error_message = message
        self.status = self.FAILED
        self.save()

    def mark_as_processed(self, num_new, num_unknown, num_duplicate):
        self.status = self.PROCESSED
        self.date_processed = now()
        self.num_new_skus = num_new
        self.num_unknown_skus = num_unknown
        self.num_duplicate_skus = num_duplicate
        self.save()

    def was_processing_successful(self):
        return self.status == self.PROCESSED

    def process(self, file_obj):
        """
        Process the file upload and add products to the range
        """
        all_ids = set(self.extract_ids(file_obj))
        products = self.range.all_products()
        existing_skus = products.values_list(
            'stockrecords__partner_sku', flat=True)
        existing_skus = set(filter(bool, existing_skus))
        existing_upcs = products.values_list('upc', flat=True)
        existing_upcs = set(filter(bool, existing_upcs))
        existing_ids = existing_skus.union(existing_upcs)
        new_ids = all_ids - existing_ids

        Product = get_model('catalogue', 'Product')
        products = Product._default_manager.filter(
            models.Q(stockrecords__partner_sku__in=new_ids)
            | models.Q(upc__in=new_ids))
        for product in products:
            self.range.add_product(product)

        # Processing stats
        found_skus = products.values_list(
            'stockrecords__partner_sku', flat=True)
        found_skus = set(filter(bool, found_skus))
        found_upcs = set(filter(bool, products.values_list('upc', flat=True)))
        found_ids = found_skus.union(found_upcs)
        missing_ids = new_ids - found_ids
        dupes = set(all_ids).intersection(existing_ids)

        self.mark_as_processed(products.count(), len(missing_ids), len(dupes))
        return products

    def extract_ids(self, file_obj):
        reader = csv.reader(file_obj)
        for line in reader:
            if line:
                yield line[0]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.catalogue.views:0
==oscar.apps.dashboard.catalogue.views:0
==oscar.apps.dashboard.catalogue.views:0
from django.conf import settings
from django.contrib import messages
from django.db.models import Q
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, redirect
from django.template.loader import render_to_string
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.views import generic
from django_tables2 import SingleTableMixin, SingleTableView

from oscar.core.loading import get_classes, get_model
from oscar.views.generic import ObjectLookupView


(ProductForm,
 ProductClassSelectForm,
 ProductSearchForm,
 ProductClassForm,
 CategoryForm,
 StockAlertSearchForm,
 AttributeOptionGroupForm,
 OptionForm) \
    = get_classes('dashboard.catalogue.forms',
                  ('ProductForm',
                   'ProductClassSelectForm',
                   'ProductSearchForm',
                   'ProductClassForm',
                   'CategoryForm',
                   'StockAlertSearchForm',
                   'AttributeOptionGroupForm',
                   'OptionForm'))
(StockRecordFormSet,
 ProductCategoryFormSet,
 ProductImageFormSet,
 ProductRecommendationFormSet,
 ProductAttributesFormSet,
 AttributeOptionFormSet) \
    = get_classes('dashboard.catalogue.formsets',
                  ('StockRecordFormSet',
                   'ProductCategoryFormSet',
                   'ProductImageFormSet',
                   'ProductRecommendationFormSet',
                   'ProductAttributesFormSet',
                   'AttributeOptionFormSet'))
ProductTable, CategoryTable, AttributeOptionGroupTable, OptionTable \
    = get_classes('dashboard.catalogue.tables',
                  ('ProductTable', 'CategoryTable',
                   'AttributeOptionGroupTable', 'OptionTable'))
(PopUpWindowCreateMixin,
 PopUpWindowUpdateMixin,
 PopUpWindowDeleteMixin) \
    = get_classes('dashboard.views',
                  ('PopUpWindowCreateMixin',
                   'PopUpWindowUpdateMixin',
                   'PopUpWindowDeleteMixin'))
Product = get_model('catalogue', 'Product')
Category = get_model('catalogue', 'Category')
ProductImage = get_model('catalogue', 'ProductImage')
ProductCategory = get_model('catalogue', 'ProductCategory')
ProductClass = get_model('catalogue', 'ProductClass')
StockRecord = get_model('partner', 'StockRecord')
StockAlert = get_model('partner', 'StockAlert')
Partner = get_model('partner', 'Partner')
AttributeOptionGroup = get_model('catalogue', 'AttributeOptionGroup')
Option = get_model('catalogue', 'Option')


def filter_products(queryset, user):
    """
    Restrict the queryset to products the given user has access to.
    A staff user is allowed to access all Products.
    A non-staff user is only allowed access to a product if they are in at
    least one stock record's partner user list.
    """
    if user.is_staff:
        return queryset

    return queryset.filter(stockrecords__partner__users__pk=user.pk).distinct()


class ProductListView(SingleTableView):

    """
    Dashboard view of the product list.
    Supports the permission-based dashboard.
    """

    template_name = 'oscar/dashboard/catalogue/product_list.html'
    form_class = ProductSearchForm
    productclass_form_class = ProductClassSelectForm
    table_class = ProductTable
    context_table_name = 'products'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['form'] = self.form
        ctx['productclass_form'] = self.productclass_form_class()
        return ctx

    def get_description(self, form):
        if form.is_valid() and any(form.cleaned_data.values()):
            return _('Product search results')
        return _('Products')

    def get_table(self, **kwargs):
        if 'recently_edited' in self.request.GET:
            kwargs.update(dict(orderable=False))

        table = super().get_table(**kwargs)
        table.caption = self.get_description(self.form)
        return table

    def get_table_pagination(self, table):
        return dict(per_page=20)

    def filter_queryset(self, queryset):
        """
        Apply any filters to restrict the products that appear on the list
        """
        return filter_products(queryset, self.request.user)

    def get_queryset(self):
        """
        Build the queryset for this list
        """
        queryset = Product.objects.browsable_dashboard().base_queryset()
        queryset = self.filter_queryset(queryset)
        queryset = self.apply_search(queryset)
        return queryset

    def apply_search(self, queryset):
        """
        Search through the filtered queryset.

        We must make sure that we don't return search results that the user is not allowed
        to see (see filter_queryset).
        """
        self.form = self.form_class(self.request.GET)

        if not self.form.is_valid():
            return queryset

        data = self.form.cleaned_data

        if data.get('upc'):
            # Filter the queryset by upc
            # For usability reasons, we first look at exact matches and only return
            # them if there are any. Otherwise we return all results
            # that contain the UPC.

            # Look up all matches (child products, products not allowed to access) ...
            matches_upc = Product.objects.filter(upc__iexact=data['upc'])

            # ... and use that to pick all standalone or parent products that the user is
            # allowed to access.
            qs_match = queryset.filter(
                Q(id__in=matches_upc.values('id')) | Q(id__in=matches_upc.values('parent_id')))

            if qs_match.exists():
                # If there's a direct UPC match, return just that.
                queryset = qs_match
            else:
                # No direct UPC match. Let's try the same with an icontains search.
                matches_upc = Product.objects.filter(upc__icontains=data['upc'])
                queryset = queryset.filter(
                    Q(id__in=matches_upc.values('id')) | Q(id__in=matches_upc.values('parent_id')))

        if data.get('title'):
            queryset = queryset.filter(title__icontains=data['title'])

        return queryset


class ProductCreateRedirectView(generic.RedirectView):
    permanent = False
    productclass_form_class = ProductClassSelectForm

    def get_product_create_url(self, product_class):
        """ Allow site to provide custom URL """
        return reverse('dashboard:catalogue-product-create',
                       kwargs={'product_class_slug': product_class.slug})

    def get_invalid_product_class_url(self):
        messages.error(self.request, _("Please choose a product type"))
        return reverse('dashboard:catalogue-product-list')

    def get_redirect_url(self, **kwargs):
        form = self.productclass_form_class(self.request.GET)
        if form.is_valid():
            product_class = form.cleaned_data['product_class']
            return self.get_product_create_url(product_class)

        else:
            return self.get_invalid_product_class_url()


class ProductCreateUpdateView(generic.UpdateView):
    """
    Dashboard view that is can both create and update products of all kinds.
    It can be used in three different ways, each of them with a unique URL
    pattern:
    - When creating a new standalone product, this view is called with the
      desired product class
    - When editing an existing product, this view is called with the product's
      primary key. If the product is a child product, the template considerably
      reduces the available form fields.
    - When creating a new child product, this view is called with the parent's
      primary key.

    Supports the permission-based dashboard.
    """

    template_name = 'oscar/dashboard/catalogue/product_update.html'
    model = Product
    context_object_name = 'product'

    form_class = ProductForm
    category_formset = ProductCategoryFormSet
    image_formset = ProductImageFormSet
    recommendations_formset = ProductRecommendationFormSet
    stockrecord_formset = StockRecordFormSet

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.formsets = {'category_formset': self.category_formset,
                         'image_formset': self.image_formset,
                         'recommended_formset': self.recommendations_formset,
                         'stockrecord_formset': self.stockrecord_formset}

    def dispatch(self, request, *args, **kwargs):
        resp = super().dispatch(
            request, *args, **kwargs)
        return self.check_objects_or_redirect() or resp

    def check_objects_or_redirect(self):
        """
        Allows checking the objects fetched by get_object and redirect
        if they don't satisfy our needs.
        Is used to redirect when create a new variant and the specified
        parent product can't actually be turned into a parent product.
        """
        if self.creating and self.parent is not None:
            is_valid, reason = self.parent.can_be_parent(give_reason=True)
            if not is_valid:
                messages.error(self.request, reason)
                return redirect('dashboard:catalogue-product-list')

    def get_queryset(self):
        """
        Filter products that the user doesn't have permission to update
        """
        return filter_products(Product.objects.all(), self.request.user)

    def get_object(self, queryset=None):
        """
        This parts allows generic.UpdateView to handle creating products as
        well. The only distinction between an UpdateView and a CreateView
        is that self.object is None. We emulate this behavior.

        This method is also responsible for setting self.product_class and
        self.parent.
        """
        self.creating = 'pk' not in self.kwargs
        if self.creating:
            # Specifying a parent product is only done when creating a child
            # product.
            parent_pk = self.kwargs.get('parent_pk')
            if parent_pk is None:
                self.parent = None
                # A product class needs to be specified when creating a
                # standalone product.
                product_class_slug = self.kwargs.get('product_class_slug')
                self.product_class = get_object_or_404(
                    ProductClass, slug=product_class_slug)
            else:
                self.parent = get_object_or_404(Product, pk=parent_pk)
                self.product_class = self.parent.product_class

            return None  # success
        else:
            product = super().get_object(queryset)
            self.product_class = product.get_product_class()
            self.parent = product.parent
            return product

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['product_class'] = self.product_class
        ctx['parent'] = self.parent
        ctx['title'] = self.get_page_title()

        for ctx_name, formset_class in self.formsets.items():
            if ctx_name not in ctx:
                ctx[ctx_name] = formset_class(self.product_class,
                                              self.request.user,
                                              instance=self.object)
        return ctx

    def get_page_title(self):
        if self.creating:
            if self.parent is None:
                return _('Create new %(product_class)s product') % {
                    'product_class': self.product_class.name}
            else:
                return _('Create new variant of %(parent_product)s') % {
                    'parent_product': self.parent.title}
        else:
            if self.object.title or not self.parent:
                return self.object.title
            else:
                return _('Editing variant of %(parent_product)s') % {
                    'parent_product': self.parent.title}

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['product_class'] = self.product_class
        kwargs['parent'] = self.parent
        return kwargs

    def process_all_forms(self, form):
        """
        Short-circuits the regular logic to have one place to have our
        logic to check all forms
        """
        # Need to create the product here because the inline forms need it
        # can't use commit=False because ProductForm does not support it
        if self.creating and form.is_valid():
            self.object = form.save()

        formsets = {}
        for ctx_name, formset_class in self.formsets.items():
            formsets[ctx_name] = formset_class(self.product_class,
                                               self.request.user,
                                               self.request.POST,
                                               self.request.FILES,
                                               instance=self.object)

        is_valid = form.is_valid() and all([formset.is_valid()
                                            for formset in formsets.values()])

        cross_form_validation_result = self.clean(form, formsets)
        if is_valid and cross_form_validation_result:
            return self.forms_valid(form, formsets)
        else:
            return self.forms_invalid(form, formsets)

    # form_valid and form_invalid are called depending on the validation result
    # of just the product form and redisplay the form respectively return a
    # redirect to the success URL. In both cases we need to check our formsets
    # as well, so both methods do the same. process_all_forms then calls
    # forms_valid or forms_invalid respectively, which do the redisplay or
    # redirect.
    form_valid = form_invalid = process_all_forms

    def clean(self, form, formsets):
        """
        Perform any cross-form/formset validation. If there are errors, attach
        errors to a form or a form field so that they are displayed to the user
        and return False. If everything is valid, return True. This method will
        be called regardless of whether the individual forms are valid.
        """
        return True

    def forms_valid(self, form, formsets):
        """
        Save all changes and display a success url.
        When creating the first child product, this method also sets the new
        parent's structure accordingly.
        """
        if self.creating:
            self.handle_adding_child(self.parent)
        else:
            # a just created product was already saved in process_all_forms()
            self.object = form.save()

        # Save formsets
        for formset in formsets.values():
            formset.save()

        for idx, image in enumerate(self.object.images.all()):
            image.display_order = idx
            image.save()

        return HttpResponseRedirect(self.get_success_url())

    def handle_adding_child(self, parent):
        """
        When creating the first child product, the parent product needs
        to be implicitly converted from a standalone product to a
        parent product.
        """
        # ProductForm eagerly sets the future parent's structure to PARENT to
        # pass validation, but it's not persisted in the database. We ensure
        # it's persisted by calling save()
        if parent is not None:
            parent.structure = Product.PARENT
            parent.save()

    def forms_invalid(self, form, formsets):
        # delete the temporary product again
        if self.creating and self.object and self.object.pk is not None:
            self.object.delete()
            self.object = None

        messages.error(self.request,
                       _("Your submitted data was not valid - please "
                         "correct the errors below"))
        ctx = self.get_context_data(form=form, **formsets)
        return self.render_to_response(ctx)

    def get_url_with_querystring(self, url):
        url_parts = [url]
        if self.request.GET.urlencode():
            url_parts += [self.request.GET.urlencode()]
        return "?".join(url_parts)

    def get_success_url(self):
        """
        Renders a success message and redirects depending on the button:
        - Standard case is pressing "Save"; redirects to the product list
        - When "Save and continue" is pressed, we stay on the same page
        - When "Create (another) child product" is pressed, it redirects
          to a new product creation page
        """
        msg = render_to_string(
            'oscar/dashboard/catalogue/messages/product_saved.html',
            {
                'product': self.object,
                'creating': self.creating,
                'request': self.request
            })
        messages.success(self.request, msg, extra_tags="safe noicon")

        action = self.request.POST.get('action')
        if action == 'continue':
            url = reverse(
                'dashboard:catalogue-product', kwargs={"pk": self.object.id})
        elif action == 'create-another-child' and self.parent:
            url = reverse(
                'dashboard:catalogue-product-create-child',
                kwargs={'parent_pk': self.parent.pk})
        elif action == 'create-child':
            url = reverse(
                'dashboard:catalogue-product-create-child',
                kwargs={'parent_pk': self.object.pk})
        else:
            url = reverse('dashboard:catalogue-product-list')
        return self.get_url_with_querystring(url)


class ProductDeleteView(generic.DeleteView):
    """
    Dashboard view to delete a product. Has special logic for deleting the
    last child product.
    Supports the permission-based dashboard.
    """
    template_name = 'oscar/dashboard/catalogue/product_delete.html'
    model = Product
    context_object_name = 'product'

    def get_queryset(self):
        """
        Filter products that the user doesn't have permission to update
        """
        return filter_products(Product.objects.all(), self.request.user)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        if self.object.is_child:
            ctx['title'] = _("Delete product variant?")
        else:
            ctx['title'] = _("Delete product?")
        return ctx

    def delete(self, request, *args, **kwargs):
        # We override the core delete method and don't call super in order to
        # apply more sophisticated logic around handling child products.
        # Calling super makes it difficult to test if the product being deleted
        # is the last child.

        self.object = self.get_object()

        # Before performing the delete, record whether this product is the last
        # child.
        is_last_child = False
        if self.object.is_child:
            parent = self.object.parent
            is_last_child = parent.children.count() == 1

        # This also deletes any child products.
        self.object.delete()

        # If the product being deleted is the last child, then pass control
        # to a method than can adjust the parent itself.
        if is_last_child:
            self.handle_deleting_last_child(parent)

        return HttpResponseRedirect(self.get_success_url())

    def handle_deleting_last_child(self, parent):
        # If the last child product is deleted, this view defaults to turning
        # the parent product into a standalone product. While this is
        # appropriate for many scenarios, it is intentionally easily
        # overridable and not automatically done in e.g. a Product's delete()
        # method as it is more a UX helper than hard business logic.
        parent.structure = parent.STANDALONE
        parent.save()

    def get_success_url(self):
        """
        When deleting child products, this view redirects to editing the
        parent product. When deleting any other product, it redirects to the
        product list view.
        """
        if self.object.is_child:
            msg = _("Deleted product variant '%s'") % self.object.get_title()
            messages.success(self.request, msg)
            return reverse(
                'dashboard:catalogue-product',
                kwargs={'pk': self.object.parent_id})
        else:
            msg = _("Deleted product '%s'") % self.object.title
            messages.success(self.request, msg)
            return reverse('dashboard:catalogue-product-list')


class StockAlertListView(generic.ListView):
    template_name = 'oscar/dashboard/catalogue/stockalert_list.html'
    model = StockAlert
    context_object_name = 'alerts'
    paginate_by = settings.OSCAR_STOCK_ALERTS_PER_PAGE

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['form'] = self.form
        ctx['description'] = self.description
        return ctx

    def get_queryset(self):
        if 'status' in self.request.GET:
            self.form = StockAlertSearchForm(self.request.GET)
            if self.form.is_valid():
                status = self.form.cleaned_data['status']
                self.description = _('Alerts with status "%s"') % status
                return self.model.objects.filter(status=status)
        else:
            self.description = _('All alerts')
            self.form = StockAlertSearchForm()
        return self.model.objects.all()


class CategoryListView(SingleTableView):
    template_name = 'oscar/dashboard/catalogue/category_list.html'
    table_class = CategoryTable
    context_table_name = 'categories'

    def get_queryset(self):
        return Category.get_root_nodes()

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        ctx['child_categories'] = Category.get_root_nodes()
        return ctx


class CategoryDetailListView(SingleTableMixin, generic.DetailView):
    template_name = 'oscar/dashboard/catalogue/category_list.html'
    model = Category
    context_object_name = 'category'
    table_class = CategoryTable
    context_table_name = 'categories'

    def get_table_data(self):
        return self.object.get_children()

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        ctx['child_categories'] = self.object.get_children()
        ctx['ancestors'] = self.object.get_ancestors_and_self()
        return ctx


class CategoryListMixin(object):

    def get_success_url(self):
        parent = self.object.get_parent()
        if parent is None:
            return reverse("dashboard:catalogue-category-list")
        else:
            return reverse("dashboard:catalogue-category-detail-list",
                           args=(parent.pk,))


class CategoryCreateView(CategoryListMixin, generic.CreateView):
    template_name = 'oscar/dashboard/catalogue/category_form.html'
    model = Category
    form_class = CategoryForm

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _("Add a new category")
        return ctx

    def get_success_url(self):
        messages.info(self.request, _("Category created successfully"))
        return super().get_success_url()

    def get_initial(self):
        # set child category if set in the URL kwargs
        initial = super().get_initial()
        if 'parent' in self.kwargs:
            initial['_ref_node_id'] = self.kwargs['parent']
        return initial


class CategoryUpdateView(CategoryListMixin, generic.UpdateView):
    template_name = 'oscar/dashboard/catalogue/category_form.html'
    model = Category
    form_class = CategoryForm

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _("Update category '%s'") % self.object.name
        return ctx

    def get_success_url(self):
        messages.info(self.request, _("Category updated successfully"))
        return super().get_success_url()


class CategoryDeleteView(CategoryListMixin, generic.DeleteView):
    template_name = 'oscar/dashboard/catalogue/category_delete.html'
    model = Category

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        ctx['parent'] = self.object.get_parent()
        return ctx

    def get_success_url(self):
        messages.info(self.request, _("Category deleted successfully"))
        return super().get_success_url()


class ProductLookupView(ObjectLookupView):
    model = Product

    def get_queryset(self):
        return self.model.browsable.all()

    def lookup_filter(self, qs, term):
        return qs.filter(Q(title__icontains=term)
                         | Q(parent__title__icontains=term))


class ProductClassCreateUpdateView(generic.UpdateView):

    template_name = 'oscar/dashboard/catalogue/product_class_form.html'
    model = ProductClass
    form_class = ProductClassForm
    product_attributes_formset = ProductAttributesFormSet

    def process_all_forms(self, form):
        """
        This validates both the ProductClass form and the
        ProductClassAttributes formset at once
        making it possible to display all their errors at once.
        """
        if self.creating and form.is_valid():
            # the object will be needed by the product_attributes_formset
            self.object = form.save(commit=False)

        attributes_formset = self.product_attributes_formset(
            self.request.POST, self.request.FILES, instance=self.object)

        is_valid = form.is_valid() and attributes_formset.is_valid()

        if is_valid:
            return self.forms_valid(form, attributes_formset)
        else:
            return self.forms_invalid(form, attributes_formset)

    def forms_valid(self, form, attributes_formset):
        form.save()
        attributes_formset.save()

        return HttpResponseRedirect(self.get_success_url())

    def forms_invalid(self, form, attributes_formset):
        messages.error(self.request,
                       _("Your submitted data was not valid - please "
                         "correct the errors below"
                         ))
        ctx = self.get_context_data(form=form,
                                    attributes_formset=attributes_formset)
        return self.render_to_response(ctx)

    # form_valid and form_invalid are called depending on the validation result
    # of just the product class form, and return a redirect to the success URL
    # or redisplay the form, respectively. In both cases we need to check our
    # formsets as well, so both methods do the same. process_all_forms then
    # calls forms_valid or forms_invalid respectively, which do the redisplay
    # or redirect.
    form_valid = form_invalid = process_all_forms

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(
            *args, **kwargs)

        if "attributes_formset" not in ctx:
            ctx["attributes_formset"] = self.product_attributes_formset(
                instance=self.object)

        ctx["title"] = self.get_title()

        return ctx


class ProductClassCreateView(ProductClassCreateUpdateView):

    creating = True

    def get_object(self):
        return None

    def get_title(self):
        return _("Add a new product type")

    def get_success_url(self):
        messages.info(self.request, _("Product type created successfully"))
        return reverse("dashboard:catalogue-class-list")


class ProductClassUpdateView(ProductClassCreateUpdateView):

    creating = False

    def get_title(self):
        return _("Update product type '%s'") % self.object.name

    def get_success_url(self):
        messages.info(self.request, _("Product type updated successfully"))
        return reverse("dashboard:catalogue-class-list")

    def get_object(self):
        product_class = get_object_or_404(ProductClass, pk=self.kwargs['pk'])
        return product_class


class ProductClassListView(generic.ListView):
    template_name = 'oscar/dashboard/catalogue/product_class_list.html'
    context_object_name = 'classes'
    model = ProductClass

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        ctx['title'] = _("Product Types")
        return ctx


class ProductClassDeleteView(generic.DeleteView):
    template_name = 'oscar/dashboard/catalogue/product_class_delete.html'
    model = ProductClass
    form_class = ProductClassForm

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        ctx['title'] = _("Delete product type '%s'") % self.object.name
        product_count = self.object.products.count()

        if product_count > 0:
            ctx['disallow'] = True
            ctx['title'] = _("Unable to delete '%s'") % self.object.name
            messages.error(self.request,
                           _("%i products are still assigned to this type") %
                           product_count)
        return ctx

    def get_success_url(self):
        messages.info(self.request, _("Product type deleted successfully"))
        return reverse("dashboard:catalogue-class-list")


class AttributeOptionGroupCreateUpdateView(generic.UpdateView):

    template_name = 'oscar/dashboard/catalogue/attribute_option_group_form.html'
    model = AttributeOptionGroup
    form_class = AttributeOptionGroupForm
    attribute_option_formset = AttributeOptionFormSet

    def process_all_forms(self, form):
        """
        This validates both the AttributeOptionGroup form and the
        AttributeOptions formset at once making it possible to display all their
        errors at once.
        """
        if self.creating and form.is_valid():
            # the object will be needed by the attribute_option_formset
            self.object = form.save(commit=False)

        attribute_option_formset = self.attribute_option_formset(
            self.request.POST, self.request.FILES, instance=self.object)

        is_valid = form.is_valid() and attribute_option_formset.is_valid()

        if is_valid:
            return self.forms_valid(form, attribute_option_formset)
        else:
            return self.forms_invalid(form, attribute_option_formset)

    def forms_valid(self, form, attribute_option_formset):
        form.save()
        attribute_option_formset.save()
        if self.is_popup:
            return self.popup_response(form.instance)
        else:
            return HttpResponseRedirect(self.get_success_url())

    def forms_invalid(self, form, attribute_option_formset):
        messages.error(self.request,
                       _("Your submitted data was not valid - please "
                         "correct the errors below"
                         ))
        ctx = self.get_context_data(form=form,
                                    attribute_option_formset=attribute_option_formset)
        return self.render_to_response(ctx)

    # form_valid and form_invalid are called depending on the validation result
    # of just the attribute option group form, and return a redirect to the
    # success URL or redisplay the form, respectively. In both cases we need to
    # check our formsets as well, so both methods do the same.
    # process_all_forms then calls forms_valid or forms_invalid respectively,
    # which do the redisplay or redirect.
    form_valid = form_invalid = process_all_forms

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx.setdefault("attribute_option_formset", self.attribute_option_formset(instance=self.object))
        ctx["title"] = self.get_title()
        return ctx

    def get_url_with_querystring(self, url):
        url_parts = [url]
        if self.request.GET.urlencode():
            url_parts += [self.request.GET.urlencode()]
        return "?".join(url_parts)


class AttributeOptionGroupCreateView(PopUpWindowCreateMixin, AttributeOptionGroupCreateUpdateView):

    creating = True

    def get_object(self):
        return None

    def get_title(self):
        return _("Add a new Attribute Option Group")

    def get_success_url(self):
        self.add_success_message(_("Attribute Option Group created successfully"))
        url = reverse("dashboard:catalogue-attribute-option-group-list")
        return self.get_url_with_querystring(url)


class AttributeOptionGroupUpdateView(PopUpWindowUpdateMixin, AttributeOptionGroupCreateUpdateView):

    creating = False

    def get_object(self):
        attribute_option_group = get_object_or_404(AttributeOptionGroup, pk=self.kwargs['pk'])
        return attribute_option_group

    def get_title(self):
        return _("Update Attribute Option Group '%s'") % self.object.name

    def get_success_url(self):
        self.add_success_message(_("Attribute Option Group updated successfully"))
        url = reverse("dashboard:catalogue-attribute-option-group-list")
        return self.get_url_with_querystring(url)


class AttributeOptionGroupListView(SingleTableView):

    template_name = 'oscar/dashboard/catalogue/attribute_option_group_list.html'
    model = AttributeOptionGroup
    table_class = AttributeOptionGroupTable
    context_table_name = 'attribute_option_groups'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['querystring'] = self.request.GET.urlencode()
        return ctx


class AttributeOptionGroupDeleteView(PopUpWindowDeleteMixin, generic.DeleteView):

    template_name = 'oscar/dashboard/catalogue/attribute_option_group_delete.html'
    model = AttributeOptionGroup
    form_class = AttributeOptionGroupForm

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)

        ctx['title'] = _("Delete Attribute Option Group '%s'") % self.object.name

        product_attribute_count = self.object.product_attributes.count()
        if product_attribute_count > 0:
            ctx['disallow'] = True
            ctx['title'] = _("Unable to delete '%s'") % self.object.name
            messages.error(self.request,
                           _("%i product attributes are still assigned to this attribute option group") %
                           product_attribute_count)

        ctx['http_get_params'] = self.request.GET

        return ctx

    def get_url_with_querystring(self, url):
        url_parts = [url]
        http_post_params = self.request.POST.copy()
        try:
            del http_post_params['csrfmiddlewaretoken']
        except KeyError:
            pass
        if http_post_params.urlencode():
            url_parts += [http_post_params.urlencode()]
        return "?".join(url_parts)

    def get_success_url(self):
        self.add_success_message(_("Attribute Option Group deleted successfully"))
        url = reverse("dashboard:catalogue-attribute-option-group-list")
        return self.get_url_with_querystring(url)


class OptionListView(SingleTableView):

    template_name = 'oscar/dashboard/catalogue/option_list.html'
    model = Option
    table_class = OptionTable
    context_table_name = 'options'


class OptionCreateUpdateView(generic.UpdateView):

    template_name = 'oscar/dashboard/catalogue/option_form.html'
    model = Option
    form_class = OptionForm

    def form_valid(self, form):
        self.object = form.save()
        if self.is_popup:
            return self.popup_response(form.instance)
        else:
            return HttpResponseRedirect(self.get_success_url())

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = self.get_title()
        return ctx

    def form_invalid(self, form):
        messages.error(
            self.request,
            _("Your submitted data was not valid - please correct the errors below")
        )
        return super().form_invalid(form)


class OptionCreateView(PopUpWindowCreateMixin, OptionCreateUpdateView):

    creating = True

    def get_object(self):
        return None

    def get_title(self):
        return _("Add a new Option")

    def get_success_url(self):
        self.add_success_message(_("Option created successfully"))
        return reverse("dashboard:catalogue-option-list")


class OptionUpdateView(PopUpWindowUpdateMixin, OptionCreateUpdateView):

    creating = False

    def get_object(self):
        attribute_option_group = get_object_or_404(Option, pk=self.kwargs['pk'])
        return attribute_option_group

    def get_title(self):
        return _("Update Option '%s'") % self.object.name

    def get_success_url(self):
        self.add_success_message(_("Option updated successfully"))
        return reverse("dashboard:catalogue-option-list")


class OptionDeleteView(PopUpWindowDeleteMixin, generic.DeleteView):

    template_name = 'oscar/dashboard/catalogue/option_delete.html'
    model = Option

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)

        ctx['title'] = _("Delete Option '%s'") % self.object.name

        products = self.object.product_set.count()
        product_classes = self.object.productclass_set.count()
        if any([products, product_classes]):
            ctx['disallow'] = True
            ctx['title'] = _("Unable to delete '%s'") % self.object.name
            if products:
                messages.error(
                    self.request,
                    _("%i products are still assigned to this option") % products
                )
            if product_classes:
                messages.error(
                    self.request,
                    _("%i product classes are still assigned to this option") % product_classes
                )

        return ctx

    def get_success_url(self):
        self.add_success_message(_("Option deleted successfully"))
        return reverse("dashboard:catalogue-option-list")
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.abstract_models:0
==oscar.apps.basket.abstract_models:0
import zlib
from decimal import Decimal as D

from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist, PermissionDenied
from django.db import models
from django.db.models import Sum
from django.utils.encoding import smart_text
from django.utils.timezone import now
from django.utils.translation import gettext_lazy as _

from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.loading import get_class, get_classes
from oscar.core.utils import get_default_currency, round_half_up
from oscar.models.fields.slugfield import SlugField
from oscar.templatetags.currency_filters import currency

OfferApplications = get_class('offer.results', 'OfferApplications')
Unavailable = get_class('partner.availability', 'Unavailable')
LineOfferConsumer = get_class('basket.utils', 'LineOfferConsumer')
OpenBasketManager, SavedBasketManager = get_classes('basket.managers', ['OpenBasketManager', 'SavedBasketManager'])


class AbstractBasket(models.Model):
    """
    Basket object
    """
    # Baskets can be anonymously owned - hence this field is nullable.  When a
    # anon user signs in, their two baskets are merged.
    owner = models.ForeignKey(
        AUTH_USER_MODEL,
        null=True,
        related_name='baskets',
        on_delete=models.CASCADE,
        verbose_name=_("Owner"))

    # Basket statuses
    # - Frozen is for when a basket is in the process of being submitted
    #   and we need to prevent any changes to it.
    OPEN, MERGED, SAVED, FROZEN, SUBMITTED = (
        "Open", "Merged", "Saved", "Frozen", "Submitted")
    STATUS_CHOICES = (
        (OPEN, _("Open - currently active")),
        (MERGED, _("Merged - superceded by another basket")),
        (SAVED, _("Saved - for items to be purchased later")),
        (FROZEN, _("Frozen - the basket cannot be modified")),
        (SUBMITTED, _("Submitted - has been ordered at the checkout")),
    )
    status = models.CharField(
        _("Status"), max_length=128, default=OPEN, choices=STATUS_CHOICES)

    # A basket can have many vouchers attached to it.  However, it is common
    # for sites to only allow one voucher per basket - this will need to be
    # enforced in the project's codebase.
    vouchers = models.ManyToManyField(
        'voucher.Voucher', verbose_name=_("Vouchers"), blank=True)

    date_created = models.DateTimeField(_("Date created"), auto_now_add=True)
    date_merged = models.DateTimeField(_("Date merged"), null=True, blank=True)
    date_submitted = models.DateTimeField(_("Date submitted"), null=True,
                                          blank=True)

    # Only if a basket is in one of these statuses can it be edited
    editable_statuses = (OPEN, SAVED)

    class Meta:
        abstract = True
        app_label = 'basket'
        verbose_name = _('Basket')
        verbose_name_plural = _('Baskets')

    objects = models.Manager()
    open = OpenBasketManager()
    saved = SavedBasketManager()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # We keep a cached copy of the basket lines as we refer to them often
        # within the same request cycle.  Also, applying offers will append
        # discount data to the basket lines which isn't persisted to the DB and
        # so we want to avoid reloading them as this would drop the discount
        # information.
        self._lines = None
        self.offer_applications = OfferApplications()

    def __str__(self):
        return _(
            "%(status)s basket (owner: %(owner)s, lines: %(num_lines)d)") \
            % {'status': self.status,
               'owner': self.owner,
               'num_lines': self.num_lines}

    # ========
    # Strategy
    # ========

    @property
    def has_strategy(self):
        return hasattr(self, '_strategy')

    def _get_strategy(self):
        if not self.has_strategy:
            raise RuntimeError(
                "No strategy class has been assigned to this basket. "
                "This is normally assigned to the incoming request in "
                "oscar.apps.basket.middleware.BasketMiddleware. "
                "Since it is missing, you must be doing something different. "
                "Ensure that a strategy instance is assigned to the basket!"
            )
        return self._strategy

    def _set_strategy(self, strategy):
        self._strategy = strategy

    strategy = property(_get_strategy, _set_strategy)

    def all_lines(self):
        """
        Return a cached set of basket lines.

        This is important for offers as they alter the line models and you
        don't want to reload them from the DB as that information would be
        lost.
        """
        if self.id is None:
            return self.lines.none()
        if self._lines is None:
            self._lines = (
                self.lines
                .select_related('product', 'stockrecord')
                .prefetch_related(
                    'attributes', 'product__images')
                .order_by(self._meta.pk.name))
        return self._lines

    def max_allowed_quantity(self):
        """
        Returns maximum product quantity, that can be added to the basket
        with the respect to basket quantity threshold.
        """
        basket_threshold = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD
        if basket_threshold:
            total_basket_quantity = self.num_items
            max_allowed = basket_threshold - total_basket_quantity
            return max_allowed, basket_threshold
        return None, None

    def is_quantity_allowed(self, qty):
        """
        Test whether the passed quantity of items can be added to the basket
        """
        # We enforce a max threshold to prevent a DOS attack via the offers
        # system.
        max_allowed, basket_threshold = self.max_allowed_quantity()
        if max_allowed is not None and qty > max_allowed:
            return False, _(
                "Due to technical limitations we are not able "
                "to ship more than %(threshold)d items in one order.") \
                % {'threshold': basket_threshold}
        return True, None

    # ============
    # Manipulation
    # ============

    def flush(self):
        """
        Remove all lines from basket.
        """
        if self.status == self.FROZEN:
            raise PermissionDenied("A frozen basket cannot be flushed")
        self.lines.all().delete()
        self._lines = None

    def get_stock_info(self, product, options):
        """
        Hook for implementing strategies that depend on product options
        """
        # The built-in strategies don't use options, so initially disregard
        # them.
        return self.strategy.fetch_for_product(product)

    def add_product(self, product, quantity=1, options=None):
        """
        Add a product to the basket

        The 'options' list should contains dicts with keys 'option' and 'value'
        which link the relevant product.Option model and string value
        respectively.

        Returns (line, created).
          line: the matching basket line
          created: whether the line was created or updated

        """
        if options is None:
            options = []
        if not self.id:
            self.save()

        # Ensure that all lines are the same currency
        price_currency = self.currency
        stock_info = self.get_stock_info(product, options)

        if not stock_info.price.exists:
            raise ValueError(
                "Strategy hasn't found a price for product %s" % product)

        if price_currency and stock_info.price.currency != price_currency:
            raise ValueError((
                "Basket lines must all have the same currency. Proposed "
                "line has currency %s, while basket has currency %s")
                % (stock_info.price.currency, price_currency))

        if stock_info.stockrecord is None:
            raise ValueError((
                "Basket lines must all have stock records. Strategy hasn't "
                "found any stock record for product %s") % product)

        # Line reference is used to distinguish between variations of the same
        # product (eg T-shirts with different personalisations)
        line_ref = self._create_line_reference(
            product, stock_info.stockrecord, options)

        # Determine price to store (if one exists).  It is only stored for
        # audit and sometimes caching.
        defaults = {
            'quantity': quantity,
            'price_excl_tax': stock_info.price.excl_tax,
            'price_currency': stock_info.price.currency,
        }
        if stock_info.price.is_tax_known:
            defaults['price_incl_tax'] = stock_info.price.incl_tax

        line, created = self.lines.get_or_create(
            line_reference=line_ref,
            product=product,
            stockrecord=stock_info.stockrecord,
            defaults=defaults)
        if created:
            for option_dict in options:
                line.attributes.create(option=option_dict['option'],
                                       value=option_dict['value'])
        else:
            line.quantity = max(0, line.quantity + quantity)
            line.save()
        self.reset_offer_applications()

        # Returning the line is useful when overriding this method.
        return line, created
    add_product.alters_data = True
    add = add_product

    def applied_offers(self):
        """
        Return a dict of offers successfully applied to the basket.

        This is used to compare offers before and after a basket change to see
        if there is a difference.
        """
        return self.offer_applications.offers

    def reset_offer_applications(self):
        """
        Remove any discounts so they get recalculated
        """
        self.offer_applications = OfferApplications()
        self._lines = None

    def merge_line(self, line, add_quantities=True):
        """
        For transferring a line from another basket to this one.

        This is used with the "Saved" basket functionality.
        """
        try:
            existing_line = self.lines.get(line_reference=line.line_reference)
        except ObjectDoesNotExist:
            # Line does not already exist - reassign its basket
            line.basket = self
            line.save()
        else:
            # Line already exists - assume the max quantity is correct and
            # delete the old
            if add_quantities:
                existing_line.quantity += line.quantity
            else:
                existing_line.quantity = max(existing_line.quantity,
                                             line.quantity)
            existing_line.save()
            line.delete()
        finally:
            self._lines = None
    merge_line.alters_data = True

    def merge(self, basket, add_quantities=True):
        """
        Merges another basket with this one.

        :basket: The basket to merge into this one.
        :add_quantities: Whether to add line quantities when they are merged.
        """
        # Use basket.lines.all instead of all_lines as this function is called
        # before a strategy has been assigned.
        for line_to_merge in basket.lines.all():
            self.merge_line(line_to_merge, add_quantities)
        basket.status = self.MERGED
        basket.date_merged = now()
        basket._lines = None
        basket.save()
        # Ensure all vouchers are moved to the new basket
        for voucher in basket.vouchers.all():
            basket.vouchers.remove(voucher)
            self.vouchers.add(voucher)
    merge.alters_data = True

    def freeze(self):
        """
        Freezes the basket so it cannot be modified.
        """
        self.status = self.FROZEN
        self.save()
    freeze.alters_data = True

    def thaw(self):
        """
        Unfreezes a basket so it can be modified again
        """
        self.status = self.OPEN
        self.save()
    thaw.alters_data = True

    def submit(self):
        """
        Mark this basket as submitted
        """
        self.status = self.SUBMITTED
        self.date_submitted = now()
        self.save()
    submit.alters_data = True

    # Kept for backwards compatibility
    set_as_submitted = submit

    def is_shipping_required(self):
        """
        Test whether the basket contains physical products that require
        shipping.
        """
        for line in self.all_lines():
            if line.product.is_shipping_required:
                return True
        return False

    # =======
    # Helpers
    # =======

    def _create_line_reference(self, product, stockrecord, options):
        """
        Returns a reference string for a line based on the item
        and its options.
        """
        base = '%s_%s' % (product.id, stockrecord.id)
        if not options:
            return base
        repr_options = [{'option': repr(option['option']),
                         'value': repr(option['value'])} for option in options]
        return "%s_%s" % (base, zlib.crc32(repr(repr_options).encode('utf8')))

    def _get_total(self, property):
        """
        For executing a named method on each line of the basket
        and returning the total.
        """
        total = D('0.00')
        for line in self.all_lines():
            try:
                total += getattr(line, property)
            except ObjectDoesNotExist:
                # Handle situation where the product may have been deleted
                pass
            except TypeError:
                # Handle Unavailable products with no known price
                info = self.get_stock_info(line.product, line.attributes.all())
                if info.availability.is_available_to_buy:
                    raise
                pass
        return total

    # ==========
    # Properties
    # ==========

    @property
    def is_empty(self):
        """
        Test if this basket is empty
        """
        return self.id is None or self.num_lines == 0

    @property
    def is_tax_known(self):
        """
        Test if tax values are known for this basket
        """
        return all([line.is_tax_known for line in self.all_lines()])

    @property
    def total_excl_tax(self):
        """
        Return total line price excluding tax
        """
        return self._get_total('line_price_excl_tax_incl_discounts')

    @property
    def total_tax(self):
        """Return total tax for a line"""
        return self._get_total('line_tax')

    @property
    def total_incl_tax(self):
        """
        Return total price inclusive of tax and discounts
        """
        return self._get_total('line_price_incl_tax_incl_discounts')

    @property
    def total_incl_tax_excl_discounts(self):
        """
        Return total price inclusive of tax but exclusive discounts
        """
        return self._get_total('line_price_incl_tax')

    @property
    def total_discount(self):
        return self._get_total('discount_value')

    @property
    def offer_discounts(self):
        """
        Return basket discounts from non-voucher sources.  Does not include
        shipping discounts.
        """
        return self.offer_applications.offer_discounts

    @property
    def voucher_discounts(self):
        """
        Return discounts from vouchers
        """
        return self.offer_applications.voucher_discounts

    @property
    def has_shipping_discounts(self):
        return len(self.shipping_discounts) > 0

    @property
    def shipping_discounts(self):
        """
        Return discounts from vouchers
        """
        return self.offer_applications.shipping_discounts

    @property
    def post_order_actions(self):
        """
        Return discounts from vouchers
        """
        return self.offer_applications.post_order_actions

    @property
    def grouped_voucher_discounts(self):
        """
        Return discounts from vouchers but grouped so that a voucher which
        links to multiple offers is aggregated into one object.
        """
        return self.offer_applications.grouped_voucher_discounts

    @property
    def total_excl_tax_excl_discounts(self):
        """
        Return total price excluding tax and discounts
        """
        return self._get_total('line_price_excl_tax')

    @property
    def num_lines(self):
        """Return number of lines"""
        return self.all_lines().count()

    @property
    def num_items(self):
        """Return number of items"""
        return sum(line.quantity for line in self.lines.all())

    @property
    def num_items_without_discount(self):
        num = 0
        for line in self.all_lines():
            num += line.quantity_without_discount
        return num

    @property
    def num_items_with_discount(self):
        num = 0
        for line in self.all_lines():
            num += line.quantity_with_discount
        return num

    @property
    def time_before_submit(self):
        if not self.date_submitted:
            return None
        return self.date_submitted - self.date_created

    @property
    def time_since_creation(self, test_datetime=None):
        if not test_datetime:
            test_datetime = now()
        return test_datetime - self.date_created

    @property
    def contains_a_voucher(self):
        if not self.id:
            return False
        return self.vouchers.exists()

    @property
    def is_submitted(self):
        return self.status == self.SUBMITTED

    @property
    def can_be_edited(self):
        """
        Test if a basket can be edited
        """
        return self.status in self.editable_statuses

    @property
    def currency(self):
        # Since all lines should have the same currency, return the currency of
        # the first one found.
        for line in self.all_lines():
            return line.price_currency

    # =============
    # Query methods
    # =============

    def contains_voucher(self, code):
        """
        Test whether the basket contains a voucher with a given code
        """
        if self.id is None:
            return False
        try:
            self.vouchers.get(code=code)
        except ObjectDoesNotExist:
            return False
        else:
            return True

    def product_quantity(self, product):
        """
        Return the quantity of a product in the basket

        The basket can contain multiple lines with the same product, but
        different options and stockrecords. Those quantities are summed up.
        """
        matching_lines = self.lines.filter(product=product)
        quantity = matching_lines.aggregate(Sum('quantity'))['quantity__sum']
        return quantity or 0

    def line_quantity(self, product, stockrecord, options=None):
        """
        Return the current quantity of a specific product and options
        """
        ref = self._create_line_reference(product, stockrecord, options)
        try:
            return self.lines.get(line_reference=ref).quantity
        except ObjectDoesNotExist:
            return 0


class AbstractLine(models.Model):
    """A line of a basket (product and a quantity)

    Common approaches on ordering basket lines:

        a) First added at top. That's the history-like approach; new items are
           added to the bottom of the list. Changing quantities doesn't impact
           position.
           Oscar does this by default. It just sorts by Line.pk, which is
           guaranteed to increment after each creation.

        b) Last modified at top. That means items move to the top when you add
           another one, and new items are added to the top as well.  Amazon
           mostly does this, but doesn't change the position when you update
           the quantity in the basket view.
           To get this behaviour, add a date_updated field, change
           Meta.ordering and optionally do something similar on wishlist lines.
           Order lines should already be created in the order of the basket
           lines, and are sorted by their primary key, so no changes should be
           necessary there.

    """
    basket = models.ForeignKey(
        'basket.Basket',
        on_delete=models.CASCADE,
        related_name='lines',
        verbose_name=_("Basket"))

    # This is to determine which products belong to the same line
    # We can't just use product.id as you can have customised products
    # which should be treated as separate lines.  Set as a
    # SlugField as it is included in the path for certain views.
    line_reference = SlugField(
        _("Line Reference"), max_length=128, db_index=True)

    product = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        related_name='basket_lines',
        verbose_name=_("Product"))

    # We store the stockrecord that should be used to fulfil this line.
    stockrecord = models.ForeignKey(
        'partner.StockRecord',
        on_delete=models.CASCADE,
        related_name='basket_lines')

    quantity = models.PositiveIntegerField(_('Quantity'), default=1)

    # We store the unit price incl tax of the product when it is first added to
    # the basket.  This allows us to tell if a product has changed price since
    # a person first added it to their basket.
    price_currency = models.CharField(
        _("Currency"), max_length=12, default=get_default_currency)
    price_excl_tax = models.DecimalField(
        _('Price excl. Tax'), decimal_places=2, max_digits=12,
        null=True)
    price_incl_tax = models.DecimalField(
        _('Price incl. Tax'), decimal_places=2, max_digits=12, null=True)

    # Track date of first addition
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True, db_index=True)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Instance variables used to persist discount information
        self._discount_excl_tax = D('0.00')
        self._discount_incl_tax = D('0.00')
        self.consumer = LineOfferConsumer(self)

    class Meta:
        abstract = True
        app_label = 'basket'
        # Enforce sorting by order of creation.
        ordering = ['date_created', 'pk']
        unique_together = ("basket", "line_reference")
        verbose_name = _('Basket line')
        verbose_name_plural = _('Basket lines')

    def __str__(self):
        return _(
            "Basket #%(basket_id)d, Product #%(product_id)d, quantity"
            " %(quantity)d") % {'basket_id': self.basket.pk,
                                'product_id': self.product.pk,
                                'quantity': self.quantity}

    def save(self, *args, **kwargs):
        if not self.basket.can_be_edited:
            raise PermissionDenied(
                _("You cannot modify a %s basket") % (
                    self.basket.status.lower(),))
        return super().save(*args, **kwargs)

    # =============
    # Offer methods
    # =============

    def clear_discount(self):
        """
        Remove any discounts from this line.
        """
        self._discount_excl_tax = D('0.00')
        self._discount_incl_tax = D('0.00')
        self.consumer = LineOfferConsumer(self)

    def discount(self, discount_value, affected_quantity, incl_tax=True,
                 offer=None):
        """
        Apply a discount to this line
        """
        if incl_tax:
            if self._discount_excl_tax > 0:
                raise RuntimeError(
                    "Attempting to discount the tax-inclusive price of a line "
                    "when tax-exclusive discounts are already applied")
            self._discount_incl_tax += discount_value
        else:
            if self._discount_incl_tax > 0:
                raise RuntimeError(
                    "Attempting to discount the tax-exclusive price of a line "
                    "when tax-inclusive discounts are already applied")
            self._discount_excl_tax += discount_value
        self.consume(affected_quantity, offer=offer)

    def consume(self, quantity, offer=None):
        """
        Mark all or part of the line as 'consumed'

        Consumed items are no longer available to be used in offers.
        """
        self.consumer.consume(quantity, offer=offer)

    def get_price_breakdown(self):
        """
        Return a breakdown of line prices after discounts have been applied.

        Returns a list of (unit_price_incl_tax, unit_price_excl_tax, quantity)
        tuples.
        """
        if not self.is_tax_known:
            raise RuntimeError("A price breakdown can only be determined "
                               "when taxes are known")
        prices = []
        if not self.discount_value:
            prices.append((self.unit_price_incl_tax, self.unit_price_excl_tax,
                           self.quantity))
        else:
            # Need to split the discount among the affected quantity
            # of products.
            item_incl_tax_discount = (
                self.discount_value / int(self.consumer.consumed()))
            item_excl_tax_discount = item_incl_tax_discount * self._tax_ratio
            item_excl_tax_discount = round_half_up(item_excl_tax_discount)
            prices.append((self.unit_price_incl_tax - item_incl_tax_discount,
                           self.unit_price_excl_tax - item_excl_tax_discount,
                           self.consumer.consumed()))
            if self.quantity_without_discount:
                prices.append((self.unit_price_incl_tax,
                               self.unit_price_excl_tax,
                               self.quantity_without_discount))
        return prices

    # =======
    # Helpers
    # =======

    @property
    def _tax_ratio(self):
        if not self.unit_price_incl_tax:
            return 0
        return self.unit_price_excl_tax / self.unit_price_incl_tax

    # ===============
    # Offer Discounts
    # ===============

    def has_offer_discount(self, offer):
        return self.consumer.consumed(offer) > 0

    def quantity_with_offer_discount(self, offer):
        return self.consumer.consumed(offer)

    def quantity_without_offer_discount(self, offer):
        return self.consumer.available(offer)

    def is_available_for_offer_discount(self, offer):
        return self.consumer.available(offer) > 0

    # ==========
    # Properties
    # ==========

    @property
    def has_discount(self):
        return bool(self.consumer.consumed())

    @property
    def quantity_with_discount(self):
        return self.consumer.consumed()

    @property
    def quantity_without_discount(self):
        return self.consumer.available()

    @property
    def is_available_for_discount(self):
        # deprecated
        return self.consumer.available() > 0

    @property
    def discount_value(self):
        # Only one of the incl- and excl- discounts should be non-zero
        return max(self._discount_incl_tax, self._discount_excl_tax)

    @property
    def purchase_info(self):
        """
        Return the stock/price info
        """
        if not hasattr(self, '_info'):
            # Cache the PurchaseInfo instance.
            self._info = self.basket.strategy.fetch_for_line(
                self, self.stockrecord)
        return self._info

    @property
    def is_tax_known(self):
        return self.purchase_info.price.is_tax_known

    @property
    def unit_effective_price(self):
        """
        The price to use for offer calculations
        """
        return self.purchase_info.price.effective_price

    @property
    def unit_price_excl_tax(self):
        return self.purchase_info.price.excl_tax

    @property
    def unit_price_incl_tax(self):
        return self.purchase_info.price.incl_tax

    @property
    def unit_tax(self):
        return self.purchase_info.price.tax

    @property
    def line_price_excl_tax(self):
        if self.unit_price_excl_tax is not None:
            return self.quantity * self.unit_price_excl_tax

    @property
    def line_price_excl_tax_incl_discounts(self):
        if self._discount_excl_tax and self.line_price_excl_tax is not None:
            return max(0, self.line_price_excl_tax - self._discount_excl_tax)
        if self._discount_incl_tax and self.line_price_incl_tax is not None:
            # This is a tricky situation.  We know the discount as calculated
            # against tax inclusive prices but we need to guess how much of the
            # discount applies to tax-exclusive prices.  We do this by
            # assuming a linear tax and scaling down the original discount.
            return max(0, self.line_price_excl_tax - round_half_up(
                self._tax_ratio * self._discount_incl_tax
            ))
        return self.line_price_excl_tax

    @property
    def line_price_incl_tax_incl_discounts(self):
        # We use whichever discount value is set.  If the discount value was
        # calculated against the tax-exclusive prices, then the line price
        # including tax
        if self.line_price_incl_tax is not None and self._discount_incl_tax:
            return max(0, self.line_price_incl_tax - self._discount_incl_tax)
        elif self.line_price_excl_tax is not None and self._discount_excl_tax:
            return max(0, round_half_up((self.line_price_excl_tax - self._discount_excl_tax) / self._tax_ratio))

        return self.line_price_incl_tax

    @property
    def line_tax(self):
        if self.is_tax_known:
            return self.line_price_incl_tax_incl_discounts - self.line_price_excl_tax_incl_discounts

    @property
    def line_price_incl_tax(self):
        if self.unit_price_incl_tax is not None:
            return self.quantity * self.unit_price_incl_tax

    @property
    def description(self):
        d = smart_text(self.product)
        ops = []
        for attribute in self.attributes.all():
            ops.append("%s = '%s'" % (attribute.option.name, attribute.value))
        if ops:
            d = "%s (%s)" % (d, ", ".join(ops))
        return d

    def get_warning(self):
        """
        Return a warning message about this basket line if one is applicable

        This could be things like the price has changed
        """
        if isinstance(self.purchase_info.availability, Unavailable):
            msg = "'%(product)s' is no longer available"
            return _(msg) % {'product': self.product.get_title()}

        if not self.price_incl_tax:
            return
        if not self.purchase_info.price.is_tax_known:
            return

        # Compare current price to price when added to basket
        current_price_incl_tax = self.purchase_info.price.incl_tax
        if current_price_incl_tax != self.price_incl_tax:
            product_prices = {
                'product': self.product.get_title(),
                'old_price': currency(self.price_incl_tax),
                'new_price': currency(current_price_incl_tax)
            }
            if current_price_incl_tax > self.price_incl_tax:
                warning = _("The price of '%(product)s' has increased from"
                            " %(old_price)s to %(new_price)s since you added"
                            " it to your basket")
                return warning % product_prices
            else:
                warning = _("The price of '%(product)s' has decreased from"
                            " %(old_price)s to %(new_price)s since you added"
                            " it to your basket")
                return warning % product_prices


class AbstractLineAttribute(models.Model):
    """
    An attribute of a basket line
    """
    line = models.ForeignKey(
        'basket.Line',
        on_delete=models.CASCADE,
        related_name='attributes',
        verbose_name=_("Line"))
    option = models.ForeignKey(
        'catalogue.Option',
        on_delete=models.CASCADE,
        verbose_name=_("Option"))
    value = models.CharField(_("Value"), max_length=255)

    class Meta:
        abstract = True
        app_label = 'basket'
        verbose_name = _('Line attribute')
        verbose_name_plural = _('Line attributes')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.orders.views:0
==oscar.apps.dashboard.orders.views:0
==oscar.apps.dashboard.orders.views:0
import datetime
from collections import OrderedDict
from decimal import Decimal as D
from decimal import InvalidOperation

from django.conf import settings
from django.contrib import messages
from django.core.exceptions import ObjectDoesNotExist
from django.db.models import Count, Q, Sum, fields
from django.http import Http404, HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.views.generic import DetailView, FormView, ListView, UpdateView

from oscar.apps.order import exceptions as order_exceptions
from oscar.apps.payment.exceptions import PaymentError
from oscar.core.compat import UnicodeCSVWriter
from oscar.core.loading import get_class, get_model
from oscar.core.utils import datetime_combine, format_datetime
from oscar.views import sort_queryset
from oscar.views.generic import BulkEditMixin

Partner = get_model('partner', 'Partner')
Transaction = get_model('payment', 'Transaction')
SourceType = get_model('payment', 'SourceType')
Order = get_model('order', 'Order')
OrderNote = get_model('order', 'OrderNote')
ShippingAddress = get_model('order', 'ShippingAddress')
Line = get_model('order', 'Line')
ShippingEventType = get_model('order', 'ShippingEventType')
PaymentEventType = get_model('order', 'PaymentEventType')
EventHandler = get_class('order.processing', 'EventHandler')
OrderStatsForm = get_class('dashboard.orders.forms', 'OrderStatsForm')
OrderSearchForm = get_class('dashboard.orders.forms', 'OrderSearchForm')
OrderNoteForm = get_class('dashboard.orders.forms', 'OrderNoteForm')
ShippingAddressForm = get_class(
    'dashboard.orders.forms', 'ShippingAddressForm')
OrderStatusForm = get_class('dashboard.orders.forms', 'OrderStatusForm')


def queryset_orders_for_user(user):
    """
    Returns a queryset of all orders that a user is allowed to access.
    A staff user may access all orders.
    To allow access to an order for a non-staff user, at least one line's
    partner has to have the user in the partner's list.
    """
    queryset = Order._default_manager.select_related(
        'billing_address', 'billing_address__country',
        'shipping_address', 'shipping_address__country',
        'user'
    ).prefetch_related('lines', 'status_changes')
    if user.is_staff:
        return queryset
    else:
        partners = Partner._default_manager.filter(users=user)
        return queryset.filter(lines__partner__in=partners).distinct()


def get_order_for_user_or_404(user, number):
    try:
        return queryset_orders_for_user(user).get(number=number)
    except ObjectDoesNotExist:
        raise Http404()


class OrderStatsView(FormView):
    """
    Dashboard view for order statistics.
    Supports the permission-based dashboard.
    """
    template_name = 'oscar/dashboard/orders/statistics.html'
    form_class = OrderStatsForm

    def get(self, request, *args, **kwargs):
        return self.post(request, *args, **kwargs)

    def form_valid(self, form):
        ctx = self.get_context_data(form=form,
                                    filters=form.get_filters())
        return self.render_to_response(ctx)

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['data'] = self.request.GET
        return kwargs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        filters = kwargs.get('filters', {})
        ctx.update(self.get_stats(filters))
        ctx['title'] = kwargs['form'].get_filter_description()
        return ctx

    def get_stats(self, filters):
        orders = queryset_orders_for_user(self.request.user).filter(**filters)
        stats = {
            'total_orders': orders.count(),
            'total_lines': Line.objects.filter(order__in=orders).count(),
            'total_revenue': orders.aggregate(
                Sum('total_incl_tax'))['total_incl_tax__sum'] or D('0.00'),
            'order_status_breakdown': orders.order_by('status').values(
                'status').annotate(freq=Count('id'))
        }
        return stats


class OrderListView(BulkEditMixin, ListView):
    """
    Dashboard view for a list of orders.
    Supports the permission-based dashboard.
    """
    model = Order
    context_object_name = 'orders'
    template_name = 'oscar/dashboard/orders/order_list.html'
    form_class = OrderSearchForm
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE
    actions = ('download_selected_orders', 'change_order_statuses')

    def dispatch(self, request, *args, **kwargs):
        # base_queryset is equal to all orders the user is allowed to access
        self.base_queryset = queryset_orders_for_user(
            request.user).order_by('-date_placed')
        return super().dispatch(request, *args, **kwargs)

    def get(self, request, *args, **kwargs):
        if 'order_number' in request.GET and request.GET.get(
                'response_format', 'html') == 'html':
            # Redirect to Order detail page if valid order number is given
            try:
                order = self.base_queryset.get(
                    number=request.GET['order_number'])
            except Order.DoesNotExist:
                pass
            else:
                return redirect(
                    'dashboard:order-detail', number=order.number)
        return super().get(request, *args, **kwargs)

    def get_queryset(self):  # noqa (too complex (19))
        """
        Build the queryset for this list.
        """
        queryset = sort_queryset(self.base_queryset, self.request,
                                 ['number', 'total_incl_tax'])

        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return queryset

        data = self.form.cleaned_data

        if data['order_number']:
            queryset = self.base_queryset.filter(
                number__istartswith=data['order_number'])

        if data['name']:
            # If the value is two words, then assume they are first name and
            # last name
            parts = data['name'].split()
            allow_anon = getattr(settings, 'OSCAR_ALLOW_ANON_CHECKOUT', False)

            if len(parts) == 1:
                parts = [data['name'], data['name']]
            else:
                parts = [parts[0], parts[1:]]

            filter = Q(user__first_name__istartswith=parts[0])
            filter |= Q(user__last_name__istartswith=parts[1])
            if allow_anon:
                filter |= Q(billing_address__first_name__istartswith=parts[0])
                filter |= Q(shipping_address__first_name__istartswith=parts[0])
                filter |= Q(billing_address__last_name__istartswith=parts[1])
                filter |= Q(shipping_address__last_name__istartswith=parts[1])

            queryset = queryset.filter(filter).distinct()

        if data['product_title']:
            queryset = queryset.filter(
                lines__title__istartswith=data['product_title']).distinct()

        if data['upc']:
            queryset = queryset.filter(lines__upc=data['upc'])

        if data['partner_sku']:
            queryset = queryset.filter(lines__partner_sku=data['partner_sku'])

        if data['date_from'] and data['date_to']:
            date_to = datetime_combine(data['date_to'], datetime.time.max)
            date_from = datetime_combine(data['date_from'], datetime.time.min)
            queryset = queryset.filter(
                date_placed__gte=date_from, date_placed__lt=date_to)
        elif data['date_from']:
            date_from = datetime_combine(data['date_from'], datetime.time.min)
            queryset = queryset.filter(date_placed__gte=date_from)
        elif data['date_to']:
            date_to = datetime_combine(data['date_to'], datetime.time.max)
            queryset = queryset.filter(date_placed__lt=date_to)

        if data['voucher']:
            queryset = queryset.filter(
                discounts__voucher_code=data['voucher']).distinct()

        if data['payment_method']:
            queryset = queryset.filter(
                sources__source_type__code=data['payment_method']).distinct()

        if data['status']:
            queryset = queryset.filter(status=data['status'])

        return queryset

    def get_search_filter_descriptions(self):  # noqa (too complex (19))
        """Describe the filters used in the search.

        These are user-facing messages describing what filters
        were used to filter orders in the search query.

        Returns:
            list of unicode messages

        """
        descriptions = []

        # Attempt to retrieve data from the submitted form
        # If the form hasn't been submitted, then `cleaned_data`
        # won't be set, so default to None.
        data = getattr(self.form, 'cleaned_data', None)

        if data is None:
            return descriptions

        if data.get('order_number'):
            descriptions.append(
                _('Order number starts with "{order_number}"').format(
                    order_number=data['order_number']
                )
            )

        if data.get('name'):
            descriptions.append(
                _('Customer name matches "{customer_name}"').format(
                    customer_name=data['name']
                )
            )

        if data.get('product_title'):
            descriptions.append(
                _('Product name matches "{product_name}"').format(
                    product_name=data['product_title']
                )
            )

        if data.get('upc'):
            descriptions.append(
                # Translators: "UPC" means "universal product code" and it is
                # used to uniquely identify a product in an online store.
                # "Item" in this context means an item in an order placed
                # in an online store.
                _('Includes an item with UPC "{upc}"').format(
                    upc=data['upc']
                )
            )

        if data.get('partner_sku'):
            descriptions.append(
                # Translators: "SKU" means "stock keeping unit" and is used to
                # identify products that can be shipped from an online store.
                # A "partner" is a company that ships items to users who
                # buy things in an online store.
                _('Includes an item with partner SKU "{partner_sku}"').format(
                    partner_sku=data['partner_sku']
                )
            )

        if data.get('date_from') and data.get('date_to'):
            descriptions.append(
                # Translators: This string refers to orders in an online
                # store that were made within a particular date range.
                _('Placed between {start_date} and {end_date}').format(
                    start_date=data['date_from'],
                    end_date=data['date_to']
                )
            )

        elif data.get('date_from'):
            descriptions.append(
                # Translators: This string refers to orders in an online store
                # that were made after a particular date.
                _('Placed after {start_date}').format(
                    start_date=data['date_from'])
            )

        elif data.get('date_to'):
            end_date = data['date_to'] + datetime.timedelta(days=1)
            descriptions.append(
                # Translators: This string refers to orders in an online store
                # that were made before a particular date.
                _('Placed before {end_date}').format(end_date=end_date)
            )

        if data.get('voucher'):
            descriptions.append(
                # Translators: A "voucher" is a coupon that can be applied to
                # an order in an online store in order to receive a discount.
                # The voucher "code" is a string that users can enter to
                # receive the discount.
                _('Used voucher code "{voucher_code}"').format(
                    voucher_code=data['voucher'])
            )

        if data.get('payment_method'):
            payment_type = SourceType.objects.get(code=data['payment_method'])
            descriptions.append(
                # Translators: A payment method is a way of paying for an
                # item in an online store.  For example, a user can pay
                # with a credit card or PayPal.
                _('Paid using {payment_method}').format(
                    payment_method=payment_type.name
                )
            )

        if data.get('status'):
            descriptions.append(
                # Translators: This string refers to an order in an
                # online store.  Some examples of order status are
                # "purchased", "cancelled", or "refunded".
                _('Order status is {order_status}').format(
                    order_status=data['status'])
            )

        return descriptions

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['form'] = self.form
        ctx['order_statuses'] = Order.all_statuses()
        ctx['search_filters'] = self.get_search_filter_descriptions()
        return ctx

    def is_csv_download(self):
        return self.request.GET.get('response_format', None) == 'csv'

    def get_paginate_by(self, queryset):
        return None if self.is_csv_download() else self.paginate_by

    def render_to_response(self, context, **response_kwargs):
        if self.is_csv_download():
            return self.download_selected_orders(
                self.request,
                context['object_list'])
        return super().render_to_response(
            context, **response_kwargs)

    def get_download_filename(self, request):
        return 'orders.csv'

    def download_selected_orders(self, request, orders):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename=%s' \
            % self.get_download_filename(request)
        writer = UnicodeCSVWriter(open_file=response)

        meta_data = (('number', _('Order number')),
                     ('value', _('Order value')),
                     ('date', _('Date of purchase')),
                     ('num_items', _('Number of items')),
                     ('status', _('Order status')),
                     ('customer', _('Customer email address')),
                     ('shipping_address_name', _('Deliver to name')),
                     ('billing_address_name', _('Bill to name')),
                     )
        columns = OrderedDict()
        for k, v in meta_data:
            columns[k] = v

        writer.writerow(columns.values())
        for order in orders:
            row = columns.copy()
            row['number'] = order.number
            row['value'] = order.total_incl_tax
            row['date'] = format_datetime(order.date_placed, 'DATETIME_FORMAT')
            row['num_items'] = order.num_items
            row['status'] = order.status
            row['customer'] = order.email
            if order.shipping_address:
                row['shipping_address_name'] = order.shipping_address.name
            else:
                row['shipping_address_name'] = ''
            if order.billing_address:
                row['billing_address_name'] = order.billing_address.name
            else:
                row['billing_address_name'] = ''
            writer.writerow(row.values())
        return response

    def change_order_statuses(self, request, orders):
        for order in orders:
            self.change_order_status(request, order)
        return redirect('dashboard:order-list')

    def change_order_status(self, request, order):
        # This method is pretty similar to what
        # OrderDetailView.change_order_status does. Ripe for refactoring.
        new_status = request.POST['new_status'].strip()
        if not new_status:
            messages.error(request, _("The new status '%s' is not valid")
                           % new_status)
        elif new_status not in order.available_statuses():
            messages.error(request, _("The new status '%s' is not valid for"
                                      " this order") % new_status)
        else:
            handler = EventHandler(request.user)
            old_status = order.status
            try:
                handler.handle_order_status_change(order, new_status)
            except PaymentError as e:
                messages.error(request, _("Unable to change order status due"
                                          " to payment error: %s") % e)
            else:
                msg = _("Order status changed from '%(old_status)s' to"
                        " '%(new_status)s'") % {'old_status': old_status,
                                                'new_status': new_status}
                messages.info(request, msg)
                order.notes.create(
                    user=request.user, message=msg, note_type=OrderNote.SYSTEM)


class OrderDetailView(DetailView):
    """
    Dashboard view to display a single order.

    Supports the permission-based dashboard.
    """
    model = Order
    context_object_name = 'order'
    template_name = 'oscar/dashboard/orders/order_detail.html'

    # These strings are method names that are allowed to be called from a
    # submitted form.
    order_actions = ('save_note', 'delete_note', 'change_order_status',
                     'create_order_payment_event')
    line_actions = ('change_line_statuses', 'create_shipping_event',
                    'create_payment_event')

    def get_object(self, queryset=None):
        return get_order_for_user_or_404(
            self.request.user, self.kwargs['number'])

    def get_order_lines(self):
        return self.object.lines.all()

    def post(self, request, *args, **kwargs):
        # For POST requests, we use a dynamic dispatch technique where a
        # parameter specifies what we're trying to do with the form submission.
        # We distinguish between order-level actions and line-level actions.

        order = self.object = self.get_object()

        # Look for order-level action first
        if 'order_action' in request.POST:
            return self.handle_order_action(
                request, order, request.POST['order_action'])

        # Look for line-level action
        if 'line_action' in request.POST:
            return self.handle_line_action(
                request, order, request.POST['line_action'])

        return self.reload_page(error=_("No valid action submitted"))

    def handle_order_action(self, request, order, action):
        if action not in self.order_actions:
            return self.reload_page(error=_("Invalid action"))
        return getattr(self, action)(request, order)

    def handle_line_action(self, request, order, action):
        if action not in self.line_actions:
            return self.reload_page(error=_("Invalid action"))

        # Load requested lines
        line_ids = request.POST.getlist('selected_line')
        if len(line_ids) == 0:
            return self.reload_page(error=_(
                "You must select some lines to act on"))

        lines = self.get_order_lines()
        lines = lines.filter(id__in=line_ids)
        if len(line_ids) != len(lines):
            return self.reload_page(error=_("Invalid lines requested"))

        # Build list of line quantities
        line_quantities = []
        for line in lines:
            qty = request.POST.get('selected_line_qty_%s' % line.id)
            try:
                qty = int(qty)
            except ValueError:
                qty = None
            if qty is None or qty <= 0:
                error_msg = _("The entered quantity for line #%s is not valid")
                return self.reload_page(error=error_msg % line.id)
            elif qty > line.quantity:
                error_msg = _(
                    "The entered quantity for line #%(line_id)s "
                    "should not be higher than %(quantity)s")
                kwargs = {'line_id': line.id, 'quantity': line.quantity}
                return self.reload_page(error=error_msg % kwargs)

            line_quantities.append(qty)

        return getattr(self, action)(
            request, order, lines, line_quantities)

    def reload_page(self, fragment=None, error=None):
        url = reverse('dashboard:order-detail',
                      kwargs={'number': self.object.number})
        if fragment:
            url += '#' + fragment
        if error:
            messages.error(self.request, error)
        return HttpResponseRedirect(url)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['active_tab'] = kwargs.get('active_tab', 'lines')

        # Forms
        ctx['note_form'] = self.get_order_note_form()
        ctx['order_status_form'] = self.get_order_status_form()

        ctx['lines'] = self.get_order_lines()
        ctx['line_statuses'] = Line.all_statuses()
        ctx['shipping_event_types'] = ShippingEventType.objects.all()
        ctx['payment_event_types'] = PaymentEventType.objects.all()

        ctx['payment_transactions'] = self.get_payment_transactions()

        return ctx

    # Data fetching methods for template context

    def get_payment_transactions(self):
        return Transaction.objects.filter(
            source__order=self.object)

    def get_order_note_form(self):
        kwargs = {
            'order': self.object,
            'user': self.request.user,
            'data': None
        }
        if self.request.method == 'POST':
            kwargs['data'] = self.request.POST
        note_id = self.kwargs.get('note_id', None)
        if note_id:
            note = get_object_or_404(OrderNote, order=self.object, id=note_id)
            if note.is_editable():
                kwargs['instance'] = note
        return OrderNoteForm(**kwargs)

    def get_order_status_form(self):
        data = None
        if self.request.method == 'POST':
            data = self.request.POST
        return OrderStatusForm(order=self.object, data=data)

    # Order-level actions

    def save_note(self, request, order):
        form = self.get_order_note_form()
        if form.is_valid():
            form.save()
            messages.success(self.request, _("Note saved"))
            return self.reload_page(fragment='notes')

        ctx = self.get_context_data(note_form=form, active_tab='notes')
        return self.render_to_response(ctx)

    def delete_note(self, request, order):
        try:
            note = order.notes.get(id=request.POST.get('note_id', None))
        except ObjectDoesNotExist:
            messages.error(request, _("Note cannot be deleted"))
        else:
            messages.info(request, _("Note deleted"))
            note.delete()
        return self.reload_page()

    def change_order_status(self, request, order):
        form = self.get_order_status_form()
        if not form.is_valid():
            return self.reload_page(error=_("Invalid form submission"))

        old_status, new_status = order.status, form.cleaned_data['new_status']
        handler = EventHandler(request.user)

        success_msg = _(
            "Order status changed from '%(old_status)s' to "
            "'%(new_status)s'") % {'old_status': old_status,
                                   'new_status': new_status}
        try:
            handler.handle_order_status_change(
                order, new_status, note_msg=success_msg)
        except PaymentError as e:
            messages.error(
                request, _("Unable to change order status due to "
                           "payment error: %s") % e)
        except order_exceptions.InvalidOrderStatus:
            # The form should validate against this, so we should only end up
            # here during race conditions.
            messages.error(
                request, _("Unable to change order status as the requested "
                           "new status is not valid"))
        else:
            messages.info(request, success_msg)
        return self.reload_page()

    def create_order_payment_event(self, request, order):
        """
        Create a payment event for the whole order
        """
        amount_str = request.POST.get('amount', None)
        try:
            amount = D(amount_str)
        except InvalidOperation:
            messages.error(request, _("Please choose a valid amount"))
            return self.reload_page()
        return self._create_payment_event(request, order, amount)

    # Line-level actions

    def change_line_statuses(self, request, order, lines, quantities):
        new_status = request.POST['new_status'].strip()
        if not new_status:
            messages.error(request, _("The new status '%s' is not valid")
                           % new_status)
            return self.reload_page()
        errors = []
        for line in lines:
            if new_status not in line.available_statuses():
                errors.append(_("'%(status)s' is not a valid new status for"
                                " line %(line_id)d") % {'status': new_status,
                                                        'line_id': line.id})
        if errors:
            messages.error(request, "\n".join(errors))
            return self.reload_page()

        msgs = []
        for line in lines:
            msg = _("Status of line #%(line_id)d changed from '%(old_status)s'"
                    " to '%(new_status)s'") % {'line_id': line.id,
                                               'old_status': line.status,
                                               'new_status': new_status}
            msgs.append(msg)
            line.set_status(new_status)
        message = "\n".join(msgs)
        messages.info(request, message)
        order.notes.create(user=request.user, message=message,
                           note_type=OrderNote.SYSTEM)
        return self.reload_page()

    def create_shipping_event(self, request, order, lines, quantities):
        code = request.POST['shipping_event_type']
        try:
            event_type = ShippingEventType._default_manager.get(code=code)
        except ShippingEventType.DoesNotExist:
            messages.error(request, _("The event type '%s' is not valid")
                           % code)
            return self.reload_page()

        reference = request.POST.get('reference', None)
        try:
            EventHandler().handle_shipping_event(order, event_type, lines,
                                                 quantities,
                                                 reference=reference)
        except order_exceptions.InvalidShippingEvent as e:
            messages.error(request,
                           _("Unable to create shipping event: %s") % e)
        except order_exceptions.InvalidStatus as e:
            messages.error(request,
                           _("Unable to create shipping event: %s") % e)
        except PaymentError as e:
            messages.error(request, _("Unable to create shipping event due to"
                                      " payment error: %s") % e)
        else:
            messages.success(request, _("Shipping event created"))
        return self.reload_page()

    def create_payment_event(self, request, order, lines, quantities):
        """
        Create a payment event for a subset of order lines
        """
        amount_str = request.POST.get('amount', None)

        # If no amount passed, then we add up the total of the selected lines
        if not amount_str:
            amount = sum([line.line_price_incl_tax for line in lines])
        else:
            try:
                amount = D(amount_str)
            except InvalidOperation:
                messages.error(request, _("Please choose a valid amount"))
                return self.reload_page()

        return self._create_payment_event(request, order, amount, lines,
                                          quantities)

    def _create_payment_event(self, request, order, amount, lines=None,
                              quantities=None):
        code = request.POST.get('payment_event_type')
        try:
            event_type = PaymentEventType._default_manager.get(code=code)
        except PaymentEventType.DoesNotExist:
            messages.error(
                request, _("The event type '%s' is not valid") % code)
            return self.reload_page()
        try:
            EventHandler().handle_payment_event(
                order, event_type, amount, lines, quantities)
        except PaymentError as e:
            messages.error(request, _("Unable to create payment event due to"
                                      " payment error: %s") % e)
        except order_exceptions.InvalidPaymentEvent as e:
            messages.error(
                request, _("Unable to create payment event: %s") % e)
        else:
            messages.info(request, _("Payment event created"))
        return self.reload_page()


class LineDetailView(DetailView):
    """
    Dashboard view to show a single line of an order.
    Supports the permission-based dashboard.
    """
    model = Line
    context_object_name = 'line'
    template_name = 'oscar/dashboard/orders/line_detail.html'

    def get_object(self, queryset=None):
        order = get_order_for_user_or_404(self.request.user,
                                          self.kwargs['number'])
        try:
            return order.lines.get(pk=self.kwargs['line_id'])
        except self.model.DoesNotExist:
            raise Http404()

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['order'] = self.object.order
        return ctx


def get_changes_between_models(model1, model2, excludes=None):
    """
    Return a dict of differences between two model instances
    """
    if excludes is None:
        excludes = []
    changes = {}
    for field in model1._meta.fields:
        if (isinstance(field, (fields.AutoField,
                               fields.related.RelatedField))
                or field.name in excludes):
            continue

        if field.value_from_object(model1) != field.value_from_object(model2):
            changes[field.verbose_name] = (field.value_from_object(model1),
                                           field.value_from_object(model2))
    return changes


def get_change_summary(model1, model2):
    """
    Generate a summary of the changes between two address models
    """
    changes = get_changes_between_models(model1, model2, ['search_text'])
    change_descriptions = []
    for field, delta in changes.items():
        change_descriptions.append(_("%(field)s changed from '%(old_value)s'"
                                     " to '%(new_value)s'")
                                   % {'field': field,
                                      'old_value': delta[0],
                                      'new_value': delta[1]})
    return "\n".join(change_descriptions)


class ShippingAddressUpdateView(UpdateView):
    """
    Dashboard view to update an order's shipping address.
    Supports the permission-based dashboard.
    """
    model = ShippingAddress
    context_object_name = 'address'
    template_name = 'oscar/dashboard/orders/shippingaddress_form.html'
    form_class = ShippingAddressForm

    def get_object(self, queryset=None):
        order = get_order_for_user_or_404(self.request.user,
                                          self.kwargs['number'])
        return get_object_or_404(self.model, order=order)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['order'] = self.object.order
        return ctx

    def form_valid(self, form):
        old_address = ShippingAddress.objects.get(id=self.object.id)
        response = super().form_valid(form)
        changes = get_change_summary(old_address, self.object)
        if changes:
            msg = _("Delivery address updated:\n%s") % changes
            self.object.order.notes.create(user=self.request.user, message=msg,
                                           note_type=OrderNote.SYSTEM)
        return response

    def get_success_url(self):
        messages.info(self.request, _("Delivery address updated"))
        return reverse('dashboard:order-detail',
                       kwargs={'number': self.object.order.number, })
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.views:0
==oscar.apps.customer.views:0
from django import http
from django.conf import settings
from django.contrib import messages
from django.contrib.auth import login as auth_login
from django.contrib.auth import logout as auth_logout
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.sites.shortcuts import get_current_site
from django.core.exceptions import ObjectDoesNotExist
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse, reverse_lazy
from django.utils.translation import gettext_lazy as _
from django.views import generic

from oscar.apps.customer.utils import get_password_reset_url
from oscar.core.compat import get_user_model
from oscar.core.loading import (
    get_class, get_classes, get_model, get_profile_class)
from oscar.core.utils import safe_referrer
from oscar.views.generic import PostActionMixin

from . import signals

PageTitleMixin, RegisterUserMixin = get_classes(
    'customer.mixins', ['PageTitleMixin', 'RegisterUserMixin'])
Dispatcher = get_class('customer.utils', 'Dispatcher')
EmailAuthenticationForm, EmailUserCreationForm, OrderSearchForm = get_classes(
    'customer.forms', ['EmailAuthenticationForm', 'EmailUserCreationForm',
                       'OrderSearchForm'])
ProfileForm, ConfirmPasswordForm = get_classes(
    'customer.forms', ['ProfileForm', 'ConfirmPasswordForm'])
UserAddressForm = get_class('address.forms', 'UserAddressForm')
Order = get_model('order', 'Order')
Line = get_model('basket', 'Line')
Basket = get_model('basket', 'Basket')
UserAddress = get_model('address', 'UserAddress')
Email = get_model('customer', 'Email')
CommunicationEventType = get_model('customer', 'CommunicationEventType')

User = get_user_model()


# =======
# Account
# =======


class AccountSummaryView(generic.RedirectView):
    """
    View that exists for legacy reasons and customisability. It commonly gets
    called when the user clicks on "Account" in the navbar.

    Oscar defaults to just redirecting to the profile summary page (and
    that redirect can be configured via OSCAR_ACCOUNT_REDIRECT_URL), but
    it's also likely you want to display an 'account overview' page or
    such like. The presence of this view allows just that, without
    having to change a lot of templates.
    """
    pattern_name = settings.OSCAR_ACCOUNTS_REDIRECT_URL
    permanent = False


class AccountRegistrationView(RegisterUserMixin, generic.FormView):
    form_class = EmailUserCreationForm
    template_name = 'oscar/customer/registration.html'
    redirect_field_name = 'next'

    def get(self, request, *args, **kwargs):
        if request.user.is_authenticated:
            return redirect(settings.LOGIN_REDIRECT_URL)
        return super().get(
            request, *args, **kwargs)

    def get_logged_in_redirect(self):
        return reverse('customer:summary')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['initial'] = {
            'email': self.request.GET.get('email', ''),
            'redirect_url': self.request.GET.get(self.redirect_field_name, '')
        }
        kwargs['host'] = self.request.get_host()
        return kwargs

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(
            *args, **kwargs)
        ctx['cancel_url'] = safe_referrer(self.request, '')
        return ctx

    def form_valid(self, form):
        self.register_user(form)
        return redirect(form.cleaned_data['redirect_url'])


class AccountAuthView(RegisterUserMixin, generic.TemplateView):
    """
    This is actually a slightly odd double form view that allows a customer to
    either login or register.
    """
    template_name = 'oscar/customer/login_registration.html'
    login_prefix, registration_prefix = 'login', 'registration'
    login_form_class = EmailAuthenticationForm
    registration_form_class = EmailUserCreationForm
    redirect_field_name = 'next'

    def get(self, request, *args, **kwargs):
        if request.user.is_authenticated:
            return redirect(settings.LOGIN_REDIRECT_URL)
        return super().get(
            request, *args, **kwargs)

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        if 'login_form' not in kwargs:
            ctx['login_form'] = self.get_login_form()
        if 'registration_form' not in kwargs:
            ctx['registration_form'] = self.get_registration_form()
        return ctx

    def post(self, request, *args, **kwargs):
        # Use the name of the submit button to determine which form to validate
        if 'login_submit' in request.POST:
            return self.validate_login_form()
        elif 'registration_submit' in request.POST:
            return self.validate_registration_form()
        return http.HttpResponseBadRequest()

    # LOGIN

    def get_login_form(self, bind_data=False):
        return self.login_form_class(
            **self.get_login_form_kwargs(bind_data))

    def get_login_form_kwargs(self, bind_data=False):
        kwargs = {}
        kwargs['host'] = self.request.get_host()
        kwargs['prefix'] = self.login_prefix
        kwargs['initial'] = {
            'redirect_url': self.request.GET.get(self.redirect_field_name, ''),
        }
        if bind_data and self.request.method in ('POST', 'PUT'):
            kwargs.update({
                'data': self.request.POST,
                'files': self.request.FILES,
            })
        return kwargs

    def validate_login_form(self):
        form = self.get_login_form(bind_data=True)
        if form.is_valid():
            user = form.get_user()

            # Grab a reference to the session ID before logging in
            old_session_key = self.request.session.session_key

            auth_login(self.request, form.get_user())

            # Raise signal robustly (we don't want exceptions to crash the
            # request handling). We use a custom signal as we want to track the
            # session key before calling login (which cycles the session ID).
            signals.user_logged_in.send_robust(
                sender=self, request=self.request, user=user,
                old_session_key=old_session_key)

            msg = self.get_login_success_message(form)
            if msg:
                messages.success(self.request, msg)

            return redirect(self.get_login_success_url(form))

        ctx = self.get_context_data(login_form=form)
        return self.render_to_response(ctx)

    def get_login_success_message(self, form):
        return _("Welcome back")

    def get_login_success_url(self, form):
        redirect_url = form.cleaned_data['redirect_url']
        if redirect_url:
            return redirect_url

        # Redirect staff members to dashboard as that's the most likely place
        # they'll want to visit if they're logging in.
        if self.request.user.is_staff:
            return reverse('dashboard:index')

        return settings.LOGIN_REDIRECT_URL

    # REGISTRATION

    def get_registration_form(self, bind_data=False):
        return self.registration_form_class(
            **self.get_registration_form_kwargs(bind_data))

    def get_registration_form_kwargs(self, bind_data=False):
        kwargs = {}
        kwargs['host'] = self.request.get_host()
        kwargs['prefix'] = self.registration_prefix
        kwargs['initial'] = {
            'redirect_url': self.request.GET.get(self.redirect_field_name, ''),
        }
        if bind_data and self.request.method in ('POST', 'PUT'):
            kwargs.update({
                'data': self.request.POST,
                'files': self.request.FILES,
            })
        return kwargs

    def validate_registration_form(self):
        form = self.get_registration_form(bind_data=True)
        if form.is_valid():
            self.register_user(form)

            msg = self.get_registration_success_message(form)
            messages.success(self.request, msg)

            return redirect(self.get_registration_success_url(form))

        ctx = self.get_context_data(registration_form=form)
        return self.render_to_response(ctx)

    def get_registration_success_message(self, form):
        return _("Thanks for registering!")

    def get_registration_success_url(self, form):
        redirect_url = form.cleaned_data['redirect_url']
        if redirect_url:
            return redirect_url

        return settings.LOGIN_REDIRECT_URL


class LogoutView(generic.RedirectView):
    url = settings.OSCAR_HOMEPAGE
    permanent = False

    def get(self, request, *args, **kwargs):
        auth_logout(request)
        response = super().get(request, *args, **kwargs)

        for cookie in settings.OSCAR_COOKIES_DELETE_ON_LOGOUT:
            response.delete_cookie(cookie)

        return response


# =============
# Profile
# =============


class ProfileView(PageTitleMixin, generic.TemplateView):
    template_name = 'oscar/customer/profile/profile.html'
    page_title = _('Profile')
    active_tab = 'profile'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['profile_fields'] = self.get_profile_fields(self.request.user)
        return ctx

    def get_profile_fields(self, user):
        field_data = []

        # Check for custom user model
        for field_name in User._meta.additional_fields:
            field_data.append(
                self.get_model_field_data(user, field_name))

        # Check for profile class
        profile_class = get_profile_class()
        if profile_class:
            try:
                profile = profile_class.objects.get(user=user)
            except ObjectDoesNotExist:
                profile = profile_class(user=user)

            field_names = [f.name for f in profile._meta.local_fields]
            for field_name in field_names:
                if field_name in ('user', 'id'):
                    continue
                field_data.append(
                    self.get_model_field_data(profile, field_name))

        return field_data

    def get_model_field_data(self, model_class, field_name):
        """
        Extract the verbose name and value for a model's field value
        """
        field = model_class._meta.get_field(field_name)
        if field.choices:
            value = getattr(model_class, 'get_%s_display' % field_name)()
        else:
            value = getattr(model_class, field_name)
        return {
            'name': getattr(field, 'verbose_name'),
            'value': value,
        }


class ProfileUpdateView(PageTitleMixin, generic.FormView):
    form_class = ProfileForm
    template_name = 'oscar/customer/profile/profile_form.html'
    communication_type_code = 'EMAIL_CHANGED'
    page_title = _('Edit Profile')
    active_tab = 'profile'
    success_url = reverse_lazy('customer:profile-view')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        # Grab current user instance before we save form.  We may need this to
        # send a warning email if the email address is changed.
        try:
            old_user = User.objects.get(id=self.request.user.id)
        except User.DoesNotExist:
            old_user = None

        form.save()

        # We have to look up the email address from the form's
        # cleaned data because the object created by form.save() can
        # either be a user or profile instance depending whether a profile
        # class has been specified by the AUTH_PROFILE_MODULE setting.
        new_email = form.cleaned_data.get('email')
        if new_email and old_user and new_email != old_user.email:
            # Email address has changed - send a confirmation email to the old
            # address including a password reset link in case this is a
            # suspicious change.
            ctx = {
                'user': self.request.user,
                'site': get_current_site(self.request),
                'reset_url': get_password_reset_url(old_user),
                'new_email': new_email,
            }
            msgs = CommunicationEventType.objects.get_and_render(
                code=self.communication_type_code, context=ctx)
            Dispatcher().dispatch_user_messages(old_user, msgs)

        messages.success(self.request, _("Profile updated"))
        return redirect(self.get_success_url())


class ProfileDeleteView(PageTitleMixin, generic.FormView):
    form_class = ConfirmPasswordForm
    template_name = 'oscar/customer/profile/profile_delete.html'
    page_title = _('Delete profile')
    active_tab = 'profile'
    success_url = settings.OSCAR_HOMEPAGE

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        self.request.user.delete()
        messages.success(
            self.request,
            _("Your profile has now been deleted. Thanks for using the site."))
        return redirect(self.get_success_url())


class ChangePasswordView(PageTitleMixin, generic.FormView):
    form_class = PasswordChangeForm
    template_name = 'oscar/customer/profile/change_password_form.html'
    communication_type_code = 'PASSWORD_CHANGED'
    page_title = _('Change Password')
    active_tab = 'profile'
    success_url = reverse_lazy('customer:profile-view')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        form.save()
        update_session_auth_hash(self.request, self.request.user)
        messages.success(self.request, _("Password updated"))

        ctx = {
            'user': self.request.user,
            'site': get_current_site(self.request),
            'reset_url': get_password_reset_url(self.request.user),
        }
        msgs = CommunicationEventType.objects.get_and_render(
            code=self.communication_type_code, context=ctx)
        Dispatcher().dispatch_user_messages(self.request.user, msgs)

        return redirect(self.get_success_url())


# =============
# Email history
# =============

class EmailHistoryView(PageTitleMixin, generic.ListView):
    context_object_name = "emails"
    template_name = 'oscar/customer/email/email_list.html'
    paginate_by = settings.OSCAR_EMAILS_PER_PAGE
    page_title = _('Email History')
    active_tab = 'emails'

    def get_queryset(self):
        """
        Return Queryset of :py:class:`Email <oscar.apps.customer.abstract_models.AbstractEmail>`
        instances, that has been sent to the currently authenticated user.
        """  # noqa
        return Email._default_manager.filter(user=self.request.user)


class EmailDetailView(PageTitleMixin, generic.DetailView):
    """Customer email"""
    template_name = "oscar/customer/email/email_detail.html"
    context_object_name = 'email'
    active_tab = 'emails'

    def get_object(self, queryset=None):
        return get_object_or_404(Email, user=self.request.user,
                                 id=self.kwargs['email_id'])

    def get_page_title(self):
        """Append email subject to page title"""
        return '%s: %s' % (_('Email'), self.object.subject)


# =============
# Order history
# =============

class OrderHistoryView(PageTitleMixin, generic.ListView):
    """
    Customer order history
    """
    context_object_name = "orders"
    template_name = 'oscar/customer/order/order_list.html'
    paginate_by = settings.OSCAR_ORDERS_PER_PAGE
    model = Order
    form_class = OrderSearchForm
    page_title = _('Order History')
    active_tab = 'orders'

    def get(self, request, *args, **kwargs):
        if 'date_from' in request.GET:
            self.form = self.form_class(self.request.GET)
            if not self.form.is_valid():
                self.object_list = self.get_queryset()
                ctx = self.get_context_data(object_list=self.object_list)
                return self.render_to_response(ctx)
            data = self.form.cleaned_data

            # If the user has just entered an order number, try and look it up
            # and redirect immediately to the order detail page.
            if data['order_number'] and not (data['date_to']
                                             or data['date_from']):
                try:
                    order = Order.objects.get(
                        number=data['order_number'], user=self.request.user)
                except Order.DoesNotExist:
                    pass
                else:
                    return redirect(
                        'customer:order', order_number=order.number)
        else:
            self.form = self.form_class()
        return super().get(request, *args, **kwargs)

    def get_queryset(self):
        """
        Return Queryset of :py:class:`Order <oscar.apps.order.abstract_models.AbstractOrder>`
        instances for the currently authenticated user.
        """  # noqa
        qs = self.model._default_manager.filter(user=self.request.user)
        if self.form.is_bound and self.form.is_valid():
            qs = qs.filter(**self.form.get_filters())
        return qs

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        ctx['form'] = self.form
        return ctx


class OrderDetailView(PageTitleMixin, PostActionMixin, generic.DetailView):
    model = Order
    active_tab = 'orders'

    def get_template_names(self):
        return ["oscar/customer/order/order_detail.html"]

    def get_page_title(self):
        """
        Order number as page title
        """
        return '%s #%s' % (_('Order'), self.object.number)

    def get_object(self, queryset=None):
        return get_object_or_404(self.model, user=self.request.user,
                                 number=self.kwargs['order_number'])

    def do_reorder(self, order):  # noqa (too complex (10))
        """
        'Re-order' a previous order.

        This puts the contents of the previous order into your basket
        """
        # Collect lines to be added to the basket and any warnings for lines
        # that are no longer available.
        basket = self.request.basket
        lines_to_add = []
        warnings = []
        for line in order.lines.all():
            is_available, reason = line.is_available_to_reorder(
                basket, self.request.strategy)
            if is_available:
                lines_to_add.append(line)
            else:
                warnings.append(reason)

        # Check whether the number of items in the basket won't exceed the
        # maximum.
        total_quantity = sum([line.quantity for line in lines_to_add])
        is_quantity_allowed, reason = basket.is_quantity_allowed(
            total_quantity)
        if not is_quantity_allowed:
            messages.warning(self.request, reason)
            self.response = redirect('customer:order-list')
            return

        # Add any warnings
        for warning in warnings:
            messages.warning(self.request, warning)

        for line in lines_to_add:
            options = []
            for attribute in line.attributes.all():
                if attribute.option:
                    options.append({
                        'option': attribute.option,
                        'value': attribute.value})
            basket.add_product(line.product, line.quantity, options)

        if len(lines_to_add) > 0:
            self.response = redirect('basket:summary')
            messages.info(
                self.request,
                _("All available lines from order %(number)s "
                  "have been added to your basket") % {'number': order.number})
        else:
            self.response = redirect('customer:order-list')
            messages.warning(
                self.request,
                _("It is not possible to re-order order %(number)s "
                  "as none of its lines are available to purchase") %
                {'number': order.number})


class OrderLineView(PostActionMixin, generic.DetailView):
    """Customer order line"""

    def get_object(self, queryset=None):
        order = get_object_or_404(Order, user=self.request.user,
                                  number=self.kwargs['order_number'])
        return order.lines.get(id=self.kwargs['line_id'])

    def do_reorder(self, line):
        self.response = redirect('customer:order', self.kwargs['order_number'])
        basket = self.request.basket

        line_available_to_reorder, reason = line.is_available_to_reorder(
            basket, self.request.strategy)

        if not line_available_to_reorder:
            messages.warning(self.request, reason)
            return

        # We need to pass response to the get_or_create... method
        # as a new basket might need to be created
        self.response = redirect('basket:summary')

        # Convert line attributes into basket options
        options = []
        for attribute in line.attributes.all():
            if attribute.option:
                options.append({'option': attribute.option,
                                'value': attribute.value})
        basket.add_product(line.product, line.quantity, options)

        if line.quantity > 1:
            msg = _("%(qty)d copies of '%(product)s' have been added to your"
                    " basket") % {
                'qty': line.quantity, 'product': line.product}
        else:
            msg = _("'%s' has been added to your basket") % line.product

        messages.info(self.request, msg)


class AnonymousOrderDetailView(generic.DetailView):
    model = Order
    template_name = "oscar/customer/anon_order.html"

    def get_object(self, queryset=None):
        # Check URL hash matches that for order to prevent spoof attacks
        order = get_object_or_404(self.model, user=None,
                                  number=self.kwargs['order_number'])
        if not order.check_verification_hash(self.kwargs['hash']):
            raise http.Http404()
        return order


# ------------
# Address book
# ------------

class AddressListView(PageTitleMixin, generic.ListView):
    """Customer address book"""
    context_object_name = "addresses"
    template_name = 'oscar/customer/address/address_list.html'
    paginate_by = settings.OSCAR_ADDRESSES_PER_PAGE
    active_tab = 'addresses'
    page_title = _('Address Book')

    def get_queryset(self):
        """Return customer's addresses"""
        return UserAddress._default_manager.filter(user=self.request.user)


class AddressCreateView(PageTitleMixin, generic.CreateView):
    form_class = UserAddressForm
    model = UserAddress
    template_name = 'oscar/customer/address/address_form.html'
    active_tab = 'addresses'
    page_title = _('Add a new address')
    success_url = reverse_lazy('customer:address-list')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _('Add a new address')
        return ctx

    def get_success_url(self):
        messages.success(self.request,
                         _("Address '%s' created") % self.object.summary)
        return super().get_success_url()


class AddressUpdateView(PageTitleMixin, generic.UpdateView):
    form_class = UserAddressForm
    model = UserAddress
    template_name = 'oscar/customer/address/address_form.html'
    active_tab = 'addresses'
    page_title = _('Edit address')
    success_url = reverse_lazy('customer:address-list')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _('Edit address')
        return ctx

    def get_queryset(self):
        return self.request.user.addresses.all()

    def get_success_url(self):
        messages.success(self.request,
                         _("Address '%s' updated") % self.object.summary)
        return super().get_success_url()


class AddressDeleteView(PageTitleMixin, generic.DeleteView):
    model = UserAddress
    template_name = "oscar/customer/address/address_delete.html"
    page_title = _('Delete address?')
    active_tab = 'addresses'
    context_object_name = 'address'
    success_url = reverse_lazy('customer:address-list')

    def get_queryset(self):
        return UserAddress._default_manager.filter(user=self.request.user)

    def get_success_url(self):
        messages.success(self.request,
                         _("Address '%s' deleted") % self.object.summary)
        return super().get_success_url()


class AddressChangeStatusView(generic.RedirectView):
    """
    Sets an address as default_for_(billing|shipping)
    """
    url = reverse_lazy('customer:address-list')
    permanent = False

    def get(self, request, pk=None, action=None, *args, **kwargs):
        address = get_object_or_404(UserAddress, user=self.request.user,
                                    pk=pk)
        #  We don't want the user to set an address as the default shipping
        #  address, though they should be able to set it as their billing
        #  address.
        if address.country.is_shipping_country:
            setattr(address, 'is_%s' % action, True)
        elif action == 'default_for_billing':
            setattr(address, 'is_default_for_billing', True)
        else:
            messages.error(request, _('We do not ship to this country'))
        address.save()
        return super().get(
            request, *args, **kwargs)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.views:0
==oscar.apps.checkout.views:0
import logging

from django import http
from django.contrib import messages
from django.contrib.auth import login
from django.shortcuts import redirect
from django.urls import reverse, reverse_lazy
from django.utils.http import urlquote
from django.utils.translation import gettext as _
from django.views import generic

from oscar.core.loading import get_class, get_classes, get_model

from . import signals

ShippingAddressForm, ShippingMethodForm, GatewayForm \
    = get_classes('checkout.forms', ['ShippingAddressForm', 'ShippingMethodForm', 'GatewayForm'])
UserAddressForm = get_class('address.forms', 'UserAddressForm')
Repository = get_class('shipping.repository', 'Repository')
RedirectRequired, UnableToTakePayment, PaymentError \
    = get_classes('payment.exceptions', ['RedirectRequired',
                                         'UnableToTakePayment',
                                         'PaymentError'])
UnableToPlaceOrder = get_class('order.exceptions', 'UnableToPlaceOrder')
OrderPlacementMixin = get_class('checkout.mixins', 'OrderPlacementMixin')
CheckoutSessionMixin = get_class('checkout.session', 'CheckoutSessionMixin')
NoShippingRequired = get_class('shipping.methods', 'NoShippingRequired')
Order = get_model('order', 'Order')
ShippingAddress = get_model('order', 'ShippingAddress')
UserAddress = get_model('address', 'UserAddress')
Country = get_model('address', 'Country')

# Standard logger for checkout events
logger = logging.getLogger('oscar.checkout')


class IndexView(CheckoutSessionMixin, generic.FormView):
    """
    First page of the checkout.  We prompt user to either sign in, or
    to proceed as a guest (where we still collect their email address).
    """
    template_name = 'oscar/checkout/gateway.html'
    form_class = GatewayForm
    success_url = reverse_lazy('checkout:shipping-address')
    pre_conditions = [
        'check_basket_is_not_empty',
        'check_basket_is_valid']

    def get(self, request, *args, **kwargs):
        # We redirect immediately to shipping address stage if the user is
        # signed in.
        if request.user.is_authenticated:
            # We raise a signal to indicate that the user has entered the
            # checkout process so analytics tools can track this event.
            signals.start_checkout.send_robust(
                sender=self, request=request)
            return self.get_success_response()
        return super().get(request, *args, **kwargs)

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        email = self.checkout_session.get_guest_email()
        if email:
            kwargs['initial'] = {
                'username': email,
            }
        return kwargs

    def form_valid(self, form):
        if form.is_guest_checkout() or form.is_new_account_checkout():
            email = form.cleaned_data['username']
            self.checkout_session.set_guest_email(email)

            # We raise a signal to indicate that the user has entered the
            # checkout process by specifying an email address.
            signals.start_checkout.send_robust(
                sender=self, request=self.request, email=email)

            if form.is_new_account_checkout():
                messages.info(
                    self.request,
                    _("Create your account and then you will be redirected "
                      "back to the checkout process"))
                self.success_url = "%s?next=%s&email=%s" % (
                    reverse('customer:register'),
                    reverse('checkout:shipping-address'),
                    urlquote(email)
                )
        else:
            user = form.get_user()
            login(self.request, user)

            # We raise a signal to indicate that the user has entered the
            # checkout process.
            signals.start_checkout.send_robust(
                sender=self, request=self.request)

        return redirect(self.get_success_url())

    def get_success_response(self):
        return redirect(self.get_success_url())


# ================
# SHIPPING ADDRESS
# ================


class ShippingAddressView(CheckoutSessionMixin, generic.FormView):
    """
    Determine the shipping address for the order.

    The default behaviour is to display a list of addresses from the users's
    address book, from which the user can choose one to be their shipping
    address.  They can add/edit/delete these USER addresses.  This address will
    be automatically converted into a SHIPPING address when the user checks
    out.

    Alternatively, the user can enter a SHIPPING address directly which will be
    saved in the session and later saved as ShippingAddress model when the
    order is successfully submitted.
    """
    template_name = 'oscar/checkout/shipping_address.html'
    form_class = ShippingAddressForm
    success_url = reverse_lazy('checkout:shipping-method')
    pre_conditions = ['check_basket_is_not_empty',
                      'check_basket_is_valid',
                      'check_user_email_is_captured']
    skip_conditions = ['skip_unless_basket_requires_shipping']

    def get_initial(self):
        initial = self.checkout_session.new_shipping_address_fields()
        if initial:
            initial = initial.copy()
            # Convert the primary key stored in the session into a Country
            # instance
            try:
                initial['country'] = Country.objects.get(
                    iso_3166_1_a2=initial.pop('country_id'))
            except Country.DoesNotExist:
                # Hmm, the previously selected Country no longer exists. We
                # ignore this.
                pass
        return initial

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        if self.request.user.is_authenticated:
            # Look up address book data
            ctx['addresses'] = self.get_available_addresses()
        return ctx

    def get_available_addresses(self):
        # Include only addresses where the country is flagged as valid for
        # shipping. Also, use ordering to ensure the default address comes
        # first.
        return self.request.user.addresses.filter(
            country__is_shipping_country=True).order_by(
            '-is_default_for_shipping')

    def post(self, request, *args, **kwargs):
        # Check if a shipping address was selected directly (e.g. no form was
        # filled in)
        if self.request.user.is_authenticated \
                and 'address_id' in self.request.POST:
            address = UserAddress._default_manager.get(
                pk=self.request.POST['address_id'], user=self.request.user)
            action = self.request.POST.get('action', None)
            if action == 'ship_to':
                # User has selected a previous address to ship to
                self.checkout_session.ship_to_user_address(address)
                return redirect(self.get_success_url())
            else:
                return http.HttpResponseBadRequest()
        else:
            return super().post(
                request, *args, **kwargs)

    def form_valid(self, form):
        # Store the address details in the session and redirect to next step
        address_fields = dict(
            (k, v) for (k, v) in form.instance.__dict__.items()
            if not k.startswith('_'))
        self.checkout_session.ship_to_new_address(address_fields)
        return super().form_valid(form)


class UserAddressUpdateView(CheckoutSessionMixin, generic.UpdateView):
    """
    Update a user address
    """
    template_name = 'oscar/checkout/user_address_form.html'
    form_class = UserAddressForm
    success_url = reverse_lazy('checkout:shipping-address')

    def get_queryset(self):
        return self.request.user.addresses.all()

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def get_success_url(self):
        messages.info(self.request, _("Address saved"))
        return super().get_success_url()


class UserAddressDeleteView(CheckoutSessionMixin, generic.DeleteView):
    """
    Delete an address from a user's address book.
    """
    template_name = 'oscar/checkout/user_address_delete.html'
    success_url = reverse_lazy('checkout:shipping-address')

    def get_queryset(self):
        return self.request.user.addresses.all()

    def get_success_url(self):
        messages.info(self.request, _("Address deleted"))
        return super().get_success_url()


# ===============
# Shipping method
# ===============


class ShippingMethodView(CheckoutSessionMixin, generic.FormView):
    """
    View for allowing a user to choose a shipping method.

    Shipping methods are largely domain-specific and so this view
    will commonly need to be subclassed and customised.

    The default behaviour is to load all the available shipping methods
    using the shipping Repository.  If there is only 1, then it is
    automatically selected.  Otherwise, a page is rendered where
    the user can choose the appropriate one.
    """
    template_name = 'oscar/checkout/shipping_methods.html'
    form_class = ShippingMethodForm
    pre_conditions = ['check_basket_is_not_empty',
                      'check_basket_is_valid',
                      'check_user_email_is_captured']
    success_url = reverse_lazy('checkout:payment-method')

    def post(self, request, *args, **kwargs):
        self._methods = self.get_available_shipping_methods()
        return super().post(request, *args, **kwargs)

    def get(self, request, *args, **kwargs):
        # These pre-conditions can't easily be factored out into the normal
        # pre-conditions as they do more than run a test and then raise an
        # exception on failure.

        # Check that shipping is required at all
        if not request.basket.is_shipping_required():
            # No shipping required - we store a special code to indicate so.
            self.checkout_session.use_shipping_method(
                NoShippingRequired().code)
            return self.get_success_response()

        # Check that shipping address has been completed
        if not self.checkout_session.is_shipping_address_set():
            messages.error(request, _("Please choose a shipping address"))
            return redirect('checkout:shipping-address')

        # Save shipping methods as instance var as we need them both here
        # and when setting the context vars.
        self._methods = self.get_available_shipping_methods()
        if len(self._methods) == 0:
            # No shipping methods available for given address
            messages.warning(request, _(
                "Shipping is unavailable for your chosen address - please "
                "choose another"))
            return redirect('checkout:shipping-address')
        elif len(self._methods) == 1:
            # Only one shipping method - set this and redirect onto the next
            # step
            self.checkout_session.use_shipping_method(self._methods[0].code)
            return self.get_success_response()

        # Must be more than one available shipping method, we present them to
        # the user to make a choice.
        return super().get(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        kwargs = super().get_context_data(**kwargs)
        kwargs['methods'] = self._methods
        return kwargs

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['methods'] = self._methods
        return kwargs

    def get_available_shipping_methods(self):
        """
        Returns all applicable shipping method objects for a given basket.
        """
        # Shipping methods can depend on the user, the contents of the basket
        # and the shipping address (so we pass all these things to the
        # repository).  I haven't come across a scenario that doesn't fit this
        # system.
        return Repository().get_shipping_methods(
            basket=self.request.basket, user=self.request.user,
            shipping_addr=self.get_shipping_address(self.request.basket),
            request=self.request)

    def form_valid(self, form):
        # Save the code for the chosen shipping method in the session
        # and continue to the next step.
        self.checkout_session.use_shipping_method(form.cleaned_data['method_code'])
        return self.get_success_response()

    def form_invalid(self, form):
        messages.error(self.request, _("Your submitted shipping method is not"
                                       " permitted"))
        return super().form_invalid(form)

    def get_success_response(self):
        return redirect(self.get_success_url())


# ==============
# Payment method
# ==============


class PaymentMethodView(CheckoutSessionMixin, generic.TemplateView):
    """
    View for a user to choose which payment method(s) they want to use.

    This would include setting allocations if payment is to be split
    between multiple sources. It's not the place for entering sensitive details
    like bankcard numbers though - that belongs on the payment details view.
    """
    pre_conditions = [
        'check_basket_is_not_empty',
        'check_basket_is_valid',
        'check_user_email_is_captured',
        'check_shipping_data_is_captured']
    skip_conditions = ['skip_unless_payment_is_required']
    success_url = reverse_lazy('checkout:payment-details')

    def get(self, request, *args, **kwargs):
        # By default we redirect straight onto the payment details view. Shops
        # that require a choice of payment method may want to override this
        # method to implement their specific logic.
        return self.get_success_response()

    def get_success_response(self):
        return redirect(self.get_success_url())

    def get_success_url(self):
        return str(self.success_url)


# ================
# Order submission
# ================


class PaymentDetailsView(OrderPlacementMixin, generic.TemplateView):
    """
    For taking the details of payment and creating the order.

    This view class is used by two separate URLs: 'payment-details' and
    'preview'. The `preview` class attribute is used to distinguish which is
    being used. Chronologically, `payment-details` (preview=False) comes before
    `preview` (preview=True).

    If sensitive details are required (e.g. a bankcard), then the payment details
    view should submit to the preview URL and a custom implementation of
    `validate_payment_submission` should be provided.

    - If the form data is valid, then the preview template can be rendered with
      the payment-details forms re-rendered within a hidden div so they can be
      re-submitted when the 'place order' button is clicked. This avoids having
      to write sensitive data to disk anywhere during the process. This can be
      done by calling `render_preview`, passing in the extra template context
      vars.

    - If the form data is invalid, then the payment details templates needs to
      be re-rendered with the relevant error messages. This can be done by
      calling `render_payment_details`, passing in the form instances to pass
      to the templates.

    The class is deliberately split into fine-grained methods, responsible for
    only one thing.  This is to make it easier to subclass and override just
    one component of functionality.

    All projects will need to subclass and customise this class as no payment
    is taken by default.
    """
    template_name = 'oscar/checkout/payment_details.html'
    template_name_preview = 'oscar/checkout/preview.html'

    # These conditions are extended at runtime depending on whether we are in
    # 'preview' mode or not.
    pre_conditions = [
        'check_basket_is_not_empty',
        'check_basket_is_valid',
        'check_user_email_is_captured',
        'check_shipping_data_is_captured']

    # If preview=True, then we render a preview template that shows all order
    # details ready for submission.
    preview = False

    def get_pre_conditions(self, request):
        if self.preview:
            # The preview view needs to ensure payment information has been
            # correctly captured.
            return self.pre_conditions + ['check_payment_data_is_captured']
        return super().get_pre_conditions(request)

    def get_skip_conditions(self, request):
        if not self.preview:
            # Payment details should only be collected if necessary
            return ['skip_unless_payment_is_required']
        return super().get_skip_conditions(request)

    def post(self, request, *args, **kwargs):
        # Posting to payment-details isn't the right thing to do.  Form
        # submissions should use the preview URL.
        if not self.preview:
            return http.HttpResponseBadRequest()

        # We use a custom parameter to indicate if this is an attempt to place
        # an order (normally from the preview page).  Without this, we assume a
        # payment form is being submitted from the payment details view. In
        # this case, the form needs validating and the order preview shown.
        if request.POST.get('action', '') == 'place_order':
            return self.handle_place_order_submission(request)
        return self.handle_payment_details_submission(request)

    def handle_place_order_submission(self, request):
        """
        Handle a request to place an order.

        This method is normally called after the customer has clicked "place
        order" on the preview page. It's responsible for (re-)validating any
        form information then building the submission dict to pass to the
        `submit` method.

        If forms are submitted on your payment details view, you should
        override this method to ensure they are valid before extracting their
        data into the submission dict and passing it onto `submit`.
        """
        return self.submit(**self.build_submission())

    def handle_payment_details_submission(self, request):
        """
        Handle a request to submit payment details.

        This method will need to be overridden by projects that require forms
        to be submitted on the payment details view.  The new version of this
        method should validate the submitted form data and:

        - If the form data is valid, show the preview view with the forms
          re-rendered in the page
        - If the form data is invalid, show the payment details view with
          the form errors showing.

        """
        # No form data to validate by default, so we simply render the preview
        # page.  If validating form data and it's invalid, then call the
        # render_payment_details view.
        return self.render_preview(request)

    def render_preview(self, request, **kwargs):
        """
        Show a preview of the order.

        If sensitive data was submitted on the payment details page, you will
        need to pass it back to the view here so it can be stored in hidden
        form inputs.  This avoids ever writing the sensitive data to disk.
        """
        self.preview = True
        ctx = self.get_context_data(**kwargs)
        return self.render_to_response(ctx)

    def render_payment_details(self, request, **kwargs):
        """
        Show the payment details page

        This method is useful if the submission from the payment details view
        is invalid and needs to be re-rendered with form errors showing.
        """
        self.preview = False
        ctx = self.get_context_data(**kwargs)
        return self.render_to_response(ctx)

    def get_default_billing_address(self):
        """
        Return default billing address for user

        This is useful when the payment details view includes a billing address
        form - you can use this helper method to prepopulate the form.

        Note, this isn't used in core oscar as there is no billing address form
        by default.
        """
        if not self.request.user.is_authenticated:
            return None
        try:
            return self.request.user.addresses.get(is_default_for_billing=True)
        except UserAddress.DoesNotExist:
            return None

    def submit(self, user, basket, shipping_address, shipping_method,  # noqa (too complex (10))
               shipping_charge, billing_address, order_total,
               payment_kwargs=None, order_kwargs=None):
        """
        Submit a basket for order placement.

        The process runs as follows:

         * Generate an order number
         * Freeze the basket so it cannot be modified any more (important when
           redirecting the user to another site for payment as it prevents the
           basket being manipulated during the payment process).
         * Attempt to take payment for the order
           - If payment is successful, place the order
           - If a redirect is required (e.g. PayPal, 3D Secure), redirect
           - If payment is unsuccessful, show an appropriate error message

        :basket: The basket to submit.
        :payment_kwargs: Additional kwargs to pass to the handle_payment
                         method. It normally makes sense to pass form
                         instances (rather than model instances) so that the
                         forms can be re-rendered correctly if payment fails.
        :order_kwargs: Additional kwargs to pass to the place_order method
        """
        if payment_kwargs is None:
            payment_kwargs = {}
        if order_kwargs is None:
            order_kwargs = {}

        # Taxes must be known at this point
        assert basket.is_tax_known, (
            "Basket tax must be set before a user can place an order")
        assert shipping_charge.is_tax_known, (
            "Shipping charge tax must be set before a user can place an order")

        # We generate the order number first as this will be used
        # in payment requests (ie before the order model has been
        # created).  We also save it in the session for multi-stage
        # checkouts (e.g. where we redirect to a 3rd party site and place
        # the order on a different request).
        order_number = self.generate_order_number(basket)
        self.checkout_session.set_order_number(order_number)
        logger.info("Order #%s: beginning submission process for basket #%d",
                    order_number, basket.id)

        # Freeze the basket so it cannot be manipulated while the customer is
        # completing payment on a 3rd party site.  Also, store a reference to
        # the basket in the session so that we know which basket to thaw if we
        # get an unsuccessful payment response when redirecting to a 3rd party
        # site.
        self.freeze_basket(basket)
        self.checkout_session.set_submitted_basket(basket)

        # We define a general error message for when an unanticipated payment
        # error occurs.
        error_msg = _("A problem occurred while processing payment for this "
                      "order - no payment has been taken.  Please "
                      "contact customer services if this problem persists")

        signals.pre_payment.send_robust(sender=self, view=self)

        try:
            self.handle_payment(order_number, order_total, **payment_kwargs)
        except RedirectRequired as e:
            # Redirect required (e.g. PayPal, 3DS)
            logger.info("Order #%s: redirecting to %s", order_number, e.url)
            return http.HttpResponseRedirect(e.url)
        except UnableToTakePayment as e:
            # Something went wrong with payment but in an anticipated way.  Eg
            # their bankcard has expired, wrong card number - that kind of
            # thing. This type of exception is supposed to set a friendly error
            # message that makes sense to the customer.
            msg = str(e)
            logger.warning(
                "Order #%s: unable to take payment (%s) - restoring basket",
                order_number, msg)
            self.restore_frozen_basket()

            # We assume that the details submitted on the payment details view
            # were invalid (e.g. expired bankcard).
            return self.render_payment_details(
                self.request, error=msg, **payment_kwargs)
        except PaymentError as e:
            # A general payment error - Something went wrong which wasn't
            # anticipated.  Eg, the payment gateway is down (it happens), your
            # credentials are wrong - that king of thing.
            # It makes sense to configure the checkout logger to
            # mail admins on an error as this issue warrants some further
            # investigation.
            msg = str(e)
            logger.error("Order #%s: payment error (%s)", order_number, msg,
                         exc_info=True)
            self.restore_frozen_basket()
            return self.render_preview(
                self.request, error=error_msg, **payment_kwargs)
        except Exception as e:
            # Unhandled exception - hopefully, you will only ever see this in
            # development...
            logger.error(
                "Order #%s: unhandled exception while taking payment (%s)",
                order_number, e, exc_info=True)
            self.restore_frozen_basket()
            return self.render_preview(
                self.request, error=error_msg, **payment_kwargs)

        signals.post_payment.send_robust(sender=self, view=self)

        # If all is ok with payment, try and place order
        logger.info("Order #%s: payment successful, placing order",
                    order_number)
        try:
            return self.handle_order_placement(
                order_number, user, basket, shipping_address, shipping_method,
                shipping_charge, billing_address, order_total, **order_kwargs)
        except UnableToPlaceOrder as e:
            # It's possible that something will go wrong while trying to
            # actually place an order.  Not a good situation to be in as a
            # payment transaction may already have taken place, but needs
            # to be handled gracefully.
            msg = str(e)
            logger.error("Order #%s: unable to place order - %s",
                         order_number, msg, exc_info=True)
            self.restore_frozen_basket()
            return self.render_preview(
                self.request, error=msg, **payment_kwargs)

    def get_template_names(self):
        return [self.template_name_preview] if self.preview else [
            self.template_name]


# =========
# Thank you
# =========


class ThankYouView(generic.DetailView):
    """
    Displays the 'thank you' page which summarises the order just submitted.
    """
    template_name = 'oscar/checkout/thank_you.html'
    context_object_name = 'order'

    def get_object(self):
        # We allow superusers to force an order thank-you page for testing
        order = None
        if self.request.user.is_superuser:
            if 'order_number' in self.request.GET:
                order = Order._default_manager.get(
                    number=self.request.GET['order_number'])
            elif 'order_id' in self.request.GET:
                order = Order._default_manager.get(
                    id=self.request.GET['order_id'])

        if not order:
            if 'checkout_order_id' in self.request.session:
                order = Order._default_manager.get(
                    pk=self.request.session['checkout_order_id'])
            else:
                raise http.Http404(_("No order found"))

        return order

    def get_context_data(self, *args, **kwargs):
        ctx = super().get_context_data(*args, **kwargs)
        # Remember whether this view has been loaded.
        # Only send tracking information on the first load.
        key = 'order_{}_thankyou_viewed'.format(ctx['order'].pk)
        if not self.request.session.get(key, False):
            self.request.session[key] = True
            ctx['send_analytics_event'] = True
        else:
            ctx['send_analytics_event'] = False

        return ctx
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.abstract_models:0
==oscar.apps.address.abstract_models:0
import re
import zlib

from django.conf import settings
from django.core import exceptions
from django.db import models
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy
from phonenumber_field.modelfields import PhoneNumberField

from oscar.core.compat import AUTH_USER_MODEL
from oscar.models.fields import UppercaseCharField


class AbstractAddress(models.Model):
    """
    Superclass address object

    This is subclassed and extended to provide models for
    user, shipping and billing addresses.
    """
    MR, MISS, MRS, MS, DR = ('Mr', 'Miss', 'Mrs', 'Ms', 'Dr')
    TITLE_CHOICES = (
        (MR, _("Mr")),
        (MISS, _("Miss")),
        (MRS, _("Mrs")),
        (MS, _("Ms")),
        (DR, _("Dr")),
    )

    POSTCODE_REQUIRED = 'postcode' in settings.OSCAR_REQUIRED_ADDRESS_FIELDS

    # Regex for each country. Not listed countries don't use postcodes
    # Based on http://en.wikipedia.org/wiki/List_of_postal_codes
    POSTCODES_REGEX = {
        'AC': r'^[A-Z]{4}[0-9][A-Z]$',
        'AD': r'^AD[0-9]{3}$',
        'AF': r'^[0-9]{4}$',
        'AI': r'^AI-2640$',
        'AL': r'^[0-9]{4}$',
        'AM': r'^[0-9]{4}$',
        'AR': r'^([0-9]{4}|[A-Z][0-9]{4}[A-Z]{3})$',
        'AS': r'^[0-9]{5}(-[0-9]{4}|-[0-9]{6})?$',
        'AT': r'^[0-9]{4}$',
        'AU': r'^[0-9]{4}$',
        'AX': r'^[0-9]{5}$',
        'AZ': r'^AZ[0-9]{4}$',
        'BA': r'^[0-9]{5}$',
        'BB': r'^BB[0-9]{5}$',
        'BD': r'^[0-9]{4}$',
        'BE': r'^[0-9]{4}$',
        'BG': r'^[0-9]{4}$',
        'BH': r'^[0-9]{3,4}$',
        'BL': r'^[0-9]{5}$',
        'BM': r'^[A-Z]{2}([0-9]{2}|[A-Z]{2})',
        'BN': r'^[A-Z]{2}[0-9]{4}$',
        'BO': r'^[0-9]{4}$',
        'BR': r'^[0-9]{5}(-[0-9]{3})?$',
        'BT': r'^[0-9]{3}$',
        'BY': r'^[0-9]{6}$',
        'CA': r'^[A-Z][0-9][A-Z][0-9][A-Z][0-9]$',
        'CC': r'^[0-9]{4}$',
        'CH': r'^[0-9]{4}$',
        'CL': r'^([0-9]{7}|[0-9]{3}-[0-9]{4})$',
        'CN': r'^[0-9]{6}$',
        'CO': r'^[0-9]{6}$',
        'CR': r'^[0-9]{4,5}$',
        'CU': r'^[0-9]{5}$',
        'CV': r'^[0-9]{4}$',
        'CX': r'^[0-9]{4}$',
        'CY': r'^[0-9]{4}$',
        'CZ': r'^[0-9]{5}$',
        'DE': r'^[0-9]{5}$',
        'DK': r'^[0-9]{4}$',
        'DO': r'^[0-9]{5}$',
        'DZ': r'^[0-9]{5}$',
        'EC': r'^EC[0-9]{6}$',
        'EE': r'^[0-9]{5}$',
        'EG': r'^[0-9]{5}$',
        'ES': r'^[0-9]{5}$',
        'ET': r'^[0-9]{4}$',
        'FI': r'^[0-9]{5}$',
        'FK': r'^[A-Z]{4}[0-9][A-Z]{2}$',
        'FM': r'^[0-9]{5}(-[0-9]{4})?$',
        'FO': r'^[0-9]{3}$',
        'FR': r'^[0-9]{5}$',
        'GA': r'^[0-9]{2}.*[0-9]{2}$',
        'GB': r'^[A-Z][A-Z0-9]{1,3}[0-9][A-Z]{2}$',
        'GE': r'^[0-9]{4}$',
        'GF': r'^[0-9]{5}$',
        'GG': r'^([A-Z]{2}[0-9]{2,3}[A-Z]{2})$',
        'GI': r'^GX111AA$',
        'GL': r'^[0-9]{4}$',
        'GP': r'^[0-9]{5}$',
        'GR': r'^[0-9]{5}$',
        'GS': r'^SIQQ1ZZ$',
        'GT': r'^[0-9]{5}$',
        'GU': r'^[0-9]{5}$',
        'GW': r'^[0-9]{4}$',
        'HM': r'^[0-9]{4}$',
        'HN': r'^[0-9]{5}$',
        'HR': r'^[0-9]{5}$',
        'HT': r'^[0-9]{4}$',
        'HU': r'^[0-9]{4}$',
        'ID': r'^[0-9]{5}$',
        'IL': r'^[0-9]{7}$',
        'IM': r'^IM[0-9]{2,3}[A-Z]{2}$$',
        'IN': r'^[0-9]{6}$',
        'IO': r'^[A-Z]{4}[0-9][A-Z]{2}$',
        'IQ': r'^[0-9]{5}$',
        'IR': r'^[0-9]{5}-[0-9]{5}$',
        'IS': r'^[0-9]{3}$',
        'IT': r'^[0-9]{5}$',
        'JE': r'^JE[0-9]{2}[A-Z]{2}$',
        'JM': r'^JM[A-Z]{3}[0-9]{2}$',
        'JO': r'^[0-9]{5}$',
        'JP': r'^[0-9]{3}-?[0-9]{4}$',
        'KE': r'^[0-9]{5}$',
        'KG': r'^[0-9]{6}$',
        'KH': r'^[0-9]{5}$',
        'KR': r'^[0-9]{5}$',
        'KY': r'^KY[0-9]-[0-9]{4}$',
        'KZ': r'^[0-9]{6}$',
        'LA': r'^[0-9]{5}$',
        'LB': r'^[0-9]{8}$',
        'LI': r'^[0-9]{4}$',
        'LK': r'^[0-9]{5}$',
        'LR': r'^[0-9]{4}$',
        'LS': r'^[0-9]{3}$',
        'LT': r'^(LT-)?[0-9]{5}$',
        'LU': r'^[0-9]{4}$',
        'LV': r'^LV-[0-9]{4}$',
        'LY': r'^[0-9]{5}$',
        'MA': r'^[0-9]{5}$',
        'MC': r'^980[0-9]{2}$',
        'MD': r'^MD-?[0-9]{4}$',
        'ME': r'^[0-9]{5}$',
        'MF': r'^[0-9]{5}$',
        'MG': r'^[0-9]{3}$',
        'MH': r'^[0-9]{5}$',
        'MK': r'^[0-9]{4}$',
        'MM': r'^[0-9]{5}$',
        'MN': r'^[0-9]{5}$',
        'MP': r'^[0-9]{5}$',
        'MQ': r'^[0-9]{5}$',
        'MT': r'^[A-Z]{3}[0-9]{4}$',
        'MV': r'^[0-9]{4,5}$',
        'MX': r'^[0-9]{5}$',
        'MY': r'^[0-9]{5}$',
        'MZ': r'^[0-9]{4}$',
        'NA': r'^[0-9]{5}$',
        'NC': r'^[0-9]{5}$',
        'NE': r'^[0-9]{4}$',
        'NF': r'^[0-9]{4}$',
        'NG': r'^[0-9]{6}$',
        'NI': r'^[0-9]{5}$',
        'NL': r'^[0-9]{4}[A-Z]{2}$',
        'NO': r'^[0-9]{4}$',
        'NP': r'^[0-9]{5}$',
        'NZ': r'^[0-9]{4}$',
        'OM': r'^[0-9]{3}$',
        'PA': r'^[0-9]{6}$',
        'PE': r'^[0-9]{5}$',
        'PF': r'^[0-9]{5}$',
        'PG': r'^[0-9]{3}$',
        'PH': r'^[0-9]{4}$',
        'PK': r'^[0-9]{5}$',
        'PL': r'^[0-9]{2}-?[0-9]{3}$',
        'PM': r'^[0-9]{5}$',
        'PN': r'^[A-Z]{4}[0-9][A-Z]{2}$',
        'PR': r'^[0-9]{5}$',
        'PT': r'^[0-9]{4}(-?[0-9]{3})?$',
        'PW': r'^[0-9]{5}$',
        'PY': r'^[0-9]{4}$',
        'RE': r'^[0-9]{5}$',
        'RO': r'^[0-9]{6}$',
        'RS': r'^[0-9]{5}$',
        'RU': r'^[0-9]{6}$',
        'SA': r'^[0-9]{5}$',
        'SD': r'^[0-9]{5}$',
        'SE': r'^[0-9]{5}$',
        'SG': r'^([0-9]{2}|[0-9]{4}|[0-9]{6})$',
        'SH': r'^(STHL1ZZ|TDCU1ZZ)$',
        'SI': r'^(SI-)?[0-9]{4}$',
        'SK': r'^[0-9]{5}$',
        'SM': r'^[0-9]{5}$',
        'SN': r'^[0-9]{5}$',
        'SV': r'^01101$',
        'SZ': r'^[A-Z][0-9]{3}$',
        'TC': r'^TKCA1ZZ$',
        'TD': r'^[0-9]{5}$',
        'TH': r'^[0-9]{5}$',
        'TJ': r'^[0-9]{6}$',
        'TM': r'^[0-9]{6}$',
        'TN': r'^[0-9]{4}$',
        'TR': r'^[0-9]{5}$',
        'TT': r'^[0-9]{6}$',
        'TW': r'^([0-9]{3}|[0-9]{5})$',
        'UA': r'^[0-9]{5}$',
        'US': r'^[0-9]{5}(-[0-9]{4}|-[0-9]{6})?$',
        'UY': r'^[0-9]{5}$',
        'UZ': r'^[0-9]{6}$',
        'VA': r'^00120$',
        'VC': r'^VC[0-9]{4}',
        'VE': r'^[0-9]{4}[A-Z]?$',
        'VG': r'^VG[0-9]{4}$',
        'VI': r'^[0-9]{5}$',
        'VN': r'^[0-9]{6}$',
        'WF': r'^[0-9]{5}$',
        'XK': r'^[0-9]{5}$',
        'YT': r'^[0-9]{5}$',
        'ZA': r'^[0-9]{4}$',
        'ZM': r'^[0-9]{5}$',
    }

    title = models.CharField(
        pgettext_lazy("Treatment Pronouns for the customer", "Title"),
        max_length=64, choices=TITLE_CHOICES, blank=True)
    first_name = models.CharField(_("First name"), max_length=255, blank=True)
    last_name = models.CharField(_("Last name"), max_length=255, blank=True)

    # We use quite a few lines of an address as they are often quite long and
    # it's easier to just hide the unnecessary ones than add extra ones.
    line1 = models.CharField(_("First line of address"), max_length=255)
    line2 = models.CharField(
        _("Second line of address"), max_length=255, blank=True)
    line3 = models.CharField(
        _("Third line of address"), max_length=255, blank=True)
    line4 = models.CharField(_("City"), max_length=255, blank=True)
    state = models.CharField(_("State/County"), max_length=255, blank=True)
    postcode = UppercaseCharField(
        _("Post/Zip-code"), max_length=64, blank=True)
    country = models.ForeignKey(
        'address.Country',
        on_delete=models.CASCADE,
        verbose_name=_("Country"))

    #: A field only used for searching addresses - this contains all the
    #: relevant fields.  This is effectively a poor man's Solr text field.
    search_text = models.TextField(
        _("Search text - used only for searching addresses"), editable=False)

    # Fields, used for `summary` property definition and hash generation.
    base_fields = hash_fields = ['salutation', 'line1', 'line2', 'line3', 'line4', 'state', 'postcode', 'country']

    def __str__(self):
        return self.summary

    class Meta:
        abstract = True
        verbose_name = _('Address')
        verbose_name_plural = _('Addresses')

    # Saving

    def save(self, *args, **kwargs):
        self._update_search_text()
        super().save(*args, **kwargs)

    def clean(self):
        # Strip all whitespace
        for field in ['first_name', 'last_name', 'line1', 'line2', 'line3',
                      'line4', 'state', 'postcode']:
            if self.__dict__[field]:
                self.__dict__[field] = self.__dict__[field].strip()

        # Ensure postcodes are valid for country
        self.ensure_postcode_is_valid_for_country()

    def ensure_postcode_is_valid_for_country(self):
        """
        Validate postcode given the country
        """
        if not self.postcode and self.POSTCODE_REQUIRED and self.country_id:
            country_code = self.country.iso_3166_1_a2
            regex = self.POSTCODES_REGEX.get(country_code, None)
            if regex:
                msg = _("Addresses in %(country)s require a valid postcode") \
                    % {'country': self.country}
                raise exceptions.ValidationError(msg)

        if self.postcode and self.country_id:
            # Ensure postcodes are always uppercase
            postcode = self.postcode.upper().replace(' ', '')
            country_code = self.country.iso_3166_1_a2
            regex = self.POSTCODES_REGEX.get(country_code, None)

            # Validate postcode against regex for the country if available
            if regex and not re.match(regex, postcode):
                msg = _("The postcode '%(postcode)s' is not valid "
                        "for %(country)s") \
                    % {'postcode': self.postcode,
                       'country': self.country}
                raise exceptions.ValidationError(
                    {'postcode': [msg]})

    def _update_search_text(self):
        search_fields = filter(
            bool, [self.first_name, self.last_name,
                   self.line1, self.line2, self.line3, self.line4,
                   self.state, self.postcode, self.country.name])
        self.search_text = ' '.join(search_fields)

    # Properties

    @property
    def city(self):
        # Common alias
        return self.line4

    @property
    def summary(self):
        """
        Returns a single string summary of the address,
        separating fields using commas.
        """
        return ", ".join(self.active_address_fields())

    @property
    def salutation(self):
        """
        Name (including title)
        """
        return self.join_fields(
            ('title', 'first_name', 'last_name'),
            separator=" ")

    @property
    def name(self):
        return self.join_fields(('first_name', 'last_name'), separator=" ")

    # Helpers

    def get_field_values(self, fields):
        field_values = []
        for field in fields:
            # Title is special case
            if field == 'title':
                value = self.get_title_display()
            elif field == 'country':
                try:
                    value = self.country.printable_name
                except exceptions.ObjectDoesNotExist:
                    value = ''
            elif field == 'salutation':
                value = self.salutation
            else:
                value = getattr(self, field)
            field_values.append(value)
        return field_values

    def get_address_field_values(self, fields):
        """
        Returns set of field values within the salutation and country.
        """
        field_values = [f.strip() for f in self.get_field_values(fields) if f]
        return field_values

    def generate_hash(self):
        """
        Returns a hash of the address, based on standard set of fields, listed
        out in `hash_fields` property.
        """
        field_values = self.get_address_field_values(self.hash_fields)
        # Python 2 and 3 generates CRC checksum in different ranges, so
        # in order to generate platform-independent value we apply
        # `& 0xffffffff` expression.
        return zlib.crc32(', '.join(field_values).upper().encode('UTF8')) & 0xffffffff

    def join_fields(self, fields, separator=", "):
        """
        Join a sequence of fields using the specified separator
        """
        field_values = self.get_field_values(fields)
        return separator.join(filter(bool, field_values))

    def populate_alternative_model(self, address_model):
        """
        For populating an address model using the matching fields
        from this one.

        This is used to convert a user address to a shipping address
        as part of the checkout process.
        """
        destination_field_names = [
            field.name for field in address_model._meta.fields]
        for field_name in [field.name for field in self._meta.fields]:
            if field_name in destination_field_names and field_name != 'id':
                setattr(address_model, field_name, getattr(self, field_name))

    def active_address_fields(self):
        """
        Returns the non-empty components of the address, but merging the
        title, first_name and last_name into a single line. It uses fields
        listed out in `base_fields` property.
        """
        return self.get_address_field_values(self.base_fields)


class AbstractCountry(models.Model):
    """
    `ISO 3166 Country Codes <https://www.iso.org/iso-3166-country-codes.html>`_

    The field names are a bit awkward, but kept for backwards compatibility.
    pycountry's syntax of alpha2, alpha3, name and official_name seems sane.
    """
    iso_3166_1_a2 = models.CharField(
        _('ISO 3166-1 alpha-2'), max_length=2, primary_key=True)
    iso_3166_1_a3 = models.CharField(
        _('ISO 3166-1 alpha-3'), max_length=3, blank=True)
    iso_3166_1_numeric = models.CharField(
        _('ISO 3166-1 numeric'), blank=True, max_length=3)

    #: The commonly used name; e.g. 'United Kingdom'
    printable_name = models.CharField(_('Country name'), max_length=128, db_index=True)
    #: The full official name of a country
    #: e.g. 'United Kingdom of Great Britain and Northern Ireland'
    name = models.CharField(_('Official name'), max_length=128)

    display_order = models.PositiveSmallIntegerField(
        _("Display order"), default=0, db_index=True,
        help_text=_('Higher the number, higher the country in the list.'))

    is_shipping_country = models.BooleanField(
        _("Is shipping country"), default=False, db_index=True)

    class Meta:
        abstract = True
        app_label = 'address'
        verbose_name = _('Country')
        verbose_name_plural = _('Countries')
        ordering = ('-display_order', 'printable_name',)

    def __str__(self):
        return self.printable_name or self.name

    @property
    def code(self):
        """
        Shorthand for the ISO 3166 Alpha-2 code
        """
        return self.iso_3166_1_a2

    @property
    def numeric_code(self):
        """
        Shorthand for the ISO 3166 numeric code.

        :py:attr:`.iso_3166_1_numeric` used to wrongly be a integer field, but has to
        be padded with leading zeroes. It's since been converted to a char
        field, but the database might still contain non-padded strings. That's
        why the padding is kept.
        """
        return "%.03d" % int(self.iso_3166_1_numeric)


class AbstractShippingAddress(AbstractAddress):
    """
    A shipping address.

    A shipping address should not be edited once the order has been placed -
    it should be read-only after that.

    NOTE:
    ShippingAddress is a model of the order app. But moving it there is tricky
    due to circular import issues that are amplified by get_model/get_class
    calls pre-Django 1.7 to register receivers. So...
    TODO: Once Django 1.6 support is dropped, move AbstractBillingAddress and
    AbstractShippingAddress to the order app, and move
    PartnerAddress to the partner app.
    """

    phone_number = PhoneNumberField(
        _("Phone number"), blank=True,
        help_text=_("In case we need to call you about your order"))
    notes = models.TextField(
        blank=True, verbose_name=_('Instructions'),
        help_text=_("Tell us anything we should know when delivering "
                    "your order."))

    class Meta:
        abstract = True
        # ShippingAddress is registered in order/models.py
        app_label = 'order'
        verbose_name = _("Shipping address")
        verbose_name_plural = _("Shipping addresses")

    @property
    def order(self):
        """
        Return the order linked to this shipping address
        """
        try:
            return self.order_set.all()[0]
        except IndexError:
            return None


class AbstractUserAddress(AbstractShippingAddress):
    """
    A user's address.  A user can have many of these and together they form an
    'address book' of sorts for the user.

    We use a separate model for shipping and billing (even though there will be
    some data duplication) because we don't want shipping/billing addresses
    changed or deleted once an order has been placed.  By having a separate
    model, we allow users the ability to add/edit/delete from their address
    book without affecting orders already placed.
    """
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='addresses',
        verbose_name=_("User"))

    #: Whether this address is the default for shipping
    is_default_for_shipping = models.BooleanField(
        _("Default shipping address?"), default=False)

    #: Whether this address should be the default for billing.
    is_default_for_billing = models.BooleanField(
        _("Default billing address?"), default=False)

    #: We keep track of the number of times an address has been used
    #: as a shipping address so we can show the most popular ones
    #: first at the checkout.
    num_orders_as_shipping_address = models.PositiveIntegerField(
        _("Number of Orders as Shipping Address"), default=0)

    #: Same as previous, but for billing address.
    num_orders_as_billing_address = models.PositiveIntegerField(
        _("Number of Orders as Billing Address"), default=0)

    #: A hash is kept to try and avoid duplicate addresses being added
    #: to the address book.
    hash = models.CharField(_("Address Hash"), max_length=255, db_index=True,
                            editable=False)
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True)

    def save(self, *args, **kwargs):
        """
        Save a hash of the address fields
        """
        # Save a hash of the address fields so we can check whether two
        # addresses are the same to avoid saving duplicates
        self.hash = self.generate_hash()

        # Ensure that each user only has one default shipping address
        # and billing address
        self._ensure_defaults_integrity()
        super().save(*args, **kwargs)

    def _ensure_defaults_integrity(self):
        if self.is_default_for_shipping:
            self.__class__._default_manager\
                .filter(user=self.user, is_default_for_shipping=True)\
                .update(is_default_for_shipping=False)
        if self.is_default_for_billing:
            self.__class__._default_manager\
                .filter(user=self.user, is_default_for_billing=True)\
                .update(is_default_for_billing=False)

    class Meta:
        abstract = True
        app_label = 'address'
        verbose_name = _("User address")
        verbose_name_plural = _("User addresses")
        ordering = ['-num_orders_as_shipping_address']
        unique_together = ('user', 'hash')

    def validate_unique(self, exclude=None):
        super().validate_unique(exclude)
        qs = self.__class__.objects.filter(
            user=self.user,
            hash=self.generate_hash())
        if self.id:
            qs = qs.exclude(id=self.id)
        if qs.exists():
            raise exceptions.ValidationError({
                '__all__': [_("This address is already in your address"
                              " book")]})


class AbstractBillingAddress(AbstractAddress):
    class Meta:
        abstract = True
        # BillingAddress is registered in order/models.py
        app_label = 'order'
        verbose_name = _("Billing address")
        verbose_name_plural = _("Billing addresses")

    @property
    def order(self):
        """
        Return the order linked to this shipping address
        """
        try:
            return self.order_set.all()[0]
        except IndexError:
            return None


class AbstractPartnerAddress(AbstractAddress):
    """
    A partner can have one or more addresses. This can be useful e.g. when
    determining US tax which depends on the origin of the shipment.
    """
    partner = models.ForeignKey(
        'partner.Partner',
        on_delete=models.CASCADE,
        related_name='addresses',
        verbose_name=_('Partner'))

    class Meta:
        abstract = True
        app_label = 'partner'
        verbose_name = _("Partner address")
        verbose_name_plural = _("Partner addresses")
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.views:0
==oscar.apps.basket.views:0
from django import shortcuts
from django.contrib import messages
from django.core.exceptions import ObjectDoesNotExist
from django.http import JsonResponse
from django.shortcuts import redirect
from django.template.loader import render_to_string
from django.urls import reverse
from django.utils.http import is_safe_url
from django.utils.translation import gettext_lazy as _
from django.views.generic import FormView, View
from extra_views import ModelFormSetView

from oscar.apps.basket.signals import (
    basket_addition, voucher_addition, voucher_removal)
from oscar.core import ajax
from oscar.core.loading import get_class, get_classes, get_model
from oscar.core.utils import redirect_to_referrer, safe_referrer

Applicator = get_class('offer.applicator', 'Applicator')
(BasketLineForm, AddToBasketForm, BasketVoucherForm, SavedLineForm) = get_classes(
    'basket.forms', ('BasketLineForm', 'AddToBasketForm',
                     'BasketVoucherForm', 'SavedLineForm'))
BasketLineFormSet, SavedLineFormSet = get_classes(
    'basket.formsets', ('BasketLineFormSet', 'SavedLineFormSet'))
Repository = get_class('shipping.repository', 'Repository')

OrderTotalCalculator = get_class(
    'checkout.calculators', 'OrderTotalCalculator')
BasketMessageGenerator = get_class('basket.utils', 'BasketMessageGenerator')


class BasketView(ModelFormSetView):
    model = get_model('basket', 'Line')
    basket_model = get_model('basket', 'Basket')
    formset_class = BasketLineFormSet
    form_class = BasketLineForm
    factory_kwargs = {
        'extra': 0,
        'can_delete': True
    }
    template_name = 'oscar/basket/basket.html'

    def get_formset_kwargs(self):
        kwargs = super().get_formset_kwargs()
        kwargs['strategy'] = self.request.strategy
        return kwargs

    def get_queryset(self):
        """
        Return list of :py:class:`Line <oscar.apps.basket.abstract_models.AbstractLine>`
        instances associated with the current basket.
        """  # noqa: E501
        return self.request.basket.all_lines()

    def get_shipping_methods(self, basket):
        return Repository().get_shipping_methods(
            basket=self.request.basket, user=self.request.user,
            request=self.request)

    def get_default_shipping_address(self):
        if self.request.user.is_authenticated:
            return self.request.user.addresses.filter(is_default_for_shipping=True).first()

    def get_default_shipping_method(self, basket):
        return Repository().get_default_shipping_method(
            basket=self.request.basket, user=self.request.user,
            request=self.request, shipping_addr=self.get_default_shipping_address())

    def get_basket_warnings(self, basket):
        """
        Return a list of warnings that apply to this basket
        """
        warnings = []
        for line in basket.all_lines():
            warning = line.get_warning()
            if warning:
                warnings.append(warning)
        return warnings

    def get_upsell_messages(self, basket):
        offers = Applicator().get_offers(basket, self.request.user,
                                         self.request)
        applied_offers = list(basket.offer_applications.offers.values())
        msgs = []
        for offer in offers:
            if offer.is_condition_partially_satisfied(basket) \
                    and offer not in applied_offers:
                data = {
                    'message': offer.get_upsell_message(basket),
                    'offer': offer}
                msgs.append(data)
        return msgs

    def get_basket_voucher_form(self):
        """
        This is a separate method so that it's easy to e.g. not return a form
        if there are no vouchers available.
        """
        return BasketVoucherForm()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['voucher_form'] = self.get_basket_voucher_form()

        # Shipping information is included to give an idea of the total order
        # cost.  It is also important for PayPal Express where the customer
        # gets redirected away from the basket page and needs to see what the
        # estimated order total is beforehand.
        context['shipping_methods'] = self.get_shipping_methods(
            self.request.basket)
        method = self.get_default_shipping_method(self.request.basket)
        context['shipping_method'] = method
        shipping_charge = method.calculate(self.request.basket)
        context['shipping_charge'] = shipping_charge
        if method.is_discounted:
            excl_discount = method.calculate_excl_discount(self.request.basket)
            context['shipping_charge_excl_discount'] = excl_discount

        context['order_total'] = OrderTotalCalculator().calculate(
            self.request.basket, shipping_charge)
        context['basket_warnings'] = self.get_basket_warnings(
            self.request.basket)
        context['upsell_messages'] = self.get_upsell_messages(
            self.request.basket)

        if self.request.user.is_authenticated:
            try:
                saved_basket = self.basket_model.saved.get(
                    owner=self.request.user)
            except self.basket_model.DoesNotExist:
                pass
            else:
                saved_basket.strategy = self.request.basket.strategy
                if not saved_basket.is_empty:
                    saved_queryset = saved_basket.all_lines()
                    formset = SavedLineFormSet(strategy=self.request.strategy,
                                               basket=self.request.basket,
                                               queryset=saved_queryset,
                                               prefix='saved')
                    context['saved_formset'] = formset
        return context

    def get_success_url(self):
        return safe_referrer(self.request, 'basket:summary')

    def formset_valid(self, formset):
        # Store offers before any changes are made so we can inform the user of
        # any changes
        offers_before = self.request.basket.applied_offers()
        save_for_later = False

        # Keep a list of messages - we don't immediately call
        # django.contrib.messages as we may be returning an AJAX response in
        # which case we pass the messages back in a JSON payload.
        flash_messages = ajax.FlashMessages()

        for form in formset:
            if (hasattr(form, 'cleaned_data')
                    and getattr(form.cleaned_data, 'save_for_later', False)):
                line = form.instance
                if self.request.user.is_authenticated:
                    self.move_line_to_saved_basket(line)

                    msg = render_to_string(
                        'oscar/basket/messages/line_saved.html',
                        {'line': line})
                    flash_messages.info(msg)

                    save_for_later = True
                else:
                    msg = _("You can't save an item for later if you're "
                            "not logged in!")
                    flash_messages.error(msg)
                    return redirect(self.get_success_url())

        if save_for_later:
            # No need to call super if we're moving lines to the saved basket
            response = redirect(self.get_success_url())
        else:
            # Save changes to basket as per normal
            response = super().formset_valid(formset)

        # If AJAX submission, don't redirect but reload the basket content HTML
        if self.request.is_ajax():
            # Reload basket and apply offers again
            self.request.basket = get_model('basket', 'Basket').objects.get(
                id=self.request.basket.id)
            self.request.basket.strategy = self.request.strategy
            Applicator().apply(self.request.basket, self.request.user,
                               self.request)
            offers_after = self.request.basket.applied_offers()

            for level, msg in BasketMessageGenerator().get_messages(
                    self.request.basket, offers_before, offers_after, include_buttons=False):
                flash_messages.add_message(level, msg)

            # Reload formset - we have to remove the POST fields from the
            # kwargs as, if they are left in, the formset won't construct
            # correctly as there will be a state mismatch between the
            # management form and the database.
            kwargs = self.get_formset_kwargs()
            del kwargs['data']
            del kwargs['files']
            if 'queryset' in kwargs:
                del kwargs['queryset']
            formset = self.get_formset()(queryset=self.get_queryset(),
                                         **kwargs)
            ctx = self.get_context_data(formset=formset,
                                        basket=self.request.basket)
            return self.json_response(ctx, flash_messages)

        BasketMessageGenerator().apply_messages(self.request, offers_before)

        return response

    def json_response(self, ctx, flash_messages):
        basket_html = render_to_string(
            'oscar/basket/partials/basket_content.html',
            context=ctx, request=self.request)

        return JsonResponse({
            'content_html': basket_html,
            'messages': flash_messages.as_dict()
        })

    def move_line_to_saved_basket(self, line):
        saved_basket, _ = get_model('basket', 'basket').saved.get_or_create(
            owner=self.request.user)
        saved_basket.merge_line(line)

    def formset_invalid(self, formset):
        flash_messages = ajax.FlashMessages()
        flash_messages.warning(_(
            "Your basket couldn't be updated. "
            "Please correct any validation errors below."))

        if self.request.is_ajax():
            ctx = self.get_context_data(formset=formset,
                                        basket=self.request.basket)
            return self.json_response(ctx, flash_messages)

        flash_messages.apply_to_request(self.request)
        return super().formset_invalid(formset)


class BasketAddView(FormView):
    """
    Handles the add-to-basket submissions, which are triggered from various
    parts of the site. The add-to-basket form is loaded into templates using
    a templatetag from :py:mod:`oscar.templatetags.basket_tags`.
    """
    form_class = AddToBasketForm
    product_model = get_model('catalogue', 'product')
    add_signal = basket_addition
    http_method_names = ['post']

    def post(self, request, *args, **kwargs):
        self.product = shortcuts.get_object_or_404(
            self.product_model, pk=kwargs['pk'])
        return super().post(request, *args, **kwargs)

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['basket'] = self.request.basket
        kwargs['product'] = self.product
        return kwargs

    def form_invalid(self, form):
        msgs = []
        for error in form.errors.values():
            msgs.append(error.as_text())
        clean_msgs = [m.replace('* ', '') for m in msgs if m.startswith('* ')]
        messages.error(self.request, ",".join(clean_msgs))

        return redirect_to_referrer(self.request, 'basket:summary')

    def form_valid(self, form):
        offers_before = self.request.basket.applied_offers()

        self.request.basket.add_product(
            form.product, form.cleaned_data['quantity'],
            form.cleaned_options())

        messages.success(self.request, self.get_success_message(form),
                         extra_tags='safe noicon')

        # Check for additional offer messages
        BasketMessageGenerator().apply_messages(self.request, offers_before)

        # Send signal for basket addition
        self.add_signal.send(
            sender=self, product=form.product, user=self.request.user,
            request=self.request)

        return super().form_valid(form)

    def get_success_message(self, form):
        return render_to_string(
            'oscar/basket/messages/addition.html',
            {'product': form.product,
             'quantity': form.cleaned_data['quantity']})

    def get_success_url(self):
        post_url = self.request.POST.get('next')
        if post_url and is_safe_url(post_url, self.request.get_host()):
            return post_url
        return safe_referrer(self.request, 'basket:summary')


class VoucherAddView(FormView):
    form_class = BasketVoucherForm
    voucher_model = get_model('voucher', 'voucher')
    add_signal = voucher_addition

    def get(self, request, *args, **kwargs):
        return redirect('basket:summary')

    def apply_voucher_to_basket(self, voucher):
        if voucher.is_expired():
            messages.error(
                self.request,
                _("The '%(code)s' voucher has expired") % {
                    'code': voucher.code})
            return

        if not voucher.is_active():
            messages.error(
                self.request,
                _("The '%(code)s' voucher is not active") % {
                    'code': voucher.code})
            return

        is_available, message = voucher.is_available_to_user(self.request.user)
        if not is_available:
            messages.error(self.request, message)
            return

        self.request.basket.vouchers.add(voucher)

        # Raise signal
        self.add_signal.send(
            sender=self, basket=self.request.basket, voucher=voucher)

        # Recalculate discounts to see if the voucher gives any
        Applicator().apply(self.request.basket, self.request.user,
                           self.request)
        discounts_after = self.request.basket.offer_applications

        # Look for discounts from this new voucher
        found_discount = False
        for discount in discounts_after:
            if discount['voucher'] and discount['voucher'] == voucher:
                found_discount = True
                break
        if not found_discount:
            messages.warning(
                self.request,
                _("Your basket does not qualify for a voucher discount"))
            self.request.basket.vouchers.remove(voucher)
        else:
            messages.info(
                self.request,
                _("Voucher '%(code)s' added to basket") % {
                    'code': voucher.code})

    def form_valid(self, form):
        code = form.cleaned_data['code']
        if not self.request.basket.id:
            return redirect_to_referrer(self.request, 'basket:summary')
        if self.request.basket.contains_voucher(code):
            messages.error(
                self.request,
                _("You have already added the '%(code)s' voucher to "
                  "your basket") % {'code': code})
        else:
            try:
                voucher = self.voucher_model._default_manager.get(code=code)
            except self.voucher_model.DoesNotExist:
                messages.error(
                    self.request,
                    _("No voucher found with code '%(code)s'") % {
                        'code': code})
            else:
                self.apply_voucher_to_basket(voucher)
        return redirect_to_referrer(self.request, 'basket:summary')

    def form_invalid(self, form):
        messages.error(self.request, _("Please enter a voucher code"))
        return redirect(reverse('basket:summary') + '#voucher')


class VoucherRemoveView(View):
    voucher_model = get_model('voucher', 'voucher')
    remove_signal = voucher_removal
    http_method_names = ['post']

    def post(self, request, *args, **kwargs):
        response = redirect('basket:summary')

        voucher_id = kwargs['pk']
        if not request.basket.id:
            # Hacking attempt - the basket must be saved for it to have
            # a voucher in it.
            return response
        try:
            voucher = request.basket.vouchers.get(id=voucher_id)
        except ObjectDoesNotExist:
            messages.error(
                request, _("No voucher found with id '%s'") % voucher_id)
        else:
            request.basket.vouchers.remove(voucher)
            self.remove_signal.send(
                sender=self, basket=request.basket, voucher=voucher)
            messages.info(
                request, _("Voucher '%s' removed from basket") % voucher.code)

        return response


class SavedView(ModelFormSetView):
    model = get_model('basket', 'line')
    basket_model = get_model('basket', 'basket')
    formset_class = SavedLineFormSet
    form_class = SavedLineForm
    factory_kwargs = {
        'extra': 0,
        'can_delete': True
    }

    def get(self, request, *args, **kwargs):
        return redirect('basket:summary')

    def get_queryset(self):
        """
        Return list of :py:class:`Line <oscar.apps.basket.abstract_models.AbstractLine>`
        instances associated with the saved basked associated with the currently
        authenticated user.
        """  # noqa: E501
        try:
            saved_basket = self.basket_model.saved.get(owner=self.request.user)
            saved_basket.strategy = self.request.strategy
            return saved_basket.all_lines()
        except self.basket_model.DoesNotExist:
            return []

    def get_success_url(self):
        return safe_referrer(self.request, 'basket:summary')

    def get_formset_kwargs(self):
        kwargs = super().get_formset_kwargs()
        kwargs['prefix'] = 'saved'
        kwargs['basket'] = self.request.basket
        kwargs['strategy'] = self.request.strategy
        return kwargs

    def formset_valid(self, formset):
        offers_before = self.request.basket.applied_offers()

        is_move = False
        for form in formset:
            if form.cleaned_data.get('move_to_basket', False):
                is_move = True
                msg = render_to_string(
                    'oscar/basket/messages/line_restored.html',
                    {'line': form.instance})
                messages.info(self.request, msg, extra_tags='safe noicon')
                real_basket = self.request.basket
                real_basket.merge_line(form.instance)

        if is_move:
            # As we're changing the basket, we need to check if it qualifies
            # for any new offers.
            BasketMessageGenerator().apply_messages(self.request, offers_before)
            response = redirect(self.get_success_url())
        else:
            response = super().formset_valid(formset)
        return response

    def formset_invalid(self, formset):
        messages.error(
            self.request,
            '\n'.join(
                error for ed in formset.errors for el
                in ed.values() for error in el))
        return redirect_to_referrer(self.request, 'basket:summary')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.abstract_models:0
==oscar.apps.customer.abstract_models:0
from django.conf import settings
from django.contrib.auth import models as auth_models
from django.core.mail import send_mail
from django.core.validators import RegexValidator
from django.db import models
from django.template import TemplateDoesNotExist, engines
from django.template.loader import get_template
from django.urls import reverse
from django.utils import timezone
from django.utils.crypto import get_random_string
from django.utils.translation import gettext_lazy as _

from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.loading import get_class
from oscar.models.fields import AutoSlugField


CommunicationTypeManager = get_class('customer.managers', 'CommunicationTypeManager')


class UserManager(auth_models.BaseUserManager):

    def create_user(self, email, password=None, **extra_fields):
        """
        Creates and saves a User with the given email and
        password.
        """
        now = timezone.now()
        if not email:
            raise ValueError('The given email must be set')
        email = UserManager.normalize_email(email)
        user = self.model(
            email=email, is_staff=False, is_active=True,
            is_superuser=False,
            last_login=now, date_joined=now, **extra_fields)

        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        u = self.create_user(email, password, **extra_fields)
        u.is_staff = True
        u.is_active = True
        u.is_superuser = True
        u.save(using=self._db)
        return u


class AbstractUser(auth_models.AbstractBaseUser,
                   auth_models.PermissionsMixin):
    """
    An abstract base user suitable for use in Oscar projects.

    This is basically a copy of the core AbstractUser model but without a
    username field
    """
    email = models.EmailField(_('email address'), unique=True)
    first_name = models.CharField(
        _('First name'), max_length=255, blank=True)
    last_name = models.CharField(
        _('Last name'), max_length=255, blank=True)
    is_staff = models.BooleanField(
        _('Staff status'), default=False,
        help_text=_('Designates whether the user can log into this admin '
                    'site.'))
    is_active = models.BooleanField(
        _('Active'), default=True,
        help_text=_('Designates whether this user should be treated as '
                    'active. Unselect this instead of deleting accounts.'))
    date_joined = models.DateTimeField(_('date joined'),
                                       default=timezone.now)

    objects = UserManager()

    USERNAME_FIELD = 'email'

    class Meta:
        abstract = True
        verbose_name = _('User')
        verbose_name_plural = _('Users')

    def clean(self):
        super().clean()
        self.email = self.__class__.objects.normalize_email(self.email)

    def get_full_name(self):
        """
        Return the first_name plus the last_name, with a space in between.
        """
        full_name = '%s %s' % (self.first_name, self.last_name)
        return full_name.strip()

    def get_short_name(self):
        """
        Return the short name for the user.
        """
        return self.first_name

    def email_user(self, subject, message, from_email=None, **kwargs):
        """
        Send an email to this user.
        """
        send_mail(subject, message, from_email, [self.email], **kwargs)

    def _migrate_alerts_to_user(self):
        """
        Transfer any active alerts linked to a user's email address to the
        newly registered user.
        """
        ProductAlert = self.alerts.model
        alerts = ProductAlert.objects.filter(
            email=self.email, status=ProductAlert.ACTIVE)
        alerts.update(user=self, key='', email='')

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # Migrate any "anonymous" product alerts to the registered user
        # Ideally, this would be done via a post-save signal. But we can't
        # use get_user_model to wire up signals to custom user models
        # see Oscar ticket #1127, Django ticket #19218
        self._migrate_alerts_to_user()


class AbstractEmail(models.Model):
    """
    This is a record of all emails sent to a customer.
    Normally, we only record order-related emails.
    """
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='emails',
        verbose_name=_("User"),
        null=True)
    email = models.EmailField(_('Email Address'), null=True, blank=True)
    subject = models.TextField(_('Subject'), max_length=255)
    body_text = models.TextField(_("Body Text"))
    body_html = models.TextField(_("Body HTML"), blank=True)
    date_sent = models.DateTimeField(_("Date Sent"), auto_now_add=True)

    class Meta:
        abstract = True
        app_label = 'customer'
        verbose_name = _('Email')
        verbose_name_plural = _('Emails')

    def __str__(self):
        if self.user:
            return _("Email to %(user)s with subject '%(subject)s'") % {
                'user': self.user.get_username(), 'subject': self.subject}
        else:
            return _("Anonymous email to %(email)s with subject '%(subject)s'") % {
                'email': self.email, 'subject': self.subject}


class AbstractCommunicationEventType(models.Model):
    """
    A 'type' of communication.  Like an order confirmation email.
    """

    #: Code used for looking up this event programmatically.
    # e.g. PASSWORD_RESET. AutoSlugField uppercases the code for us because
    # it's a useful convention that's been enforced in previous Oscar versions
    code = AutoSlugField(
        _('Code'), max_length=128, unique=True, populate_from='name',
        separator="_", uppercase=True, editable=True,
        validators=[
            RegexValidator(
                regex=r'^[a-zA-Z_][0-9a-zA-Z_]*$',
                message=_(
                    "Code can only contain the letters a-z, A-Z, digits, "
                    "and underscores, and can't start with a digit."))],
        help_text=_("Code used for looking up this event programmatically"))

    #: Name is the friendly description of an event for use in the admin
    name = models.CharField(
        _('Name'), max_length=255,
        help_text=_("This is just used for organisational purposes"))

    # We allow communication types to be categorised
    # For backwards-compatibility, the choice values are quite verbose
    ORDER_RELATED = 'Order related'
    USER_RELATED = 'User related'
    CATEGORY_CHOICES = (
        (ORDER_RELATED, _('Order related')),
        (USER_RELATED, _('User related'))
    )

    category = models.CharField(
        _('Category'), max_length=255, default=ORDER_RELATED,
        choices=CATEGORY_CHOICES)

    # Template content for emails
    # NOTE: There's an intentional distinction between None and ''. None
    # instructs Oscar to look for a file-based template, '' is just an empty
    # template.
    email_subject_template = models.CharField(
        _('Email Subject Template'), max_length=255, blank=True, null=True)
    email_body_template = models.TextField(
        _('Email Body Template'), blank=True, null=True)
    email_body_html_template = models.TextField(
        _('Email Body HTML Template'), blank=True, null=True,
        help_text=_("HTML template"))

    # Template content for SMS messages
    sms_template = models.CharField(_('SMS Template'), max_length=170,
                                    blank=True, null=True,
                                    help_text=_("SMS template"))

    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True)
    date_updated = models.DateTimeField(_("Date Updated"), auto_now=True)

    objects = CommunicationTypeManager()

    # File templates
    email_subject_template_file = 'oscar/customer/emails/commtype_%s_subject.txt'
    email_body_template_file = 'oscar/customer/emails/commtype_%s_body.txt'
    email_body_html_template_file = 'oscar/customer/emails/commtype_%s_body.html'
    sms_template_file = 'oscar/customer/sms/commtype_%s_body.txt'

    class Meta:
        abstract = True
        app_label = 'customer'
        verbose_name = _("Communication event type")
        verbose_name_plural = _("Communication event types")

    def get_messages(self, ctx=None):
        """
        Return a dict of templates with the context merged in

        We look first at the field templates but fail over to
        a set of file templates that follow a conventional path.
        """
        code = self.code.lower()

        # Build a dict of message name to Template instances
        templates = {'subject': 'email_subject_template',
                     'body': 'email_body_template',
                     'html': 'email_body_html_template',
                     'sms': 'sms_template'}
        for name, attr_name in templates.items():
            field = getattr(self, attr_name, None)
            if field is not None:
                # Template content is in a model field
                templates[name] = engines['django'].from_string(field)
            else:
                # Model field is empty - look for a file template
                template_name = getattr(self, "%s_file" % attr_name) % code
                try:
                    templates[name] = get_template(template_name)
                except TemplateDoesNotExist:
                    templates[name] = None

        # Pass base URL for serving images within HTML emails
        if ctx is None:
            ctx = {}
        ctx['static_base_url'] = getattr(
            settings, 'OSCAR_STATIC_BASE_URL', None)

        messages = {}
        for name, template in templates.items():
            messages[name] = template.render(ctx) if template else ''

        # Ensure the email subject doesn't contain any newlines
        messages['subject'] = messages['subject'].replace("\n", "")
        messages['subject'] = messages['subject'].replace("\r", "")

        return messages

    def __str__(self):
        return self.name

    def is_order_related(self):
        return self.category == self.ORDER_RELATED

    def is_user_related(self):
        return self.category == self.USER_RELATED


class AbstractNotification(models.Model):
    recipient = models.ForeignKey(
        AUTH_USER_MODEL,
        db_index=True,
        on_delete=models.CASCADE,
        related_name='notifications')

    # Not all notifications will have a sender.
    sender = models.ForeignKey(
        AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        null=True)

    # HTML is allowed in this field as it can contain links
    subject = models.CharField(max_length=255)
    body = models.TextField()

    # Some projects may want to categorise their notifications.  You may want
    # to use this field to show a different icons next to the notification.
    category = models.CharField(max_length=255, blank=True)

    INBOX, ARCHIVE = 'Inbox', 'Archive'
    choices = (
        (INBOX, _('Inbox')),
        (ARCHIVE, _('Archive')))
    location = models.CharField(max_length=32, choices=choices,
                                default=INBOX)

    date_sent = models.DateTimeField(auto_now_add=True, db_index=True)
    date_read = models.DateTimeField(blank=True, null=True)

    class Meta:
        abstract = True
        app_label = 'customer'
        ordering = ('-date_sent',)
        verbose_name = _('Notification')
        verbose_name_plural = _('Notifications')

    def __str__(self):
        return self.subject

    def archive(self):
        self.location = self.ARCHIVE
        self.save()
    archive.alters_data = True

    @property
    def is_read(self):
        return self.date_read is not None


class AbstractProductAlert(models.Model):
    """
    An alert for when a product comes back in stock
    """
    product = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE)

    # A user is only required if the notification is created by a
    # registered user, anonymous users will only have an email address
    # attached to the notification
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        blank=True,
        db_index=True,
        null=True,
        on_delete=models.CASCADE,
        related_name="alerts",
        verbose_name=_('User'))
    email = models.EmailField(_("Email"), db_index=True, blank=True)

    # This key are used to confirm and cancel alerts for anon users
    key = models.CharField(_("Key"), max_length=128, blank=True, db_index=True)

    # An alert can have two different statuses for authenticated
    # users ``ACTIVE`` and ``CANCELLED`` and anonymous users have an
    # additional status ``UNCONFIRMED``. For anonymous users a confirmation
    # and unsubscription key are generated when an instance is saved for
    # the first time and can be used to confirm and unsubscribe the
    # notifications.
    UNCONFIRMED, ACTIVE, CANCELLED, CLOSED = (
        'Unconfirmed', 'Active', 'Cancelled', 'Closed')
    STATUS_CHOICES = (
        (UNCONFIRMED, _('Not yet confirmed')),
        (ACTIVE, _('Active')),
        (CANCELLED, _('Cancelled')),
        (CLOSED, _('Closed')),
    )
    status = models.CharField(_("Status"), max_length=20,
                              choices=STATUS_CHOICES, default=ACTIVE)

    date_created = models.DateTimeField(_("Date created"), auto_now_add=True)
    date_confirmed = models.DateTimeField(_("Date confirmed"), blank=True,
                                          null=True)
    date_cancelled = models.DateTimeField(_("Date cancelled"), blank=True,
                                          null=True)
    date_closed = models.DateTimeField(_("Date closed"), blank=True, null=True)

    class Meta:
        abstract = True
        app_label = 'customer'
        verbose_name = _('Product alert')
        verbose_name_plural = _('Product alerts')

    @property
    def is_anonymous(self):
        return self.user is None

    @property
    def can_be_confirmed(self):
        return self.status == self.UNCONFIRMED

    @property
    def can_be_cancelled(self):
        return self.status in (self.ACTIVE, self.UNCONFIRMED)

    @property
    def is_cancelled(self):
        return self.status == self.CANCELLED

    @property
    def is_active(self):
        return self.status == self.ACTIVE

    def confirm(self):
        self.status = self.ACTIVE
        self.date_confirmed = timezone.now()
        self.save()
    confirm.alters_data = True

    def cancel(self):
        self.status = self.CANCELLED
        self.date_cancelled = timezone.now()
        self.save()
    cancel.alters_data = True

    def close(self):
        self.status = self.CLOSED
        self.date_closed = timezone.now()
        self.save()
    close.alters_data = True

    def get_email_address(self):
        if self.user:
            return self.user.email
        else:
            return self.email

    def save(self, *args, **kwargs):
        if not self.id and not self.user:
            self.key = self.get_random_key()
            self.status = self.UNCONFIRMED
        # Ensure date fields get updated when saving from modelform (which just
        # calls save, and doesn't call the methods cancel(), confirm() etc).
        if self.status == self.CANCELLED and self.date_cancelled is None:
            self.date_cancelled = timezone.now()
        if not self.user and self.status == self.ACTIVE \
                and self.date_confirmed is None:
            self.date_confirmed = timezone.now()
        if self.status == self.CLOSED and self.date_closed is None:
            self.date_closed = timezone.now()

        return super().save(*args, **kwargs)

    def get_random_key(self):
        return get_random_string(length=40, allowed_chars='abcdefghijklmnopqrstuvwxyz0123456789')

    def get_confirm_url(self):
        return reverse('customer:alerts-confirm', kwargs={'key': self.key})

    def get_cancel_url(self):
        return reverse('customer:alerts-cancel-by-key', kwargs={'key': self.key})
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.vouchers.views:0
==oscar.apps.dashboard.vouchers.views:0
==oscar.apps.dashboard.vouchers.views:0
import csv

from django.conf import settings
from django.contrib import messages
from django.db import transaction
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404
from django.urls import reverse
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from django.views import generic

from oscar.core.loading import get_class, get_model
from oscar.core.utils import slugify
from oscar.views import sort_queryset

VoucherForm = get_class('dashboard.vouchers.forms', 'VoucherForm')
VoucherSetForm = get_class('dashboard.vouchers.forms', 'VoucherSetForm')
VoucherSetSearchForm = get_class('dashboard.vouchers.forms', 'VoucherSetSearchForm')
VoucherSearchForm = get_class('dashboard.vouchers.forms', 'VoucherSearchForm')
Voucher = get_model('voucher', 'Voucher')
VoucherSet = get_model('voucher', 'VoucherSet')
ConditionalOffer = get_model('offer', 'ConditionalOffer')
Benefit = get_model('offer', 'Benefit')
Condition = get_model('offer', 'Condition')
OrderDiscount = get_model('order', 'OrderDiscount')


class VoucherListView(generic.ListView):
    model = Voucher
    context_object_name = 'vouchers'
    template_name = 'oscar/dashboard/vouchers/voucher_list.html'
    form_class = VoucherSearchForm
    description_template = _("%(main_filter)s %(name_filter)s %(code_filter)s")
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE

    def get_queryset(self):
        qs = self.model.objects.all().order_by('-date_created')
        qs = sort_queryset(qs, self.request,
                           ['num_basket_additions', 'num_orders',
                            'date_created'],
                           '-date_created')
        self.description_ctx = {'main_filter': _('All vouchers'),
                                'name_filter': '',
                                'code_filter': ''}

        # If form not submitted, return early
        is_form_submitted = 'name' in self.request.GET
        if not is_form_submitted:
            self.form = self.form_class()
            return qs.filter(voucher_set__isnull=True)

        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return qs

        data = self.form.cleaned_data
        if data['name']:
            qs = qs.filter(name__icontains=data['name'])
            self.description_ctx['name_filter'] \
                = _("with name matching '%s'") % data['name']
        if data['code']:
            qs = qs.filter(code=data['code'])
            self.description_ctx['code_filter'] \
                = _("with code '%s'") % data['code']
        if data['is_active']:
            now = timezone.now()
            qs = qs.filter(start_datetime__lte=now, end_datetime__gte=now)
            self.description_ctx['main_filter'] = _('Active vouchers')
        if not data['in_set']:
            qs = qs.filter(voucher_set__isnull=True)

        return qs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        if self.form.is_bound:
            description = self.description_template % self.description_ctx
        else:
            description = _("Vouchers")
        ctx['description'] = description
        ctx['form'] = self.form
        return ctx


class VoucherCreateView(generic.FormView):
    model = Voucher
    template_name = 'oscar/dashboard/vouchers/voucher_form.html'
    form_class = VoucherForm

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _('Create voucher')
        return ctx

    def get_initial(self):
        return dict(
            exclusive=True
        )

    @transaction.atomic()
    def form_valid(self, form):
        # Create offer and benefit
        condition = Condition.objects.create(
            range=form.cleaned_data['benefit_range'],
            type=Condition.COUNT,
            value=1
        )
        benefit = Benefit.objects.create(
            range=form.cleaned_data['benefit_range'],
            type=form.cleaned_data['benefit_type'],
            value=form.cleaned_data['benefit_value']
        )
        name = form.cleaned_data['name']
        offer = ConditionalOffer.objects.create(
            name=_("Offer for voucher '%s'") % name,
            offer_type=ConditionalOffer.VOUCHER,
            benefit=benefit,
            condition=condition,
            exclusive=form.cleaned_data['exclusive'],
        )
        voucher = Voucher.objects.create(
            name=name,
            code=form.cleaned_data['code'],
            usage=form.cleaned_data['usage'],
            start_datetime=form.cleaned_data['start_datetime'],
            end_datetime=form.cleaned_data['end_datetime'],
        )
        voucher.offers.add(offer)
        return HttpResponseRedirect(self.get_success_url())

    def get_success_url(self):
        messages.success(self.request, _("Voucher created"))
        return reverse('dashboard:voucher-list')


class VoucherStatsView(generic.DetailView):
    model = Voucher
    template_name = 'oscar/dashboard/vouchers/voucher_detail.html'
    context_object_name = 'voucher'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        discounts = OrderDiscount.objects.filter(voucher_id=self.object.id)
        discounts = discounts.order_by('-order__date_placed')
        ctx['discounts'] = discounts
        return ctx


class VoucherUpdateView(generic.FormView):
    template_name = 'oscar/dashboard/vouchers/voucher_form.html'
    model = Voucher
    form_class = VoucherForm

    def get_voucher(self):
        if not hasattr(self, 'voucher'):
            self.voucher = Voucher.objects.get(id=self.kwargs['pk'])
        return self.voucher

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = self.voucher.name
        ctx['voucher'] = self.voucher
        return ctx

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['voucher'] = self.get_voucher()
        return kwargs

    def get_initial(self):
        voucher = self.get_voucher()
        offer = voucher.offers.all()[0]
        benefit = offer.benefit
        return {
            'name': voucher.name,
            'code': voucher.code,
            'start_datetime': voucher.start_datetime,
            'end_datetime': voucher.end_datetime,
            'usage': voucher.usage,
            'benefit_type': benefit.type,
            'benefit_range': benefit.range,
            'benefit_value': benefit.value,
            'exclusive': offer.exclusive,
        }

    @transaction.atomic()
    def form_valid(self, form):
        voucher = self.get_voucher()
        voucher.name = form.cleaned_data['name']
        voucher.code = form.cleaned_data['code']
        voucher.usage = form.cleaned_data['usage']
        voucher.start_datetime = form.cleaned_data['start_datetime']
        voucher.end_datetime = form.cleaned_data['end_datetime']
        voucher.save()

        offer = voucher.offers.all()[0]
        offer.condition.range = form.cleaned_data['benefit_range']
        offer.condition.save()

        offer.exclusive = form.cleaned_data['exclusive']
        offer.save()

        benefit = voucher.benefit
        benefit.range = form.cleaned_data['benefit_range']
        benefit.type = form.cleaned_data['benefit_type']
        benefit.value = form.cleaned_data['benefit_value']
        benefit.save()

        return HttpResponseRedirect(self.get_success_url())

    def get_success_url(self):
        messages.success(self.request, _("Voucher updated"))
        return reverse('dashboard:voucher-list')


class VoucherDeleteView(generic.DeleteView):
    model = Voucher
    template_name = 'oscar/dashboard/vouchers/voucher_delete.html'
    context_object_name = 'voucher'

    def get_success_url(self):
        messages.warning(self.request, _("Voucher deleted"))
        return reverse('dashboard:voucher-list')


class VoucherSetCreateView(generic.CreateView):
    model = VoucherSet
    template_name = 'oscar/dashboard/vouchers/voucher_set_form.html'
    form_class = VoucherSetForm

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _('Create voucher set')
        return ctx

    def get_initial(self):
        return {
            'start_datetime': timezone.now(),
            'end_datetime': timezone.now()
        }

    def form_valid(self, form):
        condition = Condition.objects.create(
            range=form.cleaned_data['benefit_range'],
            type=Condition.COUNT,
            value=1
        )
        benefit = Benefit.objects.create(
            range=form.cleaned_data['benefit_range'],
            type=form.cleaned_data['benefit_type'],
            value=form.cleaned_data['benefit_value']
        )
        name = form.cleaned_data['name']
        offer = ConditionalOffer.objects.create(
            name=_("Offer for voucher '%s'") % name,
            offer_type=ConditionalOffer.VOUCHER,
            benefit=benefit,
            condition=condition,
        )

        VoucherSet.objects.create(
            name=name,
            count=form.cleaned_data['count'],
            code_length=form.cleaned_data['code_length'],
            description=form.cleaned_data['description'],
            start_datetime=form.cleaned_data['start_datetime'],
            end_datetime=form.cleaned_data['end_datetime'],
            offer=offer,
        )
        return HttpResponseRedirect(self.get_success_url())

    def get_success_url(self):
        messages.success(self.request, _("Voucher set created"))
        return reverse('dashboard:voucher-set-list')


class VoucherSetUpdateView(generic.UpdateView):
    template_name = 'oscar/dashboard/vouchers/voucher_set_form.html'
    model = VoucherSet
    form_class = VoucherSetForm

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = self.object.name
        ctx['voucher'] = self.object
        return ctx

    def get_voucherset(self):
        if not hasattr(self, 'voucherset'):
            self.voucherset = VoucherSet.objects.get(id=self.kwargs['pk'])
        return self.voucherset

    def get_initial(self):
        voucherset = self.get_voucherset()
        offer = voucherset.offer
        benefit = offer.benefit
        return {
            'name': voucherset.name,
            'count': voucherset.count,
            'code_length': voucherset.code_length,
            'start_datetime': voucherset.start_datetime,
            'end_datetime': voucherset.end_datetime,
            'description': voucherset.description,
            'benefit_type': benefit.type,
            'benefit_range': benefit.range,
            'benefit_value': benefit.value,
        }

    def form_valid(self, form):
        voucherset = form.save()
        if not voucherset.offer:
            condition = Condition.objects.create(
                range=form.cleaned_data['benefit_range'],
                type=Condition.COUNT,
                value=1
            )
            benefit = Benefit.objects.create(
                range=form.cleaned_data['benefit_range'],
                type=form.cleaned_data['benefit_type'],
                value=form.cleaned_data['benefit_value']
            )
            name = form.cleaned_data['name']
            offer, __ = ConditionalOffer.objects.update_or_create(
                name=_("Offer for voucher '%s'") % name,
                defaults=dict(
                    offer_type=ConditionalOffer.VOUCHER,
                    benefit=benefit,
                    condition=condition,
                )
            )
            voucherset.offer = offer
            for voucher in voucherset.vouchers.all():
                if offer not in voucher.offers.all():
                    voucher.offers.add(offer)

        else:
            benefit = voucherset.offer.benefit
            benefit.range = form.cleaned_data['benefit_range']
            benefit.type = form.cleaned_data['benefit_type']
            benefit.value = form.cleaned_data['benefit_value']
            benefit.save()
            condition = voucherset.offer.condition
            condition.range = form.cleaned_data['benefit_range']
            condition.save()
        voucherset.save()

        return HttpResponseRedirect(self.get_success_url())

    def get_success_url(self):
        messages.success(self.request, _("Voucher updated"))
        return reverse('dashboard:voucher-set', kwargs={'pk': self.object.pk})


class VoucherSetDetailView(generic.ListView):

    model = Voucher
    context_object_name = 'vouchers'
    template_name = 'oscar/dashboard/vouchers/voucher_set_detail.html'
    form_class = VoucherSetSearchForm
    description_template = _("%(main_filter)s %(name_filter)s %(code_filter)s")
    paginate_by = 50

    def dispatch(self, request, *args, **kwargs):
        self.voucher_set = get_object_or_404(VoucherSet, pk=kwargs['pk'])
        return super().dispatch(request, *args, **kwargs)

    def get_queryset(self):
        qs = (
            self.model.objects
            .filter(voucher_set=self.voucher_set)
            .order_by('-date_created'))

        qs = sort_queryset(qs, self.request,
                           ['num_basket_additions', 'num_orders',
                            'date_created'],
                           '-date_created')
        self.description_ctx = {'main_filter': _('All vouchers'),
                                'name_filter': '',
                                'code_filter': ''}

        # If form not submitted, return early
        is_form_submitted = (
            'name' in self.request.GET or 'code' in self.request.GET
        )
        if not is_form_submitted:
            self.form = self.form_class()
            return qs

        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return qs

        data = self.form.cleaned_data
        if data['code']:
            qs = qs.filter(code__icontains=data['code'])
            self.description_ctx['code_filter'] \
                = _("with code '%s'") % data['code']
        if data['is_active']:
            now = timezone.now()
            qs = qs.filter(start_datetime__lte=now, end_datetime__gt=now)
            self.description_ctx['main_filter'] = _('Active vouchers')

        return qs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['voucher_set'] = self.voucher_set
        ctx['description'] = self.voucher_set.name
        ctx['form'] = self.form
        return ctx


class VoucherSetListView(generic.ListView):
    model = VoucherSet
    context_object_name = 'vouchers'
    template_name = 'oscar/dashboard/vouchers/voucher_set_list.html'
    description_template = _("%(main_filter)s %(name_filter)s %(code_filter)s")
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE

    def get_queryset(self):
        qs = self.model.objects.all().order_by('-date_created')
        qs = sort_queryset(
            qs, self.request,
            ['num_basket_additions', 'num_orders', 'date_created'], '-date_created')
        return qs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        description = _("Voucher sets")
        ctx['description'] = description
        return ctx


class VoucherSetDownloadView(generic.DetailView):
    template_name = 'oscar/dashboard/vouchers/voucher_set_form.html'
    model = VoucherSet
    form_class = VoucherSetForm

    def get(self, request, *args, **kwargs):
        voucher_set = self.get_object()

        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = (
            'attachment; filename="%s.csv"' % slugify(voucher_set.name))

        writer = csv.writer(response)
        for code in voucher_set.vouchers.values_list('code', flat=True):
            writer.writerow([code])

        return response
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.forms:0
==oscar.apps.customer.forms:0
import string

from django import forms
from django.conf import settings
from django.contrib.auth import forms as auth_forms
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.password_validation import validate_password
from django.contrib.sites.shortcuts import get_current_site
from django.core.exceptions import ValidationError
from django.utils.crypto import get_random_string
from django.utils.http import is_safe_url
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.apps.customer.utils import get_password_reset_url, normalise_email
from oscar.core.compat import (
    existing_user_fields, get_user_model)
from oscar.core.loading import get_class, get_model, get_profile_class
from oscar.forms import widgets

Dispatcher = get_class('customer.utils', 'Dispatcher')
CommunicationEventType = get_model('customer', 'communicationeventtype')
ProductAlert = get_model('customer', 'ProductAlert')
User = get_user_model()


def generate_username():
    letters = string.ascii_letters
    allowed_chars = letters + string.digits + '_'
    uname = get_random_string(length=30, allowed_chars=allowed_chars)
    try:
        User.objects.get(username=uname)
        return generate_username()
    except User.DoesNotExist:
        return uname


class PasswordResetForm(auth_forms.PasswordResetForm):
    """
    This form takes the same structure as its parent from :py:mod:`django.contrib.auth`
    """
    communication_type_code = "PASSWORD_RESET"

    def save(self, domain_override=None, use_https=False, request=None,
             **kwargs):
        """
        Generates a one-use only link for resetting password and sends to the
        user.
        """
        site = get_current_site(request)
        if domain_override is not None:
            site.domain = site.name = domain_override
        email = self.cleaned_data['email']
        active_users = User._default_manager.filter(
            email__iexact=email, is_active=True)
        for user in active_users:
            reset_url = self.get_reset_url(site, request, user, use_https)
            ctx = {
                'user': user,
                'site': site,
                'reset_url': reset_url}
            messages = CommunicationEventType.objects.get_and_render(
                code=self.communication_type_code, context=ctx)
            Dispatcher().dispatch_user_messages(user, messages)

    def get_reset_url(self, site, request, user, use_https):
        # the request argument isn't used currently, but implementors might
        # need it to determine the correct subdomain
        reset_url = "%s://%s%s" % (
            'https' if use_https else 'http',
            site.domain,
            get_password_reset_url(user))

        return reset_url


class EmailAuthenticationForm(AuthenticationForm):
    """
    Extends the standard django AuthenticationForm, to support 75 character
    usernames. 75 character usernames are needed to support the EmailOrUsername
    authentication backend.
    """
    username = forms.EmailField(label=_('Email address'))
    redirect_url = forms.CharField(
        widget=forms.HiddenInput, required=False)

    def __init__(self, host, *args, **kwargs):
        self.host = host
        super().__init__(*args, **kwargs)

    def clean_redirect_url(self):
        url = self.cleaned_data['redirect_url'].strip()
        if url and is_safe_url(url, self.host):
            return url


class ConfirmPasswordForm(forms.Form):
    """
    Extends the standard django AuthenticationForm, to support 75 character
    usernames. 75 character usernames are needed to support the EmailOrUsername
    authentication backend.
    """
    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput)

    def __init__(self, user, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.user = user

    def clean_password(self):
        password = self.cleaned_data['password']
        if not self.user.check_password(password):
            raise forms.ValidationError(
                _("The entered password is not valid!"))
        return password


class EmailUserCreationForm(forms.ModelForm):
    email = forms.EmailField(label=_('Email address'))
    password1 = forms.CharField(
        label=_('Password'), widget=forms.PasswordInput)
    password2 = forms.CharField(
        label=_('Confirm password'), widget=forms.PasswordInput)
    redirect_url = forms.CharField(
        widget=forms.HiddenInput, required=False)

    class Meta:
        model = User
        fields = ('email',)

    def __init__(self, host=None, *args, **kwargs):
        self.host = host
        super().__init__(*args, **kwargs)

    def _post_clean(self):
        super()._post_clean()
        password = self.cleaned_data.get('password2')
        # Validate after self.instance is updated with form data
        # otherwise validators can't access email
        # see django.contrib.auth.forms.UserCreationForm
        if password:
            try:
                validate_password(password, self.instance)
            except forms.ValidationError as error:
                self.add_error('password2', error)

    def clean_email(self):
        """
        Checks for existing users with the supplied email address.
        """
        email = normalise_email(self.cleaned_data['email'])
        if User._default_manager.filter(email__iexact=email).exists():
            raise forms.ValidationError(
                _("A user with that email address already exists"))
        return email

    def clean_password2(self):
        password1 = self.cleaned_data.get('password1', '')
        password2 = self.cleaned_data.get('password2', '')
        if password1 != password2:
            raise forms.ValidationError(
                _("The two password fields didn't match."))
        return password2

    def clean_redirect_url(self):
        url = self.cleaned_data['redirect_url'].strip()
        if url and is_safe_url(url, self.host):
            return url
        return settings.LOGIN_REDIRECT_URL

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data['password1'])

        if 'username' in [f.name for f in User._meta.fields]:
            user.username = generate_username()
        if commit:
            user.save()
        return user


class OrderSearchForm(forms.Form):
    date_from = forms.DateField(
        required=False, label=pgettext_lazy("start date", "From"),
        widget=widgets.DatePickerInput())
    date_to = forms.DateField(
        required=False, label=pgettext_lazy("end date", "To"),
        widget=widgets.DatePickerInput())
    order_number = forms.CharField(required=False, label=_("Order number"))

    def clean(self):
        if self.is_valid() and not any([self.cleaned_data['date_from'],
                                        self.cleaned_data['date_to'],
                                        self.cleaned_data['order_number']]):
            raise forms.ValidationError(_("At least one field is required."))
        return super().clean()

    def description(self):
        """
        Uses the form's data to build a useful description of what orders
        are listed.
        """
        if not self.is_bound or not self.is_valid():
            return _('All orders')
        else:
            date_from = self.cleaned_data['date_from']
            date_to = self.cleaned_data['date_to']
            order_number = self.cleaned_data['order_number']
            return self._orders_description(date_from, date_to, order_number)

    def _orders_description(self, date_from, date_to, order_number):
        if date_from and date_to:
            if order_number:
                desc = _('Orders placed between %(date_from)s and '
                         '%(date_to)s and order number containing '
                         '%(order_number)s')
            else:
                desc = _('Orders placed between %(date_from)s and '
                         '%(date_to)s')
        elif date_from:
            if order_number:
                desc = _('Orders placed since %(date_from)s and '
                         'order number containing %(order_number)s')
            else:
                desc = _('Orders placed since %(date_from)s')
        elif date_to:
            if order_number:
                desc = _('Orders placed until %(date_to)s and '
                         'order number containing %(order_number)s')
            else:
                desc = _('Orders placed until %(date_to)s')
        elif order_number:
            desc = _('Orders with order number containing %(order_number)s')
        else:
            return None
        params = {
            'date_from': date_from,
            'date_to': date_to,
            'order_number': order_number,
        }
        return desc % params

    def get_filters(self):
        date_from = self.cleaned_data['date_from']
        date_to = self.cleaned_data['date_to']
        order_number = self.cleaned_data['order_number']
        kwargs = {}
        if date_from and date_to:
            kwargs['date_placed__range'] = [date_from, date_to]
        elif date_from and not date_to:
            kwargs['date_placed__gt'] = date_from
        elif not date_from and date_to:
            kwargs['date_placed__lt'] = date_to
        if order_number:
            kwargs['number__contains'] = order_number
        return kwargs


class UserForm(forms.ModelForm):

    def __init__(self, user, *args, **kwargs):
        self.user = user
        kwargs['instance'] = user
        super().__init__(*args, **kwargs)
        if 'email' in self.fields:
            self.fields['email'].required = True

    def clean_email(self):
        """
        Make sure that the email address is always unique as it is
        used instead of the username. This is necessary because the
        uniqueness of email addresses is *not* enforced on the model
        level in ``django.contrib.auth.models.User``.
        """
        email = normalise_email(self.cleaned_data['email'])
        if User._default_manager.filter(
                email__iexact=email).exclude(id=self.user.id).exists():
            raise ValidationError(
                _("A user with this email address already exists"))
        # Save the email unaltered
        return email

    class Meta:
        model = User
        fields = existing_user_fields(['first_name', 'last_name', 'email'])


Profile = get_profile_class()
if Profile:  # noqa (too complex (12))

    class UserAndProfileForm(forms.ModelForm):

        def __init__(self, user, *args, **kwargs):
            try:
                instance = Profile.objects.get(user=user)
            except Profile.DoesNotExist:
                # User has no profile, try a blank one
                instance = Profile(user=user)
            kwargs['instance'] = instance

            super().__init__(*args, **kwargs)

            # Get profile field names to help with ordering later
            profile_field_names = list(self.fields.keys())

            # Get user field names (we look for core user fields first)
            core_field_names = set([f.name for f in User._meta.fields])
            user_field_names = ['email']
            for field_name in ('first_name', 'last_name'):
                if field_name in core_field_names:
                    user_field_names.append(field_name)
            user_field_names.extend(User._meta.additional_fields)

            # Store user fields so we know what to save later
            self.user_field_names = user_field_names

            # Add additional user form fields
            additional_fields = forms.fields_for_model(
                User, fields=user_field_names)
            self.fields.update(additional_fields)

            # Ensure email is required and initialised correctly
            self.fields['email'].required = True

            # Set initial values
            for field_name in user_field_names:
                self.fields[field_name].initial = getattr(user, field_name)

            # Ensure order of fields is email, user fields then profile fields
            self.fields.keyOrder = user_field_names + profile_field_names

        class Meta:
            model = Profile
            exclude = ('user',)

        def clean_email(self):
            email = normalise_email(self.cleaned_data['email'])

            users_with_email = User._default_manager.filter(
                email__iexact=email).exclude(id=self.instance.user.id)
            if users_with_email.exists():
                raise ValidationError(
                    _("A user with this email address already exists"))
            return email

        def save(self, *args, **kwargs):
            user = self.instance.user

            # Save user also
            for field_name in self.user_field_names:
                setattr(user, field_name, self.cleaned_data[field_name])
            user.save()

            return super().save(*args, **kwargs)

    ProfileForm = UserAndProfileForm
else:
    ProfileForm = UserForm


class ProductAlertForm(forms.ModelForm):
    email = forms.EmailField(required=True, label=_('Send notification to'),
                             widget=forms.TextInput(attrs={
                                 'placeholder': _('Enter your email')
                             }))

    def __init__(self, user, product, *args, **kwargs):
        self.user = user
        self.product = product
        super().__init__(*args, **kwargs)

        # Only show email field to unauthenticated users
        if user and user.is_authenticated:
            self.fields['email'].widget = forms.HiddenInput()
            self.fields['email'].required = False

    def save(self, commit=True):
        alert = super().save(commit=False)
        if self.user.is_authenticated:
            alert.user = self.user
        alert.product = self.product
        if commit:
            alert.save()
        return alert

    def clean(self):
        cleaned_data = self.cleaned_data
        email = cleaned_data.get('email')
        if email:
            try:
                ProductAlert.objects.get(
                    product=self.product, email__iexact=email,
                    status=ProductAlert.ACTIVE)
            except ProductAlert.DoesNotExist:
                pass
            else:
                raise forms.ValidationError(_(
                    "There is already an active stock alert for %s") % email)

            # Check that the email address hasn't got other unconfirmed alerts.
            # If they do then we don't want to spam them with more until they
            # have confirmed or cancelled the existing alert.
            if ProductAlert.objects.filter(email__iexact=email,
                                           status=ProductAlert.UNCONFIRMED).count():
                raise forms.ValidationError(_(
                    "%s has been sent a confirmation email for another product "
                    "alert on this site. Please confirm or cancel that request "
                    "before signing up for more alerts.") % email)
        elif self.user.is_authenticated:
            try:
                ProductAlert.objects.get(product=self.product,
                                         user=self.user,
                                         status=ProductAlert.ACTIVE)
            except ProductAlert.DoesNotExist:
                pass
            else:
                raise forms.ValidationError(_(
                    "You already have an active alert for this product"))
        return cleaned_data

    class Meta:
        model = ProductAlert
        fields = ['email']
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.session:0
==oscar.apps.checkout.session:0
from decimal import Decimal as D

from django import http
from django.contrib import messages
from django.core.exceptions import ImproperlyConfigured
from django.urls import reverse
from django.utils.translation import gettext_lazy as _

from oscar.core import prices
from oscar.core.loading import get_class, get_model

from . import exceptions

Repository = get_class('shipping.repository', 'Repository')
OrderTotalCalculator = get_class(
    'checkout.calculators', 'OrderTotalCalculator')
CheckoutSessionData = get_class(
    'checkout.utils', 'CheckoutSessionData')
ShippingAddress = get_model('order', 'ShippingAddress')
BillingAddress = get_model('order', 'BillingAddress')
UserAddress = get_model('address', 'UserAddress')


class CheckoutSessionMixin(object):
    """
    Mixin to provide common functionality shared between checkout views.

    All checkout views subclass this mixin. It ensures that all relevant
    checkout information is available in the template context.
    """

    # A pre-condition is a condition that MUST be met in order for a view
    # to be available. If it isn't then the customer should be redirected
    # to a view *earlier* in the chain.
    # pre_conditions is a list of method names that get executed before the
    # normal flow of the view. Each method should check some condition has been
    # met. If not, then an exception is raised that indicates the URL the
    # customer will be redirected to.

    pre_conditions = None

    # A *skip* condition is a condition that MUST NOT be met in order for a
    # view to be available. If the condition is met, this means the view MUST
    # be skipped and the customer should be redirected to a view *later* in
    # the chain.
    # Skip conditions work similar to pre-conditions, and get evaluated after
    # pre-conditions have been evaluated.
    skip_conditions = None

    def dispatch(self, request, *args, **kwargs):
        # Assign the checkout session manager so it's available in all checkout
        # views.
        self.checkout_session = CheckoutSessionData(request)

        # Enforce any pre-conditions for the view.
        try:
            self.check_pre_conditions(request)
        except exceptions.FailedPreCondition as e:
            for message in e.messages:
                messages.warning(request, message)
            return http.HttpResponseRedirect(e.url)

        # Check if this view should be skipped
        try:
            self.check_skip_conditions(request)
        except exceptions.PassedSkipCondition as e:
            return http.HttpResponseRedirect(e.url)

        return super().dispatch(
            request, *args, **kwargs)

    def check_pre_conditions(self, request):
        pre_conditions = self.get_pre_conditions(request)
        for method_name in pre_conditions:
            if not hasattr(self, method_name):
                raise ImproperlyConfigured(
                    "There is no method '%s' to call as a pre-condition" % (
                        method_name))
            getattr(self, method_name)(request)

    def get_pre_conditions(self, request):
        """
        Return the pre-condition method names to run for this view
        """
        if self.pre_conditions is None:
            return []
        return self.pre_conditions

    def check_skip_conditions(self, request):
        skip_conditions = self.get_skip_conditions(request)
        for method_name in skip_conditions:
            if not hasattr(self, method_name):
                raise ImproperlyConfigured(
                    "There is no method '%s' to call as a skip-condition" % (
                        method_name))
            getattr(self, method_name)(request)

    def get_skip_conditions(self, request):
        """
        Return the skip-condition method names to run for this view
        """
        if self.skip_conditions is None:
            return []
        return self.skip_conditions

    # Re-usable pre-condition validators

    def check_basket_is_not_empty(self, request):
        if request.basket.is_empty:
            raise exceptions.FailedPreCondition(
                url=reverse('basket:summary'),
                message=_(
                    "You need to add some items to your basket to checkout")
            )

    def check_basket_is_valid(self, request):
        """
        Check that the basket is permitted to be submitted as an order. That
        is, all the basket lines are available to buy - nothing has gone out of
        stock since it was added to the basket.
        """
        messages = []
        strategy = request.strategy
        for line in request.basket.all_lines():
            result = strategy.fetch_for_line(line)
            is_permitted, reason = result.availability.is_purchase_permitted(
                line.quantity)
            if not is_permitted:
                # Create a more meaningful message to show on the basket page
                msg = _(
                    "'%(title)s' is no longer available to buy (%(reason)s). "
                    "Please adjust your basket to continue"
                ) % {
                    'title': line.product.get_title(),
                    'reason': reason}
                messages.append(msg)
        if messages:
            raise exceptions.FailedPreCondition(
                url=reverse('basket:summary'),
                messages=messages
            )

    def check_user_email_is_captured(self, request):
        if not request.user.is_authenticated \
                and not self.checkout_session.get_guest_email():
            raise exceptions.FailedPreCondition(
                url=reverse('checkout:index'),
                message=_(
                    "Please either sign in or enter your email address")
            )

    def check_shipping_data_is_captured(self, request):
        if not request.basket.is_shipping_required():
            # Even without shipping being required, we still need to check that
            # a shipping method code has been set.
            if not self.checkout_session.is_shipping_method_set(
                    self.request.basket):
                raise exceptions.FailedPreCondition(
                    url=reverse('checkout:shipping-method'),
                )
            return

        # Basket requires shipping: check address and method are captured and
        # valid.
        self.check_a_valid_shipping_address_is_captured()
        self.check_a_valid_shipping_method_is_captured()

    def check_a_valid_shipping_address_is_captured(self):
        # Check that shipping address has been completed
        if not self.checkout_session.is_shipping_address_set():
            raise exceptions.FailedPreCondition(
                url=reverse('checkout:shipping-address'),
                message=_("Please choose a shipping address")
            )

        # Check that the previously chosen shipping address is still valid
        shipping_address = self.get_shipping_address(
            basket=self.request.basket)
        if not shipping_address:
            raise exceptions.FailedPreCondition(
                url=reverse('checkout:shipping-address'),
                message=_("Your previously chosen shipping address is "
                          "no longer valid.  Please choose another one")
            )

    def check_a_valid_shipping_method_is_captured(self):
        # Check that shipping method has been set
        if not self.checkout_session.is_shipping_method_set(
                self.request.basket):
            raise exceptions.FailedPreCondition(
                url=reverse('checkout:shipping-method'),
                message=_("Please choose a shipping method")
            )

        # Check that a *valid* shipping method has been set
        shipping_address = self.get_shipping_address(
            basket=self.request.basket)
        shipping_method = self.get_shipping_method(
            basket=self.request.basket,
            shipping_address=shipping_address)
        if not shipping_method:
            raise exceptions.FailedPreCondition(
                url=reverse('checkout:shipping-method'),
                message=_("Your previously chosen shipping method is "
                          "no longer valid.  Please choose another one")
            )

    def check_payment_data_is_captured(self, request):
        # We don't collect payment data by default so we don't have anything to
        # validate here. If your shop requires forms to be submitted on the
        # payment details page, then override this method to check that the
        # relevant data is available. Often just enforcing that the preview
        # view is only accessible from a POST request is sufficient.
        pass

    # Re-usable skip conditions

    def skip_unless_basket_requires_shipping(self, request):
        # Check to see that a shipping address is actually required.  It may
        # not be if the basket is purely downloads
        if not request.basket.is_shipping_required():
            raise exceptions.PassedSkipCondition(
                url=reverse('checkout:shipping-method')
            )

    def skip_unless_payment_is_required(self, request):
        # Check to see if payment is actually required for this order.
        shipping_address = self.get_shipping_address(request.basket)
        shipping_method = self.get_shipping_method(
            request.basket, shipping_address)
        if shipping_method:
            shipping_charge = shipping_method.calculate(request.basket)
        else:
            # It's unusual to get here as a shipping method should be set by
            # the time this skip-condition is called. In the absence of any
            # other evidence, we assume the shipping charge is zero.
            shipping_charge = prices.Price(
                currency=request.basket.currency, excl_tax=D('0.00'),
                tax=D('0.00')
            )
        total = self.get_order_totals(request.basket, shipping_charge)
        if total.excl_tax == D('0.00'):
            raise exceptions.PassedSkipCondition(
                url=reverse('checkout:preview')
            )

    # Helpers

    def get_context_data(self, **kwargs):
        # Use the proposed submission as template context data.  Flatten the
        # order kwargs so they are easily available too.
        ctx = super().get_context_data()
        ctx.update(self.build_submission(**kwargs))
        ctx.update(kwargs)
        ctx.update(ctx['order_kwargs'])
        return ctx

    def build_submission(self, **kwargs):
        """
        Return a dict of data that contains everything required for an order
        submission.  This includes payment details (if any).

        This can be the right place to perform tax lookups and apply them to
        the basket.
        """
        # Pop the basket if there is one, because we pass it as a positional
        # argument to methods below
        basket = kwargs.pop('basket', self.request.basket)
        shipping_address = self.get_shipping_address(basket)
        shipping_method = self.get_shipping_method(
            basket, shipping_address)
        billing_address = self.get_billing_address(shipping_address)
        if not shipping_method:
            total = shipping_charge = None
        else:
            shipping_charge = shipping_method.calculate(basket)
            total = self.get_order_totals(
                basket, shipping_charge=shipping_charge, **kwargs)
        submission = {
            'user': self.request.user,
            'basket': basket,
            'shipping_address': shipping_address,
            'shipping_method': shipping_method,
            'shipping_charge': shipping_charge,
            'billing_address': billing_address,
            'order_total': total,
            'order_kwargs': {},
            'payment_kwargs': {}}

        # If there is a billing address, add it to the payment kwargs as calls
        # to payment gateways generally require the billing address. Note, that
        # it normally makes sense to pass the form instance that captures the
        # billing address information. That way, if payment fails, you can
        # render bound forms in the template to make re-submission easier.
        if billing_address:
            submission['payment_kwargs']['billing_address'] = billing_address

        # Allow overrides to be passed in
        submission.update(kwargs)

        # Set guest email after overrides as we need to update the order_kwargs
        # entry.
        user = submission['user']
        if (not user.is_authenticated
                and 'guest_email' not in submission['order_kwargs']):
            email = self.checkout_session.get_guest_email()
            submission['order_kwargs']['guest_email'] = email
        return submission

    def get_shipping_address(self, basket):
        """
        Return the (unsaved) shipping address for this checkout session.

        If the shipping address was entered manually, then we instantiate a
        ``ShippingAddress`` model with the appropriate form data (which is
        saved in the session).

        If the shipping address was selected from the user's address book,
        then we convert the ``UserAddress`` to a ``ShippingAddress``.

        The ``ShippingAddress`` instance is not saved as sometimes you need a
        shipping address instance before the order is placed.  For example, if
        you are submitting fraud information as part of a payment request.

        The ``OrderPlacementMixin.create_shipping_address`` method is
        responsible for saving a shipping address when an order is placed.
        """
        if not basket.is_shipping_required():
            return None

        addr_data = self.checkout_session.new_shipping_address_fields()
        if addr_data:
            # Load address data into a blank shipping address model
            return ShippingAddress(**addr_data)
        addr_id = self.checkout_session.shipping_user_address_id()
        if addr_id:
            try:
                address = UserAddress._default_manager.get(pk=addr_id)
            except UserAddress.DoesNotExist:
                # An address was selected but now it has disappeared.  This can
                # happen if the customer flushes their address book midway
                # through checkout.  No idea why they would do this but it can
                # happen.  Checkouts are highly vulnerable to race conditions
                # like this.
                return None
            else:
                # Copy user address data into a blank shipping address instance
                shipping_addr = ShippingAddress()
                address.populate_alternative_model(shipping_addr)
                return shipping_addr

    def get_shipping_method(self, basket, shipping_address=None, **kwargs):
        """
        Return the selected shipping method instance from this checkout session

        The shipping address is passed as we need to check that the method
        stored in the session is still valid for the shipping address.
        """
        code = self.checkout_session.shipping_method_code(basket)
        methods = Repository().get_shipping_methods(
            basket=basket, user=self.request.user,
            shipping_addr=shipping_address, request=self.request)
        for method in methods:
            if method.code == code:
                return method

    def get_billing_address(self, shipping_address):
        """
        Return an unsaved instance of the billing address (if one exists)

        This method only returns a billing address if the session has been used
        to store billing address information. It's also possible to capture
        billing address information as part of the payment details forms, which
        never get stored in the session. In that circumstance, the billing
        address can be set directly in the build_submission dict.
        """
        if not self.checkout_session.is_billing_address_set():
            return None
        if self.checkout_session.is_billing_address_same_as_shipping():
            if shipping_address:
                address = BillingAddress()
                shipping_address.populate_alternative_model(address)
                return address

        addr_data = self.checkout_session.new_billing_address_fields()
        if addr_data:
            # A new billing address has been entered - load address data into a
            # blank billing address model.
            return BillingAddress(**addr_data)

        addr_id = self.checkout_session.billing_user_address_id()
        if addr_id:
            # An address from the user's address book has been selected as the
            # billing address - load it and convert it into a billing address
            # instance.
            try:
                user_address = UserAddress._default_manager.get(pk=addr_id)
            except UserAddress.DoesNotExist:
                # An address was selected but now it has disappeared.  This can
                # happen if the customer flushes their address book midway
                # through checkout.  No idea why they would do this but it can
                # happen.  Checkouts are highly vulnerable to race conditions
                # like this.
                return None
            else:
                # Copy user address data into a blank shipping address instance
                billing_address = BillingAddress()
                user_address.populate_alternative_model(billing_address)
                return billing_address

    def get_order_totals(self, basket, shipping_charge, **kwargs):
        """
        Returns the total for the order with and without tax
        """
        return OrderTotalCalculator(self.request).calculate(
            basket, shipping_charge, **kwargs)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.migrations.0001_initial:1
==oscar.apps.order.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
import django.db.models.deletion
import oscar.models.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('partner', '0001_initial'),
        ('customer', '0001_initial'),
        ('address', '0001_initial'),
        ('basket', '0002_auto_20140827_1705'),
        ('catalogue', '0001_initial'),
        ('sites', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BillingAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Billing addresses',
                'verbose_name': 'Billing address',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CommunicationEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('event_type', models.ForeignKey(verbose_name='Event Type', to='customer.CommunicationEventType', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['-date_created'],
                'verbose_name_plural': 'Communication Events',
                'verbose_name': 'Communication Event',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partner_name', models.CharField(max_length=128, verbose_name='Partner name', blank=True)),
                ('partner_sku', models.CharField(max_length=128, verbose_name='Partner SKU')),
                ('partner_line_reference', models.CharField(verbose_name='Partner reference', max_length=128, help_text='This is the item number that the partner uses within their system', blank=True)),
                ('partner_line_notes', models.TextField(verbose_name='Partner Notes', blank=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('upc', models.CharField(verbose_name='UPC', max_length=128, blank=True, null=True)),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('line_price_incl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price (inc. tax)')),
                ('line_price_excl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price (excl. tax)')),
                ('line_price_before_discounts_incl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price before discounts (inc. tax)')),
                ('line_price_before_discounts_excl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price before discounts (excl. tax)')),
                ('unit_cost_price', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Unit Cost Price', null=True)),
                ('unit_price_incl_tax', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Unit Price (inc. tax)', null=True)),
                ('unit_price_excl_tax', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Unit Price (excl. tax)', null=True)),
                ('unit_retail_price', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Unit Retail Price', null=True)),
                ('status', models.CharField(max_length=255, verbose_name='Status', blank=True)),
                ('est_dispatch_date', models.DateField(blank=True, verbose_name='Estimated Dispatch Date', null=True)),
            ],
            options={
                'verbose_name_plural': 'Order Lines',
                'verbose_name': 'Order Line',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LineAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=128, verbose_name='Type')),
                ('value', models.CharField(max_length=255, verbose_name='Value')),
                ('line', models.ForeignKey(verbose_name='Line', related_name='attributes', to='order.Line', on_delete=models.CASCADE)),
                ('option', models.ForeignKey(verbose_name='Option', on_delete=django.db.models.deletion.SET_NULL, related_name='line_attributes', to='catalogue.Option', null=True)),
            ],
            options={
                'verbose_name_plural': 'Line Attributes',
                'verbose_name': 'Line Attribute',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LinePrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('price_incl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price (inc. tax)')),
                ('price_excl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price (excl. tax)')),
                ('shipping_incl_tax', models.DecimalField(default=0, max_digits=12, decimal_places=2, verbose_name='Shiping (inc. tax)')),
                ('shipping_excl_tax', models.DecimalField(default=0, max_digits=12, decimal_places=2, verbose_name='Shipping (excl. tax)')),
                ('line', models.ForeignKey(verbose_name='Line', related_name='prices', to='order.Line', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('id',),
                'verbose_name_plural': 'Line Prices',
                'verbose_name': 'Line Price',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=128, unique=True, db_index=True, verbose_name='Order number')),
                ('currency', models.CharField(default='GBP', max_length=12, verbose_name='Currency')),
                ('total_incl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Order total (inc. tax)')),
                ('total_excl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Order total (excl. tax)')),
                ('shipping_incl_tax', models.DecimalField(default=0, max_digits=12, decimal_places=2, verbose_name='Shipping charge (inc. tax)')),
                ('shipping_excl_tax', models.DecimalField(default=0, max_digits=12, decimal_places=2, verbose_name='Shipping charge (excl. tax)')),
                ('shipping_method', models.CharField(max_length=128, verbose_name='Shipping method', blank=True)),
                ('shipping_code', models.CharField(default='', max_length=128, blank=True)),
                ('status', models.CharField(max_length=100, verbose_name='Status', blank=True)),
                ('guest_email', models.EmailField(max_length=75, verbose_name='Guest email address', blank=True)),
                ('date_placed', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('basket', models.ForeignKey(null=True, verbose_name='Basket', on_delete=django.db.models.deletion.SET_NULL, to='basket.Basket', blank=True)),
                ('billing_address', models.ForeignKey(null=True, verbose_name='Billing Address', on_delete=django.db.models.deletion.SET_NULL, to='order.BillingAddress', blank=True)),
            ],
            options={
                'ordering': ['-date_placed'],
                'verbose_name_plural': 'Orders',
                'verbose_name': 'Order',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OrderDiscount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(default='Basket', max_length=64, verbose_name='Discount category', choices=[('Basket', 'Basket'), ('Shipping', 'Shipping'), ('Deferred', 'Deferred')])),
                ('offer_id', models.PositiveIntegerField(blank=True, verbose_name='Offer ID', null=True)),
                ('offer_name', models.CharField(max_length=128, db_index=True, verbose_name='Offer name', blank=True)),
                ('voucher_id', models.PositiveIntegerField(blank=True, verbose_name='Voucher ID', null=True)),
                ('voucher_code', models.CharField(max_length=128, db_index=True, verbose_name='Code', blank=True)),
                ('frequency', models.PositiveIntegerField(verbose_name='Frequency', null=True)),
                ('amount', models.DecimalField(default=0, max_digits=12, decimal_places=2, verbose_name='Amount')),
                ('message', models.TextField(blank=True)),
                ('order', models.ForeignKey(verbose_name='Order', related_name='discounts', to='order.Order', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Order Discounts',
                'verbose_name': 'Order Discount',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OrderNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_type', models.CharField(max_length=128, verbose_name='Note Type', blank=True)),
                ('message', models.TextField(verbose_name='Message')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
                ('order', models.ForeignKey(verbose_name='Order', related_name='notes', to='order.Order', on_delete=models.CASCADE)),
                ('user', models.ForeignKey(verbose_name='User', to=settings.AUTH_USER_MODEL, null=True, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Order Notes',
                'verbose_name': 'Order Note',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PaymentEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Amount')),
                ('reference', models.CharField(max_length=128, verbose_name='Reference', blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
            ],
            options={
                'ordering': ['-date_created'],
                'verbose_name_plural': 'Payment Events',
                'verbose_name': 'Payment Event',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PaymentEventQuantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('event', models.ForeignKey(verbose_name='Event', related_name='line_quantities', to='order.PaymentEvent', on_delete=models.CASCADE)),
                ('line', models.ForeignKey(verbose_name='Line', related_name='payment_event_quantities', to='order.Line', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Payment Event Quantities',
                'verbose_name': 'Payment Event Quantity',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PaymentEventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='Name')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Code', max_length=128, editable=False, blank=True)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'Payment Event Types',
                'verbose_name': 'Payment Event Type',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ShippingAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),
                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),
                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Shipping addresses',
                'verbose_name': 'Shipping address',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ShippingEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(verbose_name='Event notes', help_text='This could be the dispatch reference, or a tracking number', blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
            ],
            options={
                'ordering': ['-date_created'],
                'verbose_name_plural': 'Shipping Events',
                'verbose_name': 'Shipping Event',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ShippingEventQuantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('event', models.ForeignKey(verbose_name='Event', related_name='line_quantities', to='order.ShippingEvent', on_delete=models.CASCADE)),
                ('line', models.ForeignKey(verbose_name='Line', related_name='shipping_event_quantities', to='order.Line', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Shipping Event Quantities',
                'verbose_name': 'Shipping Event Quantity',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ShippingEventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True, max_length=255, verbose_name='Name')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Code', max_length=128, editable=False, blank=True)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'Shipping Event Types',
                'verbose_name': 'Shipping Event Type',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='shippingeventquantity',
            unique_together=set([('event', 'line')]),
        ),
        migrations.AddField(
            model_name='shippingevent',
            name='event_type',
            field=models.ForeignKey(verbose_name='Event Type', to='order.ShippingEventType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='shippingevent',
            name='lines',
            field=models.ManyToManyField(related_name='shipping_events', verbose_name='Lines', to='order.Line', through='order.ShippingEventQuantity'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='shippingevent',
            name='order',
            field=models.ForeignKey(verbose_name='Order', related_name='shipping_events', to='order.Order', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='paymenteventquantity',
            unique_together=set([('event', 'line')]),
        ),
        migrations.AddField(
            model_name='paymentevent',
            name='event_type',
            field=models.ForeignKey(verbose_name='Event Type', to='order.PaymentEventType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='paymentevent',
            name='lines',
            field=models.ManyToManyField(through='order.PaymentEventQuantity', verbose_name='Lines', to='order.Line'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='paymentevent',
            name='order',
            field=models.ForeignKey(verbose_name='Order', related_name='payment_events', to='order.Order', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='paymentevent',
            name='shipping_event',
            field=models.ForeignKey(related_name='payment_events', to='order.ShippingEvent', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='order',
            name='shipping_address',
            field=models.ForeignKey(null=True, verbose_name='Shipping Address', on_delete=django.db.models.deletion.SET_NULL, to='order.ShippingAddress', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='order',
            name='site',
            field=models.ForeignKey(verbose_name='Site', on_delete=django.db.models.deletion.SET_NULL, to='sites.Site', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(null=True, verbose_name='User', on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lineprice',
            name='order',
            field=models.ForeignKey(verbose_name='Option', related_name='line_prices', to='order.Order', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='line',
            name='order',
            field=models.ForeignKey(verbose_name='Order', related_name='lines', to='order.Order', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='line',
            name='partner',
            field=models.ForeignKey(null=True, verbose_name='Partner', on_delete=django.db.models.deletion.SET_NULL, related_name='order_lines', to='partner.Partner', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='line',
            name='product',
            field=models.ForeignKey(null=True, verbose_name='Product', on_delete=django.db.models.deletion.SET_NULL, to='catalogue.Product', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='line',
            name='stockrecord',
            field=models.ForeignKey(null=True, verbose_name='Stock record', on_delete=django.db.models.deletion.SET_NULL, to='partner.StockRecord', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='communicationevent',
            name='order',
            field=models.ForeignKey(verbose_name='Order', related_name='communication_events', to='order.Order', on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.catalogue.forms:0
==oscar.apps.dashboard.catalogue.forms:0
==oscar.apps.dashboard.catalogue.forms:0
from django import forms
from django.core import exceptions
from django.utils.translation import gettext_lazy as _
from treebeard.forms import movenodeform_factory

from oscar.core.loading import get_class, get_model, get_classes
from oscar.core.utils import slugify
from oscar.forms.widgets import DateTimePickerInput, ImageInput

Product = get_model('catalogue', 'Product')
ProductClass = get_model('catalogue', 'ProductClass')
ProductAttribute = get_model('catalogue', 'ProductAttribute')
Category = get_model('catalogue', 'Category')
StockRecord = get_model('partner', 'StockRecord')
ProductCategory = get_model('catalogue', 'ProductCategory')
ProductImage = get_model('catalogue', 'ProductImage')
ProductRecommendation = get_model('catalogue', 'ProductRecommendation')
AttributeOptionGroup = get_model('catalogue', 'AttributeOptionGroup')
AttributeOption = get_model('catalogue', 'AttributeOption')
Option = get_model('catalogue', 'Option')
ProductSelect = get_class('dashboard.catalogue.widgets', 'ProductSelect')
(RelatedFieldWidgetWrapper,
 RelatedMultipleFieldWidgetWrapper) = get_classes('dashboard.widgets',
                                                  ('RelatedFieldWidgetWrapper',
                                                   'RelatedMultipleFieldWidgetWrapper'))

CategoryForm = movenodeform_factory(
    Category,
    fields=['name', 'description', 'image'])


class ProductClassSelectForm(forms.Form):
    """
    Form which is used before creating a product to select it's product class
    """

    product_class = forms.ModelChoiceField(
        label=_("Create a new product of type"),
        empty_label=_("-- Choose type --"),
        queryset=ProductClass.objects.all())

    def __init__(self, *args, **kwargs):
        """
        If there's only one product class, pre-select it
        """
        super().__init__(*args, **kwargs)
        qs = self.fields['product_class'].queryset
        if not kwargs.get('initial') and len(qs) == 1:
            self.fields['product_class'].initial = qs[0]


class ProductSearchForm(forms.Form):
    upc = forms.CharField(max_length=16, required=False, label=_('UPC'))
    title = forms.CharField(
        max_length=255, required=False, label=_('Product title'))

    def clean(self):
        cleaned_data = super().clean()
        cleaned_data['upc'] = cleaned_data['upc'].strip()
        cleaned_data['title'] = cleaned_data['title'].strip()
        return cleaned_data


class StockRecordForm(forms.ModelForm):

    def __init__(self, product_class, user, *args, **kwargs):
        # The user kwarg is not used by stock StockRecordForm. We pass it
        # anyway in case one wishes to customise the partner queryset
        self.user = user
        super().__init__(*args, **kwargs)

        # Restrict accessible partners for non-staff users
        if not self.user.is_staff:
            self.fields['partner'].queryset = self.user.partners.all()

        # If not tracking stock, we hide the fields
        if not product_class.track_stock:
            for field_name in ['num_in_stock', 'low_stock_threshold']:
                if field_name in self.fields:
                    del self.fields[field_name]
        else:
            for field_name in ['price_excl_tax', 'num_in_stock']:
                if field_name in self.fields:
                    self.fields[field_name].required = True

    class Meta:
        model = StockRecord
        fields = [
            'partner', 'partner_sku',
            'price_currency', 'price_excl_tax', 'price_retail', 'cost_price',
            'num_in_stock', 'low_stock_threshold',
        ]


def _attr_text_field(attribute):
    return forms.CharField(label=attribute.name,
                           required=attribute.required)


def _attr_textarea_field(attribute):
    return forms.CharField(label=attribute.name,
                           widget=forms.Textarea(),
                           required=attribute.required)


def _attr_integer_field(attribute):
    return forms.IntegerField(label=attribute.name,
                              required=attribute.required)


def _attr_boolean_field(attribute):
    return forms.BooleanField(label=attribute.name,
                              required=attribute.required)


def _attr_float_field(attribute):
    return forms.FloatField(label=attribute.name,
                            required=attribute.required)


def _attr_date_field(attribute):
    return forms.DateField(label=attribute.name,
                           required=attribute.required,
                           widget=forms.widgets.DateInput)


def _attr_datetime_field(attribute):
    return forms.DateTimeField(label=attribute.name,
                               required=attribute.required,
                               widget=DateTimePickerInput())


def _attr_option_field(attribute):
    return forms.ModelChoiceField(
        label=attribute.name,
        required=attribute.required,
        queryset=attribute.option_group.options.all())


def _attr_multi_option_field(attribute):
    return forms.ModelMultipleChoiceField(
        label=attribute.name,
        required=attribute.required,
        queryset=attribute.option_group.options.all())


def _attr_entity_field(attribute):
    # Product entities don't have out-of-the-box supported in the ProductForm.
    # There is no ModelChoiceField for generic foreign keys, and there's no
    # good default behaviour anyway; offering a choice of *all* model instances
    # is hardly useful.
    return None


def _attr_numeric_field(attribute):
    return forms.FloatField(label=attribute.name,
                            required=attribute.required)


def _attr_file_field(attribute):
    return forms.FileField(
        label=attribute.name, required=attribute.required)


def _attr_image_field(attribute):
    return forms.ImageField(
        label=attribute.name, required=attribute.required)


class ProductForm(forms.ModelForm):
    FIELD_FACTORIES = {
        "text": _attr_text_field,
        "richtext": _attr_textarea_field,
        "integer": _attr_integer_field,
        "boolean": _attr_boolean_field,
        "float": _attr_float_field,
        "date": _attr_date_field,
        "datetime": _attr_datetime_field,
        "option": _attr_option_field,
        "multi_option": _attr_multi_option_field,
        "entity": _attr_entity_field,
        "numeric": _attr_numeric_field,
        "file": _attr_file_field,
        "image": _attr_image_field,
    }

    class Meta:
        model = Product
        fields = [
            'title', 'upc', 'description', 'is_public', 'is_discountable', 'structure']
        widgets = {
            'structure': forms.HiddenInput()
        }

    def __init__(self, product_class, data=None, parent=None, *args, **kwargs):
        self.set_initial(product_class, parent, kwargs)
        super().__init__(data, *args, **kwargs)
        if parent:
            self.instance.parent = parent
            # We need to set the correct product structures explicitly to pass
            # attribute validation and child product validation. Note that
            # those changes are not persisted.
            self.instance.structure = Product.CHILD
            self.instance.parent.structure = Product.PARENT

            self.delete_non_child_fields()
        else:
            # Only set product class for non-child products
            self.instance.product_class = product_class
        self.add_attribute_fields(product_class, self.instance.is_parent)

        if 'title' in self.fields:
            self.fields['title'].widget = forms.TextInput(
                attrs={'autocomplete': 'off'})

    def set_initial(self, product_class, parent, kwargs):
        """
        Set initial data for the form. Sets the correct product structure
        and fetches initial values for the dynamically constructed attribute
        fields.
        """
        if 'initial' not in kwargs:
            kwargs['initial'] = {}
        self.set_initial_attribute_values(product_class, kwargs)
        if parent:
            kwargs['initial']['structure'] = Product.CHILD

    def set_initial_attribute_values(self, product_class, kwargs):
        """
        Update the kwargs['initial'] value to have the initial values based on
        the product instance's attributes
        """
        instance = kwargs.get('instance')
        if instance is None:
            return
        for attribute in product_class.attributes.all():
            try:
                value = instance.attribute_values.get(
                    attribute=attribute).value
            except exceptions.ObjectDoesNotExist:
                pass
            else:
                kwargs['initial']['attr_%s' % attribute.code] = value

    def add_attribute_fields(self, product_class, is_parent=False):
        """
        For each attribute specified by the product class, this method
        dynamically adds form fields to the product form.
        """
        for attribute in product_class.attributes.all():
            field = self.get_attribute_field(attribute)
            if field:
                self.fields['attr_%s' % attribute.code] = field
                # Attributes are not required for a parent product
                if is_parent:
                    self.fields['attr_%s' % attribute.code].required = False

    def get_attribute_field(self, attribute):
        """
        Gets the correct form field for a given attribute type.
        """
        return self.FIELD_FACTORIES[attribute.type](attribute)

    def delete_non_child_fields(self):
        """
        Deletes any fields not needed for child products. Override this if
        you want to e.g. keep the description field.
        """
        for field_name in ['description', 'is_discountable']:
            if field_name in self.fields:
                del self.fields[field_name]

    def _post_clean(self):
        """
        Set attributes before ModelForm calls the product's clean method
        (which it does in _post_clean), which in turn validates attributes.
        """
        self.instance.attr.initiate_attributes()
        for attribute in self.instance.attr.get_all_attributes():
            field_name = 'attr_%s' % attribute.code
            # An empty text field won't show up in cleaned_data.
            if field_name in self.cleaned_data:
                value = self.cleaned_data[field_name]
                setattr(self.instance.attr, attribute.code, value)
        super()._post_clean()


class StockAlertSearchForm(forms.Form):
    status = forms.CharField(label=_('Status'))


class ProductCategoryForm(forms.ModelForm):

    class Meta:
        model = ProductCategory
        fields = ('category', )


class ProductImageForm(forms.ModelForm):

    class Meta:
        model = ProductImage
        fields = ['product', 'original', 'caption', 'display_order']
        # use ImageInput widget to create HTML displaying the
        # actual uploaded image and providing the upload dialog
        # when clicking on the actual image.
        widgets = {
            'original': ImageInput(),
            'display_order': forms.HiddenInput(),
        }

    def __init__(self, data=None, *args, **kwargs):
        self.prefix = kwargs.get('prefix', None)
        instance = kwargs.get('instance', None)
        if not instance:
            initial = {'display_order': self.get_display_order()}
            initial.update(kwargs.get('initial', {}))
            kwargs['initial'] = initial
        super().__init__(data, *args, **kwargs)

    def get_display_order(self):
        return int(self.prefix.split('-').pop())


class ProductRecommendationForm(forms.ModelForm):

    class Meta:
        model = ProductRecommendation
        fields = ['primary', 'recommendation', 'ranking']
        widgets = {
            'recommendation': ProductSelect,
        }


class ProductClassForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        remote_field = self._meta.model._meta.get_field('options').remote_field
        self.fields["options"].widget = RelatedMultipleFieldWidgetWrapper(
            self.fields["options"].widget, remote_field)

    class Meta:
        model = ProductClass
        fields = ['name', 'requires_shipping', 'track_stock', 'options']


class ProductAttributesForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # because we'll allow submission of the form with blank
        # codes so that we can generate them.
        self.fields["code"].required = False

        self.fields["option_group"].help_text = _("Select an option group")

        remote_field = self._meta.model._meta.get_field('option_group').remote_field
        self.fields["option_group"].widget = RelatedFieldWidgetWrapper(
            self.fields["option_group"].widget, remote_field)

    def clean_code(self):
        code = self.cleaned_data.get("code")
        title = self.cleaned_data.get("name")

        if not code and title:
            code = slugify(title)

        return code

    class Meta:
        model = ProductAttribute
        fields = ["name", "code", "type", "option_group", "required"]


class AttributeOptionGroupForm(forms.ModelForm):

    class Meta:
        model = AttributeOptionGroup
        fields = ['name']


class AttributeOptionForm(forms.ModelForm):

    class Meta:
        model = AttributeOption
        fields = ['option']


class OptionForm(forms.ModelForm):

    class Meta:
        model = Option
        fields = ['name', 'type']
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.strategy:0
==oscar.apps.partner.strategy:0
from collections import namedtuple
from decimal import Decimal as D

from oscar.core.loading import get_class

Unavailable = get_class('partner.availability', 'Unavailable')
Available = get_class('partner.availability', 'Available')
StockRequiredAvailability = get_class('partner.availability', 'StockRequired')
UnavailablePrice = get_class('partner.prices', 'Unavailable')
FixedPrice = get_class('partner.prices', 'FixedPrice')
TaxInclusiveFixedPrice = get_class('partner.prices', 'TaxInclusiveFixedPrice')

# A container for policies
PurchaseInfo = namedtuple(
    'PurchaseInfo', ['price', 'availability', 'stockrecord'])


class Selector(object):
    """
    Responsible for returning the appropriate strategy class for a given
    user/session.

    This can be called in three ways:

    #) Passing a request and user. This is for determining
       prices/availability for a normal user browsing the site.

    #) Passing just the user. This is for offline processes that don't
       have a request instance but do know which user to determine prices for.

    #) Passing nothing. This is for offline processes that don't
       correspond to a specific user, e.g., determining a price to store in
       a search index.

    """

    def strategy(self, request=None, user=None, **kwargs):
        """
        Return an instantiated strategy instance
        """
        # Default to the backwards-compatible strategy of picking the first
        # stockrecord but charging zero tax.
        return Default(request)


class Base(object):
    """
    The base strategy class

    Given a product, strategies are responsible for returning a
    ``PurchaseInfo`` instance which contains:

    - The appropriate stockrecord for this customer
    - A pricing policy instance
    - An availability policy instance
    """

    def __init__(self, request=None):
        self.request = request
        self.user = None
        if request and request.user.is_authenticated:
            self.user = request.user

    def fetch_for_product(self, product, stockrecord=None):
        """
        Given a product, return a ``PurchaseInfo`` instance.

        The ``PurchaseInfo`` class is a named tuple with attributes:

        - ``price``: a pricing policy object.
        - ``availability``: an availability policy object.
        - ``stockrecord``: the stockrecord that is being used

        If a stockrecord is passed, return the appropriate ``PurchaseInfo``
        instance for that product and stockrecord is returned.
        """
        raise NotImplementedError(
            "A strategy class must define a fetch_for_product method "
            "for returning the availability and pricing "
            "information."
        )

    def fetch_for_parent(self, product):
        """
        Given a parent product, fetch a ``StockInfo`` instance
        """
        raise NotImplementedError(
            "A strategy class must define a fetch_for_parent method "
            "for returning the availability and pricing "
            "information."
        )

    def fetch_for_line(self, line, stockrecord=None):
        """
        Given a basket line instance, fetch a ``PurchaseInfo`` instance.

        This method is provided to allow purchase info to be determined using a
        basket line's attributes.  For instance, "bundle" products often use
        basket line attributes to store SKUs of contained products.  For such
        products, we need to look at the availability of each contained product
        to determine overall availability.
        """
        # Default to ignoring any basket line options as we don't know what to
        # do with them within Oscar - that's up to your project to implement.
        return self.fetch_for_product(line.product)


class Structured(Base):
    """
    A strategy class which provides separate, overridable methods for
    determining the 3 things that a ``PurchaseInfo`` instance requires:

    #) A stockrecord
    #) A pricing policy
    #) An availability policy
    """

    def fetch_for_product(self, product, stockrecord=None):
        """
        Return the appropriate ``PurchaseInfo`` instance.

        This method is not intended to be overridden.
        """
        if stockrecord is None:
            stockrecord = self.select_stockrecord(product)
        return PurchaseInfo(
            price=self.pricing_policy(product, stockrecord),
            availability=self.availability_policy(product, stockrecord),
            stockrecord=stockrecord)

    def fetch_for_parent(self, product):
        # Select children and associated stockrecords
        children_stock = self.select_children_stockrecords(product)
        return PurchaseInfo(
            price=self.parent_pricing_policy(product, children_stock),
            availability=self.parent_availability_policy(
                product, children_stock),
            stockrecord=None)

    def select_stockrecord(self, product):
        """
        Select the appropriate stockrecord
        """
        raise NotImplementedError(
            "A structured strategy class must define a "
            "'select_stockrecord' method")

    def select_children_stockrecords(self, product):
        """
        Select appropriate stock record for all children of a product
        """
        records = []
        for child in product.children.all():
            # Use tuples of (child product, stockrecord)
            records.append((child, self.select_stockrecord(child)))
        return records

    def pricing_policy(self, product, stockrecord):
        """
        Return the appropriate pricing policy
        """
        raise NotImplementedError(
            "A structured strategy class must define a "
            "'pricing_policy' method")

    def parent_pricing_policy(self, product, children_stock):
        raise NotImplementedError(
            "A structured strategy class must define a "
            "'parent_pricing_policy' method")

    def availability_policy(self, product, stockrecord):
        """
        Return the appropriate availability policy
        """
        raise NotImplementedError(
            "A structured strategy class must define a "
            "'availability_policy' method")

    def parent_availability_policy(self, product, children_stock):
        raise NotImplementedError(
            "A structured strategy class must define a "
            "'parent_availability_policy' method")


# Mixins - these can be used to construct the appropriate strategy class


class UseFirstStockRecord(object):
    """
    Stockrecord selection mixin for use with the ``Structured`` base strategy.
    This mixin picks the first (normally only) stockrecord to fulfil a product.

    This is backwards compatible with Oscar<0.6 where only one stockrecord per
    product was permitted.
    """

    def select_stockrecord(self, product):
        try:
            return product.stockrecords.all()[0]
        except IndexError:
            return None


class StockRequired(object):
    """
    Availability policy mixin for use with the ``Structured`` base strategy.
    This mixin ensures that a product can only be bought if it has stock
    available (if stock is being tracked).
    """

    def availability_policy(self, product, stockrecord):
        if not stockrecord:
            return Unavailable()
        if not product.get_product_class().track_stock:
            return Available()
        else:
            return StockRequiredAvailability(
                stockrecord.net_stock_level)

    def parent_availability_policy(self, product, children_stock):
        # A parent product is available if one of its children is
        for child, stockrecord in children_stock:
            policy = self.availability_policy(product, stockrecord)
            if policy.is_available_to_buy:
                return Available()
        return Unavailable()


class NoTax(object):
    """
    Pricing policy mixin for use with the ``Structured`` base strategy.
    This mixin specifies zero tax and uses the ``price_excl_tax`` from the
    stockrecord.
    """

    def pricing_policy(self, product, stockrecord):
        # Check stockrecord has the appropriate data
        if not stockrecord or stockrecord.price_excl_tax is None:
            return UnavailablePrice()
        return FixedPrice(
            currency=stockrecord.price_currency,
            excl_tax=stockrecord.price_excl_tax,
            tax=D('0.00'))

    def parent_pricing_policy(self, product, children_stock):
        stockrecords = [x[1] for x in children_stock if x[1] is not None]
        if not stockrecords:
            return UnavailablePrice()
        # We take price from first record
        stockrecord = stockrecords[0]
        return FixedPrice(
            currency=stockrecord.price_currency,
            excl_tax=stockrecord.price_excl_tax,
            tax=D('0.00'))


class FixedRateTax(object):
    """
    Pricing policy mixin for use with the ``Structured`` base strategy.  This
    mixin applies a fixed rate tax to the base price from the product's
    stockrecord.  The price_incl_tax is quantized to two decimal places.
    Rounding behaviour is Decimal's default
    """
    rate = D('0')  # Subclass and specify the correct rate
    exponent = D('0.01')  # Default to two decimal places

    def pricing_policy(self, product, stockrecord):
        if not stockrecord or stockrecord.price_excl_tax is None:
            return UnavailablePrice()
        rate = self.get_rate(product, stockrecord)
        exponent = self.get_exponent(stockrecord)
        tax = (stockrecord.price_excl_tax * rate).quantize(exponent)
        return TaxInclusiveFixedPrice(
            currency=stockrecord.price_currency,
            excl_tax=stockrecord.price_excl_tax,
            tax=tax)

    def parent_pricing_policy(self, product, children_stock):
        stockrecords = [x[1] for x in children_stock if x[1] is not None]
        if not stockrecords:
            return UnavailablePrice()

        # We take price from first record
        stockrecord = stockrecords[0]
        rate = self.get_rate(product, stockrecord)
        exponent = self.get_exponent(stockrecord)
        tax = (stockrecord.price_excl_tax * rate).quantize(exponent)

        return FixedPrice(
            currency=stockrecord.price_currency,
            excl_tax=stockrecord.price_excl_tax,
            tax=tax)

    def get_rate(self, product, stockrecord):
        """
        This method serves as hook to be able to plug in support for varying tax rates
        based on the product.

        TODO: Needs tests.
        """
        return self.rate

    def get_exponent(self, stockrecord):
        """
        This method serves as hook to be able to plug in support for a varying exponent
        based on the currency.

        TODO: Needs tests.
        """
        return self.exponent


class DeferredTax(object):
    """
    Pricing policy mixin for use with the ``Structured`` base strategy.
    This mixin does not specify the product tax and is suitable to territories
    where tax isn't known until late in the checkout process.
    """

    def pricing_policy(self, product, stockrecord):
        if not stockrecord or stockrecord.price_excl_tax is None:
            return UnavailablePrice()
        return FixedPrice(
            currency=stockrecord.price_currency,
            excl_tax=stockrecord.price_excl_tax)

    def parent_pricing_policy(self, product, children_stock):
        stockrecords = [x[1] for x in children_stock if x[1] is not None]
        if not stockrecords:
            return UnavailablePrice()

        # We take price from first record
        stockrecord = stockrecords[0]

        return FixedPrice(
            currency=stockrecord.price_currency,
            excl_tax=stockrecord.price_excl_tax)


# Example strategy composed of above mixins.  For real projects, it's likely
# you'll want to use a different pricing mixin as you'll probably want to
# charge tax!


class Default(UseFirstStockRecord, StockRequired, NoTax, Structured):
    """
    Default stock/price strategy that uses the first found stockrecord for a
    product, ensures that stock is available (unless the product class
    indicates that we don't need to track stock) and charges zero tax.
    """


class UK(UseFirstStockRecord, StockRequired, FixedRateTax, Structured):
    """
    Sample strategy for the UK that:

    - uses the first stockrecord for each product (effectively assuming
        there is only one).
    - requires that a product has stock available to be bought
    - applies a fixed rate of tax on all products

    This is just a sample strategy used for internal development.  It is not
    recommended to be used in production, especially as the tax rate is
    hard-coded.
    """
    # Use UK VAT rate (as of December 2013)
    rate = D('0.20')


class US(UseFirstStockRecord, StockRequired, DeferredTax, Structured):
    """
    Sample strategy for the US.

    - uses the first stockrecord for each product (effectively assuming
      there is only one).
    - requires that a product has stock available to be bought
    - doesn't apply a tax to product prices (normally this will be done
      after the shipping address is entered).

    This is just a sample one used for internal development.  It is not
    recommended to be used in production.
    """
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.offers.views:0
==oscar.apps.dashboard.offers.views:0
==oscar.apps.dashboard.offers.views:0
import json

from django.conf import settings
from django.contrib import messages
from django.core import serializers
from django.core.serializers.json import DjangoJSONEncoder
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404
from django.urls import reverse
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from django.views.generic import DeleteView, FormView, ListView

from oscar.core.loading import get_class, get_classes, get_model
from oscar.views import sort_queryset

ConditionalOffer = get_model('offer', 'ConditionalOffer')
Condition = get_model('offer', 'Condition')
Range = get_model('offer', 'Range')
Product = get_model('catalogue', 'Product')
OrderDiscount = get_model('order', 'OrderDiscount')
Benefit = get_model('offer', 'Benefit')
MetaDataForm, ConditionForm, BenefitForm, RestrictionsForm, OfferSearchForm \
    = get_classes('dashboard.offers.forms',
                  ['MetaDataForm', 'ConditionForm', 'BenefitForm',
                   'RestrictionsForm', 'OfferSearchForm'])
OrderDiscountCSVFormatter = get_class(
    'dashboard.offers.reports', 'OrderDiscountCSVFormatter')


class OfferListView(ListView):
    model = ConditionalOffer
    context_object_name = 'offers'
    template_name = 'oscar/dashboard/offers/offer_list.html'
    form_class = OfferSearchForm
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE

    def get_queryset(self):
        qs = self.model._default_manager.exclude(
            offer_type=ConditionalOffer.VOUCHER)
        qs = sort_queryset(qs, self.request,
                           ['name', 'start_datetime', 'end_datetime',
                            'num_applications', 'total_discount'])

        self.description = _("All offers")

        # We track whether the queryset is filtered to determine whether we
        # show the search form 'reset' button.
        self.is_filtered = False
        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return qs

        data = self.form.cleaned_data

        if data['name']:
            qs = qs.filter(name__icontains=data['name'])
            self.description = _("Offers matching '%s'") % data['name']
            self.is_filtered = True
        if data['is_active']:
            self.is_filtered = True
            today = timezone.now()
            qs = qs.filter(start_datetime__lte=today, end_datetime__gte=today)

        return qs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['queryset_description'] = self.description
        ctx['form'] = self.form
        ctx['is_filtered'] = self.is_filtered
        return ctx


class OfferWizardStepView(FormView):
    wizard_name = 'offer_wizard'
    form_class = None
    step_name = None
    update = False
    url_name = None

    # Keep a reference to previous view class to allow checks to be made on
    # whether prior steps have been completed
    previous_view = None

    def dispatch(self, request, *args, **kwargs):
        if self.update:
            self.offer = get_object_or_404(ConditionalOffer, id=kwargs['pk'])
        if not self.is_previous_step_complete(request):
            messages.warning(
                request, _("%s step not complete") % (
                    self.previous_view.step_name.title(),))
            return HttpResponseRedirect(self.get_back_url())
        return super().dispatch(request, *args, **kwargs)

    def is_previous_step_complete(self, request):
        if not self.previous_view:
            return True
        return self.previous_view.is_valid(self, request)

    def _key(self, step_name=None, is_object=False):
        key = step_name if step_name else self.step_name
        if self.update:
            key += str(self.offer.id)
        if is_object:
            key += '_obj'
        return key

    def _store_form_kwargs(self, form):
        session_data = self.request.session.setdefault(self.wizard_name, {})

        # Adjust kwargs to avoid trying to save the range instance
        form_data = form.cleaned_data.copy()
        range = form_data.get('range', None)
        if range is not None:
            form_data['range'] = range.id
        form_kwargs = {'data': form_data}
        json_data = json.dumps(form_kwargs, cls=DjangoJSONEncoder)

        session_data[self._key()] = json_data
        self.request.session.save()

    def _fetch_form_kwargs(self, step_name=None):
        if not step_name:
            step_name = self.step_name
        session_data = self.request.session.setdefault(self.wizard_name, {})
        json_data = session_data.get(self._key(step_name), None)
        if json_data:
            return json.loads(json_data)

        return {}

    def _store_object(self, form):
        session_data = self.request.session.setdefault(self.wizard_name, {})

        # We don't store the object instance as that is not JSON serialisable.
        # Instead, we save an alternative form
        instance = form.save(commit=False)
        json_qs = serializers.serialize('json', [instance])

        session_data[self._key(is_object=True)] = json_qs
        self.request.session.save()

    def _fetch_object(self, step_name, request=None):
        if request is None:
            request = self.request
        session_data = request.session.setdefault(self.wizard_name, {})
        json_qs = session_data.get(self._key(step_name, is_object=True), None)
        if json_qs:
            # Recreate model instance from passed data
            deserialised_obj = list(serializers.deserialize('json', json_qs))
            return deserialised_obj[0].object

    def _fetch_session_offer(self):
        """
        Return the offer instance loaded with the data stored in the
        session.  When updating an offer, the updated fields are used with the
        existing offer data.
        """
        offer = self._fetch_object('metadata')
        if offer is None and self.update:
            offer = self.offer
        return offer

    def _flush_session(self):
        self.request.session[self.wizard_name] = {}
        self.request.session.save()

    def get_form_kwargs(self, *args, **kwargs):
        form_kwargs = {}
        if self.update:
            form_kwargs['instance'] = self.get_instance()
        session_kwargs = self._fetch_form_kwargs()
        form_kwargs.update(session_kwargs)
        parent_kwargs = super().get_form_kwargs(
            *args, **kwargs)
        form_kwargs.update(parent_kwargs)
        return form_kwargs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        if self.update:
            ctx['offer'] = self.offer
        ctx['session_offer'] = self._fetch_session_offer()
        ctx['title'] = self.get_title()
        return ctx

    def get_back_url(self):
        if not self.previous_view:
            return None
        if self.update:
            return reverse(self.previous_view.url_name,
                           kwargs={'pk': self.kwargs['pk']})
        return reverse(self.previous_view.url_name)

    def get_title(self):
        return self.step_name.title()

    def form_valid(self, form):
        self._store_form_kwargs(form)
        self._store_object(form)

        if self.update and 'save' in form.data:
            # Save changes to this offer when updating and pressed save button
            return self.save_offer(self.offer)
        else:
            # Proceed to next page
            return super().form_valid(form)

    def save_offer(self, offer):
        # We update the offer with the name/description from step 1
        session_offer = self._fetch_session_offer()
        offer.name = session_offer.name
        offer.description = session_offer.description

        # Save the related models, then save the offer.
        # Note than you can save already on the first page of the wizard,
        # so le'ts check if the benefit and condition exist
        benefit = self._fetch_object('benefit')
        if benefit:
            benefit.save()
            offer.benefit = benefit

        condition = self._fetch_object('condition')
        if condition:
            condition.save()
            offer.condition = condition

        offer.save()

        self._flush_session()

        if self.update:
            msg = _("Offer '%s' updated") % offer.name
        else:
            msg = _("Offer '%s' created!") % offer.name
        messages.success(self.request, msg)

        return HttpResponseRedirect(reverse(
            'dashboard:offer-detail', kwargs={'pk': offer.pk}))

    def get_success_url(self):
        if self.update:
            return reverse(self.success_url_name,
                           kwargs={'pk': self.kwargs['pk']})
        return reverse(self.success_url_name)

    @classmethod
    def is_valid(cls, current_view, request):
        if current_view.update:
            return True
        return current_view._fetch_object(cls.step_name, request) is not None


class OfferMetaDataView(OfferWizardStepView):
    step_name = 'metadata'
    form_class = MetaDataForm
    template_name = 'oscar/dashboard/offers/metadata_form.html'
    url_name = 'dashboard:offer-metadata'
    success_url_name = 'dashboard:offer-benefit'

    def get_instance(self):
        return self.offer

    def get_title(self):
        return _("Name and description")


class OfferBenefitView(OfferWizardStepView):
    step_name = 'benefit'
    form_class = BenefitForm
    template_name = 'oscar/dashboard/offers/benefit_form.html'
    url_name = 'dashboard:offer-benefit'
    success_url_name = 'dashboard:offer-condition'
    previous_view = OfferMetaDataView

    def get_instance(self):
        return self.offer.benefit

    def get_title(self):
        # This is referred to as the 'incentive' within the dashboard.
        return _("Incentive")


class OfferConditionView(OfferWizardStepView):
    step_name = 'condition'
    form_class = ConditionForm
    template_name = 'oscar/dashboard/offers/condition_form.html'
    url_name = 'dashboard:offer-condition'
    success_url_name = 'dashboard:offer-restrictions'
    previous_view = OfferBenefitView

    def get_instance(self):
        return self.offer.condition


class OfferRestrictionsView(OfferWizardStepView):
    step_name = 'restrictions'
    form_class = RestrictionsForm
    template_name = 'oscar/dashboard/offers/restrictions_form.html'
    previous_view = OfferConditionView
    url_name = 'dashboard:offer-restrictions'

    def form_valid(self, form):
        offer = form.save(commit=False)
        return self.save_offer(offer)

    def get_instance(self):
        return self.offer

    def get_title(self):
        return _("Restrictions")


class OfferDeleteView(DeleteView):
    model = ConditionalOffer
    template_name = 'oscar/dashboard/offers/offer_delete.html'
    context_object_name = 'offer'

    def get_success_url(self):
        messages.success(self.request, _("Offer deleted!"))
        return reverse('dashboard:offer-list')


class OfferDetailView(ListView):
    # Slightly odd, but we treat the offer detail view as a list view so the
    # order discounts can be browsed.
    model = OrderDiscount
    template_name = 'oscar/dashboard/offers/offer_detail.html'
    context_object_name = 'order_discounts'
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE

    def dispatch(self, request, *args, **kwargs):
        self.offer = get_object_or_404(ConditionalOffer, pk=kwargs['pk'])
        return super().dispatch(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        if 'suspend' in request.POST:
            return self.suspend()
        elif 'unsuspend' in request.POST:
            return self.unsuspend()

    def suspend(self):
        if self.offer.is_suspended:
            messages.error(self.request, _("Offer is already suspended"))
        else:
            self.offer.suspend()
            messages.success(self.request, _("Offer suspended"))
        return HttpResponseRedirect(
            reverse('dashboard:offer-detail', kwargs={'pk': self.offer.pk}))

    def unsuspend(self):
        if not self.offer.is_suspended:
            messages.error(
                self.request,
                _("Offer cannot be reinstated as it is not currently "
                  "suspended"))
        else:
            self.offer.unsuspend()
            messages.success(self.request, _("Offer reinstated"))
        return HttpResponseRedirect(
            reverse('dashboard:offer-detail', kwargs={'pk': self.offer.pk}))

    def get_queryset(self):
        return self.model.objects.filter(offer_id=self.offer.pk) \
            .select_related('order')

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['offer'] = self.offer
        return ctx

    def render_to_response(self, context):
        if self.request.GET.get('format') == 'csv':
            formatter = OrderDiscountCSVFormatter()
            return formatter.generate_response(context['order_discounts'],
                                               offer=self.offer)
        return super().render_to_response(context)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.mixins:0
==oscar.apps.checkout.mixins:0
import logging

from django.contrib.sites.models import Site
from django.contrib.sites.shortcuts import get_current_site
from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpResponseRedirect
from django.urls import NoReverseMatch, reverse

from oscar.apps.checkout.signals import post_checkout
from oscar.core.loading import get_class, get_model

OrderCreator = get_class('order.utils', 'OrderCreator')
Dispatcher = get_class('customer.utils', 'Dispatcher')
CheckoutSessionMixin = get_class('checkout.session', 'CheckoutSessionMixin')
BillingAddress = get_model('order', 'BillingAddress')
ShippingAddress = get_model('order', 'ShippingAddress')
OrderNumberGenerator = get_class('order.utils', 'OrderNumberGenerator')
PaymentEventType = get_model('order', 'PaymentEventType')
PaymentEvent = get_model('order', 'PaymentEvent')
PaymentEventQuantity = get_model('order', 'PaymentEventQuantity')
UserAddress = get_model('address', 'UserAddress')
Basket = get_model('basket', 'Basket')
CommunicationEventType = get_model('customer', 'CommunicationEventType')

# Standard logger for checkout events
logger = logging.getLogger('oscar.checkout')


class OrderPlacementMixin(CheckoutSessionMixin):
    """
    Mixin which provides functionality for placing orders.

    Any view class which needs to place an order should use this mixin.
    """
    # Any payment sources should be added to this list as part of the
    # handle_payment method.  If the order is placed successfully, then
    # they will be persisted. We need to have the order instance before the
    # payment sources can be saved.
    _payment_sources = None

    # Any payment events should be added to this list as part of the
    # handle_payment method.
    _payment_events = None

    # Default code for the email to send after successful checkout
    communication_type_code = 'ORDER_PLACED'

    view_signal = post_checkout

    # Payment handling methods
    # ------------------------

    def handle_payment(self, order_number, total, **kwargs):
        """
        Handle any payment processing and record payment sources and events.

        This method is designed to be overridden within your project.  The
        default is to do nothing as payment is domain-specific.

        This method is responsible for handling payment and recording the
        payment sources (using the add_payment_source method) and payment
        events (using add_payment_event) so they can be
        linked to the order when it is saved later on.
        """
        pass

    def add_payment_source(self, source):
        """
        Record a payment source for this order
        """
        if self._payment_sources is None:
            self._payment_sources = []
        self._payment_sources.append(source)

    def add_payment_event(self, event_type_name, amount, reference=''):
        """
        Record a payment event for creation once the order is placed
        """
        event_type, __ = PaymentEventType.objects.get_or_create(
            name=event_type_name)
        # We keep a local cache of (unsaved) payment events
        if self._payment_events is None:
            self._payment_events = []
        event = PaymentEvent(
            event_type=event_type, amount=amount,
            reference=reference)
        self._payment_events.append(event)

    # Placing order methods
    # ---------------------

    def generate_order_number(self, basket):
        """
        Return a new order number
        """
        return OrderNumberGenerator().order_number(basket)

    def handle_order_placement(self, order_number, user, basket,
                               shipping_address, shipping_method,
                               shipping_charge, billing_address, order_total,
                               **kwargs):
        """
        Write out the order models and return the appropriate HTTP response

        We deliberately pass the basket in here as the one tied to the request
        isn't necessarily the correct one to use in placing the order.  This
        can happen when a basket gets frozen.
        """
        order = self.place_order(
            order_number=order_number, user=user, basket=basket,
            shipping_address=shipping_address, shipping_method=shipping_method,
            shipping_charge=shipping_charge, order_total=order_total,
            billing_address=billing_address, **kwargs)
        basket.submit()
        return self.handle_successful_order(order)

    def place_order(self, order_number, user, basket, shipping_address,
                    shipping_method, shipping_charge, order_total,
                    billing_address=None, **kwargs):
        """
        Writes the order out to the DB including the payment models
        """
        # Create saved shipping address instance from passed in unsaved
        # instance
        shipping_address = self.create_shipping_address(user, shipping_address)

        # We pass the kwargs as they often include the billing address form
        # which will be needed to save a billing address.
        billing_address = self.create_billing_address(
            user, billing_address, shipping_address, **kwargs)

        if 'status' not in kwargs:
            status = self.get_initial_order_status(basket)
        else:
            status = kwargs.pop('status')

        if 'request' not in kwargs:
            request = getattr(self, 'request', None)
        else:
            request = kwargs.pop('request')

        order = OrderCreator().place_order(
            user=user,
            order_number=order_number,
            basket=basket,
            shipping_address=shipping_address,
            shipping_method=shipping_method,
            shipping_charge=shipping_charge,
            total=order_total,
            billing_address=billing_address,
            status=status,
            request=request,
            **kwargs)
        self.save_payment_details(order)
        return order

    def create_shipping_address(self, user, shipping_address):
        """
        Create and return the shipping address for the current order.

        Compared to self.get_shipping_address(), ShippingAddress is saved and
        makes sure that appropriate UserAddress exists.
        """
        # For an order that only contains items that don't require shipping we
        # won't have a shipping address, so we have to check for it.
        if not shipping_address:
            return None
        shipping_address.save()
        if user.is_authenticated:
            self.update_address_book(user, shipping_address)
        return shipping_address

    def update_address_book(self, user, addr):
        """
        Update the user's address book based on the new shipping address
        """
        try:
            user_addr = user.addresses.get(
                hash=addr.generate_hash())
        except ObjectDoesNotExist:
            # Create a new user address
            user_addr = UserAddress(user=user)
            addr.populate_alternative_model(user_addr)
        if isinstance(addr, ShippingAddress):
            user_addr.num_orders_as_shipping_address += 1
        if isinstance(addr, BillingAddress):
            user_addr.num_orders_as_billing_address += 1
        user_addr.save()

    def create_billing_address(self, user, billing_address=None,
                               shipping_address=None, **kwargs):
        """
        Saves any relevant billing data (e.g. a billing address).
        """
        if not billing_address:
            return None
        billing_address.save()
        if user.is_authenticated:
            self.update_address_book(user, billing_address)
        return billing_address

    def save_payment_details(self, order):
        """
        Saves all payment-related details. This could include a billing
        address, payment sources and any order payment events.
        """
        self.save_payment_events(order)
        self.save_payment_sources(order)

    def save_payment_events(self, order):
        """
        Saves any relevant payment events for this order
        """
        if not self._payment_events:
            return
        for event in self._payment_events:
            event.order = order
            event.save()
            for line in order.lines.all():
                PaymentEventQuantity.objects.create(
                    event=event, line=line, quantity=line.quantity)

    def save_payment_sources(self, order):
        """
        Saves any payment sources used in this order.

        When the payment sources are created, the order model does not exist
        and so they need to have it set before saving.
        """
        if not self._payment_sources:
            return
        for source in self._payment_sources:
            source.order = order
            source.save()

    def get_initial_order_status(self, basket):
        return None

    # Post-order methods
    # ------------------

    def handle_successful_order(self, order):
        """
        Handle the various steps required after an order has been successfully
        placed.

        Override this view if you want to perform custom actions when an
        order is submitted.
        """
        # Send confirmation message (normally an email)
        self.send_confirmation_message(order, self.communication_type_code)

        # Flush all session data
        self.checkout_session.flush()

        # Save order id in session so thank-you page can load it
        self.request.session['checkout_order_id'] = order.id

        response = HttpResponseRedirect(self.get_success_url())
        self.send_signal(self.request, response, order)
        return response

    def send_signal(self, request, response, order):
        self.view_signal.send(
            sender=self, order=order, user=request.user,
            request=request, response=response)

    def get_success_url(self):
        return reverse('checkout:thank-you')

    def send_confirmation_message(self, order, code, **kwargs):
        try:
            ctx = self.get_message_context(order, code)
        except TypeError:
            # It seems like the get_message_context method was overridden and
            # it does not support the code argument yet
            logger.warning(
                'The signature of the get_message_context method has changed, '
                'please update it in your codebase'
            )
            ctx = self.get_message_context(order)

        try:
            event_type = CommunicationEventType.objects.get(code=code)
        except CommunicationEventType.DoesNotExist:
            # No event-type in database, attempt to find templates for this
            # type and render them immediately to get the messages.  Since we
            # have not CommunicationEventType to link to, we can't create a
            # CommunicationEvent instance.
            messages = CommunicationEventType.objects.get_and_render(code, ctx)
            event_type = None
        else:
            messages = event_type.get_messages(ctx)

        if messages and messages['body']:
            logger.info("Order #%s - sending %s messages", order.number, code)
            dispatcher = Dispatcher(logger)
            dispatcher.dispatch_order_messages(order, messages,
                                               event_type, **kwargs)
        else:
            logger.warning("Order #%s - no %s communication event type",
                           order.number, code)

    def get_message_context(self, order, code=None):
        ctx = {
            'user': self.request.user,
            'order': order,
            'site': get_current_site(self.request),
            'lines': order.lines.all()
        }

        # Attempt to add the order status URL to the email template ctx.
        try:
            if self.request.user.is_authenticated:
                path = reverse('customer:order',
                               kwargs={'order_number': order.number})
            else:
                path = reverse('customer:anon-order',
                               kwargs={'order_number': order.number,
                                       'hash': order.verification_hash()})
        except NoReverseMatch:
            # We don't care that much if we can't resolve the URL
            pass
        else:
            site = Site.objects.get_current()
            ctx['status_url'] = 'http://%s%s' % (site.domain, path)
        return ctx

    # Basket helpers
    # --------------

    def get_submitted_basket(self):
        basket_id = self.checkout_session.get_submitted_basket_id()
        return Basket._default_manager.get(pk=basket_id)

    def freeze_basket(self, basket):
        """
        Freeze the basket so it can no longer be modified
        """
        # We freeze the basket to prevent it being modified once the payment
        # process has started.  If your payment fails, then the basket will
        # need to be "unfrozen".  We also store the basket ID in the session
        # so the it can be retrieved by multistage checkout processes.
        basket.freeze()

    def restore_frozen_basket(self):
        """
        Restores a frozen basket as the sole OPEN basket.  Note that this also
        merges in any new products that have been added to a basket that has
        been created while payment.
        """
        try:
            fzn_basket = self.get_submitted_basket()
        except Basket.DoesNotExist:
            # Strange place.  The previous basket stored in the session does
            # not exist.
            pass
        else:
            fzn_basket.thaw()
            if self.request.basket.id != fzn_basket.id:
                fzn_basket.merge(self.request.basket)
                # Use same strategy as current request basket
                fzn_basket.strategy = self.request.basket.strategy
                self.request.basket = fzn_basket
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.benefits:0
==oscar.apps.offer.benefits:0
from decimal import Decimal as D

from django.conf import settings
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_classes, get_model
from oscar.templatetags.currency_filters import currency

Benefit = get_model('offer', 'Benefit')
BasketDiscount, SHIPPING_DISCOUNT, ZERO_DISCOUNT = get_classes('offer.results', [
    'BasketDiscount', 'SHIPPING_DISCOUNT', 'ZERO_DISCOUNT'])
CoverageCondition, ValueCondition = get_classes('offer.conditions', ['CoverageCondition', 'ValueCondition'])
range_anchor = get_class('offer.utils', 'range_anchor')

__all__ = [
    'PercentageDiscountBenefit', 'AbsoluteDiscountBenefit', 'FixedPriceBenefit',
    'ShippingBenefit', 'MultibuyDiscountBenefit',
    'ShippingAbsoluteDiscountBenefit', 'ShippingFixedPriceBenefit',
    'ShippingPercentageDiscountBenefit',
]


def apply_discount(line, discount, quantity, offer=None, incl_tax=None):
    """
    Apply a given discount to the passed basket
    """
    # use OSCAR_OFFERS_INCL_TAX setting if incl_tax is left unspecified.
    incl_tax = incl_tax if incl_tax is not None else settings.OSCAR_OFFERS_INCL_TAX
    line.discount(discount, quantity, incl_tax=incl_tax, offer=offer)


class PercentageDiscountBenefit(Benefit):
    """
    An offer benefit that gives a percentage discount
    """
    _description = _("%(value)s%% discount on %(range)s")

    @property
    def name(self):
        return self._description % {
            'value': self.value,
            'range': self.range.name}

    @property
    def description(self):
        return self._description % {
            'value': self.value,
            'range': range_anchor(self.range)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Percentage discount benefit")
        verbose_name_plural = _("Percentage discount benefits")

    def apply(self, basket, condition, offer, discount_percent=None,
              max_total_discount=None, **kwargs):
        if discount_percent is None:
            discount_percent = self.value

        discount_amount_available = max_total_discount

        line_tuples = self.get_applicable_lines(offer, basket)
        discount_percent = min(discount_percent, D('100.0'))
        discount = D('0.00')
        affected_items = 0
        max_affected_items = self._effective_max_affected_items()
        affected_lines = []
        for price, line in line_tuples:
            if affected_items >= max_affected_items:
                break
            if discount_amount_available == 0:
                break

            quantity_affected = min(
                line.quantity_without_offer_discount(offer),
                max_affected_items - affected_items
            )
            if quantity_affected <= 0:
                break

            line_discount = self.round(discount_percent / D('100.0') * price
                                       * int(quantity_affected))

            if discount_amount_available is not None:
                line_discount = min(line_discount, discount_amount_available)
                discount_amount_available -= line_discount

            apply_discount(line, line_discount, quantity_affected, offer)

            affected_lines.append((line, line_discount, quantity_affected))
            affected_items += quantity_affected
            discount += line_discount

        return BasketDiscount(discount)


class AbsoluteDiscountBenefit(Benefit):
    """
    An offer benefit that gives an absolute discount
    """
    _description = _("%(value)s discount on %(range)s")

    @property
    def name(self):
        return self._description % {
            'value': currency(self.value),
            'range': self.range.name.lower()}

    @property
    def description(self):
        return self._description % {
            'value': currency(self.value),
            'range': range_anchor(self.range)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Absolute discount benefit")
        verbose_name_plural = _("Absolute discount benefits")

    def apply(self, basket, condition, offer, discount_amount=None,
              max_total_discount=None, **kwargs):
        if discount_amount is None:
            discount_amount = self.value

        # Fetch basket lines that are in the range and available to be used in
        # an offer.
        line_tuples = self.get_applicable_lines(offer, basket)

        # Determine which lines can have the discount applied to them
        max_affected_items = self._effective_max_affected_items()
        num_affected_items = 0
        affected_items_total = D('0.00')
        lines_to_discount = []
        for price, line in line_tuples:
            if num_affected_items >= max_affected_items:
                break
            qty = min(
                line.quantity_without_offer_discount(offer),
                max_affected_items - num_affected_items
            )
            lines_to_discount.append((line, price, qty))
            num_affected_items += qty
            affected_items_total += qty * price

        # Ensure we don't try to apply a discount larger than the total of the
        # matching items.
        discount = min(discount_amount, affected_items_total)
        if max_total_discount is not None:
            discount = min(discount, max_total_discount)

        if discount == 0:
            return ZERO_DISCOUNT

        # XXX: spreading the discount is a policy decision that may not apply

        # Apply discount equally amongst them
        affected_lines = []
        applied_discount = D('0.00')
        last_line_idx = len(lines_to_discount) - 1
        for i, (line, price, qty) in enumerate(lines_to_discount):
            if i == last_line_idx:
                # If last line, then take the delta as the discount to ensure
                # the total discount is correct and doesn't mismatch due to
                # rounding.
                line_discount = discount - applied_discount
            else:
                # Calculate a weighted discount for the line
                line_discount = self.round(
                    ((price * qty) / affected_items_total) * discount)
            apply_discount(line, line_discount, qty, offer)
            affected_lines.append((line, line_discount, qty))
            applied_discount += line_discount

        return BasketDiscount(discount)


class FixedPriceBenefit(Benefit):
    """
    An offer benefit that gives the items in the condition for a
    fixed price.  This is useful for "bundle" offers.

    Note that we ignore the benefit range here and only give a fixed price
    for the products in the condition range.  The condition cannot be a value
    condition.

    We also ignore the max_affected_items setting.
    """
    _description = _("The products that meet the condition are sold "
                     "for %(amount)s")

    @property
    def name(self):
        return self._description % {
            'amount': currency(self.value)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Fixed price benefit")
        verbose_name_plural = _("Fixed price benefits")

    def apply(self, basket, condition, offer, **kwargs):  # noqa (too complex (10))
        if isinstance(condition, ValueCondition):
            return ZERO_DISCOUNT

        # Fetch basket lines that are in the range and available to be used in
        # an offer.
        line_tuples = self.get_applicable_lines(offer, basket,
                                                range=condition.range)
        if not line_tuples:
            return ZERO_DISCOUNT

        # Determine the lines to consume
        num_permitted = int(condition.value)
        num_affected = 0
        value_affected = D('0.00')
        covered_lines = []
        for price, line in line_tuples:
            if isinstance(condition, CoverageCondition):
                quantity_affected = 1
            else:
                quantity_affected = min(
                    line.quantity_without_offer_discount(offer),
                    num_permitted - num_affected)
            num_affected += quantity_affected
            value_affected += quantity_affected * price
            covered_lines.append((price, line, quantity_affected))
            if num_affected >= num_permitted:
                break
        discount = max(value_affected - self.value, D('0.00'))
        if not discount:
            return ZERO_DISCOUNT

        # Apply discount to the affected lines
        discount_applied = D('0.00')
        last_line = covered_lines[-1][1]
        for price, line, quantity in covered_lines:
            if line == last_line:
                # If last line, we just take the difference to ensure that
                # rounding doesn't lead to an off-by-one error
                line_discount = discount - discount_applied
            else:
                line_discount = self.round(
                    discount * (price * quantity) / value_affected)
            apply_discount(line, line_discount, quantity, offer)
            discount_applied += line_discount
        return BasketDiscount(discount)


class MultibuyDiscountBenefit(Benefit):
    _description = _("Cheapest product from %(range)s is free")

    @property
    def name(self):
        return self._description % {
            'range': self.range.name.lower()}

    @property
    def description(self):
        return self._description % {
            'range': range_anchor(self.range)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Multibuy discount benefit")
        verbose_name_plural = _("Multibuy discount benefits")

    def apply(self, basket, condition, offer, **kwargs):
        line_tuples = self.get_applicable_lines(offer, basket)
        if not line_tuples:
            return ZERO_DISCOUNT

        # Cheapest line gives free product
        discount, line = line_tuples[0]
        apply_discount(line, discount, 1, offer)

        affected_lines = [(line, discount, 1)]
        condition.consume_items(offer, basket, affected_lines)

        return BasketDiscount(discount)


# =================
# Shipping benefits
# =================


class ShippingBenefit(Benefit):

    def apply(self, basket, condition, offer, **kwargs):
        condition.consume_items(offer, basket, affected_lines=())
        return SHIPPING_DISCOUNT

    class Meta:
        app_label = 'offer'
        proxy = True


class ShippingAbsoluteDiscountBenefit(ShippingBenefit):
    _description = _("%(amount)s off shipping cost")

    @property
    def name(self):
        return self._description % {
            'amount': currency(self.value)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Shipping absolute discount benefit")
        verbose_name_plural = _("Shipping absolute discount benefits")

    def shipping_discount(self, charge):
        return min(charge, self.value)


class ShippingFixedPriceBenefit(ShippingBenefit):
    _description = _("Get shipping for %(amount)s")

    @property
    def name(self):
        return self._description % {
            'amount': currency(self.value)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Fixed price shipping benefit")
        verbose_name_plural = _("Fixed price shipping benefits")

    def shipping_discount(self, charge):
        if charge < self.value:
            return D('0.00')
        return charge - self.value


class ShippingPercentageDiscountBenefit(ShippingBenefit):
    _description = _("%(value)s%% off of shipping cost")

    @property
    def name(self):
        return self._description % {
            'value': self.value}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Shipping percentage discount benefit")
        verbose_name_plural = _("Shipping percentage discount benefits")

    def shipping_discount(self, charge):
        discount = charge * self.value / D('100.0')
        return discount.quantize(D('0.01'))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.wishlists.views:1
==oscar.apps.customer.wishlists.views:1
from django.contrib import messages
from django.core.exceptions import ObjectDoesNotExist, PermissionDenied
from django.http import Http404
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.views.generic import (
    CreateView, DeleteView, FormView, ListView, UpdateView, View)

from oscar.core.loading import get_class, get_model
from oscar.core.utils import redirect_to_referrer, safe_referrer

WishList = get_model('wishlists', 'WishList')
Line = get_model('wishlists', 'Line')
Product = get_model('catalogue', 'Product')
WishListForm = get_class('wishlists.forms', 'WishListForm')
LineFormset = get_class('wishlists.formsets', 'LineFormset')
PageTitleMixin = get_class('customer.mixins', 'PageTitleMixin')


class WishListListView(PageTitleMixin, ListView):
    context_object_name = active_tab = "wishlists"
    template_name = 'oscar/customer/wishlists/wishlists_list.html'
    page_title = _('Wish Lists')

    def get_queryset(self):
        """
        Return a list of all the wishlists for the currently
        authenticated user.
        """
        return self.request.user.wishlists.all()


class WishListDetailView(PageTitleMixin, FormView):
    """
    This view acts as a DetailView for a wish list and allows updating the
    quantities of products.

    It is implemented as FormView because it's easier to adapt a FormView to
    display a product then adapt a DetailView to handle form validation.
    """
    template_name = 'oscar/customer/wishlists/wishlists_detail.html'
    active_tab = "wishlists"
    form_class = LineFormset

    def dispatch(self, request, *args, **kwargs):
        self.object = self.get_wishlist_or_404(kwargs['key'], request.user)
        return super().dispatch(request, *args, **kwargs)

    def get_wishlist_or_404(self, key, user):
        wishlist = get_object_or_404(WishList, key=key)
        if wishlist.is_allowed_to_see(user):
            return wishlist
        else:
            raise Http404

    def get_page_title(self):
        return self.object.name

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['instance'] = self.object
        return kwargs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['wishlist'] = self.object
        other_wishlists = self.request.user.wishlists.exclude(
            pk=self.object.pk)
        ctx['other_wishlists'] = other_wishlists
        return ctx

    def form_valid(self, form):
        for subform in form:
            if subform.cleaned_data['quantity'] <= 0:
                subform.instance.delete()
            else:
                subform.save()
        messages.success(self.request, _('Quantities updated.'))
        return redirect('customer:wishlists-detail', key=self.object.key)


class WishListCreateView(PageTitleMixin, CreateView):
    """
    Create a new wishlist

    If a product ID is passed as a kwargs, then this product will be added to
    the wishlist.
    """
    model = WishList
    template_name = 'oscar/customer/wishlists/wishlists_form.html'
    active_tab = "wishlists"
    page_title = _('Create a new wish list')
    form_class = WishListForm
    product = None

    def dispatch(self, request, *args, **kwargs):
        if 'product_pk' in kwargs:
            try:
                self.product = Product.objects.get(pk=kwargs['product_pk'])
            except ObjectDoesNotExist:
                messages.error(
                    request, _("The requested product no longer exists"))
                return redirect('wishlists-create')
        return super().dispatch(
            request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['product'] = self.product
        return ctx

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        wishlist = form.save()
        if self.product:
            wishlist.add(self.product)
            msg = _("Your wishlist has been created and '%(name)s "
                    "has been added") \
                % {'name': self.product.get_title()}
        else:
            msg = _("Your wishlist has been created")
        messages.success(self.request, msg)
        return redirect(wishlist.get_absolute_url())


class WishListCreateWithProductView(View):
    """
    Create a wish list and immediately add a product to it
    """

    def post(self, request, *args, **kwargs):
        product = get_object_or_404(Product, pk=kwargs['product_pk'])
        wishlists = request.user.wishlists.all()
        if len(wishlists) == 0:
            wishlist = request.user.wishlists.create()
        else:
            # This shouldn't really happen but we default to using the first
            # wishlist for a user if one already exists when they make this
            # request.
            wishlist = wishlists[0]
        wishlist.add(product)
        messages.success(
            request, _("%(title)s has been added to your wishlist") % {
                'title': product.get_title()})
        return redirect_to_referrer(request, wishlist.get_absolute_url())


class WishListUpdateView(PageTitleMixin, UpdateView):
    model = WishList
    template_name = 'oscar/customer/wishlists/wishlists_form.html'
    active_tab = "wishlists"
    form_class = WishListForm
    context_object_name = 'wishlist'

    def get_page_title(self):
        return self.object.name

    def get_object(self, queryset=None):
        return get_object_or_404(WishList, owner=self.request.user,
                                 key=self.kwargs['key'])

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def get_success_url(self):
        messages.success(
            self.request, _("Your '%s' wishlist has been updated")
            % self.object.name)
        return reverse('customer:wishlists-list')


class WishListDeleteView(PageTitleMixin, DeleteView):
    model = WishList
    template_name = 'oscar/customer/wishlists/wishlists_delete.html'
    active_tab = "wishlists"

    def get_page_title(self):
        return _('Delete %s') % self.object.name

    def get_object(self, queryset=None):
        return get_object_or_404(WishList, owner=self.request.user,
                                 key=self.kwargs['key'])

    def get_success_url(self):
        messages.success(
            self.request, _("Your '%s' wish list has been deleted")
            % self.object.name)
        return reverse('customer:wishlists-list')


class WishListAddProduct(View):
    """
    Adds a product to a wish list.

    - If the user doesn't already have a wishlist then it will be created for
      them.
    - If the product is already in the wish list, its quantity is increased.
    """

    def dispatch(self, request, *args, **kwargs):
        self.product = get_object_or_404(Product, pk=kwargs['product_pk'])
        self.wishlist = self.get_or_create_wishlist(request, *args, **kwargs)
        return super().dispatch(request)

    def get_or_create_wishlist(self, request, *args, **kwargs):
        if 'key' in kwargs:
            wishlist = get_object_or_404(
                WishList, key=kwargs['key'], owner=request.user)
        else:
            wishlists = request.user.wishlists.all()[:1]
            if not wishlists:
                return request.user.wishlists.create()
            wishlist = wishlists[0]

        if not wishlist.is_allowed_to_edit(request.user):
            raise PermissionDenied
        return wishlist

    def get(self, request, *args, **kwargs):
        # This is nasty as we shouldn't be performing write operations on a GET
        # request.  It's only included as the UI of the product detail page
        # allows a wishlist to be selected from a dropdown.
        return self.add_product()

    def post(self, request, *args, **kwargs):
        return self.add_product()

    def add_product(self):
        self.wishlist.add(self.product)
        msg = _("'%s' was added to your wish list.") % self.product.get_title()
        messages.success(self.request, msg)
        return redirect_to_referrer(
            self.request, self.product.get_absolute_url())


class LineMixin(object):
    """
    Handles fetching both a wish list and a product
    Views using this mixin must be passed two keyword arguments:

    * key: The key of a wish list
    * line_pk: The primary key of the wish list line

    or

    * product_pk: The primary key of the product
    """

    def fetch_line(self, user, wishlist_key, line_pk=None, product_pk=None):
        if line_pk is not None:
            self.line = get_object_or_404(
                Line,
                pk=line_pk,
                wishlist__owner=user,
                wishlist__key=wishlist_key,
            )
        else:
            try:
                self.line = get_object_or_404(
                    Line,
                    product_id=product_pk,
                    wishlist__owner=user,
                    wishlist__key=wishlist_key,
                )
            except Line.MultipleObjectsReturned:
                raise Http404
        self.wishlist = self.line.wishlist
        self.product = self.line.product


class WishListRemoveProduct(LineMixin, PageTitleMixin, DeleteView):
    template_name = 'oscar/customer/wishlists/wishlists_delete_product.html'
    active_tab = "wishlists"

    def get_page_title(self):
        return _('Remove %s') % self.object.get_title()

    def get_object(self, queryset=None):
        self.fetch_line(
            self.request.user,
            self.kwargs['key'],
            self.kwargs.get('line_pk'),
            self.kwargs.get('product_pk')
        )
        return self.line

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['wishlist'] = self.wishlist
        ctx['product'] = self.product
        return ctx

    def get_success_url(self):
        msg = _("'%(title)s' was removed from your '%(name)s' wish list") % {
            'title': self.line.get_title(),
            'name': self.wishlist.name}
        messages.success(self.request, msg)

        # We post directly to this view on product pages; and should send the
        # user back there if that was the case
        referrer = safe_referrer(self.request, '')
        if (referrer and self.product
                and self.product.get_absolute_url() in referrer):
            return referrer
        else:
            return reverse(
                'customer:wishlists-detail', kwargs={'key': self.wishlist.key})


class WishListMoveProductToAnotherWishList(LineMixin, View):

    def dispatch(self, request, *args, **kwargs):
        self.fetch_line(request.user, kwargs['key'], line_pk=kwargs['line_pk'])
        return super().dispatch(request, *args, **kwargs)

    def get(self, request, *args, **kwargs):
        to_wishlist = get_object_or_404(
            WishList, owner=request.user, key=kwargs['to_key'])

        if to_wishlist.lines.filter(product=self.line.product).count() > 0:
            msg = _("Wish list '%(name)s' already containing '%(title)s'") % {
                'title': self.product.get_title(),
                'name': to_wishlist.name}
            messages.error(self.request, msg)
        else:
            self.line.wishlist = to_wishlist
            self.line.save()

            msg = _("'%(title)s' moved to '%(name)s' wishlist") % {
                'title': self.product.get_title(),
                'name': to_wishlist.name}
            messages.success(self.request, msg)

        default_url = reverse(
            'customer:wishlists-detail', kwargs={'key': self.wishlist.key})
        return redirect_to_referrer(self.request, default_url)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.abstract_models:0
==oscar.apps.payment.abstract_models:0
from decimal import Decimal

from django.db import models
from django.utils.translation import gettext_lazy as _

from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.utils import get_default_currency
from oscar.models.fields import AutoSlugField
from oscar.templatetags.currency_filters import currency

from . import bankcards


class AbstractTransaction(models.Model):
    """
    A transaction for a particular payment source.

    These are similar to the payment events within the order app but model a
    slightly different aspect of payment.  Crucially, payment sources and
    transactions have nothing to do with the lines of the order while payment
    events do.

    For example:
    * A ``pre-auth`` with a bankcard gateway
    * A ``settle`` with a credit provider (see :py:mod:`django-oscar-accounts`)
    """
    source = models.ForeignKey(
        'payment.Source',
        on_delete=models.CASCADE,
        related_name='transactions',
        verbose_name=_("Source"))

    # We define some sample types but don't constrain txn_type to be one of
    # these as there will be domain-specific ones that we can't anticipate
    # here.
    AUTHORISE, DEBIT, REFUND = 'Authorise', 'Debit', 'Refund'
    txn_type = models.CharField(_("Type"), max_length=128, blank=True)

    amount = models.DecimalField(_("Amount"), decimal_places=2, max_digits=12)
    reference = models.CharField(_("Reference"), max_length=128, blank=True)
    status = models.CharField(_("Status"), max_length=128, blank=True)
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True, db_index=True)

    def __str__(self):
        return _("%(type)s of %(amount).2f") % {
            'type': self.txn_type,
            'amount': self.amount}

    class Meta:
        abstract = True
        app_label = 'payment'
        ordering = ['-date_created']
        verbose_name = _("Transaction")
        verbose_name_plural = _("Transactions")


class AbstractSource(models.Model):
    """
    A source of payment for an order.

    This is normally a credit card which has been pre-authorised for the order
    amount, but some applications will allow orders to be paid for using
    multiple sources such as cheque, credit accounts, gift cards. Each payment
    source will have its own entry.

    This source object tracks how much money has been authorised, debited and
    refunded, which is useful when payment takes place in multiple stages.
    """
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name='sources',
        verbose_name=_("Order"))
    source_type = models.ForeignKey(
        'payment.SourceType',
        on_delete=models.CASCADE,
        related_name="sources",
        verbose_name=_("Source Type"))
    currency = models.CharField(
        _("Currency"), max_length=12, default=get_default_currency)

    # Track the various amounts associated with this source
    amount_allocated = models.DecimalField(
        _("Amount Allocated"), decimal_places=2, max_digits=12,
        default=Decimal('0.00'))
    amount_debited = models.DecimalField(
        _("Amount Debited"), decimal_places=2, max_digits=12,
        default=Decimal('0.00'))
    amount_refunded = models.DecimalField(
        _("Amount Refunded"), decimal_places=2, max_digits=12,
        default=Decimal('0.00'))

    # Reference number for this payment source.  This is often used to look up
    # a transaction model for a particular payment partner.
    reference = models.CharField(_("Reference"), max_length=255, blank=True)

    # A customer-friendly label for the source, eg XXXX-XXXX-XXXX-1234
    label = models.CharField(_("Label"), max_length=128, blank=True)

    # A dictionary of submission data that is stored as part of the
    # checkout process, where we need to pass an instance of this class around
    submission_data = None

    # We keep a list of deferred transactions that are only actually saved when
    # the source is saved for the first time
    deferred_txns = None

    class Meta:
        abstract = True
        app_label = 'payment'
        verbose_name = _("Source")
        verbose_name_plural = _("Sources")

    def __str__(self):
        description = _("Allocation of %(amount)s from type %(type)s") % {
            'amount': currency(self.amount_allocated, self.currency),
            'type': self.source_type}
        if self.reference:
            description += _(" (reference: %s)") % self.reference
        return description

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if self.deferred_txns:
            for txn in self.deferred_txns:
                self._create_transaction(*txn)

    def create_deferred_transaction(self, txn_type, amount, reference=None,
                                    status=None):
        """
        Register the data for a transaction that can't be created yet due to FK
        constraints.  This happens at checkout where create an payment source
        and a transaction but can't save them until the order model exists.
        """
        if self.deferred_txns is None:
            self.deferred_txns = []
        self.deferred_txns.append((txn_type, amount, reference, status))

    def _create_transaction(self, txn_type, amount, reference='',
                            status=''):
        self.transactions.create(
            txn_type=txn_type, amount=amount,
            reference=reference, status=status)

    # =======
    # Actions
    # =======

    def allocate(self, amount, reference='', status=''):
        """
        Convenience method for ring-fencing money against this source
        """
        self.amount_allocated += amount
        self.save()
        self._create_transaction(
            AbstractTransaction.AUTHORISE, amount, reference, status)
    allocate.alters_data = True

    def debit(self, amount=None, reference='', status=''):
        """
        Convenience method for recording debits against this source
        """
        if amount is None:
            amount = self.balance
        self.amount_debited += amount
        self.save()
        self._create_transaction(
            AbstractTransaction.DEBIT, amount, reference, status)
    debit.alters_data = True

    def refund(self, amount, reference='', status=''):
        """
        Convenience method for recording refunds against this source
        """
        self.amount_refunded += amount
        self.save()
        self._create_transaction(
            AbstractTransaction.REFUND, amount, reference, status)
    refund.alters_data = True

    # ==========
    # Properties
    # ==========

    @property
    def balance(self):
        """
        Return the balance of this source
        """
        return (self.amount_allocated - self.amount_debited
                + self.amount_refunded)

    @property
    def amount_available_for_refund(self):
        """
        Return the amount available to be refunded
        """
        return self.amount_debited - self.amount_refunded


class AbstractSourceType(models.Model):
    """
    A type of payment source.

    This could be an external partner like PayPal or DataCash,
    or an internal source such as a managed account.
    """
    name = models.CharField(_("Name"), max_length=128)
    code = AutoSlugField(
        _("Code"), max_length=128, populate_from='name', unique=True,
        help_text=_("This is used within forms to identify this source type"))

    class Meta:
        abstract = True
        app_label = 'payment'
        verbose_name = _("Source Type")
        verbose_name_plural = _("Source Types")

    def __str__(self):
        return self.name


class AbstractBankcard(models.Model):
    """
    Model representing a user's bankcard.  This is used for two purposes:

        1.  The bankcard form will return an instance of this model that can be
            used with payment gateways.  In this scenario, the instance will
            have additional attributes (start_date, issue_number, :abbr:`ccv (Card Code Verification)`) that
            payment gateways need but that we don't save.

        2.  To keep a record of a user's bankcards and allow them to be
            re-used.  This is normally done using the 'partner reference'.

    .. warning::

        Some of the fields of this model (name, expiry_date) are considered
        "cardholder data" under PCI DSS v2. Hence, if you use this model and
        store those fields then the requirements for PCI compliance will be
        more stringent.
    """
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='bankcards',
        verbose_name=_("User"))
    card_type = models.CharField(_("Card Type"), max_length=128)

    # Often you don't actually need the name on the bankcard
    name = models.CharField(_("Name"), max_length=255, blank=True)

    # We store an obfuscated version of the card number, just showing the last
    # 4 digits.
    number = models.CharField(_("Number"), max_length=32)

    # We store a date even though only the month is visible.  Bankcards are
    # valid until the last day of the month.
    expiry_date = models.DateField(_("Expiry Date"))

    # For payment partners who are storing the full card details for us
    partner_reference = models.CharField(
        _("Partner Reference"), max_length=255, blank=True)

    # Temporary data not persisted to the DB
    start_date = None
    issue_number = None
    ccv = None

    def __str__(self):
        return _("%(card_type)s %(number)s (Expires: %(expiry)s)") % {
            'card_type': self.card_type,
            'number': self.number,
            'expiry': self.expiry_month()}

    def __init__(self, *args, **kwargs):
        # Pop off the temporary data
        self.start_date = kwargs.pop('start_date', None)
        self.issue_number = kwargs.pop('issue_number', None)
        self.ccv = kwargs.pop('ccv', None)
        super().__init__(*args, **kwargs)

        # Initialise the card-type
        if self.id is None:
            self.card_type = bankcards.bankcard_type(self.number)
            if self.card_type is None:
                self.card_type = 'Unknown card type'

    class Meta:
        abstract = True
        app_label = 'payment'
        verbose_name = _("Bankcard")
        verbose_name_plural = _("Bankcards")

    def save(self, *args, **kwargs):
        if not self.number.startswith('X'):
            self.prepare_for_save()
        super().save(*args, **kwargs)

    def prepare_for_save(self):
        # This is the first time this card instance is being saved.  We
        # remove all sensitive data
        self.number = "XXXX-XXXX-XXXX-%s" % self.number[-4:]
        self.start_date = self.issue_number = self.ccv = None

    @property
    def cvv(self):
        return self.ccv

    @property
    def obfuscated_number(self):
        return 'XXXX-XXXX-XXXX-%s' % self.number[-4:]

    def start_month(self, format='%m/%y'):
        return self.start_date.strftime(format)

    def expiry_month(self, format='%m/%y'):
        return self.expiry_date.strftime(format)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.dashboard.views:0
==oscar.apps.dashboard.views:0
import json
from datetime import timedelta
from decimal import Decimal as D
from decimal import ROUND_UP

from django.contrib import messages
from django.db.models import Avg, Count, Sum
from django.template.response import TemplateResponse
from django.utils.timezone import now
from django.views.generic import TemplateView

from oscar.core.compat import get_user_model
from oscar.core.loading import get_class, get_model

RelatedFieldWidgetWrapper = get_class('dashboard.widgets', 'RelatedFieldWidgetWrapper')
ConditionalOffer = get_model('offer', 'ConditionalOffer')
Voucher = get_model('voucher', 'Voucher')
Basket = get_model('basket', 'Basket')
StockAlert = get_model('partner', 'StockAlert')
Product = get_model('catalogue', 'Product')
Order = get_model('order', 'Order')
Line = get_model('order', 'Line')
User = get_user_model()


class IndexView(TemplateView):
    """
    An overview view which displays several reports about the shop.

    Supports the permission-based dashboard. It is recommended to add a
    :file:`oscar/dashboard/index_nonstaff.html` template because Oscar's
    default template will display potentially sensitive store information.
    """

    def get_template_names(self):
        if self.request.user.is_staff:
            return ['oscar/dashboard/index.html', ]
        else:
            return ['oscar/dashboard/index_nonstaff.html', 'oscar/dashboard/index.html']

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx.update(self.get_stats())
        return ctx

    def get_active_site_offers(self):
        """
        Return active conditional offers of type "site offer". The returned
        ``Queryset`` of site offers is filtered by end date greater then
        the current date.
        """
        return ConditionalOffer.objects.filter(
            end_datetime__gt=now(), offer_type=ConditionalOffer.SITE)

    def get_active_vouchers(self):
        """
        Get all active vouchers. The returned ``Queryset`` of vouchers
        is filtered by end date greater then the current date.
        """
        return Voucher.objects.filter(end_datetime__gt=now())

    def get_hourly_report(self, orders, hours=24, segments=10):
        """
        Get report of order revenue split up in hourly chunks. A report is
        generated for the last *hours* (default=24) from the current time.
        The report provides ``max_revenue`` of the hourly order revenue sum,
        ``y-range`` as the labelling for the y-axis in a template and
        ``order_total_hourly``, a list of properties for hourly chunks.
        *segments* defines the number of labelling segments used for the y-axis
        when generating the y-axis labels (default=10).
        """
        # Get datetime for 24 hours ago
        time_now = now().replace(minute=0, second=0)
        start_time = time_now - timedelta(hours=hours - 1)

        order_total_hourly = []
        for hour in range(0, hours, 2):
            end_time = start_time + timedelta(hours=2)
            hourly_orders = orders.filter(date_placed__gte=start_time,
                                          date_placed__lt=end_time)
            total = hourly_orders.aggregate(
                Sum('total_incl_tax')
            )['total_incl_tax__sum'] or D('0.0')
            order_total_hourly.append({
                'end_time': end_time,
                'total_incl_tax': total
            })
            start_time = end_time

        max_value = max([x['total_incl_tax'] for x in order_total_hourly])
        divisor = 1
        while divisor < max_value / 50:
            divisor *= 10
        max_value = (max_value / divisor).quantize(D('1'), rounding=ROUND_UP)
        max_value *= divisor
        if max_value:
            segment_size = (max_value) / D('100.0')
            for item in order_total_hourly:
                item['percentage'] = int(item['total_incl_tax'] / segment_size)

            y_range = []
            y_axis_steps = max_value / D(str(segments))
            for idx in reversed(range(segments + 1)):
                y_range.append(idx * y_axis_steps)
        else:
            y_range = []
            for item in order_total_hourly:
                item['percentage'] = 0

        ctx = {
            'order_total_hourly': order_total_hourly,
            'max_revenue': max_value,
            'y_range': y_range,
        }
        return ctx

    def get_stats(self):
        datetime_24hrs_ago = now() - timedelta(hours=24)

        orders = Order.objects.all()
        alerts = StockAlert.objects.all()
        baskets = Basket.objects.filter(status=Basket.OPEN)
        customers = User.objects.filter(orders__isnull=False).distinct()
        lines = Line.objects.filter()
        products = Product.objects.all()

        user = self.request.user
        if not user.is_staff:
            partners_ids = tuple(user.partners.values_list('id', flat=True))
            orders = orders.filter(
                lines__partner_id__in=partners_ids
            ).distinct()
            alerts = alerts.filter(stockrecord__partner_id__in=partners_ids)
            baskets = baskets.filter(
                lines__stockrecord__partner_id__in=partners_ids
            ).distinct()
            customers = customers.filter(
                orders__lines__partner_id__in=partners_ids
            ).distinct()
            lines = lines.filter(partner_id__in=partners_ids)
            products = products.filter(stockrecords__partner_id__in=partners_ids)

        orders_last_day = orders.filter(date_placed__gt=datetime_24hrs_ago)

        open_alerts = alerts.filter(status=StockAlert.OPEN)
        closed_alerts = alerts.filter(status=StockAlert.CLOSED)

        total_lines_last_day = lines.filter(order__in=orders_last_day).count()
        stats = {
            'total_orders_last_day': orders_last_day.count(),
            'total_lines_last_day': total_lines_last_day,

            'average_order_costs': orders_last_day.aggregate(
                Avg('total_incl_tax')
            )['total_incl_tax__avg'] or D('0.00'),

            'total_revenue_last_day': orders_last_day.aggregate(
                Sum('total_incl_tax')
            )['total_incl_tax__sum'] or D('0.00'),

            'hourly_report_dict': self.get_hourly_report(orders),
            'total_customers_last_day': customers.filter(
                date_joined__gt=datetime_24hrs_ago,
            ).count(),

            'total_open_baskets_last_day': baskets.filter(
                date_created__gt=datetime_24hrs_ago
            ).count(),

            'total_products': products.count(),
            'total_open_stock_alerts': open_alerts.count(),
            'total_closed_stock_alerts': closed_alerts.count(),

            'total_customers': customers.count(),
            'total_open_baskets': baskets.count(),
            'total_orders': orders.count(),
            'total_lines': lines.count(),
            'total_revenue': orders.aggregate(
                Sum('total_incl_tax')
            )['total_incl_tax__sum'] or D('0.00'),

            'order_status_breakdown': orders.order_by(
                'status'
            ).values('status').annotate(freq=Count('id'))
        }
        if user.is_staff:
            stats.update(
                total_site_offers=self.get_active_site_offers().count(),
                total_vouchers=self.get_active_vouchers().count(),
            )
        return stats


class PopUpWindowMixin:

    @property
    def is_popup(self):
        return self.request.GET.get(
            RelatedFieldWidgetWrapper.IS_POPUP_VAR,
            self.request.POST.get(RelatedFieldWidgetWrapper.IS_POPUP_VAR))

    @property
    def is_popup_var(self):
        return RelatedFieldWidgetWrapper.IS_POPUP_VAR

    def add_success_message(self, message):
        if not self.is_popup:
            messages.info(self.request, message)


class PopUpWindowCreateUpdateMixin(PopUpWindowMixin):

    @property
    def to_field(self):
        return self.request.GET.get(
            RelatedFieldWidgetWrapper.TO_FIELD_VAR,
            self.request.POST.get(RelatedFieldWidgetWrapper.TO_FIELD_VAR))

    @property
    def to_field_var(self):
        return RelatedFieldWidgetWrapper.TO_FIELD_VAR

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)

        if self.is_popup:
            ctx['to_field'] = self.to_field
            ctx['to_field_var'] = self.to_field_var
            ctx['is_popup'] = self.is_popup
            ctx['is_popup_var'] = self.is_popup_var

        return ctx


class PopUpWindowCreateMixin(PopUpWindowCreateUpdateMixin):

    def popup_response(self, obj):
        if self.to_field:
            attr = str(self.to_field)
        else:
            attr = obj._meta.pk.attname
        value = obj.serializable_value(attr)
        popup_response_data = json.dumps({
            'value': str(value),
            'obj': str(obj),
        })
        return TemplateResponse(
            self.request,
            'oscar/dashboard/widgets/popup_response.html',
            {'popup_response_data': popup_response_data, }
        )


class PopUpWindowUpdateMixin(PopUpWindowCreateUpdateMixin):

    def popup_response(self, obj):
        opts = obj._meta
        if self.to_field:
            attr = str(self.to_field)
        else:
            attr = opts.pk.attname
        # Retrieve the `object_id` from the resolved pattern arguments.
        value = self.request.resolver_match.kwargs['pk']
        new_value = obj.serializable_value(attr)
        popup_response_data = json.dumps({
            'action': 'change',
            'value': str(value),
            'obj': str(obj),
            'new_value': str(new_value),
        })
        return TemplateResponse(
            self.request,
            'oscar/dashboard/widgets/popup_response.html',
            {'popup_response_data': popup_response_data, }
        )


class PopUpWindowDeleteMixin(PopUpWindowMixin):

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)

        if self.is_popup:
            ctx['is_popup'] = self.is_popup
            ctx['is_popup_var'] = self.is_popup_var

        return ctx

    def delete(self, request, *args, **kwargs):
        """
        Calls the delete() method on the fetched object and then
        redirects to the success URL, or closes the popup, it it is one.
        """
        obj = self.get_object()

        response = super().delete(request, *args, **kwargs)

        if self.is_popup:
            obj_id = obj.pk
            popup_response_data = json.dumps({
                'action': 'delete',
                'value': str(obj_id),
            })
            return TemplateResponse(
                request,
                'oscar/dashboard/widgets/popup_response.html',
                {'popup_response_data': popup_response_data, }
            )
        else:
            return response
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.abstract_models:0
==oscar.apps.voucher.abstract_models:0
from decimal import Decimal

from django.core import exceptions
from django.db import models, transaction
from django.db.models import Sum
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from oscar.apps.voucher.utils import get_unused_code
from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.loading import get_model


class AbstractVoucherSet(models.Model):
    """A collection of vouchers (potentially auto-generated)

    a VoucherSet is a group of voucher that are generated
    automatically.

    - count: the minimum number of vouchers in the set. If this is kept at
    zero, vouchers are created when and as needed.

    - code_length: the length of the voucher code. Codes are by default created
    with groups of 4 characters: XXXX-XXXX-XXXX. The dashes (-) do not count for
    the code_length.

    - :py:attr:`.start_datetime` and :py:attr:`.end_datetime` together define the validity
      range for all vouchers in the set.
    """

    name = models.CharField(verbose_name=_('Name'), max_length=100)
    count = models.PositiveIntegerField(verbose_name=_('Number of vouchers'))
    code_length = models.IntegerField(
        verbose_name=_('Length of Code'), default=12)
    description = models.TextField(verbose_name=_('Description'))
    date_created = models.DateTimeField(auto_now_add=True)
    start_datetime = models.DateTimeField(_('Start datetime'))
    end_datetime = models.DateTimeField(_('End datetime'))

    offer = models.OneToOneField(
        'offer.ConditionalOffer', related_name='voucher_set',
        verbose_name=_("Offer"), limit_choices_to={'offer_type': "Voucher"},
        on_delete=models.CASCADE, null=True, blank=True)

    class Meta:
        abstract = True
        app_label = 'voucher'
        get_latest_by = 'date_created'
        verbose_name = _("VoucherSet")
        verbose_name_plural = _("VoucherSets")

    def __str__(self):
        return self.name

    def generate_vouchers(self):
        """Generate vouchers for this set"""
        current_count = self.vouchers.count()
        for i in range(current_count, self.count):
            self.add_new()

    def add_new(self):
        """Add a new voucher to this set"""
        Voucher = get_model('voucher', 'Voucher')
        code = get_unused_code(length=self.code_length)
        voucher = Voucher.objects.create(
            name=self.name,
            code=code,
            voucher_set=self,
            usage=Voucher.SINGLE_USE,
            start_datetime=self.start_datetime,
            end_datetime=self.end_datetime)

        if self.offer:
            voucher.offers.add(self.offer)

        return voucher

    def is_active(self, test_datetime=None):
        """Test whether this voucher set is currently active. """
        test_datetime = test_datetime or timezone.now()
        return self.start_datetime <= test_datetime <= self.end_datetime

    def save(self, *args, **kwargs):
        self.count = max(self.count, self.vouchers.count())
        with transaction.atomic():
            super().save(*args, **kwargs)
            self.generate_vouchers()
            self.vouchers.update(
                start_datetime=self.start_datetime,
                end_datetime=self.end_datetime
            )

    @property
    def num_basket_additions(self):
        value = self.vouchers.aggregate(result=Sum('num_basket_additions'))
        return value['result']

    @property
    def num_orders(self):
        value = self.vouchers.aggregate(result=Sum('num_orders'))
        return value['result']

    @property
    def total_discount(self):
        value = self.vouchers.aggregate(result=Sum('total_discount'))
        return value['result']


class AbstractVoucher(models.Model):
    """
    A voucher.  This is simply a link to a collection of offers.

    Note that there are three possible "usage" modes:
    (a) Single use
    (b) Multi-use
    (c) Once per customer

    Oscar enforces those modes by creating VoucherApplication
    instances when a voucher is used for an order.
    """
    name = models.CharField(_("Name"), max_length=128,
                            help_text=_("This will be shown in the checkout"
                                        " and basket once the voucher is"
                                        " entered"))
    code = models.CharField(_("Code"), max_length=128, db_index=True,
                            unique=True, help_text=_("Case insensitive / No"
                                                     " spaces allowed"))
    offers = models.ManyToManyField(
        'offer.ConditionalOffer', related_name='vouchers',
        verbose_name=_("Offers"), limit_choices_to={'offer_type': "Voucher"})

    SINGLE_USE, MULTI_USE, ONCE_PER_CUSTOMER = (
        'Single use', 'Multi-use', 'Once per customer')
    USAGE_CHOICES = (
        (SINGLE_USE, _("Can be used once by one customer")),
        (MULTI_USE, _("Can be used multiple times by multiple customers")),
        (ONCE_PER_CUSTOMER, _("Can only be used once per customer")),
    )
    usage = models.CharField(_("Usage"), max_length=128,
                             choices=USAGE_CHOICES, default=MULTI_USE)

    start_datetime = models.DateTimeField(_('Start datetime'), db_index=True)
    end_datetime = models.DateTimeField(_('End datetime'), db_index=True)

    # Reporting information. Not used to enforce any consumption limits.
    num_basket_additions = models.PositiveIntegerField(
        _("Times added to basket"), default=0)
    num_orders = models.PositiveIntegerField(_("Times on orders"), default=0)
    total_discount = models.DecimalField(
        _("Total discount"), decimal_places=2, max_digits=12,
        default=Decimal('0.00'))

    voucher_set = models.ForeignKey(
        'voucher.VoucherSet', null=True, blank=True, related_name='vouchers',
        on_delete=models.CASCADE
    )

    date_created = models.DateTimeField(auto_now_add=True)

    class Meta:
        abstract = True
        app_label = 'voucher'
        get_latest_by = 'date_created'
        verbose_name = _("Voucher")
        verbose_name_plural = _("Vouchers")

    def __str__(self):
        return self.name

    def clean(self):
        if all([self.start_datetime, self.end_datetime,
                self.start_datetime > self.end_datetime]):
            raise exceptions.ValidationError(
                _('End date should be later than start date'))

    def save(self, *args, **kwargs):
        self.code = self.code.upper()
        super().save(*args, **kwargs)

    def is_active(self, test_datetime=None):
        """
        Test whether this voucher is currently active.
        """
        test_datetime = test_datetime or timezone.now()
        return self.start_datetime <= test_datetime <= self.end_datetime

    def is_expired(self):
        """
        Test whether this voucher has passed its expiration date
        """
        now = timezone.now()
        return self.end_datetime < now

    def is_available_to_user(self, user=None):
        """
        Test whether this voucher is available to the passed user.

        Returns a tuple of a boolean for whether it is successful, and a
        availability message.
        """
        is_available, message = False, ''
        if self.usage == self.SINGLE_USE:
            is_available = not self.applications.exists()
            if not is_available:
                message = _("This voucher has already been used")
        elif self.usage == self.MULTI_USE:
            is_available = True
        elif self.usage == self.ONCE_PER_CUSTOMER:
            if not user.is_authenticated:
                is_available = False
                message = _(
                    "This voucher is only available to signed in users")
            else:
                is_available = not self.applications.filter(
                    voucher=self, user=user).exists()
                if not is_available:
                    message = _("You have already used this voucher in "
                                "a previous order")
        return is_available, message

    def is_available_for_basket(self, basket):
        """
        Tests whether this voucher is available to the passed basket.

        Returns a tuple of a boolean for whether it is successful, and a
        availability message.
        """
        is_available, message = self.is_available_to_user(user=basket.owner)
        if not is_available:
            return False, message

        is_available, message = False, _("This voucher is not available for this basket")
        for offer in self.offers.all():
            if offer.is_condition_satisfied(basket=basket):
                is_available = True
                message = ''
                break
        return is_available, message

    def record_usage(self, order, user):
        """
        Records a usage of this voucher in an order.
        """
        if user.is_authenticated:
            self.applications.create(voucher=self, order=order, user=user)
        else:
            self.applications.create(voucher=self, order=order)
        self.num_orders += 1
        self.save()
    record_usage.alters_data = True

    def record_discount(self, discount):
        """
        Record a discount that this offer has given
        """
        self.total_discount += discount['discount']
        self.save()
    record_discount.alters_data = True

    @property
    def benefit(self):
        """
        Returns the first offer's benefit instance.

        A voucher is commonly only linked to one offer. In that case,
        this helper can be used for convenience.
        """
        return self.offers.all()[0].benefit


class AbstractVoucherApplication(models.Model):
    """
    For tracking how often a voucher has been used in an order.

    This is used to enforce the voucher usage mode in
    Voucher.is_available_to_user, and created in Voucher.record_usage.
    """
    voucher = models.ForeignKey(
        'voucher.Voucher',
        on_delete=models.CASCADE,
        related_name="applications",
        verbose_name=_("Voucher"))

    # It is possible for an anonymous user to apply a voucher so we need to
    # allow the user to be nullable
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        verbose_name=_("User"))
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        verbose_name=_("Order"))
    date_created = models.DateTimeField(auto_now_add=True)

    class Meta:
        abstract = True
        app_label = 'voucher'
        verbose_name = _("Voucher Application")
        verbose_name_plural = _("Voucher Applications")

    def __str__(self):
        return _("'%(voucher)s' used by '%(user)s'") % {
            'voucher': self.voucher,
            'user': self.user}
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.abstract_models:0
==oscar.apps.partner.abstract_models:0
from django.db import models, router
from django.db.models import F, Value, signals
from django.db.models.functions import Coalesce
from django.utils.functional import cached_property
from django.utils.timezone import now
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.apps.partner.exceptions import InvalidStockAdjustment
from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.utils import get_default_currency
from oscar.models.fields import AutoSlugField


class AbstractPartner(models.Model):
    """
    A fulfilment partner. An individual or company who can fulfil products.
    E.g. for physical goods, somebody with a warehouse and means of delivery.

    Creating one or more instances of the Partner model is a required step in
    setting up an Oscar deployment. Many Oscar deployments will only have one
    fulfilment partner.
    """
    code = AutoSlugField(_("Code"), max_length=128, unique=True, db_index=True,
                         populate_from='name')
    name = models.CharField(
        pgettext_lazy("Partner's name", "Name"), max_length=128, blank=True, db_index=True)

    #: A partner can have users assigned to it. This is used
    #: for access modelling in the permission-based dashboard
    users = models.ManyToManyField(
        AUTH_USER_MODEL, related_name="partners",
        blank=True, verbose_name=_("Users"))

    @property
    def display_name(self):
        return self.name or self.code

    @property
    def primary_address(self):
        """
        Returns a partners primary address. Usually that will be the
        headquarters or similar.

        This is a rudimentary implementation that raises an error if there's
        more than one address. If you actually want to support multiple
        addresses, you will likely need to extend PartnerAddress to have some
        field or flag to base your decision on.
        """
        addresses = self.addresses.all()
        if len(addresses) == 0:  # intentionally using len() to save queries
            return None
        elif len(addresses) == 1:
            return addresses[0]
        else:
            raise NotImplementedError(
                "Oscar's default implementation of primary_address only "
                "supports one PartnerAddress.  You need to override the "
                "primary_address to look up the right address")

    def get_address_for_stockrecord(self, stockrecord):
        """
        Stock might be coming from different warehouses. Overriding this
        function allows selecting the correct PartnerAddress for the record.
        That can be useful when determining tax.
        """
        return self.primary_address

    class Meta:
        abstract = True
        app_label = 'partner'
        ordering = ('name', 'code')
        permissions = (('dashboard_access', 'Can access dashboard'), )
        verbose_name = _('Fulfillment partner')
        verbose_name_plural = _('Fulfillment partners')

    def __str__(self):
        return self.display_name


class AbstractStockRecord(models.Model):
    """
    A stock record.

    This records information about a product from a fulfilment partner, such as
    their SKU, the number they have in stock and price information.

    Stockrecords are used by 'strategies' to determine availability and pricing
    information for the customer.
    """
    product = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        related_name="stockrecords",
        verbose_name=_("Product"))
    partner = models.ForeignKey(
        'partner.Partner',
        on_delete=models.CASCADE,
        verbose_name=_("Partner"),
        related_name='stockrecords')

    #: The fulfilment partner will often have their own SKU for a product,
    #: which we store here.  This will sometimes be the same the product's UPC
    #: but not always.  It should be unique per partner.
    #: See also http://en.wikipedia.org/wiki/Stock-keeping_unit
    partner_sku = models.CharField(_("Partner SKU"), max_length=128)

    # Price info:
    price_currency = models.CharField(
        _("Currency"), max_length=12, default=get_default_currency)

    # This is the base price for calculations - tax should be applied by the
    # appropriate method.  We don't store tax here as its calculation is highly
    # domain-specific.  It is NULLable because some items don't have a fixed
    # price but require a runtime calculation (possible from an external
    # service). Current field name `price_excl_tax` is deprecated and will be
    # renamed into `price` in Oscar 2.1.
    price_excl_tax = models.DecimalField(
        _("Price (excl. tax)"), decimal_places=2, max_digits=12,
        blank=True, null=True)

    # Deprecated - will be removed in Oscar 2.1
    price_retail = models.DecimalField(
        _("Price (retail)"), decimal_places=2, max_digits=12,
        blank=True, null=True)

    # Deprecated - will be removed in Oscar 2.1
    cost_price = models.DecimalField(
        _("Cost Price"), decimal_places=2, max_digits=12,
        blank=True, null=True)

    #: Number of items in stock
    num_in_stock = models.PositiveIntegerField(
        _("Number in stock"), blank=True, null=True)

    #: The amount of stock allocated to orders but not fed back to the master
    #: stock system.  A typical stock update process will set the
    #: :py:attr:`.num_in_stock` variable to a new value and reset
    #: :py:attr:`.num_allocated` to zero.
    num_allocated = models.IntegerField(
        _("Number allocated"), blank=True, null=True)

    #: Threshold for low-stock alerts.  When stock goes beneath this threshold,
    #: an alert is triggered so warehouse managers can order more.
    low_stock_threshold = models.PositiveIntegerField(
        _("Low Stock Threshold"), blank=True, null=True)

    # Date information
    date_created = models.DateTimeField(_("Date created"), auto_now_add=True)
    date_updated = models.DateTimeField(_("Date updated"), auto_now=True,
                                        db_index=True)

    def __str__(self):
        msg = "Partner: %s, product: %s" % (
            self.partner.display_name, self.product,)
        if self.partner_sku:
            msg = "%s (%s)" % (msg, self.partner_sku)
        return msg

    class Meta:
        abstract = True
        app_label = 'partner'
        unique_together = ('partner', 'partner_sku')
        verbose_name = _("Stock record")
        verbose_name_plural = _("Stock records")

    @property
    def net_stock_level(self):
        """
        The effective number in stock (e.g. available to buy).

        This is correct property to show the customer, not the
        :py:attr:`.num_in_stock` field as that doesn't account for allocations.
        This can be negative in some unusual circumstances
        """
        if self.num_in_stock is None:
            return 0
        if self.num_allocated is None:
            return self.num_in_stock
        return self.num_in_stock - self.num_allocated

    @cached_property
    def can_track_allocations(self):
        """Return True if the Product is set for stock tracking."""
        return self.product.get_product_class().track_stock

    # 2-stage stock management model

    def allocate(self, quantity):
        """
        Record a stock allocation.

        This normally happens when a product is bought at checkout.  When the
        product is actually shipped, then we 'consume' the allocation.

        """
        # Doesn't make sense to allocate if stock tracking is off.
        if not self.can_track_allocations:
            return
        # Send the pre-save signal
        signals.pre_save.send(
            sender=self.__class__,
            instance=self,
            created=False,
            raw=False,
            using=router.db_for_write(self.__class__, instance=self))

        # Atomic update
        (self.__class__.objects
            .filter(pk=self.pk)
            .update(num_allocated=(
                Coalesce(F('num_allocated'), Value(0)) + quantity)))

        # Make sure the current object is up-to-date
        if self.num_allocated is None:
            self.num_allocated = 0
        self.num_allocated += quantity

        # Send the post-save signal
        signals.post_save.send(
            sender=self.__class__,
            instance=self,
            created=False,
            raw=False,
            using=router.db_for_write(self.__class__, instance=self))

    allocate.alters_data = True

    def is_allocation_consumption_possible(self, quantity):
        """
        Test if a proposed stock consumption is permitted
        """
        return quantity <= min(self.num_allocated, self.num_in_stock)

    def consume_allocation(self, quantity):
        """
        Consume a previous allocation

        This is used when an item is shipped.  We remove the original
        allocation and adjust the number in stock accordingly
        """
        if not self.can_track_allocations:
            return
        if not self.is_allocation_consumption_possible(quantity):
            raise InvalidStockAdjustment(
                _('Invalid stock consumption request'))
        self.num_allocated -= quantity
        self.num_in_stock -= quantity
        self.save()
    consume_allocation.alters_data = True

    def cancel_allocation(self, quantity):
        if not self.can_track_allocations:
            return
        # We ignore requests that request a cancellation of more than the
        # amount already allocated.
        self.num_allocated -= min(self.num_allocated, quantity)
        self.save()
    cancel_allocation.alters_data = True

    @property
    def is_below_threshold(self):
        if self.low_stock_threshold is None:
            return False
        return self.net_stock_level < self.low_stock_threshold


class AbstractStockAlert(models.Model):
    """
    A stock alert. E.g. used to notify users when a product is 'back in stock'.
    """
    stockrecord = models.ForeignKey(
        'partner.StockRecord',
        on_delete=models.CASCADE,
        related_name='alerts',
        verbose_name=_("Stock Record"))
    threshold = models.PositiveIntegerField(_("Threshold"))
    OPEN, CLOSED = "Open", "Closed"
    status_choices = (
        (OPEN, _("Open")),
        (CLOSED, _("Closed")),
    )
    status = models.CharField(_("Status"), max_length=128, default=OPEN,
                              choices=status_choices)
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True, db_index=True)
    date_closed = models.DateTimeField(_("Date Closed"), blank=True, null=True)

    def close(self):
        self.status = self.CLOSED
        self.date_closed = now()
        self.save()
    close.alters_data = True

    def __str__(self):
        return _('<stockalert for "%(stock)s" status %(status)s>') \
            % {'stock': self.stockrecord, 'status': self.status}

    class Meta:
        abstract = True
        app_label = 'partner'
        ordering = ('-date_created',)
        verbose_name = _('Stock alert')
        verbose_name_plural = _('Stock alerts')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.conditions:0
==oscar.apps.offer.conditions:0
from decimal import Decimal as D
from decimal import ROUND_UP

from django.utils.translation import gettext_lazy as _
from django.utils.translation import ungettext

from oscar.core.loading import get_classes, get_model
from oscar.templatetags.currency_filters import currency

Condition = get_model('offer', 'Condition')
range_anchor, unit_price = get_classes('offer.utils', ['range_anchor', 'unit_price'])

__all__ = [
    'CountCondition', 'CoverageCondition', 'ValueCondition'
]


class CountCondition(Condition):
    """
    An offer condition dependent on the NUMBER of matching items from the
    basket.
    """
    _description = _("Basket includes %(count)d item(s) from %(range)s")

    @property
    def name(self):
        return self._description % {
            'count': self.value,
            'range': str(self.range).lower()}

    @property
    def description(self):
        return self._description % {
            'count': self.value,
            'range': range_anchor(self.range)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Count condition")
        verbose_name_plural = _("Count conditions")

    def is_satisfied(self, offer, basket):
        """
        Determines whether a given basket meets this condition
        """
        num_matches = 0
        for line in basket.all_lines():
            if self.can_apply_condition(line):
                num_matches += line.quantity_without_offer_discount(None)
            if num_matches >= self.value:
                return True
        return False

    def _get_num_matches(self, basket, offer):
        if hasattr(self, '_num_matches'):
            return getattr(self, '_num_matches')
        num_matches = 0
        for line in basket.all_lines():
            if (self.can_apply_condition(line)
                    and line.quantity_without_offer_discount(offer) > 0):
                num_matches += line.quantity_without_offer_discount(offer)
        self._num_matches = num_matches
        return num_matches

    def is_partially_satisfied(self, offer, basket):
        num_matches = self._get_num_matches(basket, offer)
        return 0 < num_matches < self.value

    def get_upsell_message(self, offer, basket):
        num_matches = self._get_num_matches(basket, offer)
        delta = self.value - num_matches
        return ungettext('Buy %(delta)d more product from %(range)s',
                         'Buy %(delta)d more products from %(range)s', delta) \
            % {'delta': delta, 'range': self.range}

    def consume_items(self, offer, basket, affected_lines):
        """
        Marks items within the basket lines as consumed so they
        can't be reused in other offers.

        :basket: The basket
        :affected_lines: The lines that have been affected by the discount.
                         This should be list of tuples (line, discount, qty)
        """
        # We need to count how many items have already been consumed as part of
        # applying the benefit, so we don't consume too many items.
        num_consumed = 0
        for line, __, quantity in affected_lines:
            num_consumed += quantity
        to_consume = max(0, self.value - num_consumed)
        if to_consume == 0:
            return

        for __, line in self.get_applicable_lines(offer, basket,
                                                  most_expensive_first=True):
            quantity_to_consume = min(
                line.quantity_without_offer_discount(offer), to_consume
            )
            line.consume(quantity_to_consume, offer=offer)
            to_consume -= quantity_to_consume
            if to_consume == 0:
                break


class CoverageCondition(Condition):
    """
    An offer condition dependent on the number of DISTINCT matching items from
    the basket.
    """
    _description = _("Basket includes %(count)d distinct item(s) from"
                     " %(range)s")

    @property
    def name(self):
        return self._description % {
            'count': self.value,
            'range': str(self.range).lower()}

    @property
    def description(self):
        return self._description % {
            'count': self.value,
            'range': range_anchor(self.range)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Coverage Condition")
        verbose_name_plural = _("Coverage Conditions")

    def is_satisfied(self, offer, basket):
        """
        Determines whether a given basket meets this condition
        """
        covered_ids = []
        for line in basket.all_lines():
            if not line.is_available_for_offer_discount(offer):
                continue
            product = line.product
            if (self.can_apply_condition(line) and product.id not in
                    covered_ids):
                covered_ids.append(product.id)
            if len(covered_ids) >= self.value:
                return True
        return False

    def _get_num_covered_products(self, basket, offer):
        covered_ids = []
        for line in basket.all_lines():
            if not line.is_available_for_offer_discount(offer):
                continue
            product = line.product
            if (self.can_apply_condition(line) and product.id not in
                    covered_ids):
                covered_ids.append(product.id)
        return len(covered_ids)

    def get_upsell_message(self, offer, basket):
        delta = self.value - self._get_num_covered_products(basket, offer)
        return ungettext('Buy %(delta)d more product from %(range)s',
                         'Buy %(delta)d more products from %(range)s', delta) \
            % {'delta': delta, 'range': self.range}

    def is_partially_satisfied(self, offer, basket):
        return 0 < self._get_num_covered_products(basket, offer) < self.value

    def consume_items(self, offer, basket, affected_lines):
        """
        Marks items within the basket lines as consumed so they
        can't be reused in other offers.
        """
        # Determine products that have already been consumed by applying the
        # benefit
        consumed_products = []
        for line, __, quantity in affected_lines:
            consumed_products.append(line.product)

        to_consume = max(0, self.value - len(consumed_products))
        if to_consume == 0:
            return

        for line in basket.all_lines():
            product = line.product
            if not self.can_apply_condition(line):
                continue
            if product in consumed_products:
                continue
            if not line.is_available_for_offer_discount(offer):
                continue
            # Only consume a quantity of 1 from each line
            line.consume(1, offer=offer)
            consumed_products.append(product)
            to_consume -= 1
            if to_consume == 0:
                break

    def get_value_of_satisfying_items(self, offer, basket):
        covered_ids = []
        value = D('0.00')
        for line in basket.all_lines():
            if (self.can_apply_condition(line) and line.product.id not in
                    covered_ids):
                covered_ids.append(line.product.id)
                value += unit_price(offer, line)
            if len(covered_ids) >= self.value:
                return value
        return value


class ValueCondition(Condition):
    """
    An offer condition dependent on the VALUE of matching items from the
    basket.
    """
    _description = _("Basket includes %(amount)s from %(range)s")

    @property
    def name(self):
        return self._description % {
            'amount': currency(self.value),
            'range': str(self.range).lower()}

    @property
    def description(self):
        return self._description % {
            'amount': currency(self.value),
            'range': range_anchor(self.range)}

    class Meta:
        app_label = 'offer'
        proxy = True
        verbose_name = _("Value condition")
        verbose_name_plural = _("Value conditions")

    def is_satisfied(self, offer, basket):
        """
        Determine whether a given basket meets this condition
        """
        value_of_matches = D('0.00')
        for line in basket.all_lines():
            if (self.can_apply_condition(line)
                    and line.quantity_without_offer_discount(offer) > 0):
                price = unit_price(offer, line)
                value_of_matches += price * int(
                    line.quantity_without_offer_discount(offer)
                )
            if value_of_matches >= self.value:
                return True
        return False

    def _get_value_of_matches(self, offer, basket):
        if hasattr(self, '_value_of_matches'):
            return getattr(self, '_value_of_matches')
        value_of_matches = D('0.00')
        for line in basket.all_lines():
            if (self.can_apply_condition(line)
                    and line.quantity_without_offer_discount(offer) > 0):
                price = unit_price(offer, line)
                value_of_matches += price * int(
                    line.quantity_without_offer_discount(offer)
                )
        self._value_of_matches = value_of_matches
        return value_of_matches

    def is_partially_satisfied(self, offer, basket):
        value_of_matches = self._get_value_of_matches(offer, basket)
        return D('0.00') < value_of_matches < self.value

    def get_upsell_message(self, offer, basket):
        value_of_matches = self._get_value_of_matches(offer, basket)
        return _('Spend %(value)s more from %(range)s') % {
            'value': currency(self.value - value_of_matches),
            'range': self.range}

    def consume_items(self, offer, basket, affected_lines):
        """
        Marks items within the basket lines as consumed so they
        can't be reused in other offers.

        We allow lines to be passed in as sometimes we want them sorted
        in a specific order.
        """
        # Determine value of items already consumed as part of discount
        value_consumed = D('0.00')
        for line, __, qty in affected_lines:
            price = unit_price(offer, line)
            value_consumed += price * qty

        to_consume = max(0, self.value - value_consumed)
        if to_consume == 0:
            return

        for price, line in self.get_applicable_lines(
                offer, basket, most_expensive_first=True):
            quantity_to_consume = min(
                line.quantity_without_offer_discount(offer),
                (to_consume / price).quantize(D(1), ROUND_UP))
            line.consume(quantity_to_consume, offer=offer)
            to_consume -= price * quantity_to_consume
            if to_consume <= 0:
                break
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.partners.views:0
==oscar.apps.dashboard.partners.views:0
==oscar.apps.dashboard.partners.views:0
from django.contrib import messages
from django.contrib.auth.models import Permission
from django.shortcuts import get_object_or_404, redirect
from django.template.loader import render_to_string
from django.urls import reverse, reverse_lazy
from django.utils.translation import gettext_lazy as _
from django.views import generic

from oscar.apps.customer.utils import normalise_email
from oscar.core.compat import get_user_model
from oscar.core.loading import get_classes, get_model
from oscar.views import sort_queryset

User = get_user_model()
Partner = get_model('partner', 'Partner')
(
    PartnerSearchForm, PartnerCreateForm, PartnerAddressForm,
    NewUserForm, UserEmailForm, ExistingUserForm
) = get_classes(
    'dashboard.partners.forms',
    ['PartnerSearchForm', 'PartnerCreateForm', 'PartnerAddressForm',
     'NewUserForm', 'UserEmailForm', 'ExistingUserForm'])


class PartnerListView(generic.ListView):
    model = Partner
    context_object_name = 'partners'
    template_name = 'oscar/dashboard/partners/partner_list.html'
    form_class = PartnerSearchForm

    def get_queryset(self):
        qs = self.model._default_manager.all()
        qs = sort_queryset(qs, self.request, ['name'])

        self.description = _("All partners")

        # We track whether the queryset is filtered to determine whether we
        # show the search form 'reset' button.
        self.is_filtered = False
        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return qs

        data = self.form.cleaned_data

        if data['name']:
            qs = qs.filter(name__icontains=data['name'])
            self.description = _("Partners matching '%s'") % data['name']
            self.is_filtered = True

        return qs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['queryset_description'] = self.description
        ctx['form'] = self.form
        ctx['is_filtered'] = self.is_filtered
        return ctx


class PartnerCreateView(generic.CreateView):
    model = Partner
    template_name = 'oscar/dashboard/partners/partner_form.html'
    form_class = PartnerCreateForm
    success_url = reverse_lazy('dashboard:partner-list')

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _('Create new partner')
        return ctx

    def get_success_url(self):
        messages.success(self.request,
                         _("Partner '%s' was created successfully.") %
                         self.object.name)
        return reverse('dashboard:partner-list')


class PartnerManageView(generic.UpdateView):
    """
    This multi-purpose view renders out a form to edit the partner's details,
    the associated address and a list of all associated users.
    """
    template_name = 'oscar/dashboard/partners/partner_manage.html'
    form_class = PartnerAddressForm
    success_url = reverse_lazy('dashboard:partner-list')

    def get_object(self, queryset=None):
        self.partner = get_object_or_404(Partner, pk=self.kwargs['pk'])
        address = self.partner.primary_address
        if address is None:
            address = self.partner.addresses.model(partner=self.partner)
        return address

    def get_initial(self):
        return {'name': self.partner.name}

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['partner'] = self.partner
        ctx['title'] = self.partner.name
        ctx['users'] = self.partner.users.all()
        return ctx

    def form_valid(self, form):
        messages.success(
            self.request, _("Partner '%s' was updated successfully.") %
            self.partner.name)
        self.partner.name = form.cleaned_data['name']
        self.partner.save()
        return super().form_valid(form)


class PartnerDeleteView(generic.DeleteView):
    model = Partner
    template_name = 'oscar/dashboard/partners/partner_delete.html'

    def get_success_url(self):
        messages.success(self.request,
                         _("Partner '%s' was deleted successfully.") %
                         self.object.name)
        return reverse('dashboard:partner-list')


# =============
# Partner users
# =============


class PartnerUserCreateView(generic.CreateView):
    model = User
    template_name = 'oscar/dashboard/partners/partner_user_form.html'
    form_class = NewUserForm

    def dispatch(self, request, *args, **kwargs):
        self.partner = get_object_or_404(
            Partner, pk=kwargs.get('partner_pk', None))
        return super().dispatch(
            request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['partner'] = self.partner
        ctx['title'] = _('Create user')
        return ctx

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['partner'] = self.partner
        return kwargs

    def get_success_url(self):
        name = self.object.get_full_name() or self.object.email
        messages.success(self.request,
                         _("User '%s' was created successfully.") % name)
        return reverse('dashboard:partner-list')


class PartnerUserSelectView(generic.ListView):
    template_name = 'oscar/dashboard/partners/partner_user_select.html'
    form_class = UserEmailForm
    context_object_name = 'users'

    def dispatch(self, request, *args, **kwargs):
        self.partner = get_object_or_404(
            Partner, pk=kwargs.get('partner_pk', None))
        return super().dispatch(
            request, *args, **kwargs)

    def get(self, request, *args, **kwargs):
        data = None
        if 'email' in request.GET:
            data = request.GET
        self.form = self.form_class(data)
        return super().get(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['partner'] = self.partner
        ctx['form'] = self.form
        return ctx

    def get_queryset(self):
        if self.form.is_valid():
            email = normalise_email(self.form.cleaned_data['email'])
            return User.objects.filter(email__icontains=email)
        else:
            return User.objects.none()


class PartnerUserLinkView(generic.View):

    def get(self, request, user_pk, partner_pk):
        # need to allow GET to make Undo link in PartnerUserUnlinkView work
        return self.post(request, user_pk, partner_pk)

    def post(self, request, user_pk, partner_pk):
        user = get_object_or_404(User, pk=user_pk)
        name = user.get_full_name() or user.email
        partner = get_object_or_404(Partner, pk=partner_pk)
        if self.link_user(user, partner):
            messages.success(
                request,
                _("User '%(name)s' was linked to '%(partner_name)s'")
                % {'name': name, 'partner_name': partner.name})
        else:
            messages.info(
                request,
                _("User '%(name)s' is already linked to '%(partner_name)s'")
                % {'name': name, 'partner_name': partner.name})
        return redirect('dashboard:partner-manage', pk=partner_pk)

    def link_user(self, user, partner):
        """
        Links a user to a partner, and adds the dashboard permission if needed.

        Returns False if the user was linked already; True otherwise.
        """
        if partner.users.filter(pk=user.pk).exists():
            return False
        partner.users.add(user)
        if not user.is_staff:
            dashboard_access_perm = Permission.objects.get(
                codename='dashboard_access',
                content_type__app_label='partner')
            user.user_permissions.add(dashboard_access_perm)
        return True


class PartnerUserUnlinkView(generic.View):

    def unlink_user(self, user, partner):
        """
        Unlinks a user from a partner, and removes the dashboard permission
        if they are not linked to any other partners.

        Returns False if the user was not linked to the partner; True
        otherwise.
        """
        if not partner.users.filter(pk=user.pk).exists():
            return False
        partner.users.remove(user)
        if not user.is_staff and not user.partners.exists():
            dashboard_access_perm = Permission.objects.get(
                codename='dashboard_access',
                content_type__app_label='partner')
            user.user_permissions.remove(dashboard_access_perm)
        return True

    def post(self, request, user_pk, partner_pk):
        user = get_object_or_404(User, pk=user_pk)
        name = user.get_full_name() or user.email
        partner = get_object_or_404(Partner, pk=partner_pk)
        if self.unlink_user(user, partner):
            msg = render_to_string(
                'oscar/dashboard/partners/messages/user_unlinked.html',
                {'user_name': name,
                 'partner_name': partner.name,
                 'user_pk': user_pk,
                 'partner_pk': partner_pk})
            messages.success(self.request, msg, extra_tags='safe noicon')
        else:
            messages.error(
                request,
                _("User '%(name)s' is not linked to '%(partner_name)s'") %
                {'name': name, 'partner_name': partner.name})
        return redirect('dashboard:partner-manage', pk=partner_pk)


# =====
# Users
# =====


class PartnerUserUpdateView(generic.UpdateView):
    template_name = 'oscar/dashboard/partners/partner_user_form.html'
    form_class = ExistingUserForm

    def get_object(self, queryset=None):
        self.partner = get_object_or_404(Partner, pk=self.kwargs['partner_pk'])
        return get_object_or_404(User,
                                 pk=self.kwargs['user_pk'],
                                 partners__pk=self.kwargs['partner_pk'])

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        name = self.object.get_full_name() or self.object.email
        ctx['partner'] = self.partner
        ctx['title'] = _("Edit user '%s'") % name
        return ctx

    def get_success_url(self):
        name = self.object.get_full_name() or self.object.email
        messages.success(self.request,
                         _("User '%s' was updated successfully.") % name)
        return reverse('dashboard:partner-list')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.forms:0
==oscar.apps.basket.forms:0
from django import forms
from django.conf import settings
from django.db.models import Sum
from django.forms.utils import ErrorDict
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_model
from oscar.forms import widgets

Line = get_model('basket', 'line')
Basket = get_model('basket', 'basket')
Product = get_model('catalogue', 'product')


class BasketLineForm(forms.ModelForm):
    save_for_later = forms.BooleanField(
        initial=False, required=False, label=_('Save for Later'))

    def __init__(self, strategy, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.strategy = strategy

        # Evaluate max allowed quantity check only if line still exists, in
        # order to avoid check run against missing instance -
        # https://github.com/django-oscar/django-oscar/issues/2873.
        if self.instance.id:
            max_allowed_quantity = None
            num_available = getattr(self.instance.purchase_info.availability, 'num_available', None)
            basket_max_allowed_quantity = self.instance.basket.max_allowed_quantity()[0]
            if all([num_available, basket_max_allowed_quantity]):
                max_allowed_quantity = min(num_available, basket_max_allowed_quantity)
            else:
                max_allowed_quantity = num_available or basket_max_allowed_quantity
            if max_allowed_quantity:
                self.fields['quantity'].widget.attrs['max'] = max_allowed_quantity

    def full_clean(self):
        if not self.instance.id:
            self.cleaned_data = {}
            self._errors = ErrorDict()
            return
        return super().full_clean()

    def has_changed(self):
        if not self.instance.id:
            return False
        return super().has_changed()

    def clean_quantity(self):
        qty = self.cleaned_data['quantity']
        if qty > 0:
            self.check_max_allowed_quantity(qty)
            self.check_permission(qty)
        return qty

    def check_max_allowed_quantity(self, qty):
        # Since `Basket.is_quantity_allowed` checks quantity of added product
        # against total number of the products in the basket, instead of sending
        # updated quantity of the product, we send difference between current
        # number and updated. Thus, product already in the basket and we don't
        # add second time, just updating number of items.
        qty_delta = qty - self.instance.quantity
        is_allowed, reason = self.instance.basket.is_quantity_allowed(qty_delta)
        if not is_allowed:
            raise forms.ValidationError(reason)

    def check_permission(self, qty):
        policy = self.instance.purchase_info.availability
        is_available, reason = policy.is_purchase_permitted(
            quantity=qty)
        if not is_available:
            raise forms.ValidationError(reason)

    class Meta:
        model = Line
        fields = ['quantity']


class SavedLineForm(forms.ModelForm):
    move_to_basket = forms.BooleanField(initial=False, required=False,
                                        label=_('Move to Basket'))

    class Meta:
        model = Line
        fields = ('id', 'move_to_basket')

    def __init__(self, strategy, basket, *args, **kwargs):
        self.strategy = strategy
        self.basket = basket
        super().__init__(*args, **kwargs)

    def clean(self):
        cleaned_data = super().clean()
        if not cleaned_data['move_to_basket']:
            # skip further validation (see issue #666)
            return cleaned_data

        # Get total quantity of all lines with this product (there's normally
        # only one but there can be more if you allow product options).
        lines = self.basket.lines.filter(product=self.instance.product)
        current_qty = lines.aggregate(Sum('quantity'))['quantity__sum'] or 0
        desired_qty = current_qty + self.instance.quantity

        result = self.strategy.fetch_for_product(self.instance.product)
        is_available, reason = result.availability.is_purchase_permitted(
            quantity=desired_qty)
        if not is_available:
            raise forms.ValidationError(reason)
        return cleaned_data


class BasketVoucherForm(forms.Form):
    code = forms.CharField(max_length=128, label=_('Code'))

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def clean_code(self):
        return self.cleaned_data['code'].strip().upper()


class AddToBasketForm(forms.Form):
    quantity = forms.IntegerField(initial=1, min_value=1, label=_('Quantity'))

    def __init__(self, basket, product, *args, **kwargs):
        # Note, the product passed in here isn't necessarily the product being
        # added to the basket. For child products, it is the *parent* product
        # that gets passed to the form. An optional product_id param is passed
        # to indicate the ID of the child product being added to the basket.
        self.basket = basket
        self.parent_product = product

        super().__init__(*args, **kwargs)

        # Dynamically build fields
        if product.is_parent:
            self._create_parent_product_fields(product)
        self._create_product_fields(product)

    # Dynamic form building methods

    def _create_parent_product_fields(self, product):
        """
        Adds the fields for a "group"-type product (eg, a parent product with a
        list of children.

        Currently requires that a stock record exists for the children
        """
        choices = []
        disabled_values = []
        for child in product.children.all():
            # Build a description of the child, including any pertinent
            # attributes
            attr_summary = child.attribute_summary
            if attr_summary:
                summary = attr_summary
            else:
                summary = child.get_title()

            # Check if it is available to buy
            info = self.basket.strategy.fetch_for_product(child)
            if not info.availability.is_available_to_buy:
                disabled_values.append(child.id)

            choices.append((child.id, summary))

        self.fields['child_id'] = forms.ChoiceField(
            choices=tuple(choices), label=_("Variant"),
            widget=widgets.AdvancedSelect(disabled_values=disabled_values))

    def _create_product_fields(self, product):
        """
        Add the product option fields.
        """
        for option in product.options:
            self._add_option_field(product, option)

    def _add_option_field(self, product, option):
        """
        Creates the appropriate form field for the product option.

        This is designed to be overridden so that specific widgets can be used
        for certain types of options.
        """
        self.fields[option.code] = forms.CharField(
            label=option.name, required=option.is_required)

    # Cleaning

    def clean_child_id(self):
        try:
            child = self.parent_product.children.get(
                id=self.cleaned_data['child_id'])
        except Product.DoesNotExist:
            raise forms.ValidationError(
                _("Please select a valid product"))

        # To avoid duplicate SQL queries, we cache a copy of the loaded child
        # product as we're going to need it later.
        self.child_product = child

        return self.cleaned_data['child_id']

    def clean_quantity(self):
        # Check that the proposed new line quantity is sensible
        qty = self.cleaned_data['quantity']
        basket_threshold = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD
        if basket_threshold:
            total_basket_quantity = self.basket.num_items
            max_allowed = basket_threshold - total_basket_quantity
            if qty > max_allowed:
                raise forms.ValidationError(
                    _("Due to technical limitations we are not able to ship"
                      " more than %(threshold)d items in one order. Your"
                      " basket currently has %(basket)d items.")
                    % {'threshold': basket_threshold,
                       'basket': total_basket_quantity})
        return qty

    @property
    def product(self):
        """
        The actual product being added to the basket
        """
        # Note, the child product attribute is saved in the clean_child_id
        # method
        return getattr(self, 'child_product', self.parent_product)

    def clean(self):
        info = self.basket.strategy.fetch_for_product(self.product)

        # Check that a price was found by the strategy
        if not info.price.exists:
            raise forms.ValidationError(
                _("This product cannot be added to the basket because a "
                  "price could not be determined for it."))

        # Check currencies are sensible
        if (self.basket.currency
                and info.price.currency != self.basket.currency):
            raise forms.ValidationError(
                _("This product cannot be added to the basket as its currency "
                  "isn't the same as other products in your basket"))

        # Check user has permission to add the desired quantity to their
        # basket.
        current_qty = self.basket.product_quantity(self.product)
        desired_qty = current_qty + self.cleaned_data.get('quantity', 1)
        is_permitted, reason = info.availability.is_purchase_permitted(
            desired_qty)
        if not is_permitted:
            raise forms.ValidationError(reason)

        return self.cleaned_data

    # Helpers

    def cleaned_options(self):
        """
        Return submitted options in a clean format
        """
        options = []
        for option in self.parent_product.options:
            if option.code in self.cleaned_data:
                options.append({
                    'option': option,
                    'value': self.cleaned_data[option.code]})
        return options


class SimpleAddToBasketForm(AddToBasketForm):
    """
    Simplified version of the add to basket form where the quantity is
    defaulted to 1 and rendered in a hidden widget

    Most of the time, you won't need to override this class. Just change
    AddToBasketForm to change behaviour in both forms at once.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if 'quantity' in self.fields:
            self.fields['quantity'].initial = 1
            self.fields['quantity'].widget = forms.HiddenInput()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.forms:0
==oscar.apps.payment.forms:0
import re
from calendar import monthrange
from datetime import date

from django import forms
from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model
from oscar.forms.mixins import PhoneNumberMixin

from . import bankcards

Country = get_model('address', 'Country')
BillingAddress = get_model('order', 'BillingAddress')
Bankcard = get_model('payment', 'Bankcard')
AbstractAddressForm = get_class('address.forms', 'AbstractAddressForm')

# List of card names for all the card types supported in payment.bankcards
VALID_CARDS = set([card_type[0] for card_type in bankcards.CARD_TYPES])


class BankcardNumberField(forms.CharField):

    def __init__(self, *args, **kwargs):
        _kwargs = {
            'max_length': 20,
            'widget': forms.TextInput(attrs={'autocomplete': 'off'}),
            'label': _("Card number")
        }
        if 'types' in kwargs:
            self.accepted_cards = set(kwargs.pop('types'))
            difference = self.accepted_cards - VALID_CARDS
            if difference:
                raise ImproperlyConfigured('The following accepted_cards are '
                                           'unknown: %s' % difference)

        _kwargs.update(kwargs)
        super().__init__(*args, **_kwargs)

    def clean(self, value):
        """
        Check if given CC number is valid and one of the
        card types we accept
        """
        non_decimal = re.compile(r'\D+')
        value = non_decimal.sub('', (value or '').strip())

        if value and not bankcards.luhn(value):
            raise forms.ValidationError(
                _("Please enter a valid credit card number."))

        if hasattr(self, 'accepted_cards'):
            card_type = bankcards.bankcard_type(value)
            if card_type not in self.accepted_cards:
                raise forms.ValidationError(
                    _("%s cards are not accepted." % card_type))

        return super().clean(value)


class BankcardMonthWidget(forms.MultiWidget):
    """
    Widget containing two select boxes for selecting the month and year
    """
    def decompress(self, value):
        return [value.month, value.year] if value else [None, None]

    def format_output(self, rendered_widgets):
        html = ' '.join(rendered_widgets)
        return '<span style="white-space: nowrap">%s</span>' % html


class BankcardMonthField(forms.MultiValueField):
    """
    A modified version of the snippet: http://djangosnippets.org/snippets/907/
    """
    default_error_messages = {
        'invalid_month': _('Enter a valid month.'),
        'invalid_year': _('Enter a valid year.'),
    }
    num_years = 5

    def __init__(self, *args, **kwargs):
        # Allow the number of years to be specified
        if 'num_years' in kwargs:
            self.num_years = kwargs.pop('num_years')

        errors = self.default_error_messages.copy()
        if 'error_messages' in kwargs:
            errors.update(kwargs['error_messages'])

        fields = (
            forms.ChoiceField(
                choices=self.month_choices(),
                error_messages={'invalid': errors['invalid_month']}),
            forms.ChoiceField(
                choices=self.year_choices(),
                error_messages={'invalid': errors['invalid_year']}),
        )
        if 'widget' not in kwargs:
            kwargs['widget'] = BankcardMonthWidget(
                widgets=[fields[0].widget, fields[1].widget])
        super().__init__(fields, *args, **kwargs)

    def month_choices(self):
        return []

    def year_choices(self):
        return []


class BankcardExpiryMonthField(BankcardMonthField):
    num_years = 10

    def __init__(self, *args, **kwargs):
        today = date.today()
        _kwargs = {
            'required': True,
            'label': _("Valid to"),
            'initial': ["%.2d" % today.month, today.year]
        }
        _kwargs.update(kwargs)
        super().__init__(*args, **_kwargs)

    def month_choices(self):
        return [("%.2d" % x, "%.2d" % x) for x in range(1, 13)]

    def year_choices(self):
        return [(x, x) for x in range(
            date.today().year,
            date.today().year + self.num_years)]

    def clean(self, value):
        expiry_date = super().clean(value)
        if expiry_date and date.today() > expiry_date:
            raise forms.ValidationError(
                _("The expiration date you entered is in the past."))
        return expiry_date

    def compress(self, data_list):
        if data_list:
            if data_list[1] in forms.fields.EMPTY_VALUES:
                error = self.error_messages['invalid_year']
                raise forms.ValidationError(error)
            if data_list[0] in forms.fields.EMPTY_VALUES:
                error = self.error_messages['invalid_month']
                raise forms.ValidationError(error)
            year = int(data_list[1])
            month = int(data_list[0])
            # find last day of the month
            day = monthrange(year, month)[1]
            return date(year, month, day)
        return None


class BankcardStartingMonthField(BankcardMonthField):

    def __init__(self, *args, **kwargs):
        _kwargs = {
            'required': False,
            'label': _("Valid from"),
        }
        _kwargs.update(kwargs)
        super().__init__(*args, **_kwargs)

    def month_choices(self):
        months = [("%.2d" % x, "%.2d" % x) for x in range(1, 13)]
        months.insert(0, ("", "--"))
        return months

    def year_choices(self):
        today = date.today()
        years = [(x, x) for x in range(
            today.year - self.num_years,
            today.year + 1)]
        years.insert(0, ("", "--"))
        return years

    def clean(self, value):
        starting_date = super().clean(value)
        if starting_date and date.today() < starting_date:
            raise forms.ValidationError(
                _("The starting date you entered is in the future."))
        return starting_date

    def compress(self, data_list):
        if data_list:
            if data_list[1] in forms.fields.EMPTY_VALUES:
                error = self.error_messages['invalid_year']
                raise forms.ValidationError(error)
            if data_list[0] in forms.fields.EMPTY_VALUES:
                error = self.error_messages['invalid_month']
                raise forms.ValidationError(error)
            year = int(data_list[1])
            month = int(data_list[0])
            return date(year, month, 1)
        return None


class BankcardCCVField(forms.RegexField):

    def __init__(self, *args, **kwargs):
        _kwargs = {
            'required': True,
            'label': _("CCV number"),
            'widget': forms.TextInput(attrs={'size': '5'}),
            'error_messages': {
                'invalid': _("Please enter a 3 or 4 digit number")},
            'help_text': _("This is the 3 or 4 digit security number "
                           "on the back of your bankcard")
        }
        _kwargs.update(kwargs)
        super().__init__(
            r'^\d{3,4}$', *args, **_kwargs)

    def clean(self, value):
        if value is not None:
            value = value.strip()
        return super().clean(value)


class BankcardForm(forms.ModelForm):
    # By default, this number field will accept any number. The only validation
    # is whether it passes the luhn check. If you wish to only accept certain
    # types of card, you can pass a types kwarg to BankcardNumberField, e.g.
    #
    # BankcardNumberField(types=[bankcards.VISA, bankcards.VISA_ELECTRON,])

    number = BankcardNumberField()
    ccv = BankcardCCVField()
    start_month = BankcardStartingMonthField()
    expiry_month = BankcardExpiryMonthField()

    class Meta:
        model = Bankcard
        fields = ('number', 'start_month', 'expiry_month', 'ccv')

    def clean(self):
        data = self.cleaned_data
        number, ccv = data.get('number'), data.get('ccv')
        if number and ccv:
            if bankcards.is_amex(number) and len(ccv) != 4:
                raise forms.ValidationError(_(
                    "American Express cards use a 4 digit security code"))
        return data

    def save(self, *args, **kwargs):
        # It doesn't really make sense to save directly from the form as saving
        # will obfuscate some of the card details which you normally need to
        # pass to a payment gateway.  Better to use the bankcard property below
        # to get the cleaned up data, then once you've used the sensitive
        # details, you can save.
        raise RuntimeError("Don't save bankcards directly from form")

    @property
    def bankcard(self):
        """
        Return an instance of the Bankcard model (unsaved)
        """
        return Bankcard(number=self.cleaned_data['number'],
                        expiry_date=self.cleaned_data['expiry_month'],
                        start_date=self.cleaned_data['start_month'],
                        ccv=self.cleaned_data['ccv'])


class BillingAddressForm(PhoneNumberMixin, AbstractAddressForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.set_country_queryset()

    def set_country_queryset(self):
        self.fields['country'].queryset = Country._default_manager.all()

    class Meta:
        model = BillingAddress
        fields = [
            'title', 'first_name', 'last_name',
            'line1', 'line2', 'line3', 'line4',
            'state', 'postcode', 'country',
        ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0001_initial:1
==oscar.apps.catalogue.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
import django.db.models.deletion
import django.core.validators
import oscar.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=255, verbose_name='Option')),
            ],
            options={
                'verbose_name_plural': 'Attribute options',
                'verbose_name': 'Attribute option',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AttributeOptionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
            ],
            options={
                'verbose_name_plural': 'Attribute option groups',
                'verbose_name': 'Attribute option group',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(unique=True, max_length=255)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=255, db_index=True, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description', blank=True)),
                ('image', models.ImageField(upload_to='categories', verbose_name='Image', max_length=255, blank=True, null=True)),
                ('slug', models.SlugField(max_length=255, editable=False, verbose_name='Slug')),
                ('full_name', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Full Name')),
            ],
            options={
                'ordering': ['full_name'],
                'verbose_name_plural': 'Categories',
                'verbose_name': 'Category',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Code', max_length=128, editable=False, blank=True)),
                ('type', models.CharField(default='Required', max_length=128, verbose_name='Status', choices=[('Required', 'Required - a value for this option must be specified'), ('Optional', 'Optional - a value for this option can be omitted')])),
            ],
            options={
                'verbose_name_plural': 'Options',
                'verbose_name': 'Option',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('structure', models.CharField(default='standalone', max_length=10, verbose_name='Product structure', choices=[('standalone', 'Stand-alone product'), ('parent', 'Parent product'), ('child', 'Child product')])),
                ('upc', oscar.models.fields.NullCharField(unique=True, verbose_name='UPC', max_length=64, help_text='Universal Product Code (UPC) is an identifier for a product which is not specific to a particular  supplier. Eg an ISBN for a book.')),
                ('title', models.CharField(max_length=255, verbose_name='Title', blank=True)),
                ('slug', models.SlugField(max_length=255, verbose_name='Slug')),
                ('description', models.TextField(verbose_name='Description', blank=True)),
                ('rating', models.FloatField(editable=False, verbose_name='Rating', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Date updated')),
                ('is_discountable', models.BooleanField(default=True, verbose_name='Is discountable?', help_text='This flag indicates if this product can be used in an offer or not')),
            ],
            options={
                'ordering': ['-date_created'],
                'verbose_name_plural': 'Products',
                'verbose_name': 'Product',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('code', models.SlugField(max_length=128, verbose_name='Code', validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z\\-_][0-9a-zA-Z\\-_]*$', message="Code can only contain the letters a-z, A-Z, digits, minus and underscores, and can't start with a digit")])),
                ('type', models.CharField(default='text', max_length=20, verbose_name='Type', choices=[('text', 'Text'), ('integer', 'Integer'), ('boolean', 'True / False'), ('float', 'Float'), ('richtext', 'Rich Text'), ('date', 'Date'), ('option', 'Option'), ('entity', 'Entity'), ('file', 'File'), ('image', 'Image')])),
                ('required', models.BooleanField(default=False, verbose_name='Required')),
                ('option_group', models.ForeignKey(null=True, verbose_name='Option Group', help_text='Select an option group if using type "Option"', to='catalogue.AttributeOptionGroup', blank=True, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['code'],
                'verbose_name_plural': 'Product attributes',
                'verbose_name': 'Product attribute',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_text', models.TextField(blank=True, verbose_name='Text', null=True)),
                ('value_integer', models.IntegerField(blank=True, verbose_name='Integer', null=True)),
                ('value_boolean', models.NullBooleanField(verbose_name='Boolean')),
                ('value_float', models.FloatField(blank=True, verbose_name='Float', null=True)),
                ('value_richtext', models.TextField(blank=True, verbose_name='Richtext', null=True)),
                ('value_date', models.DateField(blank=True, verbose_name='Date', null=True)),
                ('value_file', models.FileField(upload_to='images/products/%Y/%m/', max_length=255, blank=True, null=True)),
                ('value_image', models.ImageField(upload_to='images/products/%Y/%m/', max_length=255, blank=True, null=True)),
                ('entity_object_id', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('attribute', models.ForeignKey(verbose_name='Attribute', to='catalogue.ProductAttribute', on_delete=models.CASCADE)),
                ('entity_content_type', models.ForeignKey(null=True, editable=False, to='contenttypes.ContentType', blank=True, on_delete=models.CASCADE)),
                ('product', models.ForeignKey(verbose_name='Product', related_name='attribute_values', to='catalogue.Product', on_delete=models.CASCADE)),
                ('value_option', models.ForeignKey(null=True, verbose_name='Value option', to='catalogue.AttributeOption', blank=True, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Product attribute values',
                'verbose_name': 'Product attribute value',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(verbose_name='Category', to='catalogue.Category', on_delete=models.CASCADE)),
                ('product', models.ForeignKey(verbose_name='Product', to='catalogue.Product', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['product', 'category'],
                'verbose_name_plural': 'Product categories',
                'verbose_name': 'Product category',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('slug', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Slug', max_length=128, editable=False, blank=True)),
                ('requires_shipping', models.BooleanField(default=True, verbose_name='Requires shipping?')),
                ('track_stock', models.BooleanField(default=True, verbose_name='Track stock levels?')),
                ('options', models.ManyToManyField(verbose_name='Options', to='catalogue.Option', blank=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Product classes',
                'verbose_name': 'Product class',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.ImageField(upload_to='images/products/%Y/%m/', max_length=255, verbose_name='Original')),
                ('caption', models.CharField(max_length=200, verbose_name='Caption', blank=True)),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name='Display order', help_text='An image with a display order of zero will be the primary image for a product')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('product', models.ForeignKey(verbose_name='Product', related_name='images', to='catalogue.Product', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['display_order'],
                'verbose_name_plural': 'Product images',
                'verbose_name': 'Product image',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductRecommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.PositiveSmallIntegerField(default=0, verbose_name='Ranking', help_text='Determines order of the products. A product with a higher value will appear before one with a lower ranking.')),
                ('primary', models.ForeignKey(verbose_name='Primary product', related_name='primary_recommendations', to='catalogue.Product', on_delete=models.CASCADE)),
                ('recommendation', models.ForeignKey(verbose_name='Recommended product', to='catalogue.Product', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['primary', '-ranking'],
                'verbose_name_plural': 'Product recomendations',
                'verbose_name': 'Product recommendation',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='productrecommendation',
            unique_together=set([('primary', 'recommendation')]),
        ),
        migrations.AlterUniqueTogether(
            name='productimage',
            unique_together=set([('product', 'display_order')]),
        ),
        migrations.AlterUniqueTogether(
            name='productcategory',
            unique_together=set([('product', 'category')]),
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalue',
            unique_together=set([('attribute', 'product')]),
        ),
        migrations.AddField(
            model_name='productattribute',
            name='product_class',
            field=models.ForeignKey(null=True, verbose_name='Product type', related_name='attributes', to='catalogue.ProductClass', blank=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='product',
            name='attributes',
            field=models.ManyToManyField(verbose_name='Attributes', help_text='A product attribute is something that this product may have, such as a size, as specified by its class', to='catalogue.ProductAttribute', through='catalogue.ProductAttributeValue'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='product',
            name='categories',
            field=models.ManyToManyField(through='catalogue.ProductCategory', verbose_name='Categories', to='catalogue.Category'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='product',
            name='parent',
            field=models.ForeignKey(null=True, verbose_name='Parent product', related_name='children', help_text="Only choose a parent product if you're creating a child product.  For example if this is a size 4 of a particular t-shirt.  Leave blank if this is a stand-alone product (i.e. there is only one version of this product).", to='catalogue.Product', blank=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='product',
            name='product_class',
            field=models.ForeignKey(verbose_name='Product type', on_delete=django.db.models.deletion.PROTECT, related_name='products', help_text='Choose what type of product this is', to='catalogue.ProductClass', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='product',
            name='product_options',
            field=models.ManyToManyField(verbose_name='Product options', help_text="Options are values that can be associated with a item when it is added to a customer's basket.  This could be something like a personalised message to be printed on a T-shirt.", to='catalogue.Option', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='product',
            name='recommended_products',
            field=models.ManyToManyField(verbose_name='Recommended products', help_text='These are products that are recommended to accompany the main product.', to='catalogue.Product', through='catalogue.ProductRecommendation', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='attributeoption',
            name='group',
            field=models.ForeignKey(verbose_name='Group', related_name='options', to='catalogue.AttributeOptionGroup', on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0001_initial:1
==oscar.apps.offer.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
from decimal import Decimal
import oscar.models.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Benefit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(verbose_name='Type', max_length=128, blank=True, choices=[('Percentage', "Discount is a percentage off of the product's value"), ('Absolute', "Discount is a fixed amount off of the product's value"), ('Multibuy', 'Discount is to give the cheapest product for free'), ('Fixed price', 'Get the products that meet the condition for a fixed price'), ('Shipping absolute', 'Discount is a fixed amount of the shipping cost'), ('Shipping fixed price', 'Get shipping for a fixed price'), ('Shipping percentage', 'Discount is a percentage off of the shipping cost')])),
                ('value', oscar.models.fields.PositiveDecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Value', null=True)),
                ('max_affected_items', models.PositiveIntegerField(verbose_name='Max Affected Items', blank=True, help_text='Set this to prevent the discount consuming all items within the range that are in the basket.', null=True)),
                ('proxy_class', oscar.models.fields.NullCharField(unique=True, verbose_name='Custom class', default=None, max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Benefits',
                'verbose_name': 'Benefit',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(verbose_name='Type', max_length=128, blank=True, choices=[('Count', 'Depends on number of items in basket that are in condition range'), ('Value', 'Depends on value of items in basket that are in condition range'), ('Coverage', 'Needs to contain a set number of DISTINCT items from the condition range')])),
                ('value', oscar.models.fields.PositiveDecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Value', null=True)),
                ('proxy_class', oscar.models.fields.NullCharField(unique=True, verbose_name='Custom class', default=None, max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Conditions',
                'verbose_name': 'Condition',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ConditionalOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(verbose_name='Name', unique=True, max_length=128, help_text="This is displayed within the customer's basket")),
                ('slug', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Slug', max_length=128, editable=False, blank=True)),
                ('description', models.TextField(verbose_name='Description', help_text='This is displayed on the offer browsing page', blank=True)),
                ('offer_type', models.CharField(default='Site', max_length=128, verbose_name='Type', choices=[('Site', 'Site offer - available to all users'), ('Voucher', 'Voucher offer - only available after entering the appropriate voucher code'), ('User', 'User offer - available to certain types of user'), ('Session', 'Session offer - temporary offer, available for a user for the duration of their session')])),
                ('status', models.CharField(default='Open', max_length=64, verbose_name='Status')),
                ('priority', models.IntegerField(default=0, verbose_name='Priority', help_text='The highest priority offers are applied first')),
                ('start_datetime', models.DateTimeField(blank=True, verbose_name='Start date', null=True)),
                ('end_datetime', models.DateTimeField(verbose_name='End date', blank=True, help_text="Offers are active until the end of the 'end date'", null=True)),
                ('max_global_applications', models.PositiveIntegerField(verbose_name='Max global applications', blank=True, help_text='The number of times this offer can be used before it is unavailable', null=True)),
                ('max_user_applications', models.PositiveIntegerField(verbose_name='Max user applications', blank=True, help_text='The number of times a single user can use this offer', null=True)),
                ('max_basket_applications', models.PositiveIntegerField(verbose_name='Max basket applications', blank=True, help_text='The number of times this offer can be applied to a basket (and order)', null=True)),
                ('max_discount', models.DecimalField(verbose_name='Max discount', max_digits=12, decimal_places=2, null=True, help_text='When an offer has given more discount to orders than this threshold, then the offer becomes unavailable', blank=True)),
                ('total_discount', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Total Discount')),
                ('num_applications', models.PositiveIntegerField(default=0, verbose_name='Number of applications')),
                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),
                ('redirect_url', oscar.models.fields.ExtendedURLField(verbose_name='URL redirect (optional)', blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('benefit', models.ForeignKey(verbose_name='Benefit', to='offer.Benefit', on_delete=models.CASCADE)),
                ('condition', models.ForeignKey(verbose_name='Condition', to='offer.Condition', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['-priority'],
                'verbose_name_plural': 'Conditional offers',
                'verbose_name': 'Conditional offer',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Range',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='Name')),
                ('slug', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Slug', max_length=128, editable=False, blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False, verbose_name='Is public?', help_text='Public ranges have a customer-facing page')),
                ('includes_all_products', models.BooleanField(default=False, verbose_name='Includes all products?')),
                ('proxy_class', oscar.models.fields.NullCharField(unique=True, verbose_name='Custom class', default=None, max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('classes', models.ManyToManyField(related_name='classes', verbose_name='Product Types', to='catalogue.ProductClass', blank=True)),
                ('excluded_products', models.ManyToManyField(related_name='excludes', verbose_name='Excluded Products', to='catalogue.Product', blank=True)),
                ('included_categories', models.ManyToManyField(related_name='includes', verbose_name='Included Categories', to='catalogue.Category', blank=True)),
            ],
            options={
                'verbose_name_plural': 'Ranges',
                'verbose_name': 'Range',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RangeProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_order', models.IntegerField(default=0)),
                ('product', models.ForeignKey(to='catalogue.Product', on_delete=models.CASCADE)),
                ('range', models.ForeignKey(to='offer.Range', on_delete=models.CASCADE)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RangeProductFileUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filepath', models.CharField(max_length=255, verbose_name='File Path')),
                ('size', models.PositiveIntegerField(verbose_name='Size')),
                ('date_uploaded', models.DateTimeField(auto_now_add=True, verbose_name='Date Uploaded')),
                ('status', models.CharField(default='Pending', max_length=32, verbose_name='Status', choices=[('Pending', 'Pending'), ('Failed', 'Failed'), ('Processed', 'Processed')])),
                ('error_message', models.CharField(max_length=255, verbose_name='Error Message', blank=True)),
                ('date_processed', models.DateTimeField(verbose_name='Date Processed', null=True)),
                ('num_new_skus', models.PositiveIntegerField(verbose_name='Number of New SKUs', null=True)),
                ('num_unknown_skus', models.PositiveIntegerField(verbose_name='Number of Unknown SKUs', null=True)),
                ('num_duplicate_skus', models.PositiveIntegerField(verbose_name='Number of Duplicate SKUs', null=True)),
                ('range', models.ForeignKey(verbose_name='Range', related_name='file_uploads', to='offer.Range', on_delete=models.CASCADE)),
                ('uploaded_by', models.ForeignKey(verbose_name='Uploaded By', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('-date_uploaded',),
                'verbose_name_plural': 'Range Product Uploaded Files',
                'verbose_name': 'Range Product Uploaded File',
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='rangeproduct',
            unique_together=set([('range', 'product')]),
        ),
        migrations.AddField(
            model_name='range',
            name='included_products',
            field=models.ManyToManyField(related_name='includes', verbose_name='Included Products', to='catalogue.Product', through='offer.RangeProduct', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='condition',
            name='range',
            field=models.ForeignKey(null=True, verbose_name='Range', to='offer.Range', blank=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='benefit',
            name='range',
            field=models.ForeignKey(null=True, verbose_name='Range', to='offer.Range', blank=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='AbsoluteDiscountBenefit',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Absolute discount benefits',
                'verbose_name': 'Absolute discount benefit',
                'proxy': True,
            },
            bases=('offer.benefit',),
        ),
        migrations.CreateModel(
            name='CountCondition',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Count conditions',
                'verbose_name': 'Count condition',
                'proxy': True,
            },
            bases=('offer.condition',),
        ),
        migrations.CreateModel(
            name='CoverageCondition',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Coverage Conditions',
                'verbose_name': 'Coverage Condition',
                'proxy': True,
            },
            bases=('offer.condition',),
        ),
        migrations.CreateModel(
            name='FixedPriceBenefit',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Fixed price benefits',
                'verbose_name': 'Fixed price benefit',
                'proxy': True,
            },
            bases=('offer.benefit',),
        ),
        migrations.CreateModel(
            name='MultibuyDiscountBenefit',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Multibuy discount benefits',
                'verbose_name': 'Multibuy discount benefit',
                'proxy': True,
            },
            bases=('offer.benefit',),
        ),
        migrations.CreateModel(
            name='PercentageDiscountBenefit',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Percentage discount benefits',
                'verbose_name': 'Percentage discount benefit',
                'proxy': True,
            },
            bases=('offer.benefit',),
        ),
        migrations.CreateModel(
            name='ShippingBenefit',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('offer.benefit',),
        ),
        migrations.CreateModel(
            name='ShippingAbsoluteDiscountBenefit',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Shipping absolute discount benefits',
                'verbose_name': 'Shipping absolute discount benefit',
                'proxy': True,
            },
            bases=('offer.shippingbenefit',),
        ),
        migrations.CreateModel(
            name='ShippingFixedPriceBenefit',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Fixed price shipping benefits',
                'verbose_name': 'Fixed price shipping benefit',
                'proxy': True,
            },
            bases=('offer.shippingbenefit',),
        ),
        migrations.CreateModel(
            name='ShippingPercentageDiscountBenefit',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Shipping percentage discount benefits',
                'verbose_name': 'Shipping percentage discount benefit',
                'proxy': True,
            },
            bases=('offer.shippingbenefit',),
        ),
        migrations.CreateModel(
            name='ValueCondition',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Value conditions',
                'verbose_name': 'Value condition',
                'proxy': True,
            },
            bases=('offer.condition',),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.processing:0
==oscar.apps.order.processing:0
from decimal import Decimal as D

from django.utils.translation import gettext_lazy as _

from oscar.apps.order import exceptions


class EventHandler(object):
    """
    Handle requested order events.

    This is an important class: it houses the core logic of your shop's order
    processing pipeline.
    """

    def __init__(self, user=None):
        self.user = user

    # Core API
    # --------

    def handle_shipping_event(self, order, event_type, lines,
                              line_quantities, **kwargs):
        """
        Handle a shipping event for a given order.

        This is most common entry point to this class - most of your order
        processing should be modelled around shipping events.  Shipping events
        can be used to trigger payment and communication events.

        You will generally want to override this method to implement the
        specifics of you order processing pipeline.
        """
        # Example implementation
        self.validate_shipping_event(
            order, event_type, lines, line_quantities, **kwargs)
        return self.create_shipping_event(
            order, event_type, lines, line_quantities, **kwargs)

    def handle_payment_event(self, order, event_type, amount, lines=None,
                             line_quantities=None, **kwargs):
        """
        Handle a payment event for a given order.

        These should normally be called as part of handling a shipping event.
        It is rare to call to this method directly.  It does make sense for
        refunds though where the payment event may be unrelated to a particular
        shipping event and doesn't directly correspond to a set of lines.
        """
        self.validate_payment_event(
            order, event_type, amount, lines, line_quantities, **kwargs)
        return self.create_payment_event(
            order, event_type, amount, lines, line_quantities, **kwargs)

    def handle_order_status_change(self, order, new_status, note_msg=None):
        """
        Handle a requested order status change

        This method is not normally called directly by client code.  The main
        use-case is when an order is cancelled, which in some ways could be
        viewed as a shipping event affecting all lines.
        """
        order.set_status(new_status)
        if note_msg:
            self.create_note(order, note_msg)

    # Validation methods
    # ------------------

    def validate_shipping_event(self, order, event_type, lines,
                                line_quantities, **kwargs):
        """
        Test if the requested shipping event is permitted.

        If not, raise InvalidShippingEvent
        """
        errors = []
        for line, qty in zip(lines, line_quantities):
            # The core logic should be in the model.  Ensure you override
            # 'is_shipping_event_permitted' and enforce the correct order of
            # shipping events.
            if not line.is_shipping_event_permitted(event_type, qty):
                msg = _("The selected quantity for line #%(line_id)s is too"
                        " large") % {'line_id': line.id}
                errors.append(msg)
        if errors:
            raise exceptions.InvalidShippingEvent(", ".join(errors))

    def validate_payment_event(self, order, event_type, amount, lines=None,
                               line_quantities=None, **kwargs):
        if lines and line_quantities:
            errors = []
            for line, qty in zip(lines, line_quantities):
                if not line.is_payment_event_permitted(event_type, qty):
                    msg = _("The selected quantity for line #%(line_id)s is too"
                            " large") % {'line_id': line.id}
                    errors.append(msg)
            if errors:
                raise exceptions.InvalidPaymentEvent(", ".join(errors))

    # Query methods
    # -------------
    # These are to help determine the status of lines

    def have_lines_passed_shipping_event(self, order, lines, line_quantities,
                                         event_type):
        """
        Test whether the passed lines and quantities have been through the
        specified shipping event.

        This is useful for validating if certain shipping events are allowed
        (i.e. you can't return something before it has shipped).
        """
        for line, line_qty in zip(lines, line_quantities):
            if line.shipping_event_quantity(event_type) < line_qty:
                return False
        return True

    # Payment stuff
    # -------------

    def calculate_payment_event_subtotal(self, event_type, lines,
                                         line_quantities):
        """
        Calculate the total charge for the passed event type, lines and line
        quantities.

        This takes into account the previous prices that have been charged for
        this event.

        Note that shipping is not including in this subtotal.  You need to
        subclass and extend this method if you want to include shipping costs.
        """
        total = D('0.00')
        for line, qty_to_consume in zip(lines, line_quantities):
            # This part is quite fiddly.  We need to skip the prices that have
            # already been settled.  This involves keeping a load of counters.

            # Count how many of this line have already been involved in an
            # event of this type.
            qty_to_skip = line.payment_event_quantity(event_type)

            # Test if request is sensible
            if qty_to_skip + qty_to_consume > line.quantity:
                raise exceptions.InvalidPaymentEvent

            # Consume prices in order of ID (this is the default but it's
            # better to be explicit)
            qty_consumed = 0
            for price in line.prices.all().order_by('id'):
                if qty_consumed == qty_to_consume:
                    # We've accounted for the asked-for quantity: we're done
                    break

                qty_available = price.quantity - qty_to_skip
                if qty_available <= 0:
                    # Skip the whole quantity of this price instance
                    qty_to_skip -= price.quantity
                else:
                    # Need to account for some of this price instance and
                    # track how many we needed to skip and how many we settled
                    # for.
                    qty_to_include = min(
                        qty_to_consume - qty_consumed, qty_available)
                    total += qty_to_include * price.price_incl_tax
                    # There can't be any left to skip if we've included some in
                    # our total
                    qty_to_skip = 0
                    qty_consumed += qty_to_include
        return total

    # Stock
    # -----

    def are_stock_allocations_available(self, lines, line_quantities):
        """
        Check whether stock records still have enough stock to honour the
        requested allocations.

        Lines whose product doesn't track stock are disregarded, which means
        this method will return True if only non-stock-tracking-lines are
        passed.
        This means you can just throw all order lines to this method, without
        checking whether stock tracking is enabled or not.
        This is okay, as calling consume_stock_allocations() has no effect for
        non-stock-tracking lines.
        """
        for line, qty in zip(lines, line_quantities):
            record = line.stockrecord
            if not record:
                return False
            if not record.can_track_allocations:
                continue
            if not record.is_allocation_consumption_possible(qty):
                return False
        return True

    def consume_stock_allocations(self, order, lines=None, line_quantities=None):
        """
        Consume the stock allocations for the passed lines.

        If no lines/quantities are passed, do it for all lines.
        """
        if not lines:
            lines = order.lines.all()
        if not line_quantities:
            line_quantities = [line.quantity for line in lines]
        for line, qty in zip(lines, line_quantities):
            if line.stockrecord:
                line.stockrecord.consume_allocation(qty)

    def cancel_stock_allocations(self, order, lines=None, line_quantities=None):
        """
        Cancel the stock allocations for the passed lines.

        If no lines/quantities are passed, do it for all lines.
        """
        if not lines:
            lines = order.lines.all()
        if not line_quantities:
            line_quantities = [line.quantity for line in lines]
        for line, qty in zip(lines, line_quantities):
            if line.stockrecord:
                line.stockrecord.cancel_allocation(qty)

    # Model instance creation
    # -----------------------

    def create_shipping_event(self, order, event_type, lines, line_quantities,
                              **kwargs):
        reference = kwargs.get('reference', '')
        event = order.shipping_events.create(
            event_type=event_type, notes=reference)
        try:
            for line, quantity in zip(lines, line_quantities):
                event.line_quantities.create(
                    line=line, quantity=quantity)
        except exceptions.InvalidShippingEvent:
            event.delete()
            raise
        return event

    def create_payment_event(self, order, event_type, amount, lines=None,
                             line_quantities=None, **kwargs):
        reference = kwargs.get('reference', "")
        event = order.payment_events.create(
            event_type=event_type, amount=amount, reference=reference)
        if lines and line_quantities:
            for line, quantity in zip(lines, line_quantities):
                event.line_quantities.create(
                    line=line, quantity=quantity)
        return event

    def create_communication_event(self, order, event_type):
        return order.communication_events.create(event_type=event_type)

    def create_note(self, order, message, note_type='System'):
        return order.notes.create(
            message=message, note_type=note_type, user=self.user)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.utils:0
==oscar.apps.order.utils:0
from decimal import Decimal as D

from django.conf import settings
from django.contrib.sites.models import Site
from django.db import transaction
from django.utils.translation import gettext_lazy as _

from oscar.apps.order.signals import order_placed
from oscar.core.loading import get_model

from . import exceptions

Order = get_model('order', 'Order')
Line = get_model('order', 'Line')
OrderDiscount = get_model('order', 'OrderDiscount')


class OrderNumberGenerator(object):
    """
    Simple object for generating order numbers.

    We need this as the order number is often required for payment
    which takes place before the order model has been created.
    """

    def order_number(self, basket):
        """
        Return an order number for a given basket
        """
        return 100000 + basket.id


class OrderCreator(object):
    """
    Places the order by writing out the various models
    """

    def place_order(self, basket, total,  # noqa (too complex (12))
                    shipping_method, shipping_charge, user=None,
                    shipping_address=None, billing_address=None,
                    order_number=None, status=None, request=None, **kwargs):
        """
        Placing an order involves creating all the relevant models based on the
        basket and session data.
        """
        if basket.is_empty:
            raise ValueError(_("Empty baskets cannot be submitted"))
        if not order_number:
            generator = OrderNumberGenerator()
            order_number = generator.order_number(basket)
        if not status and hasattr(settings, 'OSCAR_INITIAL_ORDER_STATUS'):
            status = getattr(settings, 'OSCAR_INITIAL_ORDER_STATUS')

        if Order._default_manager.filter(number=order_number).exists():
            raise ValueError(_("There is already an order with number %s")
                             % order_number)

        with transaction.atomic():

            # Ok - everything seems to be in order, let's place the order
            order = self.create_order_model(
                user, basket, shipping_address, shipping_method, shipping_charge,
                billing_address, total, order_number, status, request, **kwargs)
            for line in basket.all_lines():
                self.create_line_models(order, line)
                self.update_stock_records(line)

            for voucher in basket.vouchers.select_for_update():
                available_to_user, msg = voucher.is_available_to_user(user=user)
                if not voucher.is_active() or not available_to_user:
                    raise ValueError(msg)

            # Record any discounts associated with this order
            for application in basket.offer_applications:
                # Trigger any deferred benefits from offers and capture the
                # resulting message
                application['message'] \
                    = application['offer'].apply_deferred_benefit(basket, order,
                                                                  application)
                # Record offer application results
                if application['result'].affects_shipping:
                    # Skip zero shipping discounts
                    shipping_discount = shipping_method.discount(basket)
                    if shipping_discount <= D('0.00'):
                        continue
                    # If a shipping offer, we need to grab the actual discount off
                    # the shipping method instance, which should be wrapped in an
                    # OfferDiscount instance.
                    application['discount'] = shipping_discount
                self.create_discount_model(order, application)
                self.record_discount(application)

            for voucher in basket.vouchers.all():
                self.record_voucher_usage(order, voucher, user)

        # Send signal for analytics to pick up
        order_placed.send(sender=self, order=order, user=user)

        return order

    def create_order_model(self, user, basket, shipping_address,
                           shipping_method, shipping_charge, billing_address,
                           total, order_number, status, request=None, **extra_order_fields):
        """Create an order model."""
        order_data = {'basket': basket,
                      'number': order_number,
                      'currency': total.currency,
                      'total_incl_tax': total.incl_tax,
                      'total_excl_tax': total.excl_tax,
                      'shipping_incl_tax': shipping_charge.incl_tax,
                      'shipping_excl_tax': shipping_charge.excl_tax,
                      'shipping_method': shipping_method.name,
                      'shipping_code': shipping_method.code}
        if shipping_address:
            order_data['shipping_address'] = shipping_address
        if billing_address:
            order_data['billing_address'] = billing_address
        if user and user.is_authenticated:
            order_data['user_id'] = user.id
        if status:
            order_data['status'] = status
        if extra_order_fields:
            order_data.update(extra_order_fields)
        if 'site' not in order_data:
            order_data['site'] = Site._default_manager.get_current(request)
        order = Order(**order_data)
        order.save()
        return order

    def create_line_models(self, order, basket_line, extra_line_fields=None):
        """
        Create the batch line model.

        You can set extra fields by passing a dictionary as the
        extra_line_fields value
        """
        product = basket_line.product
        stockrecord = basket_line.stockrecord
        if not stockrecord:
            raise exceptions.UnableToPlaceOrder(
                "Basket line #%d has no stockrecord" % basket_line.id)
        partner = stockrecord.partner
        line_data = {
            'order': order,
            # Partner details
            'partner': partner,
            'partner_name': partner.name,
            'partner_sku': stockrecord.partner_sku,
            'stockrecord': stockrecord,
            # Product details
            'product': product,
            'title': product.get_title(),
            'upc': product.upc,
            'quantity': basket_line.quantity,
            # Price details
            'line_price_excl_tax':
            basket_line.line_price_excl_tax_incl_discounts,
            'line_price_incl_tax':
            basket_line.line_price_incl_tax_incl_discounts,
            'line_price_before_discounts_excl_tax':
            basket_line.line_price_excl_tax,
            'line_price_before_discounts_incl_tax':
            basket_line.line_price_incl_tax,
            # Reporting details
            'unit_cost_price': stockrecord.cost_price,
            'unit_price_incl_tax': basket_line.unit_price_incl_tax,
            'unit_price_excl_tax': basket_line.unit_price_excl_tax,
            'unit_retail_price': stockrecord.price_retail,
            # Shipping details
            'est_dispatch_date':
            basket_line.purchase_info.availability.dispatch_date
        }
        extra_line_fields = extra_line_fields or {}
        if hasattr(settings, 'OSCAR_INITIAL_LINE_STATUS'):
            if not (extra_line_fields and 'status' in extra_line_fields):
                extra_line_fields['status'] = getattr(
                    settings, 'OSCAR_INITIAL_LINE_STATUS')
        if extra_line_fields:
            line_data.update(extra_line_fields)

        order_line = Line._default_manager.create(**line_data)
        self.create_line_price_models(order, order_line, basket_line)
        self.create_line_attributes(order, order_line, basket_line)
        self.create_additional_line_models(order, order_line, basket_line)

        return order_line

    def update_stock_records(self, line):
        """
        Update any relevant stock records for this order line
        """
        if line.product.get_product_class().track_stock:
            line.stockrecord.allocate(line.quantity)

    def create_additional_line_models(self, order, order_line, basket_line):
        """
        Empty method designed to be overridden.

        Some applications require additional information about lines, this
        method provides a clean place to create additional models that
        relate to a given line.
        """
        pass

    def create_line_price_models(self, order, order_line, basket_line):
        """
        Creates the batch line price models
        """
        breakdown = basket_line.get_price_breakdown()
        for price_incl_tax, price_excl_tax, quantity in breakdown:
            order_line.prices.create(
                order=order,
                quantity=quantity,
                price_incl_tax=price_incl_tax,
                price_excl_tax=price_excl_tax)

    def create_line_attributes(self, order, order_line, basket_line):
        """
        Creates the batch line attributes.
        """
        for attr in basket_line.attributes.all():
            order_line.attributes.create(
                option=attr.option,
                type=attr.option.code,
                value=attr.value)

    def create_discount_model(self, order, discount):

        """
        Create an order discount model for each offer application attached to
        the basket.
        """
        order_discount = OrderDiscount(
            order=order,
            message=discount['message'] or '',
            offer_id=discount['offer'].id,
            frequency=discount['freq'],
            amount=discount['discount'])
        result = discount['result']
        if result.affects_shipping:
            order_discount.category = OrderDiscount.SHIPPING
        elif result.affects_post_order:
            order_discount.category = OrderDiscount.DEFERRED
        voucher = discount.get('voucher', None)
        if voucher:
            order_discount.voucher_id = voucher.id
            order_discount.voucher_code = voucher.code
        order_discount.save()

    def record_discount(self, discount):
        discount['offer'].record_usage(discount)
        if 'voucher' in discount and discount['voucher']:
            discount['voucher'].record_discount(discount)

    def record_voucher_usage(self, order, voucher, user):
        """
        Updates the models that care about this voucher.
        """
        voucher.record_usage(order, user)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.utils:0
==oscar.apps.checkout.utils:0
class CheckoutSessionData(object):
    """
    Responsible for marshalling all the checkout session data

    Multi-stage checkouts often require several forms to be submitted and their
    data persisted until the final order is placed. This class helps store and
    organise checkout form data until it is required to write out the final
    order.
    """
    SESSION_KEY = 'checkout_data'

    def __init__(self, request):
        self.request = request
        if self.SESSION_KEY not in self.request.session:
            self.request.session[self.SESSION_KEY] = {}

    def _check_namespace(self, namespace):
        """
        Ensure a namespace within the session dict is initialised
        """
        if namespace not in self.request.session[self.SESSION_KEY]:
            self.request.session[self.SESSION_KEY][namespace] = {}

    def _get(self, namespace, key, default=None):
        """
        Return a value from within a namespace
        """
        self._check_namespace(namespace)
        if key in self.request.session[self.SESSION_KEY][namespace]:
            return self.request.session[self.SESSION_KEY][namespace][key]
        return default

    def _set(self, namespace, key, value):
        """
        Set a namespaced value
        """
        self._check_namespace(namespace)
        self.request.session[self.SESSION_KEY][namespace][key] = value
        self.request.session.modified = True

    def _unset(self, namespace, key):
        """
        Remove a namespaced value
        """
        self._check_namespace(namespace)
        if key in self.request.session[self.SESSION_KEY][namespace]:
            del self.request.session[self.SESSION_KEY][namespace][key]
            self.request.session.modified = True

    def _flush_namespace(self, namespace):
        """
        Flush a namespace
        """
        self.request.session[self.SESSION_KEY][namespace] = {}
        self.request.session.modified = True

    def flush(self):
        """
        Flush all session data
        """
        self.request.session[self.SESSION_KEY] = {}

    # Guest checkout
    # ==============

    def set_guest_email(self, email):
        self._set('guest', 'email', email)

    def get_guest_email(self):
        return self._get('guest', 'email')

    # Shipping address
    # ================
    # Options:
    # 1. No shipping required (eg digital products)
    # 2. Ship to new address (entered in a form)
    # 3. Ship to an address book address (address chosen from list)

    def reset_shipping_data(self):
        self._flush_namespace('shipping')

    def ship_to_user_address(self, address):
        """
        Use an user address (from an address book) as the shipping address.
        """
        self.reset_shipping_data()
        self._set('shipping', 'user_address_id', address.id)

    def ship_to_new_address(self, address_fields):
        """
        Use a manually entered address as the shipping address
        """
        self._unset('shipping', 'new_address_fields')
        phone_number = address_fields.get('phone_number')
        if phone_number:
            # Phone number is stored as a PhoneNumber instance. As we store
            # strings in the session, we need to serialize it.
            address_fields = address_fields.copy()
            address_fields['phone_number'] = phone_number.as_international
        self._set('shipping', 'new_address_fields', address_fields)

    def new_shipping_address_fields(self):
        """
        Return shipping address fields
        """
        return self._get('shipping', 'new_address_fields')

    def shipping_user_address_id(self):
        """
        Return user address id
        """
        return self._get('shipping', 'user_address_id')

    # Legacy accessor
    user_address_id = shipping_user_address_id

    def is_shipping_address_set(self):
        """
        Test whether a shipping address has been stored in the session.

        This can be from a new address or re-using an existing address.
        """
        new_fields = self.new_shipping_address_fields()
        has_new_address = new_fields is not None
        user_address_id = self.shipping_user_address_id()
        has_old_address = user_address_id is not None and user_address_id > 0
        return has_new_address or has_old_address

    # Shipping method
    # ===============

    def use_free_shipping(self):
        """
        Set "free shipping" code to session
        """
        self._set('shipping', 'method_code', '__free__')

    def use_shipping_method(self, code):
        """
        Set shipping method code to session
        """
        self._set('shipping', 'method_code', code)

    def shipping_method_code(self, basket):
        """
        Return the shipping method code
        """
        return self._get('shipping', 'method_code')

    def is_shipping_method_set(self, basket):
        """
        Test if a valid shipping method is stored in the session
        """
        return self.shipping_method_code(basket) is not None

    # Billing address fields
    # ======================
    #
    # There are 3 common options:
    # 1. Billing address is entered manually through a form
    # 2. Billing address is selected from address book
    # 3. Billing address is the same as the shipping address

    def bill_to_new_address(self, address_fields):
        """
        Store address fields for a billing address.
        """
        self._unset('billing', 'new_address_fields')
        phone_number = address_fields.get('phone_number')
        if phone_number:
            # Phone number is stored as a PhoneNumber instance. As we store
            # strings in the session, we need to serialize it.
            address_fields = address_fields.copy()
            address_fields['phone_number'] = phone_number.as_international
        self._set('billing', 'new_address_fields', address_fields)

    def bill_to_user_address(self, address):
        """
        Set an address from a user's address book as the billing address

        :address: The address object
        """
        self._flush_namespace('billing')
        self._set('billing', 'user_address_id', address.id)

    def bill_to_shipping_address(self):
        """
        Record fact that the billing address is to be the same as
        the shipping address.
        """
        self._flush_namespace('billing')
        self._set('billing', 'billing_address_same_as_shipping', True)

    # Legacy method name
    billing_address_same_as_shipping = bill_to_shipping_address

    def is_billing_address_same_as_shipping(self):
        return self._get('billing', 'billing_address_same_as_shipping', False)

    def billing_user_address_id(self):
        """
        Return the ID of the user address being used for billing
        """
        return self._get('billing', 'user_address_id')

    def new_billing_address_fields(self):
        """
        Return fields for a billing address
        """
        return self._get('billing', 'new_address_fields')

    def is_billing_address_set(self):
        """
        Test whether a billing address has been stored in the session.

        This can be from a new address or re-using an existing address.
        """
        if self.is_billing_address_same_as_shipping():
            return True
        new_fields = self.new_billing_address_fields()
        has_new_address = new_fields is not None
        user_address_id = self.billing_user_address_id()
        has_old_address = user_address_id is not None and user_address_id > 0
        return has_new_address or has_old_address

    # Payment methods
    # ===============

    def pay_by(self, method):
        self._set('payment', 'method', method)

    def payment_method(self):
        return self._get('payment', 'method')

    # Submission methods
    # ==================

    def set_order_number(self, order_number):
        self._set('submission', 'order_number', order_number)

    def get_order_number(self):
        return self._get('submission', 'order_number')

    def set_submitted_basket(self, basket):
        self._set('submission', 'basket_id', basket.id)

    def get_submitted_basket_id(self):
        return self._get('submission', 'basket_id')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.abstract_models:0
==oscar.apps.catalogue.reviews.abstract_models:0
==oscar.apps.catalogue.reviews.abstract_models:0
from django.core.exceptions import ValidationError
from django.db import models
from django.db.models import Count, Sum
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.apps.catalogue.reviews.utils import get_default_review_status
from oscar.core import validators
from oscar.core.compat import AUTH_USER_MODEL
from oscar.core.loading import get_class


ProductReviewQuerySet = get_class('catalogue.reviews.managers', 'ProductReviewQuerySet')


class AbstractProductReview(models.Model):
    """
    A review of a product

    Reviews can belong to a user or be anonymous.
    """

    product = models.ForeignKey(
        'catalogue.Product', related_name='reviews', null=True,
        on_delete=models.CASCADE)

    # Scores are between 0 and 5
    SCORE_CHOICES = tuple([(x, x) for x in range(0, 6)])
    score = models.SmallIntegerField(_("Score"), choices=SCORE_CHOICES)

    title = models.CharField(
        verbose_name=pgettext_lazy("Product review title", "Title"),
        max_length=255, validators=[validators.non_whitespace])

    body = models.TextField(_("Body"))

    # User information.
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        blank=True,
        null=True,
        on_delete=models.CASCADE,
        related_name='reviews')

    # Fields to be completed if user is anonymous
    name = models.CharField(
        pgettext_lazy("Anonymous reviewer name", "Name"),
        max_length=255, blank=True)
    email = models.EmailField(_("Email"), blank=True)
    homepage = models.URLField(_("URL"), blank=True)

    FOR_MODERATION, APPROVED, REJECTED = 0, 1, 2
    STATUS_CHOICES = (
        (FOR_MODERATION, _("Requires moderation")),
        (APPROVED, _("Approved")),
        (REJECTED, _("Rejected")),
    )

    status = models.SmallIntegerField(
        _("Status"), choices=STATUS_CHOICES, default=get_default_review_status)

    # Denormalised vote totals
    total_votes = models.IntegerField(
        _("Total Votes"), default=0)  # upvotes + down votes
    delta_votes = models.IntegerField(
        _("Delta Votes"), default=0, db_index=True)  # upvotes - down votes

    date_created = models.DateTimeField(auto_now_add=True)

    # Managers
    objects = ProductReviewQuerySet.as_manager()

    class Meta:
        abstract = True
        app_label = 'reviews'
        ordering = ['-delta_votes', 'id']
        unique_together = (('product', 'user'),)
        verbose_name = _('Product review')
        verbose_name_plural = _('Product reviews')

    def get_absolute_url(self):
        kwargs = {
            'product_slug': self.product.slug,
            'product_pk': self.product.id,
            'pk': self.id
        }
        return reverse('catalogue:reviews-detail', kwargs=kwargs)

    def __str__(self):
        return self.title

    def clean(self):
        self.title = self.title.strip()
        self.body = self.body.strip()
        if not self.user and not (self.name and self.email):
            raise ValidationError(
                _("Anonymous reviews must include a name and an email"))

    def vote_up(self, user):
        self.votes.create(user=user, delta=AbstractVote.UP)

    def vote_down(self, user):
        self.votes.create(user=user, delta=AbstractVote.DOWN)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        self.product.update_rating()

    def delete(self, *args, **kwargs):
        super().delete(*args, **kwargs)
        if self.product is not None:
            self.product.update_rating()

    # Properties

    @property
    def is_anonymous(self):
        return self.user is None

    @property
    def pending_moderation(self):
        return self.status == self.FOR_MODERATION

    @property
    def is_approved(self):
        return self.status == self.APPROVED

    @property
    def is_rejected(self):
        return self.status == self.REJECTED

    @property
    def has_votes(self):
        return self.total_votes > 0

    @property
    def num_up_votes(self):
        """Returns the total up votes"""
        return int((self.total_votes + self.delta_votes) / 2)

    @property
    def num_down_votes(self):
        """Returns the total down votes"""
        return int((self.total_votes - self.delta_votes) / 2)

    @property
    def reviewer_name(self):
        if self.user:
            name = self.user.get_full_name()
            return name if name else _('anonymous')
        else:
            return self.name

    # Helpers

    def update_totals(self):
        """
        Update total and delta votes
        """
        result = self.votes.aggregate(
            score=Sum('delta'), total_votes=Count('id'))
        self.total_votes = result['total_votes'] or 0
        self.delta_votes = result['score'] or 0
        self.save()

    def can_user_vote(self, user):
        """
        Test whether the passed user is allowed to vote on this
        review
        """
        if not user.is_authenticated:
            return False, _("Only signed in users can vote")
        vote = self.votes.model(review=self, user=user, delta=1)
        try:
            vote.full_clean()
        except ValidationError as e:
            return False, "%s" % e
        return True, ""


class AbstractVote(models.Model):
    """
    Records user ratings as yes/no vote.

    * Only signed-in users can vote.
    * Each user can vote only once.
    """
    review = models.ForeignKey(
        'reviews.ProductReview',
        on_delete=models.CASCADE,
        related_name='votes')
    user = models.ForeignKey(
        AUTH_USER_MODEL,
        related_name='review_votes',
        on_delete=models.CASCADE)
    UP, DOWN = 1, -1
    VOTE_CHOICES = (
        (UP, _("Up")),
        (DOWN, _("Down"))
    )
    delta = models.SmallIntegerField(_('Delta'), choices=VOTE_CHOICES)
    date_created = models.DateTimeField(auto_now_add=True)

    class Meta:
        abstract = True
        app_label = 'reviews'
        ordering = ['-date_created']
        unique_together = (('user', 'review'),)
        verbose_name = _('Vote')
        verbose_name_plural = _('Votes')

    def __str__(self):
        return "%s vote for %s" % (self.delta, self.review)

    def clean(self):
        if not self.review.is_anonymous and self.review.user == self.user:
            raise ValidationError(_(
                "You cannot vote on your own reviews"))
        if not self.user.id:
            raise ValidationError(_(
                "Only signed-in users can vote on reviews"))
        previous_votes = self.review.votes.filter(user=self.user)
        if len(previous_votes) > 0:
            raise ValidationError(_(
                "You can only vote once on a review"))

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        self.review.update_totals()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.users.views:0
==oscar.apps.dashboard.users.views:0
==oscar.apps.dashboard.users.views:0
from django.conf import settings
from django.contrib import messages
from django.db.models import Q
from django.shortcuts import redirect
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.views.generic import (
    DeleteView, DetailView, FormView, ListView, UpdateView)
from django.views.generic.detail import SingleObjectMixin
from django.views.generic.edit import FormMixin
from django_tables2 import SingleTableView

from oscar.core.compat import get_user_model
from oscar.core.loading import get_class, get_classes, get_model
from oscar.views.generic import BulkEditMixin

UserSearchForm, ProductAlertSearchForm, ProductAlertUpdateForm = get_classes(
    'dashboard.users.forms', ('UserSearchForm', 'ProductAlertSearchForm',
                              'ProductAlertUpdateForm'))
PasswordResetForm = get_class('customer.forms', 'PasswordResetForm')
UserTable = get_class('dashboard.users.tables', 'UserTable')
ProductAlert = get_model('customer', 'ProductAlert')
User = get_user_model()


class IndexView(BulkEditMixin, FormMixin, SingleTableView):
    template_name = 'oscar/dashboard/users/index.html'
    table_pagination = True
    model = User
    actions = ('make_active', 'make_inactive', )
    form_class = UserSearchForm
    table_class = UserTable
    context_table_name = 'users'
    desc_template = _('%(main_filter)s %(email_filter)s %(name_filter)s')
    description = ''

    def dispatch(self, request, *args, **kwargs):
        form_class = self.get_form_class()
        self.form = self.get_form(form_class)
        return super().dispatch(request, *args, **kwargs)

    def get_form_kwargs(self):
        """
        Only bind search form if it was submitted.
        """
        kwargs = super().get_form_kwargs()

        if 'search' in self.request.GET:
            kwargs.update({
                'data': self.request.GET,
            })

        return kwargs

    def get_queryset(self):
        queryset = self.model.objects.all().order_by('-date_joined')
        return self.apply_search(queryset)

    def apply_search(self, queryset):
        # Set initial queryset description, used for template context
        self.desc_ctx = {
            'main_filter': _('All users'),
            'email_filter': '',
            'name_filter': '',
        }
        if self.form.is_valid():
            return self.apply_search_filters(queryset, self.form.cleaned_data)
        else:
            return queryset

    def apply_search_filters(self, queryset, data):
        """
        Function is split out to allow customisation with little boilerplate.
        """
        if data['email']:
            email = data['email']
            queryset = queryset.filter(email__istartswith=email)
            self.desc_ctx['email_filter'] \
                = _(" with email matching '%s'") % email
        if data['name']:
            # If the value is two words, then assume they are first name and
            # last name
            parts = data['name'].split()
            # always true filter
            condition = Q()
            for part in parts:
                condition &= Q(first_name__icontains=part) \
                    | Q(last_name__icontains=part)
            queryset = queryset.filter(condition).distinct()
            self.desc_ctx['name_filter'] \
                = _(" with name matching '%s'") % data['name']

        return queryset

    def get_table(self, **kwargs):
        table = super().get_table(**kwargs)
        table.caption = self.desc_template % self.desc_ctx
        return table

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = self.form
        return context

    def make_inactive(self, request, users):
        return self._change_users_active_status(users, False)

    def make_active(self, request, users):
        return self._change_users_active_status(users, True)

    def _change_users_active_status(self, users, value):
        for user in users:
            if not user.is_superuser:
                user.is_active = value
                user.save()
        messages.info(self.request, _("Users' status successfully changed"))
        return redirect('dashboard:users-index')


class UserDetailView(DetailView):
    template_name = 'oscar/dashboard/users/detail.html'
    model = User
    context_object_name = 'customer'


class PasswordResetView(SingleObjectMixin, FormView):
    form_class = PasswordResetForm
    http_method_names = ['post']
    model = User

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        return super().post(request, *args, **kwargs)

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['data'] = {'email': self.object.email}
        return kwargs

    def form_valid(self, form):
        # The PasswordResetForm's save method sends the reset email
        form.save(request=self.request)
        return super().form_valid(form)

    def get_success_url(self):
        messages.success(
            self.request, _("A password reset email has been sent"))
        return reverse(
            'dashboard:user-detail', kwargs={'pk': self.object.id}
        )


class ProductAlertListView(ListView):
    model = ProductAlert
    form_class = ProductAlertSearchForm
    context_object_name = 'alerts'
    template_name = 'oscar/dashboard/users/alerts/list.html'
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE
    base_description = _('All Alerts')
    description = ''

    def get_queryset(self):
        queryset = self.model.objects.all().order_by('-date_created')
        self.description = self.base_description

        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return queryset

        data = self.form.cleaned_data

        if data['status']:
            queryset = queryset.filter(status=data['status'])
            self.description \
                += _(" with status matching '%s'") % data['status']

        if data['name']:
            # If the value is two words, then assume they are first name and
            # last name
            parts = data['name'].split()
            if len(parts) >= 2:
                queryset = queryset.filter(
                    user__first_name__istartswith=parts[0],
                    user__last_name__istartswith=parts[1]
                ).distinct()
            else:
                queryset = queryset.filter(
                    Q(user__first_name__istartswith=parts[0])
                    | Q(user__last_name__istartswith=parts[-1])
                ).distinct()
            self.description \
                += _(" with customer name matching '%s'") % data['name']

        if data['email']:
            queryset = queryset.filter(
                Q(user__email__icontains=data['email'])
                | Q(email__icontains=data['email'])
            )
            self.description \
                += _(" with customer email matching '%s'") % data['email']

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = self.form
        context['queryset_description'] = self.description
        return context


class ProductAlertUpdateView(UpdateView):
    template_name = 'oscar/dashboard/users/alerts/update.html'
    model = ProductAlert
    form_class = ProductAlertUpdateForm
    context_object_name = 'alert'

    def get_success_url(self):
        messages.success(self.request, _("Product alert saved"))
        return reverse('dashboard:user-alert-list')


class ProductAlertDeleteView(DeleteView):
    model = ProductAlert
    template_name = 'oscar/dashboard/users/alerts/delete.html'
    context_object_name = 'alert'

    def get_success_url(self):
        messages.warning(self.request, _("Product alert deleted"))
        return reverse('dashboard:user-alert-list')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.ranges.views:0
==oscar.apps.dashboard.ranges.views:0
==oscar.apps.dashboard.ranges.views:0
from io import TextIOWrapper

from django.conf import settings
from django.contrib import messages
from django.core import exceptions
from django.db.models import Count
from django.http import HttpResponseRedirect
from django.shortcuts import HttpResponse, get_object_or_404
from django.template.loader import render_to_string
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.utils.translation import ungettext
from django.views.generic import (
    CreateView, DeleteView, ListView, UpdateView, View)

from oscar.core.loading import get_classes, get_model
from oscar.views.generic import BulkEditMixin

Range = get_model('offer', 'Range')
RangeProduct = get_model('offer', 'RangeProduct')
RangeProductFileUpload = get_model('offer', 'RangeProductFileUpload')
Product = get_model('catalogue', 'Product')
RangeForm, RangeProductForm = get_classes('dashboard.ranges.forms',
                                          ['RangeForm', 'RangeProductForm'])


class RangeListView(ListView):
    model = Range
    context_object_name = 'ranges'
    template_name = 'oscar/dashboard/ranges/range_list.html'
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE


class RangeCreateView(CreateView):
    model = Range
    template_name = 'oscar/dashboard/ranges/range_form.html'
    form_class = RangeForm

    def get_success_url(self):
        if 'action' in self.request.POST:
            return reverse('dashboard:range-products',
                           kwargs={'pk': self.object.id})
        else:
            msg = render_to_string(
                'oscar/dashboard/ranges/messages/range_saved.html',
                {'range': self.object})
            messages.success(self.request, msg, extra_tags='safe noicon')
            return reverse('dashboard:range-list')

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _("Create range")
        return ctx


class RangeUpdateView(UpdateView):
    model = Range
    template_name = 'oscar/dashboard/ranges/range_form.html'
    form_class = RangeForm

    def get_object(self):
        obj = super().get_object()
        if not obj.is_editable:
            raise exceptions.PermissionDenied("Not allowed")
        return obj

    def get_success_url(self):
        if 'action' in self.request.POST:
            return reverse('dashboard:range-products',
                           kwargs={'pk': self.object.id})
        else:
            msg = render_to_string(
                'oscar/dashboard/ranges/messages/range_saved.html',
                {'range': self.object})
            messages.success(self.request, msg, extra_tags='safe noicon')
            return reverse('dashboard:range-list')

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['range'] = self.object
        ctx['title'] = self.object.name
        return ctx


class RangeDeleteView(DeleteView):
    model = Range
    template_name = 'oscar/dashboard/ranges/range_delete.html'
    context_object_name = 'range'

    def get_success_url(self):
        messages.warning(self.request, _("Range deleted"))
        return reverse('dashboard:range-list')


class RangeProductListView(BulkEditMixin, ListView):
    model = Product
    template_name = 'oscar/dashboard/ranges/range_product_list.html'
    context_object_name = 'products'
    actions = ('remove_selected_products', 'add_products')
    form_class = RangeProductForm
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE

    def post(self, request, *args, **kwargs):
        self.object_list = self.get_queryset()
        if request.POST.get('action', None) == 'add_products':
            return self.add_products(request)
        return super().post(request, *args, **kwargs)

    def get_range(self):
        if not hasattr(self, '_range'):
            self._range = get_object_or_404(Range, id=self.kwargs['pk'])
        return self._range

    def get_queryset(self):
        products = self.get_range().all_products()
        return products.order_by('rangeproduct__display_order')

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        range = self.get_range()
        ctx['range'] = range
        if 'form' not in ctx:
            ctx['form'] = self.form_class(range)
        return ctx

    def remove_selected_products(self, request, products):
        range = self.get_range()
        for product in products:
            range.remove_product(product)
        num_products = len(products)
        messages.success(request, ungettext("Removed %d product from range",
                                            "Removed %d products from range",
                                            num_products) % num_products)
        return HttpResponseRedirect(self.get_success_url(request))

    def add_products(self, request):
        range = self.get_range()
        form = self.form_class(range, request.POST, request.FILES)
        if not form.is_valid():
            ctx = self.get_context_data(form=form,
                                        object_list=self.object_list)
            return self.render_to_response(ctx)

        self.handle_query_products(request, range, form)
        self.handle_file_products(request, range, form)
        return HttpResponseRedirect(self.get_success_url(request))

    def handle_query_products(self, request, range, form):
        products = form.get_products()
        if not products:
            return

        for product in products:
            range.add_product(product)

        num_products = len(products)
        messages.success(request, ungettext("%d product added to range",
                                            "%d products added to range",
                                            num_products) % num_products)
        dupe_skus = form.get_duplicate_skus()
        if dupe_skus:
            messages.warning(
                request,
                _("The products with SKUs or UPCs matching %s are already "
                  "in this range") % ", ".join(dupe_skus))

        missing_skus = form.get_missing_skus()
        if missing_skus:
            messages.warning(
                request,
                _("No product(s) were found with SKU or UPC matching %s") %
                ", ".join(missing_skus))
        self.check_imported_products_sku_duplicates(request, products)

    def handle_file_products(self, request, range, form):
        if 'file_upload' not in request.FILES:
            return
        f = request.FILES['file_upload']
        upload = self.create_upload_object(request, range, f)
        products = upload.process(TextIOWrapper(f, encoding=request.encoding))
        if not upload.was_processing_successful():
            messages.error(request, upload.error_message)
        else:
            msg = render_to_string(
                'oscar/dashboard/ranges/messages/range_products_saved.html',
                {'range': range,
                 'upload': upload})
            messages.success(request, msg, extra_tags='safe noicon block')
        self.check_imported_products_sku_duplicates(request, products)

    def create_upload_object(self, request, range, f):
        upload = RangeProductFileUpload.objects.create(
            range=range,
            uploaded_by=request.user,
            filepath=f.name,
            size=f.size
        )
        return upload

    def check_imported_products_sku_duplicates(self, request, queryset):
        dupe_sku_products = queryset.values('stockrecords__partner_sku')\
                                    .annotate(total=Count('stockrecords__partner_sku'))\
                                    .filter(total__gt=1).order_by('stockrecords__partner_sku')
        if dupe_sku_products:
            dupe_skus = [p['stockrecords__partner_sku'] for p in dupe_sku_products]
            messages.warning(
                request,
                _("There are more than one product with SKU %s") %
                ", ".join(dupe_skus)
            )


class RangeReorderView(View):
    def post(self, request, pk):
        order = dict(request.POST).get('product')
        self._save_page_order(order)
        return HttpResponse(status=200)

    def _save_page_order(self, order):
        """
        Save the order of the products within range.
        """
        range = get_object_or_404(Range, pk=self.kwargs['pk'])
        for index, item in enumerate(order):
            entry = RangeProduct.objects.get(range=range, product__pk=item)
            if entry.display_order != index:
                entry.display_order = index
                entry.save()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.abstract_models:1
==oscar.apps.shipping.abstract_models:1
from decimal import Decimal as D

from django.core.validators import MinValueValidator
from django.db import models
from django.utils.translation import gettext_lazy as _

from oscar.core import loading, prices
from oscar.models.fields import AutoSlugField

Scale = loading.get_class('shipping.scales', 'Scale')


class AbstractBase(models.Model):
    """
    Implements the interface declared by shipping.base.Base
    """
    code = AutoSlugField(_("Slug"), max_length=128, unique=True,
                         populate_from='name', db_index=True)
    name = models.CharField(_("Name"), max_length=128, unique=True, db_index=True)
    description = models.TextField(_("Description"), blank=True)

    # We allow shipping methods to be linked to a specific set of countries
    countries = models.ManyToManyField('address.Country',
                                       blank=True, verbose_name=_("Countries"))

    # We need this to mimic the interface of the Base shipping method
    is_discounted = False

    class Meta:
        abstract = True
        app_label = 'shipping'
        ordering = ['name']
        verbose_name = _("Shipping Method")
        verbose_name_plural = _("Shipping Methods")

    def __str__(self):
        return self.name

    def discount(self, basket):
        """
        Return the discount on the standard shipping charge
        """
        # This method is identical to the Base.discount().
        return D('0.00')


class AbstractOrderAndItemCharges(AbstractBase):
    """
    Standard shipping method

    This method has two components:
    * a charge per order
    * a charge per item

    Many sites use shipping logic which fits into this system.  However, for
    more complex shipping logic, a custom shipping method object will need to
    be provided that subclasses ShippingMethod.
    """
    price_per_order = models.DecimalField(
        _("Price per order"), decimal_places=2, max_digits=12,
        default=D('0.00'))
    price_per_item = models.DecimalField(
        _("Price per item"), decimal_places=2, max_digits=12,
        default=D('0.00'))

    # If basket value is above this threshold, then shipping is free
    free_shipping_threshold = models.DecimalField(
        _("Free Shipping"), decimal_places=2, max_digits=12, blank=True,
        null=True)

    class Meta(AbstractBase.Meta):
        abstract = True
        app_label = 'shipping'
        verbose_name = _("Order and Item Charge")
        verbose_name_plural = _("Order and Item Charges")

    def calculate(self, basket):
        if (self.free_shipping_threshold is not None
                and basket.total_incl_tax >= self.free_shipping_threshold):
            return prices.Price(
                currency=basket.currency, excl_tax=D('0.00'),
                incl_tax=D('0.00'))

        charge = self.price_per_order
        for line in basket.lines.all():
            if line.product.is_shipping_required:
                charge += line.quantity * self.price_per_item

        # Zero tax is assumed...
        return prices.Price(
            currency=basket.currency,
            excl_tax=charge,
            incl_tax=charge)


class AbstractWeightBased(AbstractBase):
    # The attribute code to use to look up the weight of a product
    weight_attribute = 'weight'

    # The default weight to use (in kg) when a product doesn't have a weight
    # attribute.
    default_weight = models.DecimalField(
        _("Default Weight"), decimal_places=3, max_digits=12,
        default=D('0.000'),
        validators=[MinValueValidator(D('0.00'))],
        help_text=_("Default product weight in kg when no weight attribute "
                    "is defined"))

    class Meta(AbstractBase.Meta):
        abstract = True
        app_label = 'shipping'
        verbose_name = _("Weight-based Shipping Method")
        verbose_name_plural = _("Weight-based Shipping Methods")

    def calculate(self, basket):
        # Note, when weighing the basket, we don't check whether the item
        # requires shipping or not.  It is assumed that if something has a
        # weight, then it requires shipping.
        scale = Scale(attribute_code=self.weight_attribute,
                      default_weight=self.default_weight)
        weight = scale.weigh_basket(basket)
        charge = self.get_charge(weight)

        # Zero tax is assumed...
        return prices.Price(
            currency=basket.currency,
            excl_tax=charge,
            incl_tax=charge)

    def get_charge(self, weight):
        """
        Calculates shipping charges for a given weight.

        If there is one or more matching weight band for a given weight, the
        charge of the closest matching weight band is returned.

        If the weight exceeds the top weight band, the top weight band charge
        is added until a matching weight band is found. This models the concept
        of "sending as many of the large boxes as needed".

        Please note that it is assumed that the closest matching weight band
        is the most cost-effective one, and that the top weight band is more
        cost effective than e.g. sending out two smaller parcels.
        Without that assumption, determining the cheapest shipping solution
        becomes an instance of the bin packing problem. The bin packing problem
        is NP-hard and solving it is left as an exercise to the reader.
        """
        weight = D(weight)  # weight really should be stored as a decimal
        if not self.bands.exists():
            return D('0.00')

        top_band = self.top_band
        if weight <= top_band.upper_limit:
            band = self.get_band_for_weight(weight)
            return band.charge
        else:
            quotient, remaining_weight = divmod(weight, top_band.upper_limit)
            if remaining_weight:
                remainder_band = self.get_band_for_weight(remaining_weight)
                return quotient * top_band.charge + remainder_band.charge
            else:
                return quotient * top_band.charge

    def get_band_for_weight(self, weight):
        """
        Return the closest matching weight band for a given weight.
        """
        try:
            return self.bands.filter(
                upper_limit__gte=weight).order_by('upper_limit')[0]
        except IndexError:
            return None

    @property
    def num_bands(self):
        return self.bands.count()

    @property
    def top_band(self):
        try:
            return self.bands.order_by('-upper_limit')[0]
        except IndexError:
            return None


class AbstractWeightBand(models.Model):
    """
    Represents a weight band which are used by the WeightBasedShipping method.
    """
    method = models.ForeignKey(
        'shipping.WeightBased',
        on_delete=models.CASCADE,
        related_name='bands',
        verbose_name=_("Method"))
    upper_limit = models.DecimalField(
        _("Upper Limit"), decimal_places=3, max_digits=12, db_index=True,
        validators=[MinValueValidator(D('0.00'))],
        help_text=_("Enter upper limit of this weight band in kg. The lower "
                    "limit will be determined by the other weight bands."))
    charge = models.DecimalField(
        _("Charge"), decimal_places=2, max_digits=12,
        validators=[MinValueValidator(D('0.00'))])

    @property
    def weight_from(self):
        lower_bands = self.method.bands.filter(
            upper_limit__lt=self.upper_limit).order_by('-upper_limit')
        if not lower_bands:
            return D('0.000')
        return lower_bands[0].upper_limit

    @property
    def weight_to(self):
        return self.upper_limit

    class Meta:
        abstract = True
        app_label = 'shipping'
        ordering = ['method', 'upper_limit']
        verbose_name = _("Weight Band")
        verbose_name_plural = _("Weight Bands")

    def __str__(self):
        return _('Charge for weights up to %s kg') % (self.upper_limit,)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.apps:0
==oscar.apps.customer.apps:0
from django.conf.urls import url
from django.contrib.auth.decorators import login_required
from django.utils.translation import gettext_lazy as _
from django.views import generic

from oscar.core.application import OscarConfig
from oscar.core.loading import get_class


class CustomerConfig(OscarConfig):
    label = 'customer'
    name = 'oscar.apps.customer'
    verbose_name = _('Customer')

    namespace = 'customer'

    def ready(self):
        from . import receivers  # noqa
        from .alerts import receivers  # noqa

        self.summary_view = get_class('customer.views', 'AccountSummaryView')
        self.order_history_view = get_class('customer.views', 'OrderHistoryView')
        self.order_detail_view = get_class('customer.views', 'OrderDetailView')
        self.anon_order_detail_view = get_class('customer.views',
                                                'AnonymousOrderDetailView')
        self.order_line_view = get_class('customer.views', 'OrderLineView')

        self.address_list_view = get_class('customer.views', 'AddressListView')
        self.address_create_view = get_class('customer.views', 'AddressCreateView')
        self.address_update_view = get_class('customer.views', 'AddressUpdateView')
        self.address_delete_view = get_class('customer.views', 'AddressDeleteView')
        self.address_change_status_view = get_class('customer.views',
                                                    'AddressChangeStatusView')

        self.email_list_view = get_class('customer.views', 'EmailHistoryView')
        self.email_detail_view = get_class('customer.views', 'EmailDetailView')
        self.login_view = get_class('customer.views', 'AccountAuthView')
        self.logout_view = get_class('customer.views', 'LogoutView')
        self.register_view = get_class('customer.views', 'AccountRegistrationView')
        self.profile_view = get_class('customer.views', 'ProfileView')
        self.profile_update_view = get_class('customer.views', 'ProfileUpdateView')
        self.profile_delete_view = get_class('customer.views', 'ProfileDeleteView')
        self.change_password_view = get_class('customer.views', 'ChangePasswordView')

        self.notification_inbox_view = get_class('customer.notifications.views',
                                                 'InboxView')
        self.notification_archive_view = get_class('customer.notifications.views',
                                                   'ArchiveView')
        self.notification_update_view = get_class('customer.notifications.views',
                                                  'UpdateView')
        self.notification_detail_view = get_class('customer.notifications.views',
                                                  'DetailView')

        self.alert_list_view = get_class('customer.alerts.views',
                                         'ProductAlertListView')
        self.alert_create_view = get_class('customer.alerts.views',
                                           'ProductAlertCreateView')
        self.alert_confirm_view = get_class('customer.alerts.views',
                                            'ProductAlertConfirmView')
        self.alert_cancel_view = get_class('customer.alerts.views',
                                           'ProductAlertCancelView')

        self.wishlists_add_product_view = get_class('customer.wishlists.views',
                                                    'WishListAddProduct')
        self.wishlists_list_view = get_class('customer.wishlists.views',
                                             'WishListListView')
        self.wishlists_detail_view = get_class('customer.wishlists.views',
                                               'WishListDetailView')
        self.wishlists_create_view = get_class('customer.wishlists.views',
                                               'WishListCreateView')
        self.wishlists_create_with_product_view = get_class('customer.wishlists.views',
                                                            'WishListCreateView')
        self.wishlists_update_view = get_class('customer.wishlists.views',
                                               'WishListUpdateView')
        self.wishlists_delete_view = get_class('customer.wishlists.views',
                                               'WishListDeleteView')
        self.wishlists_remove_product_view = get_class('customer.wishlists.views',
                                                       'WishListRemoveProduct')
        self.wishlists_move_product_to_another_view = get_class(
            'customer.wishlists.views', 'WishListMoveProductToAnotherWishList')

    def get_urls(self):
        urls = [
            # Login, logout and register doesn't require login
            url(r'^login/$', self.login_view.as_view(), name='login'),
            url(r'^logout/$', self.logout_view.as_view(), name='logout'),
            url(r'^register/$', self.register_view.as_view(), name='register'),
            url(r'^$', login_required(self.summary_view.as_view()),
                name='summary'),
            url(r'^change-password/$',
                login_required(self.change_password_view.as_view()),
                name='change-password'),

            # Profile
            url(r'^profile/$',
                login_required(self.profile_view.as_view()),
                name='profile-view'),
            url(r'^profile/edit/$',
                login_required(self.profile_update_view.as_view()),
                name='profile-update'),
            url(r'^profile/delete/$',
                login_required(self.profile_delete_view.as_view()),
                name='profile-delete'),

            # Order history
            url(r'^orders/$',
                login_required(self.order_history_view.as_view()),
                name='order-list'),
            url(r'^order-status/(?P<order_number>[\w-]*)/(?P<hash>[A-z0-9-_=:]+)/$',
                self.anon_order_detail_view.as_view(), name='anon-order'),
            url(r'^orders/(?P<order_number>[\w-]*)/$',
                login_required(self.order_detail_view.as_view()),
                name='order'),
            url(r'^orders/(?P<order_number>[\w-]*)/(?P<line_id>\d+)$',
                login_required(self.order_line_view.as_view()),
                name='order-line'),

            # Address book
            url(r'^addresses/$',
                login_required(self.address_list_view.as_view()),
                name='address-list'),
            url(r'^addresses/add/$',
                login_required(self.address_create_view.as_view()),
                name='address-create'),
            url(r'^addresses/(?P<pk>\d+)/$',
                login_required(self.address_update_view.as_view()),
                name='address-detail'),
            url(r'^addresses/(?P<pk>\d+)/delete/$',
                login_required(self.address_delete_view.as_view()),
                name='address-delete'),
            url(r'^addresses/(?P<pk>\d+)/'
                r'(?P<action>default_for_(billing|shipping))/$',
                login_required(self.address_change_status_view.as_view()),
                name='address-change-status'),

            # Email history
            url(r'^emails/$',
                login_required(self.email_list_view.as_view()),
                name='email-list'),
            url(r'^emails/(?P<email_id>\d+)/$',
                login_required(self.email_detail_view.as_view()),
                name='email-detail'),

            # Notifications
            # Redirect to notification inbox
            url(r'^notifications/$', generic.RedirectView.as_view(
                url='/accounts/notifications/inbox/', permanent=False)),
            url(r'^notifications/inbox/$',
                login_required(self.notification_inbox_view.as_view()),
                name='notifications-inbox'),
            url(r'^notifications/archive/$',
                login_required(self.notification_archive_view.as_view()),
                name='notifications-archive'),
            url(r'^notifications/update/$',
                login_required(self.notification_update_view.as_view()),
                name='notifications-update'),
            url(r'^notifications/(?P<pk>\d+)/$',
                login_required(self.notification_detail_view.as_view()),
                name='notifications-detail'),

            # Alerts
            # Alerts can be setup by anonymous users: some views do not
            # require login
            url(r'^alerts/$',
                login_required(self.alert_list_view.as_view()),
                name='alerts-list'),
            url(r'^alerts/create/(?P<pk>\d+)/$',
                self.alert_create_view.as_view(),
                name='alert-create'),
            url(r'^alerts/confirm/(?P<key>[a-z0-9]+)/$',
                self.alert_confirm_view.as_view(),
                name='alerts-confirm'),
            url(r'^alerts/cancel/key/(?P<key>[a-z0-9]+)/$',
                self.alert_cancel_view.as_view(),
                name='alerts-cancel-by-key'),
            url(r'^alerts/cancel/(?P<pk>[a-z0-9]+)/$',
                login_required(self.alert_cancel_view.as_view()),
                name='alerts-cancel-by-pk'),

            # Wishlists
            url(r'wishlists/$',
                login_required(self.wishlists_list_view.as_view()),
                name='wishlists-list'),
            url(r'wishlists/add/(?P<product_pk>\d+)/$',
                login_required(self.wishlists_add_product_view.as_view()),
                name='wishlists-add-product'),
            url(r'wishlists/(?P<key>[a-z0-9]+)/add/(?P<product_pk>\d+)/',
                login_required(self.wishlists_add_product_view.as_view()),
                name='wishlists-add-product'),
            url(r'wishlists/create/$',
                login_required(self.wishlists_create_view.as_view()),
                name='wishlists-create'),
            url(r'wishlists/create/with-product/(?P<product_pk>\d+)/$',
                login_required(self.wishlists_create_view.as_view()),
                name='wishlists-create-with-product'),
            # Wishlists can be publicly shared, no login required
            url(r'wishlists/(?P<key>[a-z0-9]+)/$',
                self.wishlists_detail_view.as_view(), name='wishlists-detail'),
            url(r'wishlists/(?P<key>[a-z0-9]+)/update/$',
                login_required(self.wishlists_update_view.as_view()),
                name='wishlists-update'),
            url(r'wishlists/(?P<key>[a-z0-9]+)/delete/$',
                login_required(self.wishlists_delete_view.as_view()),
                name='wishlists-delete'),
            url(r'wishlists/(?P<key>[a-z0-9]+)/lines/(?P<line_pk>\d+)/delete/',
                login_required(self.wishlists_remove_product_view.as_view()),
                name='wishlists-remove-product'),
            url(r'wishlists/(?P<key>[a-z0-9]+)/products/(?P<product_pk>\d+)/'
                r'delete/',
                login_required(self.wishlists_remove_product_view.as_view()),
                name='wishlists-remove-product'),
            url(r'wishlists/(?P<key>[a-z0-9]+)/lines/(?P<line_pk>\d+)/move-to/'
                r'(?P<to_key>[a-z0-9]+)/$',
                login_required(self.wishlists_move_product_to_another_view
                               .as_view()),
                name='wishlists-move-product-to-another')]

        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.search.search_handlers:0
==oscar.apps.search.search_handlers:0
from django.core.paginator import InvalidPage, Paginator
from django.utils.translation import gettext_lazy as _
from haystack import connections

from oscar.core.loading import get_class

from . import facets

FacetMunger = get_class('search.facets', 'FacetMunger')


class SearchHandler(object):
    """
    A class that is concerned with performing a search and paginating the
    results. The search is triggered upon initialisation (mainly to have a
    predictable point to process any errors).  Search results are cached, so
    they can be accessed multiple times without incurring any overhead.

    The raison d'etre for this third way to interface with Haystack is
    two-fold. The Haystack search form doesn't do enough for our needs, and
    basing a view off a Haystack search view is unnecessarily invasive.
    Furthermore, using our own search handler means it is easy to swap
    out Haystack, which has been considered before.

    Usage:

        handler = SearchHandler(request.GET, request.get_full_path)
        found_objects = handler.get_paginated_objects()
        context = handler.get_search_context_data()

    Error handling:

        You need to catch an InvalidPage exception which gets thrown when an
        invalid page number is supplied.
    """

    form_class = None
    model_whitelist = None
    paginate_by = None
    paginator_class = Paginator
    page_kwarg = 'page'

    def __init__(self, request_data, full_path):
        self.full_path = full_path
        self.request_data = request_data

        # Triggers the search.
        search_queryset = self.get_search_queryset()
        self.search_form = self.get_search_form(
            request_data, search_queryset)
        self.results = self.get_search_results(self.search_form)
        # If below raises an UnicodeDecodeError, you're running pysolr < 3.2
        # with Solr 4.
        self.paginator, self.page = self.paginate_queryset(
            self.results, request_data)

    # Search related methods

    def get_search_results(self, search_form):
        """
        Perform the actual search using Haystack's search form. Returns
        a SearchQuerySet. The SQS is empty if the form is invalid.
        """
        return search_form.search()

    def get_search_form(self, request_data, search_queryset, **form_kwargs):
        """
        Return a bound version of Haystack's search form.
        """
        kwargs = {
            'data': request_data,
            'selected_facets': request_data.getlist("selected_facets"),
            'searchqueryset': search_queryset
        }
        kwargs.update(**form_kwargs)
        return self.form_class(**kwargs)

    def get_search_queryset(self):
        """
        Returns the search queryset that is used as a base for the search.
        """
        sqs = facets.base_sqs()
        if self.model_whitelist:
            # Limit queryset to specified list of models
            sqs = sqs.models(*self.model_whitelist)
        return sqs

    # Pagination related methods

    def paginate_queryset(self, queryset, request_data):
        """
        Paginate the search results. This is a simplified version of
        Django's MultipleObjectMixin.paginate_queryset
        """
        paginator = self.get_paginator(queryset)
        page_kwarg = self.page_kwarg
        page = request_data.get(page_kwarg, 1)
        try:
            page_number = int(page)
        except ValueError:
            if page == 'last':
                page_number = paginator.num_pages
            else:
                raise InvalidPage(_(
                    "Page is not 'last', nor can it be converted to an int."))
        # This can also raise an InvalidPage exception.
        return paginator, paginator.page(page_number)

    def get_paginator(self, queryset):
        """
        Return a paginator. Override this to set settings like orphans,
        allow_empty, etc.
        """
        return self.paginator_class(queryset, self.paginate_by)

    # Accessing the search results and meta data

    def bulk_fetch_results(self, paginated_results):
        """
        This method gets paginated search results and returns a list of Django
        objects in the same order.

        It preserves the order without doing any ordering in Python, even
        when more than one Django model are returned in the search results. It
        also uses the same queryset that was used to populate the search
        queryset, so any select_related/prefetch_related optimisations are
        in effect.

        It is heavily based on Haystack's SearchQuerySet.post_process_results,
        but works on the paginated results instead of all of them.
        """
        objects = []

        models_pks = loaded_objects = {}
        for result in paginated_results:
            models_pks.setdefault(result.model, []).append(result.pk)

        search_backend_alias = self.results.query.backend.connection_alias
        for model in models_pks:
            ui = connections[search_backend_alias].get_unified_index()
            index = ui.get_index(model)
            queryset = index.read_queryset(using=search_backend_alias)
            loaded_objects[model] = queryset.in_bulk(models_pks[model])

        for result in paginated_results:
            model_objects = loaded_objects.get(result.model, {})
            try:
                result._object = model_objects[int(result.pk)]
            except KeyError:
                # The object was either deleted since we indexed or should
                # be ignored; fail silently.
                pass
            else:
                objects.append(result._object)

        return objects

    def get_paginated_objects(self):
        """
        Return a paginated list of Django model instances. The call is cached.
        """
        if hasattr(self, '_objects'):
            return self._objects
        else:
            paginated_results = self.page.object_list
            self._objects = self.bulk_fetch_results(paginated_results)
        return self._objects

    def get_facet_munger(self):
        return FacetMunger(
            self.full_path,
            self.search_form.selected_multi_facets,
            self.results.facet_counts())

    def get_search_context_data(self, context_object_name=None):
        """
        Return metadata about the search in a dictionary useful to populate
        template contexts. If you pass in a context_object_name, the dictionary
        will also contain the actual list of found objects.

        The expected usage is to call this function in your view's
        get_context_data:

            search_context = self.search_handler.get_search_context_data(
                self.context_object_name)
            context.update(search_context)
            return context

        """

        # Use the FacetMunger to convert Haystack's awkward facet data into
        # something the templates can use.
        # Note that the FacetMunger accesses object_list (unpaginated results),
        # whereas we use the paginated search results to populate the context
        # with products
        munger = self.get_facet_munger()
        facet_data = munger.facet_data()
        has_facets = any([data['results'] for data in facet_data.values()])

        context = {
            'facet_data': facet_data,
            'has_facets': has_facets,
            # This is a serious code smell; we just pass through the selected
            # facets data to the view again, and the template adds those
            # as fields to the form. This hack ensures that facets stay
            # selected when changing relevancy.
            'selected_facets': self.request_data.getlist('selected_facets'),
            'form': self.search_form,
            'paginator': self.paginator,
            'page_obj': self.page,
        }

        # It's a pretty common pattern to want the actual results in the
        # context, so pass them in if context_object_name is set.
        if context_object_name is not None:
            context[context_object_name] = self.get_paginated_objects()

        return context
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.middleware:0
==oscar.apps.basket.middleware:0
from django.conf import settings
from django.contrib import messages
from django.core.signing import BadSignature, Signer
from django.utils.functional import SimpleLazyObject, empty
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model

Applicator = get_class('offer.applicator', 'Applicator')
Basket = get_model('basket', 'basket')
Selector = get_class('partner.strategy', 'Selector')

selector = Selector()


class BasketMiddleware:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Keep track of cookies that need to be deleted (which can only be done
        # when we're processing the response instance).
        request.cookies_to_delete = []

        # Load stock/price strategy and assign to request (it will later be
        # assigned to the basket too).
        strategy = selector.strategy(request=request, user=request.user)
        request.strategy = strategy

        # We lazily load the basket so use a private variable to hold the
        # cached instance.
        request._basket_cache = None

        def load_full_basket():
            """
            Return the basket after applying offers.
            """
            basket = self.get_basket(request)
            basket.strategy = request.strategy
            self.apply_offers_to_basket(request, basket)

            return basket

        def load_basket_hash():
            """
            Load the basket and return the basket hash

            Note that we don't apply offers or check that every line has a
            stockrecord here.
            """
            basket = self.get_basket(request)
            if basket.id:
                return self.get_basket_hash(basket.id)

        # Use Django's SimpleLazyObject to only perform the loading work
        # when the attribute is accessed.
        request.basket = SimpleLazyObject(load_full_basket)
        request.basket_hash = SimpleLazyObject(load_basket_hash)

        response = self.get_response(request)
        return self.process_response(request, response)

    def process_response(self, request, response):
        # Delete any surplus cookies
        cookies_to_delete = getattr(request, 'cookies_to_delete', [])
        for cookie_key in cookies_to_delete:
            response.delete_cookie(cookie_key)

        if not hasattr(request, 'basket'):
            return response

        # If the basket was never initialized we can safely return
        if (isinstance(request.basket, SimpleLazyObject)
                and request.basket._wrapped is empty):
            return response

        cookie_key = self.get_cookie_key(request)
        # Check if we need to set a cookie. If the cookies is already available
        # but is set in the cookies_to_delete list then we need to re-set it.
        has_basket_cookie = (
            cookie_key in request.COOKIES
            and cookie_key not in cookies_to_delete)

        # If a basket has had products added to it, but the user is anonymous
        # then we need to assign it to a cookie
        if (request.basket.id and not request.user.is_authenticated
                and not has_basket_cookie):
            cookie = self.get_basket_hash(request.basket.id)
            response.set_cookie(
                cookie_key, cookie,
                max_age=settings.OSCAR_BASKET_COOKIE_LIFETIME,
                secure=settings.OSCAR_BASKET_COOKIE_SECURE, httponly=True)
        return response

    def get_cookie_key(self, request):
        """
        Returns the cookie name to use for storing a cookie basket.

        The method serves as a useful hook in multi-site scenarios where
        different baskets might be needed.
        """
        return settings.OSCAR_BASKET_COOKIE_OPEN

    def process_template_response(self, request, response):
        if hasattr(response, 'context_data'):
            if response.context_data is None:
                response.context_data = {}
            if 'basket' not in response.context_data:
                response.context_data['basket'] = request.basket
            else:
                # Occasionally, a view will want to pass an alternative basket
                # to be rendered.  This can happen as part of checkout
                # processes where the submitted basket is frozen when the
                # customer is redirected to another site (eg PayPal).  When the
                # customer returns and we want to show the order preview
                # template, we need to ensure that the frozen basket gets
                # rendered (not request.basket).  We still keep a reference to
                # the request basket (just in case).
                response.context_data['request_basket'] = request.basket
        return response

    # Helper methods

    def get_basket(self, request):
        """
        Return the open basket for this request
        """
        if request._basket_cache is not None:
            return request._basket_cache

        num_baskets_merged = 0
        manager = Basket.open
        cookie_key = self.get_cookie_key(request)
        cookie_basket = self.get_cookie_basket(cookie_key, request, manager)

        if hasattr(request, 'user') and request.user.is_authenticated:
            # Signed-in user: if they have a cookie basket too, it means
            # that they have just signed in and we need to merge their cookie
            # basket into their user basket, then delete the cookie.
            try:
                basket, __ = manager.get_or_create(owner=request.user)
            except Basket.MultipleObjectsReturned:
                # Not sure quite how we end up here with multiple baskets.
                # We merge them and create a fresh one
                old_baskets = list(manager.filter(owner=request.user))
                basket = old_baskets[0]
                for other_basket in old_baskets[1:]:
                    self.merge_baskets(basket, other_basket)
                    num_baskets_merged += 1

            # Assign user onto basket to prevent further SQL queries when
            # basket.owner is accessed.
            basket.owner = request.user

            if cookie_basket:
                self.merge_baskets(basket, cookie_basket)
                num_baskets_merged += 1
                request.cookies_to_delete.append(cookie_key)

        elif cookie_basket:
            # Anonymous user with a basket tied to the cookie
            basket = cookie_basket
        else:
            # Anonymous user with no basket - instantiate a new basket
            # instance.  No need to save yet.
            basket = Basket()

        # Cache basket instance for the during of this request
        request._basket_cache = basket

        if num_baskets_merged > 0:
            messages.add_message(request, messages.WARNING,
                                 _("We have merged a basket from a previous session. Its contents "
                                   "might have changed."))

        return basket

    def merge_baskets(self, master, slave):
        """
        Merge one basket into another.

        This is its own method to allow it to be overridden
        """
        master.merge(slave, add_quantities=False)

    def get_cookie_basket(self, cookie_key, request, manager):
        """
        Looks for a basket which is referenced by a cookie.

        If a cookie key is found with no matching basket, then we add
        it to the list to be deleted.
        """
        basket = None
        if cookie_key in request.COOKIES:
            basket_hash = request.COOKIES[cookie_key]
            try:
                basket_id = Signer().unsign(basket_hash)
                basket = Basket.objects.get(pk=basket_id, owner=None,
                                            status=Basket.OPEN)
            except (BadSignature, Basket.DoesNotExist):
                request.cookies_to_delete.append(cookie_key)
        return basket

    def apply_offers_to_basket(self, request, basket):
        if not basket.is_empty:
            Applicator().apply(basket, request.user, request)

    def get_basket_hash(self, basket_id):
        return Signer().sign(basket_id)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.views:0
==oscar.apps.catalogue.views:0
from django.contrib import messages
from django.core.paginator import InvalidPage
from django.http import Http404, HttpResponsePermanentRedirect
from django.shortcuts import get_object_or_404, redirect
from django.utils.http import urlquote
from django.utils.translation import gettext_lazy as _
from django.views.generic import DetailView, TemplateView

from oscar.apps.catalogue.signals import product_viewed
from oscar.core.loading import get_class, get_model

Product = get_model('catalogue', 'product')
Category = get_model('catalogue', 'category')
ProductAlert = get_model('customer', 'ProductAlert')
ProductAlertForm = get_class('customer.forms', 'ProductAlertForm')
get_product_search_handler_class = get_class(
    'catalogue.search_handlers', 'get_product_search_handler_class')


class ProductDetailView(DetailView):
    context_object_name = 'product'
    model = Product
    view_signal = product_viewed
    template_folder = "catalogue"

    # Whether to redirect to the URL with the right path
    enforce_paths = True

    # Whether to redirect child products to their parent's URL. If it's disabled,
    # we display variant product details on the separate page. Otherwise, details
    # displayed on parent product page.
    enforce_parent = False

    def get(self, request, **kwargs):
        """
        Ensures that the correct URL is used before rendering a response
        """
        self.object = product = self.get_object()

        redirect = self.redirect_if_necessary(request.path, product)
        if redirect is not None:
            return redirect

        # Do allow staff members so they can test layout etc.
        if not self.is_viewable(product, request):
            raise Http404()

        response = super().get(request, **kwargs)
        self.send_signal(request, response, product)
        return response

    def is_viewable(self, product, request):
        return product.is_public or request.user.is_staff

    def get_object(self, queryset=None):
        # Check if self.object is already set to prevent unnecessary DB calls
        if hasattr(self, 'object'):
            return self.object
        else:
            return super().get_object(queryset)

    def redirect_if_necessary(self, current_path, product):
        if self.enforce_parent and product.is_child:
            return HttpResponsePermanentRedirect(
                product.parent.get_absolute_url())

        if self.enforce_paths:
            expected_path = product.get_absolute_url()
            if expected_path != urlquote(current_path):
                return HttpResponsePermanentRedirect(expected_path)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['alert_form'] = self.get_alert_form()
        ctx['has_active_alert'] = self.get_alert_status()
        return ctx

    def get_alert_status(self):
        # Check if this user already have an alert for this product
        has_alert = False
        if self.request.user.is_authenticated:
            alerts = ProductAlert.objects.filter(
                product=self.object, user=self.request.user,
                status=ProductAlert.ACTIVE)
            has_alert = alerts.exists()
        return has_alert

    def get_alert_form(self):
        return ProductAlertForm(
            user=self.request.user, product=self.object)

    def send_signal(self, request, response, product):
        self.view_signal.send(
            sender=self, product=product, user=request.user, request=request,
            response=response)

    def get_template_names(self):
        """
        Return a list of possible templates.

        If an overriding class sets a template name, we use that. Otherwise,
        we try 2 options before defaulting to :file:`catalogue/detail.html`:

            1. :file:`detail-for-upc-{upc}.html`
            2. :file:`detail-for-class-{classname}.html`

        This allows alternative templates to be provided for a per-product
        and a per-item-class basis.
        """
        if self.template_name:
            return [self.template_name]

        return [
            'oscar/%s/detail-for-upc-%s.html' % (
                self.template_folder, self.object.upc),
            'oscar/%s/detail-for-class-%s.html' % (
                self.template_folder, self.object.get_product_class().slug),
            'oscar/%s/detail.html' % self.template_folder]


class CatalogueView(TemplateView):
    """
    Browse all products in the catalogue
    """
    context_object_name = "products"
    template_name = 'oscar/catalogue/browse.html'

    def get(self, request, *args, **kwargs):
        try:
            self.search_handler = self.get_search_handler(
                self.request.GET, request.get_full_path(), [])
        except InvalidPage:
            # Redirect to page one.
            messages.error(request, _('The given page number was invalid.'))
            return redirect('catalogue:index')
        return super().get(request, *args, **kwargs)

    def get_search_handler(self, *args, **kwargs):
        return get_product_search_handler_class()(*args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = {}
        ctx['summary'] = _("All products")
        search_context = self.search_handler.get_search_context_data(
            self.context_object_name)
        ctx.update(search_context)
        return ctx


class ProductCategoryView(TemplateView):
    """
    Browse products in a given category
    """
    context_object_name = "products"
    template_name = 'oscar/catalogue/category.html'
    enforce_paths = True

    def get(self, request, *args, **kwargs):
        # Fetch the category; return 404 or redirect as needed
        self.category = self.get_category()
        potential_redirect = self.redirect_if_necessary(
            request.path, self.category)
        if potential_redirect is not None:
            return potential_redirect

        try:
            self.search_handler = self.get_search_handler(
                request.GET, request.get_full_path(), self.get_categories())
        except InvalidPage:
            messages.error(request, _('The given page number was invalid.'))
            return redirect(self.category.get_absolute_url())

        return super().get(request, *args, **kwargs)

    def get_category(self):
        return get_object_or_404(Category, pk=self.kwargs['pk'])

    def redirect_if_necessary(self, current_path, category):
        if self.enforce_paths:
            # Categories are fetched by primary key to allow slug changes.
            # If the slug has changed, issue a redirect.
            expected_path = category.get_absolute_url()
            if expected_path != urlquote(current_path):
                return HttpResponsePermanentRedirect(expected_path)

    def get_search_handler(self, *args, **kwargs):
        return get_product_search_handler_class()(*args, **kwargs)

    def get_categories(self):
        """
        Return a list of the current category and its ancestors
        """
        return self.category.get_descendants_and_self()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['category'] = self.category
        search_context = self.search_handler.get_search_context_data(
            self.context_object_name)
        context.update(search_context)
        return context
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.methods:0
==oscar.apps.shipping.methods:0
from decimal import Decimal as D

from django.utils.translation import gettext_lazy as _

from oscar.core import prices


class Base(object):
    """
    Shipping method interface class

    This is the superclass to the classes in this module. This allows
    using all shipping methods interchangeably (aka polymorphism).

    The interface is all properties.
    """

    #: Used to store this method in the session.  Each shipping method should
    #:  have a unique code.
    code = '__default__'

    #: The name of the shipping method, shown to the customer during checkout
    name = 'Default shipping'

    #: A more detailed description of the shipping method shown to the customer
    #:  during checkout.  Can contain HTML.
    description = ''

    #: Whether the charge includes a discount
    is_discounted = False

    def calculate(self, basket):
        """
        Return the shipping charge for the given basket
        """
        raise NotImplementedError

    def discount(self, basket):
        """
        Return the discount on the standard shipping charge
        """
        # The regular shipping methods don't add a default discount.
        # For offers and vouchers, the discount will be provided
        # by a wrapper that Repository.apply_shipping_offer() adds.
        return D('0.00')


class Free(Base):
    """
    This shipping method specifies that shipping is free.
    """
    code = 'free-shipping'
    name = _('Free shipping')

    def calculate(self, basket):
        # If the charge is free then tax must be free (musn't it?) and so we
        # immediately set the tax to zero
        return prices.Price(
            currency=basket.currency,
            excl_tax=D('0.00'), tax=D('0.00'))


class NoShippingRequired(Free):
    """
    This is a special shipping method that indicates that no shipping is
    actually required (e.g. for digital goods).
    """
    code = 'no-shipping-required'
    name = _('No shipping required')


class FixedPrice(Base):
    """
    This shipping method indicates that shipping costs a fixed price and
    requires no special calculation.
    """
    code = 'fixed-price-shipping'
    name = _('Fixed price shipping')

    # Charges can be either declared by subclassing and overriding the
    # class attributes or by passing them to the constructor
    charge_excl_tax = None
    charge_incl_tax = None

    def __init__(self, charge_excl_tax=None, charge_incl_tax=None):
        if charge_excl_tax is not None:
            self.charge_excl_tax = charge_excl_tax
        if charge_incl_tax is not None:
            self.charge_incl_tax = charge_incl_tax

    def calculate(self, basket):
        return prices.Price(
            currency=basket.currency,
            excl_tax=self.charge_excl_tax,
            incl_tax=self.charge_incl_tax)


class OfferDiscount(Base):
    """
    Wrapper class that applies a discount to an existing shipping
    method's charges.
    """
    is_discounted = True

    def __init__(self, method, offer):
        self.method = method
        self.offer = offer

    # Forwarded properties

    @property
    def code(self):
        """
        Returns the :py:attr:`code <oscar.apps.shipping.methods.Base.code>` of the wrapped shipping method.
        """
        return self.method.code

    @property
    def name(self):
        """
        Returns the :py:attr:`name <oscar.apps.shipping.methods.Base.name>` of the wrapped shipping method.
        """
        return self.method.name

    @property
    def discount_name(self):
        """
        Returns the :py:attr:`name <oscar.apps.offer.abstract_models.BaseOfferMixin.name>` of the applied Offer.
        """
        return self.offer.name

    @property
    def description(self):
        """
        Returns the :py:attr:`description <.Base.description>` of the wrapped shipping method.
        """
        return self.method.description

    def calculate_excl_discount(self, basket):
        """
        Returns the shipping charge for the given basket without
        discount applied.
        """
        return self.method.calculate(basket)


class TaxExclusiveOfferDiscount(OfferDiscount):
    """
    Wrapper class which extends OfferDiscount to be exclusive of tax.
    """

    def calculate(self, basket):
        base_charge = self.method.calculate(basket)
        discount = self.offer.shipping_discount(base_charge.excl_tax)
        excl_tax = base_charge.excl_tax - discount
        return prices.Price(
            currency=base_charge.currency,
            excl_tax=excl_tax)

    def discount(self, basket):
        base_charge = self.method.calculate(basket)
        return self.offer.shipping_discount(base_charge.excl_tax)


class TaxInclusiveOfferDiscount(OfferDiscount):
    """
    Wrapper class which extends OfferDiscount to be inclusive of tax.
    """

    def calculate(self, basket):
        base_charge = self.method.calculate(basket)
        discount = self.offer.shipping_discount(base_charge.incl_tax)
        incl_tax = base_charge.incl_tax - discount
        excl_tax = self.calculate_excl_tax(base_charge, incl_tax)
        return prices.Price(
            currency=base_charge.currency,
            excl_tax=excl_tax, incl_tax=incl_tax)

    def calculate_excl_tax(self, base_charge, incl_tax):
        """
        Return the charge excluding tax (but including discount).
        """
        if incl_tax == D('0.00'):
            return D('0.00')
        # We assume we can linearly scale down the excl tax price before
        # discount.
        excl_tax = base_charge.excl_tax * (
            incl_tax / base_charge.incl_tax)
        return excl_tax.quantize(D('0.01'))

    def discount(self, basket):
        base_charge = self.method.calculate(basket)
        return self.offer.shipping_discount(base_charge.incl_tax)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.results:0
==oscar.apps.offer.results:0
from decimal import Decimal as D


class OfferApplications(object):
    """
    A collection of offer applications and the discounts that they give.

    Each offer application is stored as a dict which has fields for:

    * The offer that led to the successful application
    * The result instance
    * The number of times the offer was successfully applied
    """
    def __init__(self):
        self.applications = {}

    def __iter__(self):
        return self.applications.values().__iter__()

    def __len__(self):
        return len(self.applications)

    def add(self, offer, result):
        if offer.id not in self.applications:
            self.applications[offer.id] = {
                'offer': offer,
                'result': result,
                'name': offer.name,
                'description': result.description,
                'voucher': offer.get_voucher(),
                'freq': 0,
                'discount': D('0.00')}
        self.applications[offer.id]['discount'] += result.discount
        self.applications[offer.id]['freq'] += 1

    @property
    def offer_discounts(self):
        """
        Return basket discounts from offers (but not voucher offers)
        """
        discounts = []
        for application in self.applications.values():
            if not application['voucher'] and application['discount'] > 0:
                discounts.append(application)
        return discounts

    @property
    def voucher_discounts(self):
        """
        Return basket discounts from vouchers.
        """
        discounts = []
        for application in self.applications.values():
            if application['voucher'] and application['discount'] > 0:
                discounts.append(application)
        return discounts

    @property
    def shipping_discounts(self):
        """
        Return shipping discounts
        """
        discounts = []
        for application in self.applications.values():
            if application['result'].affects_shipping:
                discounts.append(application)
        return discounts

    @property
    def grouped_voucher_discounts(self):
        """
        Return voucher discounts aggregated up to the voucher level.

        This is different to the voucher_discounts property as a voucher can
        have multiple offers associated with it.
        """
        voucher_discounts = {}
        for application in self.voucher_discounts:
            voucher = application['voucher']
            discount = application['discount']
            if voucher.code not in voucher_discounts:
                voucher_discounts[voucher.code] = {
                    'voucher': voucher,
                    'discount': discount,
                }
            else:
                voucher_discounts[voucher.code]['discount'] += discount
        return voucher_discounts.values()

    @property
    def post_order_actions(self):
        """
        Return successful offer applications which didn't lead to a discount
        """
        applications = []
        for application in self.applications.values():
            if application['result'].affects_post_order:
                applications.append(application)
        return applications

    @property
    def offers(self):
        """
        Return a dict of offers that were successfully applied
        """
        return dict([(a['offer'].id, a['offer']) for a in
                     self.applications.values()])


class ApplicationResult(object):
    is_final = is_successful = False
    # Basket discount
    discount = D('0.00')
    description = None

    # Offer applications can affect 3 distinct things
    # (a) Give a discount off the BASKET total
    # (b) Give a discount off the SHIPPING total
    # (a) Trigger a post-order action
    BASKET, SHIPPING, POST_ORDER = 0, 1, 2
    affects = None

    @property
    def affects_basket(self):
        return self.affects == self.BASKET

    @property
    def affects_shipping(self):
        return self.affects == self.SHIPPING

    @property
    def affects_post_order(self):
        return self.affects == self.POST_ORDER


class BasketDiscount(ApplicationResult):
    """
    For when an offer application leads to a simple discount off the basket's
    total
    """
    affects = ApplicationResult.BASKET

    def __init__(self, amount):
        self.discount = amount

    @property
    def is_successful(self):
        """
        Returns ``True`` if the discount is greater than zero
        """
        return self.discount > 0

    def __str__(self):
        return '<Basket discount of %s>' % self.discount

    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, self.discount)


# Helper global as returning zero discount is quite common
ZERO_DISCOUNT = BasketDiscount(D('0.00'))


class ShippingDiscount(ApplicationResult):
    """
    For when an offer application leads to a discount from the shipping cost
    """
    is_successful = is_final = True
    affects = ApplicationResult.SHIPPING


SHIPPING_DISCOUNT = ShippingDiscount()


class PostOrderAction(ApplicationResult):
    """
    For when an offer condition is met but the benefit is deferred until after
    the order has been placed. E.g. buy 2 books and get 100 loyalty points.
    """
    is_final = is_successful = True
    affects = ApplicationResult.POST_ORDER

    def __init__(self, description):
        self.description = description
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.reviews.views:0
==oscar.apps.dashboard.reviews.views:0
==oscar.apps.dashboard.reviews.views:0
import datetime

from django.conf import settings
from django.db.models import Q
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.views import generic

from oscar.core.loading import get_classes, get_model
from oscar.core.utils import format_datetime
from oscar.views import sort_queryset
from oscar.views.generic import BulkEditMixin

ProductReviewSearchForm, DashboardProductReviewForm = \
    get_classes('dashboard.reviews.forms', ('ProductReviewSearchForm', 'DashboardProductReviewForm'))
ProductReview = get_model('reviews', 'productreview')


class ReviewListView(BulkEditMixin, generic.ListView):
    model = ProductReview
    template_name = 'oscar/dashboard/reviews/review_list.html'
    context_object_name = 'review_list'
    form_class = ProductReviewSearchForm
    review_form_class = DashboardProductReviewForm
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE
    actions = ('update_selected_review_status',)
    checkbox_object_name = 'review'
    desc_template = _("%(main_filter)s %(date_filter)s %(status_filter)s"
                      "%(kw_filter)s %(name_filter)s")

    def get(self, request, *args, **kwargs):
        response = super().get(request, **kwargs)
        self.form = self.form_class()
        return response

    def get_date_from_to_queryset(self, date_from, date_to, queryset=None):
        """
        Get a ``QuerySet`` of ``ProductReview`` items that match the time
        frame specified by *date_from* and *date_to*. Both parameters are
        expected to be in ``datetime`` format with *date_from* < *date_to*.
        If *queryset* is specified, it will be filtered according to the
        given dates. Otherwise, a new queryset for all ``ProductReview``
        items is created.
        """
        if queryset is None:
            queryset = self.model.objects.all()

        if date_from:
            queryset = queryset.filter(date_created__gte=date_from)
            self.desc_ctx['date_filter'] \
                = _(" created after %s") % format_datetime(date_from)
        if date_to:
            # Add 24 hours to make search inclusive
            date_to = date_to + datetime.timedelta(days=1)
            queryset = queryset.filter(date_created__lt=date_to)
            self.desc_ctx['date_filter'] \
                = _(" created before %s") % format_datetime(date_to)

        if date_from and date_to:
            # override description
            self.desc_ctx['date_filter'] \
                = _(" created between %(start_date)s and %(end_date)s") % {
                    'start_date': format_datetime(date_from),
                    'end_date': format_datetime(date_to)}
        return queryset

    def get_queryset(self):
        queryset = self.model.objects.select_related('product', 'user').all()
        queryset = sort_queryset(
            queryset, self.request, ['score', 'total_votes', 'date_created'])
        self.desc_ctx = {
            'main_filter': _('All reviews'),
            'date_filter': '',
            'status_filter': '',
            'kw_filter': '',
            'name_filter': '',
        }

        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return queryset

        data = self.form.cleaned_data

        queryset = self.add_filter_status(queryset, data['status'])
        queryset = self.add_filter_keyword(queryset, data['keyword'])
        queryset = self.add_filter_name(queryset, data['name'])

        queryset = self.get_date_from_to_queryset(
            data['date_from'], data['date_to'], queryset)

        return queryset

    def add_filter_status(self, queryset, status):
        # checking for empty string rather then True is required
        # as zero is a valid value for 'status' but would be
        # evaluated to False
        if status != '':
            queryset = queryset.filter(status=status).distinct()
            display_status = self.form.get_friendly_status()
            self.desc_ctx['status_filter'] \
                = _(" with status matching '%s'") % display_status
        return queryset

    def add_filter_keyword(self, queryset, keyword):
        if keyword:
            queryset = queryset.filter(
                Q(title__icontains=keyword)
                | Q(body__icontains=keyword)
            ).distinct()
            self.desc_ctx['kw_filter'] \
                = _(" with keyword matching '%s'") % keyword
        return queryset

    def add_filter_name(self, queryset, name):
        if name:
            # If the value is two words, then assume they are first name and
            # last name
            parts = name.split()
            if len(parts) >= 2:
                queryset = queryset.filter(
                    user__first_name__istartswith=parts[0],
                    user__last_name__istartswith=parts[1]
                ).distinct()
            else:
                queryset = queryset.filter(
                    Q(user__first_name__istartswith=parts[0])
                    | Q(user__last_name__istartswith=parts[-1])
                ).distinct()
            self.desc_ctx['name_filter'] \
                = _(" with customer name matching '%s'") % name

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['review_form'] = self.review_form_class()
        context['form'] = self.form
        context['description'] = self.desc_template % self.desc_ctx
        return context

    def update_selected_review_status(self, request, reviews):
        """
        Update the status of the selected *reviews* with the new
        status in the *request* POST data. Redirects back to the
        list view of reviews.
        """
        new_status = int(request.POST.get('status'))
        for review in reviews:
            review.status = new_status
            review.save()
        return HttpResponseRedirect(reverse('dashboard:reviews-list'))


class ReviewUpdateView(generic.UpdateView):
    model = ProductReview
    template_name = 'oscar/dashboard/reviews/review_update.html'
    form_class = DashboardProductReviewForm
    context_object_name = 'review'

    def get_success_url(self):
        return reverse('dashboard:reviews-list')


class ReviewDeleteView(generic.DeleteView):
    model = ProductReview
    template_name = 'oscar/dashboard/reviews/review_delete.html'
    context_object_name = 'review'

    def get_success_url(self):
        return reverse('dashboard:reviews-list')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.utils:0
==oscar.apps.basket.utils:0
from collections import defaultdict

from django.contrib import messages
from django.template.loader import render_to_string

from oscar.core.loading import get_class, get_model

Applicator = get_class('offer.applicator', 'Applicator')
ConditionalOffer = get_model('offer', 'ConditionalOffer')


class BasketMessageGenerator(object):

    new_total_template_name = 'oscar/basket/messages/new_total.html'
    offer_lost_template_name = 'oscar/basket/messages/offer_lost.html'
    offer_gained_template_name = 'oscar/basket/messages/offer_gained.html'

    def get_new_total_messages(self, basket, include_buttons=True):
        new_total_messages = []
        # We use the 'include_buttons' parameter to determine whether to show the
        # 'Checkout now' buttons.  We don't want to show these on the basket page.
        msg = render_to_string(self.new_total_template_name,
                               {'basket': basket,
                                'include_buttons': include_buttons})
        new_total_messages.append((messages.INFO, msg))

        return new_total_messages

    def get_offer_lost_messages(self, offers_before, offers_after):
        offer_messages = []
        for offer_id in set(offers_before).difference(offers_after):
            offer = offers_before[offer_id]
            msg = render_to_string(self.offer_lost_template_name, {'offer': offer})
            offer_messages.append((messages.WARNING, msg))
        return offer_messages

    def get_offer_gained_messages(self, offers_before, offers_after):
        offer_messages = []
        for offer_id in set(offers_after).difference(offers_before):
            offer = offers_after[offer_id]
            msg = render_to_string(self.offer_gained_template_name, {'offer': offer})
            offer_messages.append((messages.SUCCESS, msg))
        return offer_messages

    def get_offer_messages(self, offers_before, offers_after):
        offer_messages = []
        offer_messages.extend(self.get_offer_lost_messages(offers_before, offers_after))
        offer_messages.extend(self.get_offer_gained_messages(offers_before, offers_after))
        return offer_messages

    def get_messages(self, basket, offers_before, offers_after, include_buttons=True):
        messages = []
        messages.extend(self.get_offer_messages(offers_before, offers_after))
        messages.extend(self.get_new_total_messages(basket, include_buttons))
        return messages

    def apply_messages(self, request, offers_before):
        """
        Set flash messages triggered by changes to the basket
        """
        # Re-apply offers to see if any new ones are now available
        request.basket.reset_offer_applications()
        Applicator().apply(request.basket, request.user, request)
        offers_after = request.basket.applied_offers()

        for level, msg in self.get_messages(request.basket, offers_before, offers_after):
            messages.add_message(request, level, msg, extra_tags='safe noicon')


class LineOfferConsumer(object):
    """
    facade for marking basket lines as consumed by
    any or a specific offering.

    historically oscar marks a line as consumed if any
    offer is applied to it, but more complicated scenarios
    are possible if we mark the line as being consumed by
    specific offers.

    this allows combining i.e. multiple vouchers, vouchers
    with special session discounts, etc.
    """

    def __init__(self, line):
        self.__line = line
        self.__offers = dict()
        self.__affected_quantity = 0
        self.__consumptions = defaultdict(int)

    # private
    def __cache(self, offer):
        self.__offers[offer.pk] = offer

    def __update_affected_quantity(self, quantity):
        available = int(self.__line.quantity - self.__affected_quantity)
        self.__affected_quantity += min(available, quantity)

    # public
    def consume(self, quantity: int, offer=None):
        """
        mark a basket line as consumed by an offer

        :param int quantity: the number of items on the line affected
        :param offer: the offer to mark the line
        :type offer: ConditionalOffer or None

        if offer is None, the specified quantity of items on this
        basket line is consumed for *any* offer, else only for the
        specified offer.
        """
        self.__update_affected_quantity(quantity)
        if offer:
            self.__cache(offer)
            available = self.available(offer)
            self.__consumptions[offer.pk] += min(available, quantity)

    def consumed(self, offer=None):
        """
        check how many items on this line have been
        consumed by an offer

        :param offer: the offer to check
        :type offer: ConditionalOffer or None
        :return: the number of items marked as consumed
        :rtype: int

        if offer is not None, only the number of items marked
        with the specified ConditionalOffer are returned

        """
        if not offer:
            return self.__affected_quantity
        return int(self.__consumptions[offer.pk])

    @property
    def consumers(self):
        return [x for x in self.__offers.values() if self.consumed(x)]

    def available(self, offer=None) -> int:
        """
        check how many items are available for offer

        :param offer: the offer to check
        :type offer: ConditionalOffer or None
        :return: the number of items available for offer
        :rtype: int
        """
        max_affected_items = self.__line.quantity

        if offer and isinstance(offer, ConditionalOffer):

            applied = [x for x in self.consumers if x != offer]

            # find any *other* exclusive offers
            if any([x.exclusive for x in applied]):
                return 0

            # exclusive offers cannot be applied if any other
            # offers are active already
            if offer.exclusive and len(applied):
                return 0

            # respect max_affected_items
            if offer.benefit.max_affected_items:
                max_affected_items = min(offer.benefit.max_affected_items, max_affected_items)

        return max_affected_items - self.consumed(offer)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.offers.forms:0
==oscar.apps.dashboard.offers.forms:0
==oscar.apps.dashboard.offers.forms:0
import datetime

from django import forms
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_model
from oscar.forms import widgets

ConditionalOffer = get_model('offer', 'ConditionalOffer')
Condition = get_model('offer', 'Condition')
Benefit = get_model('offer', 'Benefit')


class MetaDataForm(forms.ModelForm):
    class Meta:
        model = ConditionalOffer
        fields = ('name', 'description',)


class RestrictionsForm(forms.ModelForm):

    start_datetime = forms.DateTimeField(
        widget=widgets.DateTimePickerInput(),
        label=_("Start date"), required=False)
    end_datetime = forms.DateTimeField(
        widget=widgets.DateTimePickerInput(),
        label=_("End date"), required=False)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        today = datetime.date.today()
        self.fields['start_datetime'].initial = today

    class Meta:
        model = ConditionalOffer
        fields = ('start_datetime', 'end_datetime',
                  'max_basket_applications', 'max_user_applications',
                  'max_global_applications', 'max_discount',
                  'priority', 'exclusive')

    def clean(self):
        cleaned_data = super().clean()
        start = cleaned_data['start_datetime']
        end = cleaned_data['end_datetime']
        if start and end and end < start:
            raise forms.ValidationError(_(
                "The end date must be after the start date"))
        return cleaned_data


class ConditionForm(forms.ModelForm):
    custom_condition = forms.ChoiceField(
        required=False,
        label=_("Custom condition"), choices=())

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        custom_conditions = Condition.objects.all().exclude(
            proxy_class=None)
        if len(custom_conditions) > 0:
            # Initialise custom_condition field
            choices = [(c.id, str(c)) for c in custom_conditions]
            choices.insert(0, ('', ' --------- '))
            self.fields['custom_condition'].choices = choices
            condition = kwargs.get('instance')
            if condition:
                self.fields['custom_condition'].initial = condition.id
        else:
            # No custom conditions and so the type/range/value fields
            # are no longer optional
            for field in ('type', 'range', 'value'):
                self.fields[field].required = True

    class Meta:
        model = Condition
        fields = ['range', 'type', 'value']

    def clean(self):
        data = super().clean()

        # Check that either a condition has been entered or a custom condition
        # has been chosen
        if not any(data.values()):
            raise forms.ValidationError(
                _("Please either choose a range, type and value OR "
                  "select a custom condition"))

        if not data['custom_condition']:
            if not data.get('range', None):
                raise forms.ValidationError(
                    _("A range is required"))

        return data

    def save(self, *args, **kwargs):
        # We don't save a new model if a custom condition has been chosen,
        # we simply return the instance that has been chosen
        if self.cleaned_data['custom_condition']:
            return Condition.objects.get(
                id=self.cleaned_data['custom_condition'])
        return super().save(*args, **kwargs)


class BenefitForm(forms.ModelForm):
    custom_benefit = forms.ChoiceField(
        required=False,
        label=_("Custom incentive"), choices=())

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        custom_benefits = Benefit.objects.all().exclude(
            proxy_class=None)
        if len(custom_benefits) > 0:
            # Initialise custom_benefit field
            choices = [(c.id, str(c)) for c in custom_benefits]
            choices.insert(0, ('', ' --------- '))
            self.fields['custom_benefit'].choices = choices
            benefit = kwargs.get('instance')
            if benefit:
                self.fields['custom_benefit'].initial = benefit.id
        else:
            # No custom benefit and so the type fields
            # are no longer optional
            self.fields['type'].required = True

    class Meta:
        model = Benefit
        fields = ['range', 'type', 'value', 'max_affected_items']

    def clean(self):
        data = super().clean()

        # Check that either a benefit has been entered or a custom benfit
        # has been chosen
        if not any(data.values()):
            raise forms.ValidationError(
                _("Please either choose a range, type and value OR "
                  "select a custom incentive"))

        if data['custom_benefit']:
            if data.get('range') or data.get('type') or data.get('value'):
                raise forms.ValidationError(
                    _("No other options can be set if you are using a "
                      "custom incentive"))
        elif not data.get('type'):
            raise forms.ValidationError(
                _("Please either choose a range, type and value OR "
                  "select a custom incentive"))

        return data

    def save(self, *args, **kwargs):
        # We don't save a new model if a custom benefit has been chosen,
        # we simply return the instance that has been chosen
        if self.cleaned_data['custom_benefit']:
            return Benefit.objects.get(
                id=self.cleaned_data['custom_benefit'])
        return super().save(*args, **kwargs)


class OfferSearchForm(forms.Form):
    name = forms.CharField(required=False, label=_("Offer name"))
    is_active = forms.BooleanField(required=False, label=_("Is active?"))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.catalogue.formsets:0
==oscar.apps.dashboard.catalogue.formsets:0
==oscar.apps.dashboard.catalogue.formsets:0
from django import forms
from django.core import exceptions
from django.forms.models import inlineformset_factory
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_classes, get_model

Product = get_model('catalogue', 'Product')
ProductClass = get_model('catalogue', 'ProductClass')
ProductAttribute = get_model('catalogue', 'ProductAttribute')
StockRecord = get_model('partner', 'StockRecord')
ProductCategory = get_model('catalogue', 'ProductCategory')
ProductImage = get_model('catalogue', 'ProductImage')
ProductRecommendation = get_model('catalogue', 'ProductRecommendation')
AttributeOptionGroup = get_model('catalogue', 'AttributeOptionGroup')
AttributeOption = get_model('catalogue', 'AttributeOption')

(StockRecordForm,
 ProductCategoryForm,
 ProductImageForm,
 ProductRecommendationForm,
 ProductAttributesForm,
 AttributeOptionForm) = \
    get_classes('dashboard.catalogue.forms',
                ('StockRecordForm',
                 'ProductCategoryForm',
                 'ProductImageForm',
                 'ProductRecommendationForm',
                 'ProductAttributesForm',
                 'AttributeOptionForm'))


BaseStockRecordFormSet = inlineformset_factory(
    Product, StockRecord, form=StockRecordForm, extra=1)


class StockRecordFormSet(BaseStockRecordFormSet):

    def __init__(self, product_class, user, *args, **kwargs):
        self.user = user
        self.require_user_stockrecord = not user.is_staff
        self.product_class = product_class

        if not user.is_staff and \
           'instance' in kwargs and \
           'queryset' not in kwargs:
            kwargs.update({
                'queryset': StockRecord.objects.filter(product=kwargs['instance'],
                                                       partner__in=user.partners.all())
            })

        super().__init__(*args, **kwargs)
        self.set_initial_data()

    def set_initial_data(self):
        """
        If user has only one partner associated, set the first
        stock record's partner to it. Can't pre-select for staff users as
        they're allowed to save a product without a stock record.

        This is intentionally done after calling __init__ as passing initial
        data to __init__ creates a form for each list item. So depending on
        whether we can pre-select the partner or not, we'd end up with 1 or 2
        forms for an unbound form.
        """
        if self.require_user_stockrecord:
            try:
                user_partner = self.user.partners.get()
            except (exceptions.ObjectDoesNotExist,
                    exceptions.MultipleObjectsReturned):
                pass
            else:
                partner_field = self.forms[0].fields.get('partner', None)
                if partner_field and partner_field.initial is None:
                    partner_field.initial = user_partner

    def _construct_form(self, i, **kwargs):
        kwargs['product_class'] = self.product_class
        kwargs['user'] = self.user
        return super()._construct_form(
            i, **kwargs)

    def clean(self):
        """
        If the user isn't a staff user, this validation ensures that at least
        one stock record's partner is associated with a users partners.
        """
        if any(self.errors):
            return
        if self.require_user_stockrecord:
            stockrecord_partners = set([form.cleaned_data.get('partner', None)
                                        for form in self.forms])
            user_partners = set(self.user.partners.all())
            if not user_partners & stockrecord_partners:
                raise exceptions.ValidationError(
                    _("At least one stock record must be set to a partner that"
                      " you're associated with."))


BaseProductCategoryFormSet = inlineformset_factory(
    Product, ProductCategory, form=ProductCategoryForm, extra=1,
    can_delete=True)


class ProductCategoryFormSet(BaseProductCategoryFormSet):

    def __init__(self, product_class, user, *args, **kwargs):
        # This function just exists to drop the extra arguments
        super().__init__(*args, **kwargs)

    def clean(self):
        if not self.instance.is_child and self.get_num_categories() == 0:
            raise forms.ValidationError(
                _("Stand-alone and parent products "
                  "must have at least one category"))
        if self.instance.is_child and self.get_num_categories() > 0:
            raise forms.ValidationError(
                _("A child product should not have categories"))

    def get_num_categories(self):
        num_categories = 0
        for i in range(0, self.total_form_count()):
            form = self.forms[i]
            if (hasattr(form, 'cleaned_data')
                    and form.cleaned_data.get('category', None)
                    and not form.cleaned_data.get('DELETE', False)):
                num_categories += 1
        return num_categories


BaseProductImageFormSet = inlineformset_factory(
    Product, ProductImage, form=ProductImageForm, extra=2)


class ProductImageFormSet(BaseProductImageFormSet):

    def __init__(self, product_class, user, *args, **kwargs):
        super().__init__(*args, **kwargs)


BaseProductRecommendationFormSet = inlineformset_factory(
    Product, ProductRecommendation, form=ProductRecommendationForm,
    extra=5, fk_name="primary")


class ProductRecommendationFormSet(BaseProductRecommendationFormSet):

    def __init__(self, product_class, user, *args, **kwargs):
        super().__init__(*args, **kwargs)


ProductAttributesFormSet = inlineformset_factory(ProductClass,
                                                 ProductAttribute,
                                                 form=ProductAttributesForm,
                                                 extra=3)


AttributeOptionFormSet = inlineformset_factory(AttributeOptionGroup,
                                               AttributeOption,
                                               form=AttributeOptionForm,
                                               extra=3)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.orders.forms:0
==oscar.apps.dashboard.orders.forms:0
==oscar.apps.dashboard.orders.forms:0
import datetime

from django import forms
from django.http import QueryDict
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.core.loading import get_class, get_model
from oscar.forms.mixins import PhoneNumberMixin
from oscar.forms.widgets import DatePickerInput

Order = get_model('order', 'Order')
OrderNote = get_model('order', 'OrderNote')
ShippingAddress = get_model('order', 'ShippingAddress')
SourceType = get_model('payment', 'SourceType')
AbstractAddressForm = get_class('address.forms', 'AbstractAddressForm')


class OrderStatsForm(forms.Form):
    date_from = forms.DateField(
        required=False, label=pgettext_lazy("start date", "From"),
        widget=DatePickerInput)
    date_to = forms.DateField(
        required=False, label=pgettext_lazy("end date", "To"),
        widget=DatePickerInput)

    _filters = _description = None

    def _determine_filter_metadata(self):
        self._filters = {}
        self._description = _('All orders')
        if self.errors:
            return

        date_from = self.cleaned_data['date_from']
        date_to = self.cleaned_data['date_to']
        if date_from and date_to:
            # We want to include end date so we adjust the date we use with the
            # 'range' function.
            self._filters = {'date_placed__range':
                             [date_from, date_to + datetime.timedelta(days=1)]}
            self._description = _('Orders placed between %(date_from)s and'
                                  ' %(date_to)s') % {
                'date_from': date_from,
                'date_to': date_to}
        elif date_from and not date_to:
            self._filters = {'date_placed__gte': date_from}
            self._description = _('Orders placed since %s') % (date_from,)
        elif not date_from and date_to:
            self._filters = {'date_placed__lte': date_to}
            self._description = _('Orders placed until %s') % (date_to,)
        else:
            self._filters = {}
            self._description = _('All orders')

    def get_filters(self):
        if self._filters is None:
            self._determine_filter_metadata()
        return self._filters

    def get_filter_description(self):
        if self._description is None:
            self._determine_filter_metadata()
        return self._description


class OrderSearchForm(forms.Form):
    order_number = forms.CharField(required=False, label=_("Order number"))
    name = forms.CharField(required=False, label=_("Customer name"))
    product_title = forms.CharField(required=False, label=_("Product name"))
    upc = forms.CharField(required=False, label=_("UPC"))
    partner_sku = forms.CharField(required=False, label=_("Partner SKU"))

    status_choices = (('', '---------'),) + tuple([(v, v)
                                                   for v
                                                   in Order.all_statuses()])
    status = forms.ChoiceField(choices=status_choices, label=_("Status"),
                               required=False)

    date_from = forms.DateField(
        required=False, label=_("Date from"), widget=DatePickerInput)
    date_to = forms.DateField(
        required=False, label=_("Date to"), widget=DatePickerInput)

    voucher = forms.CharField(required=False, label=_("Voucher code"))

    payment_method = forms.ChoiceField(
        label=_("Payment method"), required=False,
        choices=())

    format_choices = (('html', _('HTML')),
                      ('csv', _('CSV')),)
    response_format = forms.ChoiceField(widget=forms.RadioSelect,
                                        required=False, choices=format_choices,
                                        initial='html',
                                        label=_("Get results as"))

    def __init__(self, *args, **kwargs):
        # Ensure that 'response_format' is always set
        if 'data' in kwargs:
            data = kwargs['data']
            del(kwargs['data'])
        elif len(args) > 0:
            data = args[0]
            args = args[1:]
        else:
            data = None

        if data:
            if data.get('response_format', None) not in self.format_choices:
                # Handle POST/GET dictionaries, which are unmutable.
                if isinstance(data, QueryDict):
                    data = data.dict()
                data['response_format'] = 'html'

        super().__init__(data, *args, **kwargs)
        self.fields['payment_method'].choices = self.payment_method_choices()

    def payment_method_choices(self):
        return (('', '---------'),) + tuple(
            [(src.code, src.name) for src in SourceType.objects.all()])


class OrderNoteForm(forms.ModelForm):

    class Meta:
        model = OrderNote
        fields = ['message']

    def __init__(self, order, user, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.order = order
        self.instance.user = user


class ShippingAddressForm(PhoneNumberMixin, AbstractAddressForm):

    class Meta:
        model = ShippingAddress
        fields = [
            'title', 'first_name', 'last_name',
            'line1', 'line2', 'line3', 'line4',
            'state', 'postcode', 'country',
            'phone_number', 'notes',
        ]


class OrderStatusForm(forms.Form):
    new_status = forms.ChoiceField(label=_("New order status"), choices=())

    def __init__(self, order, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Set the choices
        choices = [(x, x) for x in order.available_statuses()]
        self.fields['new_status'].choices = choices

    @property
    def has_choices(self):
        return len(self.fields['new_status'].choices) > 0
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.catalogue.apps:0
==oscar.apps.dashboard.catalogue.apps:0
==oscar.apps.dashboard.catalogue.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class CatalogueDashboardConfig(OscarDashboardConfig):
    label = 'catalogue_dashboard'
    name = 'oscar.apps.dashboard.catalogue'
    verbose_name = _('Catalogue')

    default_permissions = ['is_staff', ]
    permissions_map = _map = {
        'catalogue-product': (['is_staff'], ['partner.dashboard_access']),
        'catalogue-product-create': (['is_staff'],
                                     ['partner.dashboard_access']),
        'catalogue-product-list': (['is_staff'], ['partner.dashboard_access']),
        'catalogue-product-delete': (['is_staff'],
                                     ['partner.dashboard_access']),
        'catalogue-product-lookup': (['is_staff'],
                                     ['partner.dashboard_access']),
    }

    def ready(self):
        self.product_list_view = get_class('dashboard.catalogue.views',
                                           'ProductListView')
        self.product_lookup_view = get_class('dashboard.catalogue.views',
                                             'ProductLookupView')
        self.product_create_redirect_view = get_class('dashboard.catalogue.views',
                                                      'ProductCreateRedirectView')
        self.product_createupdate_view = get_class('dashboard.catalogue.views',
                                                   'ProductCreateUpdateView')
        self.product_delete_view = get_class('dashboard.catalogue.views',
                                             'ProductDeleteView')

        self.product_class_create_view = get_class('dashboard.catalogue.views',
                                                   'ProductClassCreateView')
        self.product_class_update_view = get_class('dashboard.catalogue.views',
                                                   'ProductClassUpdateView')
        self.product_class_list_view = get_class('dashboard.catalogue.views',
                                                 'ProductClassListView')
        self.product_class_delete_view = get_class('dashboard.catalogue.views',
                                                   'ProductClassDeleteView')

        self.category_list_view = get_class('dashboard.catalogue.views',
                                            'CategoryListView')
        self.category_detail_list_view = get_class('dashboard.catalogue.views',
                                                   'CategoryDetailListView')
        self.category_create_view = get_class('dashboard.catalogue.views',
                                              'CategoryCreateView')
        self.category_update_view = get_class('dashboard.catalogue.views',
                                              'CategoryUpdateView')
        self.category_delete_view = get_class('dashboard.catalogue.views',
                                              'CategoryDeleteView')

        self.stock_alert_view = get_class('dashboard.catalogue.views',
                                          'StockAlertListView')

        self.attribute_option_group_create_view = get_class('dashboard.catalogue.views',
                                                            'AttributeOptionGroupCreateView')
        self.attribute_option_group_list_view = get_class('dashboard.catalogue.views',
                                                          'AttributeOptionGroupListView')
        self.attribute_option_group_update_view = get_class('dashboard.catalogue.views',
                                                            'AttributeOptionGroupUpdateView')
        self.attribute_option_group_delete_view = get_class('dashboard.catalogue.views',
                                                            'AttributeOptionGroupDeleteView')

        self.option_list_view = get_class('dashboard.catalogue.views', 'OptionListView')
        self.option_create_view = get_class('dashboard.catalogue.views', 'OptionCreateView')
        self.option_update_view = get_class('dashboard.catalogue.views', 'OptionUpdateView')
        self.option_delete_view = get_class('dashboard.catalogue.views', 'OptionDeleteView')

    def get_urls(self):
        urls = [
            url(r'^products/(?P<pk>\d+)/$',
                self.product_createupdate_view.as_view(),
                name='catalogue-product'),
            url(r'^products/create/$',
                self.product_create_redirect_view.as_view(),
                name='catalogue-product-create'),
            url(r'^products/create/(?P<product_class_slug>[\w-]+)/$',
                self.product_createupdate_view.as_view(),
                name='catalogue-product-create'),
            url(r'^products/(?P<parent_pk>[-\d]+)/create-variant/$',
                self.product_createupdate_view.as_view(),
                name='catalogue-product-create-child'),
            url(r'^products/(?P<pk>\d+)/delete/$',
                self.product_delete_view.as_view(),
                name='catalogue-product-delete'),
            url(r'^$', self.product_list_view.as_view(),
                name='catalogue-product-list'),
            url(r'^stock-alerts/$', self.stock_alert_view.as_view(),
                name='stock-alert-list'),
            url(r'^product-lookup/$', self.product_lookup_view.as_view(),
                name='catalogue-product-lookup'),
            url(r'^categories/$', self.category_list_view.as_view(),
                name='catalogue-category-list'),
            url(r'^categories/(?P<pk>\d+)/$',
                self.category_detail_list_view.as_view(),
                name='catalogue-category-detail-list'),
            url(r'^categories/create/$', self.category_create_view.as_view(),
                name='catalogue-category-create'),
            url(r'^categories/create/(?P<parent>\d+)$',
                self.category_create_view.as_view(),
                name='catalogue-category-create-child'),
            url(r'^categories/(?P<pk>\d+)/update/$',
                self.category_update_view.as_view(),
                name='catalogue-category-update'),
            url(r'^categories/(?P<pk>\d+)/delete/$',
                self.category_delete_view.as_view(),
                name='catalogue-category-delete'),
            url(r'^product-type/create/$',
                self.product_class_create_view.as_view(),
                name='catalogue-class-create'),
            url(r'^product-types/$',
                self.product_class_list_view.as_view(),
                name='catalogue-class-list'),
            url(r'^product-type/(?P<pk>\d+)/update/$',
                self.product_class_update_view.as_view(),
                name='catalogue-class-update'),
            url(r'^product-type/(?P<pk>\d+)/delete/$',
                self.product_class_delete_view.as_view(),
                name='catalogue-class-delete'),
            url(r'^attribute-option-group/create/$',
                self.attribute_option_group_create_view.as_view(),
                name='catalogue-attribute-option-group-create'),
            url(r'^attribute-option-group/$',
                self.attribute_option_group_list_view.as_view(),
                name='catalogue-attribute-option-group-list'),
            # The RelatedFieldWidgetWrapper code does something funny with
            # placeholder urls, so it does need to match more than just a pk
            url(r'^attribute-option-group/(?P<pk>\w+)/update/$',
                self.attribute_option_group_update_view.as_view(),
                name='catalogue-attribute-option-group-update'),
            # The RelatedFieldWidgetWrapper code does something funny with
            # placeholder urls, so it does need to match more than just a pk
            url(r'^attribute-option-group/(?P<pk>\w+)/delete/$',
                self.attribute_option_group_delete_view.as_view(),
                name='catalogue-attribute-option-group-delete'),
            url(r'^option/$',
                self.option_list_view.as_view(),
                name='catalogue-option-list'),
            url(r'^option/create/$',
                self.option_create_view.as_view(),
                name='catalogue-option-create'),
            url(r'^option/(?P<pk>\w+)/update/$',
                self.option_update_view.as_view(),
                name='catalogue-option-update'),
            url(r'^option/(?P<pk>\w+)/delete/$',
                self.option_delete_view.as_view(),
                name='catalogue-option-delete'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.search.forms:0
==oscar.apps.search.forms:0
from collections import defaultdict

from django import forms
from django.conf import settings
from django.forms.widgets import Input
from django.utils.translation import gettext_lazy as _
from haystack.forms import FacetedSearchForm

from oscar.core.loading import get_class

is_solr_supported = get_class('search.features', 'is_solr_supported')


class SearchInput(Input):
    """
    Defining a search type widget

    This is an HTML5 thing and works nicely with Safari, other browsers default
    back to using the default "text" type
    """
    input_type = 'search'


# Build a dict of valid queries
VALID_FACET_QUERIES = defaultdict(list)
for facet in settings.OSCAR_SEARCH_FACETS['queries'].values():
    field_name = "%s_exact" % facet['field']
    queries = [t[1] for t in facet['queries']]
    VALID_FACET_QUERIES[field_name].extend(queries)


class SearchForm(FacetedSearchForm):
    """
    In Haystack, the search form is used for interpreting
    and sub-filtering the SQS.
    """
    # Use a tabindex of 1 so that users can hit tab on any page and it will
    # focus on the search widget.
    q = forms.CharField(
        required=False, label=_('Search'),
        widget=SearchInput({
            "placeholder": _('Search'),
            "tabindex": "1",
            "class": "form-control"
        }))

    # Search
    RELEVANCY = "relevancy"
    TOP_RATED = "rating"
    NEWEST = "newest"
    PRICE_HIGH_TO_LOW = "price-desc"
    PRICE_LOW_TO_HIGH = "price-asc"
    TITLE_A_TO_Z = "title-asc"
    TITLE_Z_TO_A = "title-desc"

    SORT_BY_CHOICES = [
        (RELEVANCY, _("Relevancy")),
        (TOP_RATED, _("Customer rating")),
        (NEWEST, _("Newest")),
        (PRICE_HIGH_TO_LOW, _("Price high to low")),
        (PRICE_LOW_TO_HIGH, _("Price low to high")),
        (TITLE_A_TO_Z, _("Title A to Z")),
        (TITLE_Z_TO_A, _("Title Z to A")),
    ]

    # Map query params to sorting fields.  Note relevancy isn't included here
    # as we assume results are returned in relevancy order in the absence of an
    # explicit sort field being passed to the search backend.
    SORT_BY_MAP = {
        TOP_RATED: '-rating',
        NEWEST: '-date_created',
        PRICE_HIGH_TO_LOW: '-price',
        PRICE_LOW_TO_HIGH: 'price',
        TITLE_A_TO_Z: 'title_s',
        TITLE_Z_TO_A: '-title_s',
    }
    # Non Solr backends don't support dynamic fields so we just sort on title
    if not is_solr_supported():
        SORT_BY_MAP[TITLE_A_TO_Z] = 'title_exact'
        SORT_BY_MAP[TITLE_Z_TO_A] = '-title_exact'

    sort_by = forms.ChoiceField(
        label=_("Sort by"), choices=SORT_BY_CHOICES,
        widget=forms.Select(), required=False)

    @property
    def selected_multi_facets(self):
        """
        Validate and return the selected facets
        """
        # Process selected facets into a dict(field->[*values]) to handle
        # multi-faceting
        selected_multi_facets = defaultdict(list)

        for facet_kv in self.selected_facets:
            if ":" not in facet_kv:
                continue
            field_name, value = facet_kv.split(':', 1)

            # Validate query facets as they as passed unescaped to Solr
            if field_name in VALID_FACET_QUERIES:
                if value not in VALID_FACET_QUERIES[field_name]:
                    # Invalid query value
                    continue

            selected_multi_facets[field_name].append(value)

        return selected_multi_facets

    def search(self):
        # We replace the 'search' method from FacetedSearchForm, so that we can
        # handle range queries
        # Note, we call super on a parent class as the default faceted view
        # escapes everything (which doesn't work for price range queries)
        sqs = super(FacetedSearchForm, self).search()

        # We need to process each facet to ensure that the field name and the
        # value are quoted correctly and separately:
        for field, values in self.selected_multi_facets.items():
            if not values:
                continue
            if field in VALID_FACET_QUERIES:
                # Query facet - don't wrap value in speech marks and don't
                # clean value. Query values should have been validated by this
                # point and so we don't need to escape them.
                sqs = sqs.narrow('%s:(%s)' % (
                    field, " OR ".join(values)))
            else:
                # Field facet - clean and quote the values
                clean_values = [
                    '"%s"' % sqs.query.clean(val) for val in values]
                sqs = sqs.narrow('%s:(%s)' % (
                    field, " OR ".join(clean_values)))

        if self.is_valid() and 'sort_by' in self.cleaned_data:
            sort_field = self.SORT_BY_MAP.get(
                self.cleaned_data['sort_by'], None)
            if sort_field:
                sqs = sqs.order_by(sort_field)

        return sqs


class BrowseCategoryForm(SearchForm):
    """
    Variant of SearchForm that returns all products (instead of none) if no
    query is specified.
    """

    def no_query_found(self):
        """
        Return Queryset of all the results.
        """
        return self.searchqueryset
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.utils:0
==oscar.apps.customer.utils:0
import logging

from django.conf import settings
from django.contrib.auth.tokens import default_token_generator
from django.core.mail import EmailMessage, EmailMultiAlternatives
from django.urls import reverse
from django.utils.encoding import force_bytes

from oscar.core.compat import urlsafe_base64_encode
from oscar.core.loading import get_model


CommunicationEvent = get_model('order', 'CommunicationEvent')
Email = get_model('customer', 'Email')


class Dispatcher(object):
    def __init__(self, logger=None, mail_connection=None):
        if not logger:
            logger = logging.getLogger(__name__)
        self.logger = logger
        # Supply a mail_connection if you want the dispatcher to use that
        # instead of opening a new one.
        self.mail_connection = mail_connection

    # Public API methods

    def dispatch_direct_messages(self, recipient, messages):
        """
        Dispatch one-off messages to explicitly specified recipient.
        """
        if messages['subject'] and (messages['body'] or messages['html']):
            return self.send_email_messages(recipient, messages)

    def dispatch_order_messages(self, order, messages, event_type=None, **kwargs):
        """
        Dispatch order-related messages to the customer.
        """
        if order.is_anonymous:
            email = kwargs.get('email_address', order.guest_email)
            dispatched_messages = self.dispatch_anonymous_messages(email, messages)
        else:
            dispatched_messages = self.dispatch_user_messages(order.user, messages)

        self.create_communication_event(order, event_type, dispatched_messages)

    def dispatch_anonymous_messages(self, email, messages):
        dispatched_messages = {}
        if email:
            dispatched_messages['email'] = self.send_email_messages(email, messages), None
        return dispatched_messages

    def dispatch_user_messages(self, user, messages):
        """
        Send messages to a site user
        """
        dispatched_messages = {}
        if messages['subject'] and (messages['body'] or messages['html']):
            dispatched_messages['email'] = self.send_user_email_messages(user, messages)
        if messages['sms']:
            dispatched_messages['sms'] = self.send_text_message(user, messages['sms'])
        return dispatched_messages

    # Internal

    def create_communication_event(self, order, event_type, dispatched_messages):
        """
        Create order communications event for audit
        """
        if dispatched_messages and event_type is not None:
            CommunicationEvent._default_manager.create(order=order, event_type=event_type)

    def create_customer_email(self, user, messages, email):
        """
        Create Email instance in database for logging purposes.
        """
        # Is user is signed in, record the event for audit
        if email and user.is_authenticated:
            return Email._default_manager.create(user=user,
                                                 email=user.email,
                                                 subject=email.subject,
                                                 body_text=email.body,
                                                 body_html=messages['html'])

    def send_user_email_messages(self, user, messages):
        """
        Send message to the registered user / customer and collect data in database.
        """
        if not user.email:
            self.logger.warning("Unable to send email messages as user #%d has"
                                " no email address", user.id)
            return None, None

        email = self.send_email_messages(user.email, messages)
        return email, self.create_customer_email(user, messages, email)

    def send_email_messages(self, recipient, messages):
        """
        Send email to recipient, HTML attachment optional.
        """
        if hasattr(settings, 'OSCAR_FROM_EMAIL'):
            from_email = settings.OSCAR_FROM_EMAIL
        else:
            from_email = None

        # Determine whether we are sending a HTML version too
        if messages['html']:
            email = EmailMultiAlternatives(messages['subject'],
                                           messages['body'],
                                           from_email=from_email,
                                           to=[recipient])
            email.attach_alternative(messages['html'], "text/html")
        else:
            email = EmailMessage(messages['subject'],
                                 messages['body'],
                                 from_email=from_email,
                                 to=[recipient])
        self.logger.info("Sending email to %s" % recipient)

        if self.mail_connection:
            self.mail_connection.send_messages([email])
        else:
            email.send()

        return email

    def send_text_message(self, user, event_type):
        raise NotImplementedError


def get_password_reset_url(user, token_generator=default_token_generator):
    """
    Generate a password-reset URL for a given user
    """
    kwargs = {
        'token': token_generator.make_token(user),
        'uidb64': urlsafe_base64_encode(force_bytes(user.id)),
    }
    return reverse('password-reset-confirm', kwargs=kwargs)


def normalise_email(email):
    """
    The local part of an email address is case-sensitive, the domain part
    isn't.  This function lowercases the host and should be used in all email
    handling.
    """
    clean_email = email.strip()
    if '@' in clean_email:
        local, host = clean_email.rsplit('@', 1)
        return local + '@' + host.lower()
    return clean_email
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.utils:0
==oscar.apps.catalogue.utils:0
import os
import shutil
import tarfile
import tempfile
import zipfile
import zlib

from django.core.exceptions import FieldError
from django.core.files import File
from django.db.transaction import atomic
from django.utils.translation import gettext_lazy as _
from PIL import Image

from oscar.apps.catalogue.exceptions import (
    IdenticalImageError, ImageImportError, InvalidImageArchive)
from oscar.core.loading import get_model

Product = get_model('catalogue', 'product')
ProductImage = get_model('catalogue', 'productimage')


# This is an old class only really intended to be used by the internal sandbox
# site. It's not recommended to be used by your project.
class Importer(object):

    allowed_extensions = ['.jpeg', '.jpg', '.gif', '.png']

    def __init__(self, logger, field):
        self.logger = logger
        self._field = field

    @atomic  # noqa (too complex (10))
    def handle(self, dirname):
        stats = {
            'num_processed': 0,
            'num_skipped': 0,
            'num_invalid': 0}
        image_dir, filenames = self._get_image_files(dirname)
        if image_dir:
            for filename in filenames:
                try:
                    lookup_value \
                        = self._get_lookup_value_from_filename(filename)
                    self._process_image(image_dir, filename, lookup_value)
                    stats['num_processed'] += 1
                except Product.MultipleObjectsReturned:
                    self.logger.warning("Multiple products matching %s='%s',"
                                        " skipping"
                                        % (self._field, lookup_value))
                    stats['num_skipped'] += 1
                except Product.DoesNotExist:
                    self.logger.warning("No item matching %s='%s'"
                                        % (self._field, lookup_value))
                    stats['num_skipped'] += 1
                except IdenticalImageError:
                    self.logger.warning("Identical image already exists for"
                                        " %s='%s', skipping"
                                        % (self._field, lookup_value))
                    stats['num_skipped'] += 1
                except IOError as e:
                    stats['num_invalid'] += 1
                    raise ImageImportError(_('%(filename)s is not a valid'
                                             ' image (%(error)s)')
                                           % {'filename': filename,
                                              'error': e})
                except FieldError as e:
                    raise ImageImportError(e)
            if image_dir != dirname:
                shutil.rmtree(image_dir)
        else:
            raise InvalidImageArchive(_('%s is not a valid image archive')
                                      % dirname)
        self.logger.info("Finished image import: %(num_processed)d imported,"
                         " %(num_skipped)d skipped" % stats)

    def _get_image_files(self, dirname):
        filenames = []
        image_dir = self._extract_images(dirname)
        if image_dir:
            for filename in os.listdir(image_dir):
                ext = os.path.splitext(filename)[1]
                if os.path.isfile(os.path.join(image_dir, filename)) \
                        and ext in self.allowed_extensions:
                    filenames.append(filename)
        return image_dir, filenames

    def _extract_images(self, dirname):
        '''
        Returns path to directory containing images in dirname if successful.
        Returns empty string if dirname does not exist, or could not be opened.
        Assumes that if dirname is a directory, then it contains images.
        If dirname is an archive (tar/zip file) then the path returned is to a
        temporary directory that should be deleted when no longer required.
        '''
        if os.path.isdir(dirname):
            return dirname

        ext = os.path.splitext(dirname)[1]
        if ext in ['.gz', '.tar']:
            image_dir = tempfile.mkdtemp()
            try:
                tar_file = tarfile.open(dirname)
                tar_file.extractall(image_dir)
                tar_file.close()
                return image_dir
            except (tarfile.TarError, zlib.error):
                return ""
        elif ext == '.zip':
            image_dir = tempfile.mkdtemp()
            try:
                zip_file = zipfile.ZipFile(dirname)
                zip_file.extractall(image_dir)
                zip_file.close()
                return image_dir
            except (zlib.error, zipfile.BadZipfile, zipfile.LargeZipFile):
                return ""
        # unknown archive - perhaps this should be treated differently
        return ""

    def _process_image(self, dirname, filename, lookup_value):
        file_path = os.path.join(dirname, filename)
        trial_image = Image.open(file_path)
        trial_image.verify()

        kwargs = {self._field: lookup_value}
        item = Product._default_manager.get(**kwargs)

        new_data = open(file_path, 'rb').read()
        next_index = 0
        for existing in item.images.all():
            next_index = existing.display_order + 1
            try:
                if new_data == existing.original.read():
                    raise IdenticalImageError()
            except IOError:
                # File probably doesn't exist
                existing.delete()

        new_file = File(open(file_path, 'rb'))
        im = ProductImage(product=item, display_order=next_index)
        im.original.save(filename, new_file, save=False)
        im.save()
        self.logger.debug('Image added to "%s"' % item)

    def _fetch_item(self, filename):
        kwargs = {self._field: self._get_lookup_value_from_filename(filename)}
        return Product._default_manager.get(**kwargs)

    def _get_lookup_value_from_filename(self, filename):
        return os.path.splitext(filename)[0]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.managers:0
==oscar.apps.catalogue.managers:0
from collections import defaultdict

from django.db import models
from django.db.models import OuterRef, Exists
from django.db.models.constants import LOOKUP_SEP

from oscar.core.decorators import deprecated
from oscar.core.loading import get_model


class AttributeFilter(dict):
    """
    Utility class used to implement the filter_by_attributes functionality.

    handles lookups, options and multivalue properties, check the tests for
    all features.
    """

    def __init__(self, filter_kwargs):
        super(AttributeFilter, self).__init__()

        for key, value in filter_kwargs.items():
            if LOOKUP_SEP in key:
                field_name, lookup = key.split(LOOKUP_SEP, 1)
                self[field_name] = (lookup, value)
            else:
                self[key] = (None, value)

    def field_names(self):
        return self.keys()

    def _selector(self, attribute_type):
        if attribute_type == "option" or attribute_type == "multi_option":
            return "attribute_values__value_%s__option" % attribute_type
        else:
            return "attribute_values__value_%s" % attribute_type

    def _select_value(self, types, lookup, value):
        _filter = models.Q()
        for _type in types:
            sel = self._selector(_type)
            if lookup is not None:
                sel = "%s%s%s" % (sel, LOOKUP_SEP, lookup)

            kwargs = dict()
            kwargs[sel] = value
            _filter |= models.Q(**kwargs)

        return _filter

    def fast_query(self, attribute_types, queryset):
        qs = queryset
        typedict = defaultdict(list)

        for code, attribute_type in attribute_types:
            typedict[code].append(attribute_type)

        for code, (lookup, value) in self.items():
            selected_values = self._select_value(typedict[code], lookup, value)
            if not selected_values:  # if no value clause can be formed, no result can be formed.
                return queryset.none()

            qs = qs.filter(
                selected_values,
                attribute_values__attribute__code=code,
            )

        return qs


class ProductQuerySet(models.query.QuerySet):

    def filter_by_attributes(self, **filter_kwargs):
        """
        Allows querying by attribute as if the attributes where fields on the
        product::

        >>> first_large_shirt = Product.objects.filter_by_attributes(size="Large").first()
        >>> first_large_shirt.attr.size
        <AttributeOption: Large>
        """
        attribute_filter = AttributeFilter(filter_kwargs)

        ProductAttribute = self.model.attributes.rel.model
        attribute_types = ProductAttribute.objects.values_list("code", "type").filter(
            code__in=attribute_filter.field_names()
        )

        return attribute_filter.fast_query(attribute_types, self)

    def base_queryset(self):
        """
        Applies select_related and prefetch_related for commonly related
        models to save on queries
        """
        Option = get_model('catalogue', 'Option')
        product_class_options = Option.objects.filter(productclass=OuterRef('product_class'))
        product_options = Option.objects.filter(product=OuterRef('pk'))
        return self.select_related('product_class')\
            .prefetch_related('children', 'product_options', 'product_class__options', 'stockrecords', 'images') \
            .annotate(has_product_class_options=Exists(product_class_options),
                      has_product_options=Exists(product_options))

    def browsable(self):
        """
        Excludes non-canonical products and non-public products
        """
        return self.filter(parent=None, is_public=True)

    def browsable_dashboard(self):
        """
        Products that should be browsable in the dashboard.

        Excludes non-canonical products, but includes non-public products.
        """
        return self.filter(parent=None)


@deprecated
class ProductManager(models.Manager):
    """
    Deprecated. Use ProductQuerySet.as_manager() instead.
    """

    def get_queryset(self):
        return ProductQuerySet(self.model, using=self._db)

    def browsable(self):
        return self.get_queryset().browsable()

    def base_queryset(self):
        return self.get_queryset().base_queryset()


class BrowsableProductManager(ProductManager):
    """
    Deprecated. Use Product.objects.browsable() instead.

    The @deprecated decorator isn't applied to the class, because doing
    so would log warnings, and we still initialise this class
    in the Product.browsable for backward compatibility.
    """

    @deprecated
    def get_queryset(self):
        return super().get_queryset().browsable()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.importers:0
==oscar.apps.partner.importers:0
import os
from decimal import Decimal as D

from django.db.transaction import atomic
from django.utils.translation import gettext_lazy as _

from oscar.core.compat import UnicodeCSVReader
from oscar.core.loading import get_class, get_classes

ImportingError = get_class('partner.exceptions', 'ImportingError')
Partner, StockRecord = get_classes('partner.models', ['Partner',
                                                      'StockRecord'])
ProductClass, Product, Category, ProductCategory = get_classes(
    'catalogue.models', ('ProductClass', 'Product', 'Category',
                         'ProductCategory'))
create_from_breadcrumbs = get_class('catalogue.categories', 'create_from_breadcrumbs')


class CatalogueImporter(object):
    """
    CSV product importer used to built sandbox. Might not work very well
    for anything else.
    """

    _flush = False

    def __init__(self, logger, delimiter=",", flush=False):
        self.logger = logger
        self._delimiter = delimiter
        self._flush = flush

    def handle(self, file_path=None):
        """Handles the actual import process"""
        if not file_path:
            raise ImportingError(_("No file path supplied"))
        Validator().validate(file_path)
        if self._flush is True:
            self.logger.info(" - Flushing product data before import")
            self._flush_product_data()
        self._import(file_path)

    def _flush_product_data(self):
        """Flush out product and stock models"""
        Product.objects.all().delete()
        ProductClass.objects.all().delete()
        Partner.objects.all().delete()
        StockRecord.objects.all().delete()

    @atomic
    def _import(self, file_path):
        """Imports given file"""
        stats = {'new_items': 0,
                 'updated_items': 0}
        row_number = 0
        with UnicodeCSVReader(
                file_path, delimiter=self._delimiter,
                quotechar='"', escapechar='\\') as reader:
            for row in reader:
                row_number += 1
                self._import_row(row_number, row, stats)
        msg = "New items: %d, updated items: %d" % (stats['new_items'],
                                                    stats['updated_items'])
        self.logger.info(msg)

    def _import_row(self, row_number, row, stats):
        if len(row) != 5 and len(row) != 9:
            self.logger.error("Row number %d has an invalid number of fields"
                              " (%d), skipping..." % (row_number, len(row)))
            return
        item = self._create_item(*row[:5], stats=stats)
        if len(row) == 9:
            # With stock data
            self._create_stockrecord(item, *row[5:9], stats=stats)

    def _create_item(self, product_class, category_str, upc, title,
                     description, stats):
        # Ignore any entries that are NULL
        if description == 'NULL':
            description = ''

        # Create item class and item
        product_class, __ \
            = ProductClass.objects.get_or_create(name=product_class)
        try:
            item = Product.objects.get(upc=upc)
            stats['updated_items'] += 1
        except Product.DoesNotExist:
            item = Product()
            stats['new_items'] += 1
        item.upc = upc
        item.title = title
        item.description = description
        item.product_class = product_class
        item.save()

        # Category
        cat = create_from_breadcrumbs(category_str)
        ProductCategory.objects.update_or_create(product=item, category=cat)

        return item

    def _create_stockrecord(self, item, partner_name, partner_sku,
                            price_excl_tax, num_in_stock, stats):
        # Create partner and stock record
        partner, _ = Partner.objects.get_or_create(
            name=partner_name)
        try:
            stock = StockRecord.objects.get(partner_sku=partner_sku)
        except StockRecord.DoesNotExist:
            stock = StockRecord()

        stock.product = item
        stock.partner = partner
        stock.partner_sku = partner_sku
        stock.price_excl_tax = D(price_excl_tax)
        stock.num_in_stock = num_in_stock
        stock.save()


class Validator(object):

    def validate(self, file_path):
        self._exists(file_path)
        self._is_file(file_path)
        self._is_readable(file_path)

    def _exists(self, file_path):
        """Check whether a file exists"""
        if not os.path.exists(file_path):
            raise ImportingError(_("%s does not exist") % (file_path))

    def _is_file(self, file_path):
        """Check whether file is actually a file type"""
        if not os.path.isfile(file_path):
            raise ImportingError(_("%s is not a file") % (file_path))

    def _is_readable(self, file_path):
        """Check file is readable"""
        try:
            f = open(file_path, 'r')
            f.close()
        except IOError:
            raise ImportingError(_("%s is not readable") % (file_path))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.shipping.views:0
==oscar.apps.dashboard.shipping.views:0
==oscar.apps.dashboard.shipping.views:0
from django import shortcuts
from django.contrib import messages
from django.template.loader import render_to_string
from django.urls import reverse
from django.views import generic

from oscar.core.loading import get_classes, get_model

WeightBandForm, WeightBasedForm = get_classes(
    'dashboard.shipping.forms', ['WeightBandForm', 'WeightBasedForm'])
WeightBased = get_model('shipping', 'WeightBased')
WeightBand = get_model('shipping', 'WeightBand')


class WeightBasedListView(generic.ListView):
    model = WeightBased
    template_name = "oscar/dashboard/shipping/weight_based_list.html"
    context_object_name = "methods"


class WeightBasedCreateView(generic.CreateView):
    model = WeightBased
    form_class = WeightBasedForm
    template_name = "oscar/dashboard/shipping/weight_based_form.html"

    def get_success_url(self):
        msg = render_to_string(
            'oscar/dashboard/shipping/messages/method_created.html',
            {'method': self.object})
        messages.success(self.request, msg, extra_tags='safe noicon')
        return reverse('dashboard:shipping-method-detail',
                       kwargs={'pk': self.object.pk})


class WeightBasedDetailView(generic.CreateView):
    model = WeightBand
    form_class = WeightBandForm
    template_name = "oscar/dashboard/shipping/weight_based_detail.html"

    def dispatch(self, request, *args, **kwargs):
        self.method = shortcuts.get_object_or_404(
            WeightBased, pk=kwargs['pk'])
        return super().dispatch(
            request, *args, **kwargs)

    def get_form_kwargs(self, **kwargs):
        kwargs = super().get_form_kwargs(**kwargs)
        kwargs['method'] = self.method
        return kwargs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['method'] = self.method
        return ctx

    def get_success_url(self):
        msg = render_to_string(
            'oscar/dashboard/shipping/messages/band_created.html',
            {'band': self.object})
        messages.success(self.request, msg, extra_tags='safe noicon')
        return reverse('dashboard:shipping-method-detail',
                       kwargs={'pk': self.method.pk})


class WeightBasedUpdateView(generic.UpdateView):
    model = WeightBased
    form_class = WeightBasedForm
    template_name = "oscar/dashboard/shipping/weight_based_form.html"
    context_object_name = "method"

    def get_success_url(self):
        msg = render_to_string(
            'oscar/dashboard/shipping/messages/method_updated.html',
            {'method': self.object})
        messages.success(self.request, msg, extra_tags='safe noicon')
        return reverse('dashboard:shipping-method-detail',
                       kwargs={'pk': self.object.pk})


class WeightBandUpdateView(generic.UpdateView):
    model = WeightBand
    form_class = WeightBandForm
    template_name = "oscar/dashboard/shipping/weight_band_form.html"
    context_object_name = "band"

    def dispatch(self, request, *args, **kwargs):
        self.method = shortcuts.get_object_or_404(
            WeightBased, pk=kwargs['method_pk'])
        return super().dispatch(
            request, *args, **kwargs)

    def get_queryset(self):
        return self.method.bands.all()

    def get_form_kwargs(self, **kwargs):
        kwargs = super().get_form_kwargs(**kwargs)
        kwargs['method'] = self.method
        return kwargs

    def get_success_url(self):
        msg = render_to_string(
            'oscar/dashboard/shipping/messages/band_updated.html',
            {'band': self.object})
        messages.success(self.request, msg, extra_tags='safe noicon')
        return reverse('dashboard:shipping-method-detail',
                       kwargs={'pk': self.method.pk})


class WeightBandDeleteView(generic.DeleteView):
    model = WeightBased
    template_name = "oscar/dashboard/shipping/weight_band_delete.html"
    context_object_name = "band"

    def dispatch(self, request, *args, **kwargs):
        self.method = shortcuts.get_object_or_404(
            WeightBased, pk=kwargs['method_pk'])
        return super().dispatch(
            request, *args, **kwargs)

    def get_queryset(self):
        return self.method.bands.all()

    def get_success_url(self):
        msg = render_to_string(
            'oscar/dashboard/shipping/messages/band_deleted.html',
            {'band': self.object})
        messages.success(self.request, msg, extra_tags='safe noicon')
        return reverse('dashboard:shipping-method-detail',
                       kwargs={'pk': self.method.pk})


class WeightBasedDeleteView(generic.DeleteView):
    model = WeightBased
    template_name = "oscar/dashboard/shipping/weight_based_delete.html"
    context_object_name = "method"

    def get_success_url(self):
        msg = render_to_string(
            'oscar/dashboard/shipping/messages/method_deleted.html',
            {'method': self.object})
        messages.success(self.request, msg, extra_tags='safe noicon')
        return reverse('dashboard:shipping-method-list')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.partners.forms:0
==oscar.apps.dashboard.partners.forms:0
==oscar.apps.dashboard.partners.forms:0
from django import forms
from django.contrib.auth.models import Permission
from django.contrib.auth.password_validation import validate_password
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.core.compat import existing_user_fields, get_user_model
from oscar.core.loading import get_class, get_model

User = get_user_model()
Partner = get_model('partner', 'Partner')
PartnerAddress = get_model('partner', 'PartnerAddress')
EmailUserCreationForm = get_class('customer.forms', 'EmailUserCreationForm')


class PartnerSearchForm(forms.Form):
    name = forms.CharField(
        required=False, label=pgettext_lazy("Partner's name", "Name"))


class PartnerCreateForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Partner.name is optional and that is okay. But if creating through
        # the dashboard, it seems sensible to enforce as it's the only field
        # in the form.
        self.fields['name'].required = True

    class Meta:
        model = Partner
        fields = ('name',)


ROLE_CHOICES = (
    ('staff', _('Full dashboard access')),
    ('limited', _('Limited dashboard access')),
)


class NewUserForm(EmailUserCreationForm):
    role = forms.ChoiceField(choices=ROLE_CHOICES, widget=forms.RadioSelect,
                             label=_('User role'), initial='limited')

    def __init__(self, partner, *args, **kwargs):
        self.partner = partner
        super().__init__(host=None, *args, **kwargs)

    def save(self):
        role = self.cleaned_data.get('role', 'limited')
        user = super().save(commit=False)
        user.is_staff = role == 'staff'
        user.save()
        self.partner.users.add(user)
        if role == 'limited':
            dashboard_access_perm = Permission.objects.get(
                codename='dashboard_access', content_type__app_label='partner')
            user.user_permissions.add(dashboard_access_perm)
        return user

    class Meta:
        model = User
        fields = existing_user_fields(
            ['first_name', 'last_name', 'email']) + ['password1', 'password2']


class ExistingUserForm(forms.ModelForm):
    """
    Slightly different form that makes
    * makes saving password optional
    * doesn't regenerate username
    * doesn't allow changing email till #668 is resolved
    """
    role = forms.ChoiceField(choices=ROLE_CHOICES, widget=forms.RadioSelect,
                             label=_('User role'))
    password1 = forms.CharField(
        label=_('Password'),
        widget=forms.PasswordInput,
        required=False)
    password2 = forms.CharField(
        required=False,
        label=_('Confirm Password'),
        widget=forms.PasswordInput)

    def clean_password2(self):
        password1 = self.cleaned_data.get('password1', '')
        password2 = self.cleaned_data.get('password2', '')

        if password1 != password2:
            raise forms.ValidationError(
                _("The two password fields didn't match."))
        validate_password(password2, self.instance)
        return password2

    def __init__(self, *args, **kwargs):
        user = kwargs['instance']
        role = 'staff' if user.is_staff else 'limited'
        kwargs.get('initial', {}).setdefault('role', role)
        super().__init__(*args, **kwargs)

    def save(self):
        role = self.cleaned_data.get('role', 'none')
        user = super().save(commit=False)
        user.is_staff = role == 'staff'
        if self.cleaned_data['password1']:
            user.set_password(self.cleaned_data['password1'])
        user.save()

        dashboard_perm = Permission.objects.get(
            codename='dashboard_access', content_type__app_label='partner')
        user_has_perm = user.user_permissions.filter(
            pk=dashboard_perm.pk).exists()
        if role == 'limited' and not user_has_perm:
            user.user_permissions.add(dashboard_perm)
        elif role == 'staff' and user_has_perm:
            user.user_permissions.remove(dashboard_perm)
        return user

    class Meta:
        model = User
        fields = existing_user_fields(
            ['first_name', 'last_name']) + ['password1', 'password2']


class UserEmailForm(forms.Form):
    # We use a CharField so that a partial email address can be entered
    email = forms.CharField(
        label=_("Email address"), max_length=100)


class PartnerAddressForm(forms.ModelForm):
    name = forms.CharField(
        required=False, max_length=128,
        label=pgettext_lazy("Partner's name", "Name"))

    class Meta:
        fields = ('name', 'line1', 'line2', 'line3', 'line4',
                  'state', 'postcode', 'country')
        model = PartnerAddress
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.wishlists.abstract_models:0
==oscar.apps.wishlists.abstract_models:0
from django.db import models
from django.urls import reverse
from django.utils.crypto import get_random_string
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.core.compat import AUTH_USER_MODEL


class AbstractWishList(models.Model):
    """
    Represents a user's wish lists of products.

    A user can have multiple wish lists, move products between them, etc.
    """

    # Only authenticated users can have wishlists
    owner = models.ForeignKey(
        AUTH_USER_MODEL,
        related_name='wishlists',
        on_delete=models.CASCADE,
        verbose_name=_('Owner'))
    name = models.CharField(verbose_name=_('Name'), default=_('Default'),
                            max_length=255)

    #: This key acts as primary key and is used instead of an int to make it
    #: harder to guess
    key = models.CharField(_('Key'), max_length=6, db_index=True, unique=True,
                           editable=False)

    # Oscar core does not support public or shared wishlists at the moment, but
    # all the right hooks should be there
    PUBLIC, PRIVATE, SHARED = ('Public', 'Private', 'Shared')
    VISIBILITY_CHOICES = (
        (PRIVATE, _('Private - Only the owner can see the wish list')),
        (SHARED, _('Shared - Only the owner and people with access to the'
                   ' obfuscated link can see the wish list')),
        (PUBLIC, _('Public - Everybody can see the wish list')),
    )
    visibility = models.CharField(_('Visibility'), max_length=20,
                                  default=PRIVATE, choices=VISIBILITY_CHOICES)

    # Convention: A user can have multiple wish lists. The last created wish
    # list for a user shall be their "default" wish list.
    # If an UI element only allows adding to wish list without
    # specifying which one , one shall use the default one.
    # That is a rare enough case to handle it by convention instead of a
    # BooleanField.
    date_created = models.DateTimeField(
        _('Date created'), auto_now_add=True, editable=False, db_index=True)

    def __str__(self):
        return "%s's Wish List '%s'" % (self.owner, self.name)

    def save(self, *args, **kwargs):
        if not self.pk or kwargs.get('force_insert', False):
            self.key = self.__class__.random_key()
        super().save(*args, **kwargs)

    @classmethod
    def random_key(cls, length=6):
        """
        Get a unique random generated key
        """
        while True:
            key = get_random_string(length=length,
                                    allowed_chars='abcdefghijklmnopqrstuvwxyz0123456789')
            if not cls._default_manager.filter(key=key).exists():
                return key

    def is_allowed_to_see(self, user):
        if self.visibility in (self.PUBLIC, self.SHARED):
            return True
        else:
            return user == self.owner

    def is_allowed_to_edit(self, user):
        # currently only the owner can edit their wish list
        return user == self.owner

    class Meta:
        abstract = True
        app_label = 'wishlists'
        ordering = ('owner', 'date_created', )
        verbose_name = _('Wish List')

    def get_absolute_url(self):
        return reverse('customer:wishlists-detail', kwargs={
            'key': self.key})

    def add(self, product):
        """
        Add a product to this wishlist
        """
        lines = self.lines.filter(product=product)
        if len(lines) == 0:
            self.lines.create(
                product=product, title=product.get_title())
        else:
            line = lines[0]
            line.quantity += 1
            line.save()


class AbstractLine(models.Model):
    """
    One entry in a wish list. Similar to order lines or basket lines.
    """
    wishlist = models.ForeignKey(
        'wishlists.WishList',
        on_delete=models.CASCADE,
        related_name='lines',
        verbose_name=_('Wish List'))
    product = models.ForeignKey(
        'catalogue.Product', verbose_name=_('Product'),
        related_name='wishlists_lines', on_delete=models.SET_NULL,
        blank=True, null=True)
    quantity = models.PositiveIntegerField(_('Quantity'), default=1)
    #: Store the title in case product gets deleted
    title = models.CharField(
        pgettext_lazy("Product title", "Title"), max_length=255)

    def __str__(self):
        return '%sx %s on %s' % (self.quantity, self.title, self.wishlist.name)

    def get_title(self):
        if self.product:
            return self.product.get_title()
        else:
            return self.title

    class Meta:
        abstract = True
        app_label = 'wishlists'
        # Enforce sorting by order of creation.
        ordering = ['pk']
        unique_together = (('wishlist', 'product'), )
        verbose_name = _('Wish list line')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.pages.views:0
==oscar.apps.dashboard.pages.views:0
==oscar.apps.dashboard.pages.views:0
from django.conf import settings
from django.contrib import messages
from django.core.exceptions import ValidationError
from django.http import HttpResponseRedirect
from django.template.loader import render_to_string
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.views import generic
from django.views.generic import ListView

from oscar.core.loading import get_classes, get_model
from oscar.core.utils import slugify
from oscar.core.validators import URLDoesNotExistValidator

FlatPage = get_model('flatpages', 'FlatPage')
Site = get_model('sites', 'Site')
PageSearchForm, PageUpdateForm = get_classes('dashboard.pages.forms', ('PageSearchForm', 'PageUpdateForm'))


class PageListView(ListView):
    """
    View for listing all existing flatpages.
    """
    template_name = 'oscar/dashboard/pages/index.html'
    model = FlatPage
    form_class = PageSearchForm
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE
    desc_template = '%(main_filter)s %(title_filter)s'

    def get_queryset(self):
        """
        Get queryset of all flatpages to be displayed. If a
        search term is specified in the search form, it will be used
        to filter the queryset.
        """
        self.desc_ctx = {
            'main_filter': _('All pages'),
            'title_filter': '',
        }
        queryset = self.model.objects.all().order_by('title')

        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return queryset

        data = self.form.cleaned_data

        if data['title']:
            queryset = queryset.filter(title__icontains=data['title'])
            self.desc_ctx['title_filter'] \
                = _(" with title containing '%s'") % data['title']

        return queryset

    def get_context_data(self, **kwargs):
        """
        Get context data with *form* and *queryset_description* data
        added to it.
        """
        context = super().get_context_data(**kwargs)
        context['form'] = self.form
        context['queryset_description'] = self.desc_template % self.desc_ctx
        return context


class PageCreateUpdateMixin(object):

    template_name = 'oscar/dashboard/pages/update.html'
    model = FlatPage
    form_class = PageUpdateForm
    context_object_name = 'page'

    def get_success_url(self):
        msg = render_to_string('oscar/dashboard/pages/messages/saved.html',
                               {'page': self.object})
        messages.success(self.request, msg, extra_tags='safe noicon')
        return reverse('dashboard:page-list')

    def form_valid(self, form):
        # Ensure saved page is added to the current site
        page = form.save()
        if not page.sites.exists():
            page.sites.add(Site.objects.get_current())
        self.object = page
        return HttpResponseRedirect(self.get_success_url())


class PageCreateView(PageCreateUpdateMixin, generic.CreateView):

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = _('Create New Page')
        return ctx

    def form_valid(self, form):
        """
        Store new flatpage from form data.
        Additionally, if URL is left blank, a slugified
        version of the title will be used as URL after checking
        if it is valid.
        """
        # if no URL is specified, generate from title
        page = form.save(commit=False)

        if not page.url:
            page.url = '/%s/' % slugify(page.title)

        try:
            URLDoesNotExistValidator()(page.url)
        except ValidationError:
            pass
        else:
            return super().form_valid(form)

        ctx = self.get_context_data()
        ctx['form'] = form
        return self.render_to_response(ctx)


class PageUpdateView(PageCreateUpdateMixin, generic.UpdateView):
    """
    View for updating flatpages from the dashboard.
    """
    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['title'] = self.object.title
        return ctx


class PageDeleteView(generic.DeleteView):
    template_name = 'oscar/dashboard/pages/delete.html'
    model = FlatPage

    def get_success_url(self):
        messages.success(
            self.request, _("Deleted page '%s'") % self.object.title)
        return reverse('dashboard:page-list')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.vouchers.forms:0
==oscar.apps.dashboard.vouchers.forms:0
==oscar.apps.dashboard.vouchers.forms:0
from django import forms
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_model
from oscar.forms import widgets

Voucher = get_model('voucher', 'Voucher')
VoucherSet = get_model('voucher', 'VoucherSet')
Benefit = get_model('offer', 'Benefit')
Range = get_model('offer', 'Range')


class VoucherForm(forms.Form):
    """
    A specialised form for creating a voucher and offer
    model.
    """
    name = forms.CharField(label=_("Name"))
    code = forms.CharField(label=_("Code"))

    start_datetime = forms.DateTimeField(
        widget=widgets.DateTimePickerInput(),
        label=_("Start datetime"))
    end_datetime = forms.DateTimeField(
        widget=widgets.DateTimePickerInput(),
        label=_("End datetime"))

    usage = forms.ChoiceField(choices=Voucher.USAGE_CHOICES, label=_("Usage"))

    benefit_range = forms.ModelChoiceField(
        label=_('Which products get a discount?'),
        queryset=Range.objects.all(),
    )
    benefit_type = forms.ChoiceField(
        choices=Benefit.TYPE_CHOICES,
        label=_('Discount type'),
    )
    benefit_value = forms.DecimalField(
        label=_('Discount value'))

    exclusive = forms.BooleanField(
        required=False,
        label=_("Exclusive offers cannot be combined on the same items"))

    def __init__(self, voucher=None, *args, **kwargs):
        self.voucher = voucher
        super().__init__(*args, **kwargs)

    def clean_name(self):
        name = self.cleaned_data['name']
        try:
            voucher = Voucher.objects.get(name=name)
        except Voucher.DoesNotExist:
            pass
        else:
            if (not self.voucher) or (voucher.id != self.voucher.id):
                raise forms.ValidationError(_("The name '%s' is already in"
                                              " use") % name)
        return name

    def clean_code(self):
        code = self.cleaned_data['code'].strip().upper()
        if not code:
            raise forms.ValidationError(_("Please enter a voucher code"))
        try:
            voucher = Voucher.objects.get(code=code)
        except Voucher.DoesNotExist:
            pass
        else:
            if (not self.voucher) or (voucher.id != self.voucher.id):
                raise forms.ValidationError(_("The code '%s' is already in"
                                              " use") % code)
        return code

    def clean(self):
        cleaned_data = super().clean()
        start_datetime = cleaned_data.get('start_datetime')
        end_datetime = cleaned_data.get('end_datetime')
        if start_datetime and end_datetime and end_datetime < start_datetime:
            raise forms.ValidationError(_("The start date must be before the"
                                          " end date"))
        return cleaned_data


class VoucherSearchForm(forms.Form):
    name = forms.CharField(required=False, label=_("Name"))
    code = forms.CharField(required=False, label=_("Code"))
    is_active = forms.BooleanField(required=False, label=_("Is Active?"))
    in_set = forms.BooleanField(
        required=False, label=_("In Voucherset?"))

    def clean_code(self):
        return self.cleaned_data['code'].upper()


class VoucherSetForm(forms.ModelForm):
    class Meta:
        model = VoucherSet
        fields = [
            'name',
            'code_length',
            'description',
            'start_datetime',
            'end_datetime',
            'count',
        ]
        widgets = {
            'start_datetime': widgets.DateTimePickerInput(),
            'end_datetime': widgets.DateTimePickerInput(),
        }

    benefit_range = forms.ModelChoiceField(
        label=_('Which products get a discount?'),
        queryset=Range.objects.all(),
    )
    benefit_type = forms.ChoiceField(
        choices=Benefit.TYPE_CHOICES,
        label=_('Discount type'),
    )
    benefit_value = forms.DecimalField(
        label=_('Discount value'))

    def save(self, commit=True):
        instance = super().save(commit)
        if commit:
            instance.generate_vouchers()
        return instance


class VoucherSetSearchForm(forms.Form):
    code = forms.CharField(required=False, label=_("Code"))
    is_active = forms.BooleanField(required=False, label=_("Is Active?"))

    def clean_code(self):
        return self.cleaned_data['code'].upper()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.alerts.utils:0
==oscar.apps.customer.alerts.utils:0
import logging

from django.contrib.sites.models import Site
from django.core import mail
from django.db.models import Max
from django.template import loader

from oscar.apps.customer.notifications import services
from oscar.core.loading import get_class, get_model

CommunicationEventType = get_model('customer', 'CommunicationEventType')
ProductAlert = get_model('customer', 'ProductAlert')
Product = get_model('catalogue', 'Product')
Dispatcher = get_class('customer.utils', 'Dispatcher')
Selector = get_class('partner.strategy', 'Selector')

logger = logging.getLogger('oscar.alerts')


def send_alerts():
    """
    Send out product alerts
    """
    products = Product.objects.filter(
        productalert__status=ProductAlert.ACTIVE
    ).distinct()
    logger.info("Found %d products with active alerts", products.count())
    for product in products:
        send_product_alerts(product)


def send_alert_confirmation(alert):
    """
    Send an alert confirmation email.
    """
    ctx = {
        'alert': alert,
        'site': Site.objects.get_current(),
    }

    code = 'PRODUCT_ALERT_CONFIRMATION'
    messages = CommunicationEventType.objects.get_and_render(code, ctx)

    if messages and messages['body']:
        Dispatcher().dispatch_direct_messages(alert.email, messages)


def send_product_alerts(product):   # noqa C901 too complex
    """
    Check for notifications for this product and send email to users
    if the product is back in stock. Add a little 'hurry' note if the
    amount of in-stock items is less then the number of notifications.
    """
    stockrecords = product.stockrecords.all()
    num_stockrecords = len(stockrecords)
    if not num_stockrecords:
        return

    logger.info("Sending alerts for '%s'", product)
    alerts = ProductAlert.objects.filter(
        product_id__in=(product.id, product.parent_id),
        status=ProductAlert.ACTIVE,
    )

    # Determine 'hurry mode'
    if num_stockrecords == 1:
        num_in_stock = stockrecords[0].num_in_stock
    else:
        result = stockrecords.aggregate(max_in_stock=Max('num_in_stock'))
        num_in_stock = result['max_in_stock']

    # hurry_mode is false if num_in_stock is None
    hurry_mode = num_in_stock is not None and alerts.count() > num_in_stock

    code = 'PRODUCT_ALERT'
    try:
        event_type = CommunicationEventType.objects.get(code=code)
    except CommunicationEventType.DoesNotExist:
        event_type = CommunicationEventType.objects.model(code=code)

    messages_to_send = []
    user_messages_to_send = []
    num_notifications = 0
    selector = Selector()
    for alert in alerts:
        # Check if the product is available to this user
        strategy = selector.strategy(user=alert.user)
        data = strategy.fetch_for_product(product)
        if not data.availability.is_available_to_buy:
            continue

        ctx = {
            'alert': alert,
            'site': Site.objects.get_current(),
            'hurry': hurry_mode,
        }
        if alert.user:
            # Send a site notification
            num_notifications += 1
            subj_tpl = loader.get_template('oscar/customer/alerts/message_subject.html')
            message_tpl = loader.get_template('oscar/customer/alerts/message.html')
            services.notify_user(
                alert.user,
                subj_tpl.render(ctx).strip(),
                body=message_tpl.render(ctx).strip()
            )

        # Build message and add to list
        messages = event_type.get_messages(ctx)

        if messages and messages['body']:
            if alert.user:
                user_messages_to_send.append(
                    (alert.user, messages)
                )
            else:
                messages_to_send.append(
                    (alert.get_email_address(), messages)
                )
        alert.close()

    # Send all messages using one SMTP connection to avoid opening lots of them
    if messages_to_send or user_messages_to_send:
        connection = mail.get_connection()
        connection.open()
        disp = Dispatcher(mail_connection=connection)
        for message in messages_to_send:
            disp.dispatch_direct_messages(*message)
        for message in user_messages_to_send:
            disp.dispatch_user_messages(*message)
        connection.close()

    logger.info("Sent %d notifications and %d messages", num_notifications,
                len(messages_to_send) + len(user_messages_to_send))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.dashboard.nav:0
==oscar.apps.dashboard.nav:0
import logging
import warnings
from functools import lru_cache

from django.apps import apps
from django.core.exceptions import ImproperlyConfigured
from django.urls import NoReverseMatch, resolve, reverse

from oscar.core.application import OscarDashboardConfig
from oscar.utils.deprecation import RemovedInOscar21Warning
from oscar.views.decorators import check_permissions

logger = logging.getLogger('oscar.dashboard')


class Node(object):
    """
    A node in the dashboard navigation menu
    """

    def __init__(self, label, url_name=None, url_args=None, url_kwargs=None,
                 access_fn=None, icon=None):
        self.label = label
        self.icon = icon
        self.url_name = url_name
        self.url_args = url_args
        self.url_kwargs = url_kwargs
        self.access_fn = access_fn
        self.children = []

    @property
    def is_heading(self):
        return self.url_name is None

    @property
    def url(self):
        return reverse(self.url_name, args=self.url_args,
                       kwargs=self.url_kwargs)

    def add_child(self, node):
        self.children.append(node)

    def is_visible(self, user):
        return self.access_fn is None or self.access_fn(
            user, self.url_name, self.url_args, self.url_kwargs)

    def filter(self, user):
        if not self.is_visible(user):
            return None
        node = Node(
            label=self.label, url_name=self.url_name, url_args=self.url_args,
            url_kwargs=self.url_kwargs, access_fn=self.access_fn,
            icon=self.icon
        )
        for child in self.children:
            if child.is_visible(user):
                node.add_child(child)
        return node

    def has_children(self):
        return len(self.children) > 0


@lru_cache(maxsize=1)
def _dashboard_url_names_to_config():
    dashboard_configs = (
        config
        for config in apps.get_app_configs()
        if isinstance(config, OscarDashboardConfig)
    )
    urls_to_config = {}
    for config in dashboard_configs:
        for url in config.urls[0]:
            # includes() don't have a name attribute
            # We skipped them because they come from other AppConfigs
            name = getattr(url, 'name', None)
            if not name:
                continue

            if name in urls_to_config:
                if urls_to_config[name] != config:
                    raise ImproperlyConfigured(
                        "'{}' exists in both {} and {}!".format(
                            name, config, urls_to_config[name]
                        )
                    )

            urls_to_config[name] = config
    return urls_to_config


def default_access_fn(user, url_name, url_args=None, url_kwargs=None):
    """
    Given a user and a url_name, this function assesses whether the
    user has the right to access the URL.
    Once the permissions for the view are known, the access logic used
    by the dashboard decorator is evaluated
    """
    if url_name is None:  # it's a heading
        return True

    try:
        url = reverse(url_name, args=url_args, kwargs=url_kwargs)
    except NoReverseMatch:
        logger.exception('Invalid URL name {}'.format(url_name))
        warnings.warn(
            'Invalid URL names supplied to oscar.dashboard.nav.default_access_fn'
            'will throw an exception in Oscar 2.1',
            RemovedInOscar21Warning,
            stacklevel=2
        )
        return False

    url_match = resolve(url)
    url_name = url_match.url_name
    try:
        app_config_instance = _dashboard_url_names_to_config()[url_name]
    except KeyError:
        logger.error(
            "{} is not a valid dashboard URL".format(url_match.view_name)
        )
        warnings.warn(
            'Invalid URL names supplied to oscar.dashboard.nav.default_access_fn'
            'will throw an exception in Oscar 2.1',
            RemovedInOscar21Warning,
            stacklevel=2
        )
        return False

    permissions = app_config_instance.get_permissions(url_name)

    return check_permissions(user, permissions)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.views:0
==oscar.apps.catalogue.reviews.views:0
==oscar.apps.catalogue.reviews.views:0
from django.conf import settings
from django.contrib import messages
from django.shortcuts import get_object_or_404, redirect
from django.utils.translation import gettext_lazy as _
from django.views.generic import CreateView, DetailView, ListView, View

from oscar.apps.catalogue.reviews.signals import review_added
from oscar.core.loading import get_classes, get_model
from oscar.core.utils import redirect_to_referrer

ProductReviewForm, VoteForm, SortReviewsForm = get_classes(
    'catalogue.reviews.forms',
    ['ProductReviewForm', 'VoteForm', 'SortReviewsForm'])

Vote = get_model('reviews', 'vote')
ProductReview = get_model('reviews', 'ProductReview')
Product = get_model('catalogue', 'product')


class CreateProductReview(CreateView):
    template_name = "oscar/catalogue/reviews/review_form.html"
    model = ProductReview
    product_model = Product
    form_class = ProductReviewForm
    view_signal = review_added

    def dispatch(self, request, *args, **kwargs):
        self.product = get_object_or_404(
            self.product_model, pk=kwargs['product_pk'])
        # check permission to leave review
        if not self.product.is_review_permitted(request.user):
            if self.product.has_review_by(request.user):
                message = _("You have already reviewed this product!")
            else:
                message = _("You can't leave a review for this product.")
            messages.warning(self.request, message)
            return redirect(self.product.get_absolute_url())

        return super().dispatch(
            request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['product'] = self.product
        return context

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['product'] = self.product
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        response = super().form_valid(form)
        self.send_signal(self.request, response, self.object)
        return response

    def get_success_url(self):
        messages.success(
            self.request, _("Thank you for reviewing this product"))
        return self.product.get_absolute_url()

    def send_signal(self, request, response, review):
        self.view_signal.send(sender=self, review=review, user=request.user,
                              request=request, response=response)


class ProductReviewDetail(DetailView):
    template_name = "oscar/catalogue/reviews/review_detail.html"
    context_object_name = 'review'
    model = ProductReview

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['product'] = get_object_or_404(
            Product, pk=self.kwargs['product_pk'])
        return context


class AddVoteView(View):
    """
    Simple view for voting on a review.

    We use the URL path to determine the product and review and use a 'delta'
    POST variable to indicate it the vote is up or down.
    """

    def post(self, request, *args, **kwargs):
        product = get_object_or_404(Product, pk=self.kwargs['product_pk'])
        review = get_object_or_404(ProductReview, pk=self.kwargs['pk'])

        form = VoteForm(review, request.user, request.POST)
        if form.is_valid():
            if form.is_up_vote:
                review.vote_up(request.user)
            elif form.is_down_vote:
                review.vote_down(request.user)
            messages.success(request, _("Thanks for voting!"))
        else:
            for error_list in form.errors.values():
                for msg in error_list:
                    messages.error(request, msg)
        return redirect_to_referrer(request, product.get_absolute_url())


class ProductReviewList(ListView):
    """
    Browse reviews for a product
    """
    template_name = 'oscar/catalogue/reviews/review_list.html'
    context_object_name = "reviews"
    model = ProductReview
    product_model = Product
    paginate_by = settings.OSCAR_REVIEWS_PER_PAGE

    def get_queryset(self):
        qs = self.model.objects.approved().filter(product=self.kwargs['product_pk'])
        self.form = SortReviewsForm(self.request.GET)
        if self.request.GET and self.form.is_valid():
            sort_by = self.form.cleaned_data['sort_by']
            if sort_by == SortReviewsForm.SORT_BY_RECENCY:
                return qs.order_by('-date_created')
        return qs.order_by('-score')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['product'] = get_object_or_404(
            self.product_model, pk=self.kwargs['product_pk'])
        context['form'] = self.form
        return context
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.alerts.views:0
==oscar.apps.customer.alerts.views:0
from django import http
from django.contrib import messages
from django.http import Http404
from django.shortcuts import get_object_or_404
from django.utils.translation import gettext_lazy as _
from django.views import generic

from oscar.apps.customer.alerts import utils
from oscar.core.loading import get_class, get_model

Product = get_model('catalogue', 'Product')
ProductAlert = get_model('customer', 'ProductAlert')
PageTitleMixin = get_class('customer.mixins', 'PageTitleMixin')
ProductAlertForm = get_class('customer.forms', 'ProductAlertForm')


class ProductAlertListView(PageTitleMixin, generic.ListView):
    model = ProductAlert
    template_name = 'oscar/customer/alerts/alert_list.html'
    context_object_name = 'alerts'
    page_title = _('Product Alerts')
    active_tab = 'alerts'

    def get_queryset(self):
        return ProductAlert.objects.select_related().filter(
            user=self.request.user,
            date_closed=None,
        )


class ProductAlertCreateView(generic.CreateView):
    """
    View to create a new product alert based on a registered user
    or an email address provided by an anonymous user.
    """
    model = ProductAlert
    form_class = ProductAlertForm
    template_name = 'oscar/customer/alerts/form.html'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['product'] = self.product
        ctx['alert_form'] = ctx.pop('form')
        return ctx

    def get(self, request, *args, **kwargs):
        product = get_object_or_404(Product, pk=self.kwargs['pk'])
        return http.HttpResponseRedirect(product.get_absolute_url())

    def post(self, request, *args, **kwargs):
        self.product = get_object_or_404(Product, pk=self.kwargs['pk'])
        return super().post(request, *args, **kwargs)

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        kwargs['product'] = self.product
        return kwargs

    def form_valid(self, form):
        response = super().form_valid(form)
        if self.object.is_anonymous:
            utils.send_alert_confirmation(self.object)
        return response

    def get_success_url(self):
        if self.object.user:
            msg = _("An alert has been created")
        else:
            msg = _("A confirmation email has been sent to %s") \
                % self.object.email
        messages.success(self.request, msg)
        return self.object.product.get_absolute_url()


class ProductAlertConfirmView(generic.RedirectView):
    permanent = False

    def get(self, request, *args, **kwargs):
        self.alert = get_object_or_404(ProductAlert, key=kwargs['key'])
        self.update_alert()
        return super().get(request, *args, **kwargs)

    def update_alert(self):
        if self.alert.can_be_confirmed:
            self.alert.confirm()
            messages.success(self.request, _("Your stock alert is now active"))
        else:
            messages.error(self.request, _("Your stock alert cannot be"
                                           " confirmed"))

    def get_redirect_url(self, **kwargs):
        return self.alert.product.get_absolute_url()


class ProductAlertCancelView(generic.RedirectView):
    """
    This function allows canceling alerts by supplying the key (used for
    anonymously created alerts) or the pk (used for alerts created by a
    authenticated user).

    Specifying the redirect url is possible by supplying a 'next' GET
    parameter.  It defaults to showing the associated product page.
    """
    permanent = False

    def get(self, request, *args, **kwargs):
        if 'key' in kwargs:
            self.alert = get_object_or_404(ProductAlert, key=kwargs['key'])
        elif 'pk' in kwargs and request.user.is_authenticated:
            self.alert = get_object_or_404(ProductAlert,
                                           user=self.request.user,
                                           pk=kwargs['pk'])
        else:
            raise Http404
        self.update_alert()
        return super().get(request, *args, **kwargs)

    def update_alert(self):
        if self.alert.can_be_cancelled:
            self.alert.cancel()
            messages.success(self.request, _("Your stock alert has been"
                                             " cancelled"))
        else:
            messages.error(self.request, _("Your stock alert cannot be"
                                           " cancelled"))

    def get_redirect_url(self, **kwargs):
        return self.request.GET.get('next',
                                    self.alert.product.get_absolute_url())
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.reports:0
==oscar.apps.basket.reports:0
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model


ReportGenerator = get_class('dashboard.reports.reports', 'ReportGenerator')
ReportCSVFormatter = get_class('dashboard.reports.reports',
                               'ReportCSVFormatter')
ReportHTMLFormatter = get_class('dashboard.reports.reports',
                                'ReportHTMLFormatter')
Basket = get_model('basket', 'Basket')


class OpenBasketReportCSVFormatter(ReportCSVFormatter):
    filename_template = 'open-baskets-%s-%s.csv'

    def generate_csv(self, response, baskets):
        writer = self.get_csv_writer(response)
        header_row = [_('User ID'),
                      _('Name'),
                      _('Email'),
                      _('Basket status'),
                      _('Num lines'),
                      _('Num items'),
                      _('Date of creation'),
                      _('Time since creation'),
                      ]
        writer.writerow(header_row)

        for basket in baskets:
            if basket.owner:
                row = [basket.owner_id, basket.owner.get_full_name(),
                       basket.owner.email,
                       basket.status, basket.num_lines,
                       self.format_datetime(basket.date_created),
                       basket.time_since_creation]
            else:
                row = [basket.owner_id, None, None, basket.status,
                       basket.num_lines, basket.num_items,
                       self.format_datetime(basket.date_created),
                       self.format_timedelta(basket.time_since_creation)]
            writer.writerow(row)

    def filename(self, **kwargs):
        return self.filename_template % (kwargs['start_date'],
                                         kwargs['end_date'])


class OpenBasketReportHTMLFormatter(ReportHTMLFormatter):
    filename_template = 'oscar/dashboard/reports/partials/open_basket_report.html'


class OpenBasketReportGenerator(ReportGenerator):
    """
    Report of baskets which haven't been submitted yet
    """
    code = 'open_baskets'
    description = _('Open baskets')
    date_range_field_name = 'date_created'

    formatters = {
        'CSV_formatter': OpenBasketReportCSVFormatter,
        'HTML_formatter': OpenBasketReportHTMLFormatter}

    def generate(self):
        additional_data = {
            'start_date': self.start_date,
            'end_date': self.end_date}
        baskets = Basket._default_manager.filter(status=Basket.OPEN)
        return self.formatter.generate_response(baskets, **additional_data)


class SubmittedBasketReportCSVFormatter(ReportCSVFormatter):
    filename_template = 'submitted_baskets-%s-%s.csv'

    def generate_csv(self, response, baskets):
        writer = self.get_csv_writer(response)
        header_row = [_('User ID'),
                      _('User'),
                      _('Basket status'),
                      _('Num lines'),
                      _('Num items'),
                      _('Date created'),
                      _('Time between creation and submission'),
                      ]
        writer.writerow(header_row)

        for basket in baskets:
            row = [basket.owner_id,
                   basket.owner,
                   basket.status,
                   basket.num_lines,
                   basket.num_items,
                   self.format_datetime(basket.date_created),
                   basket.time_before_submit]
            writer.writerow(row)

    def filename(self, **kwargs):
        return self.filename_template % (kwargs['start_date'],
                                         kwargs['end_date'])


class SubmittedBasketReportHTMLFormatter(ReportHTMLFormatter):
    filename_template = 'oscar/dashboard/reports/partials/submitted_basket_report.html'


class SubmittedBasketReportGenerator(ReportGenerator):
    """
    Report of baskets that have been submitted
    """
    code = 'submitted_baskets'
    description = _('Submitted baskets')
    date_range_field_name = 'date_submitted'

    formatters = {
        'CSV_formatter': SubmittedBasketReportCSVFormatter,
        'HTML_formatter': SubmittedBasketReportHTMLFormatter}

    def generate(self):
        additional_data = {
            'start_date': self.start_date,
            'end_date': self.end_date}
        baskets = Basket._default_manager.filter(status=Basket.SUBMITTED)
        return self.formatter.generate_response(baskets, **additional_data)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.search.facets:0
==oscar.apps.search.facets:0
from collections import OrderedDict

from django.conf import settings
from haystack.query import SearchQuerySet
from purl import URL


def base_sqs():
    """
    Return the base SearchQuerySet for Haystack searches.
    """
    sqs = SearchQuerySet()
    for facet in settings.OSCAR_SEARCH_FACETS['fields'].values():
        options = facet.get('options', {})
        sqs = sqs.facet(facet['field'], **options)
    for facet in settings.OSCAR_SEARCH_FACETS['queries'].values():
        for query in facet['queries']:
            sqs = sqs.query_facet(facet['field'], query[1])
    return sqs


class FacetMunger(object):

    def __init__(self, path, selected_multi_facets, facet_counts):
        self.base_url = URL(path)
        self.selected_facets = selected_multi_facets
        self.facet_counts = facet_counts

    def facet_data(self):
        facet_data = OrderedDict()
        # Haystack can return an empty dict for facet_counts when e.g. Solr
        # isn't running. Skip facet munging in that case.
        if self.facet_counts:
            self.munge_field_facets(facet_data)
            self.munge_query_facets(facet_data)
        return facet_data

    def munge_field_facets(self, clean_data):
        for key, facet in settings.OSCAR_SEARCH_FACETS['fields'].items():
            self.munge_field_facet(key, facet, clean_data)

    def munge_field_facet(self, key, facet, clean_data):
        clean_data[key] = {
            'name': facet['name'],
            'results': []}
        for field_value, count in self.facet_counts['fields'][key]:
            field_name = '%s_exact' % facet['field']
            is_faceted_already = field_name in self.selected_facets
            datum = {
                'name': field_value,
                'count': count,
                # We don't show facet counts if a this field is already being
                # faceted (as we don't know them)
                'show_count': not is_faceted_already,
                'disabled': count == 0 and not is_faceted_already,
                'selected': False
            }
            if field_value in self.selected_facets.get(field_name, []):
                # This filter is selected - build the 'deselect' URL
                datum['selected'] = True
                url = self.base_url.remove_query_param(
                    'selected_facets', '%s:%s' % (
                        field_name, field_value))
                datum['deselect_url'] = self.strip_pagination(url)
            else:
                # This filter is not selected - built the 'select' URL
                url = self.base_url.append_query_param(
                    'selected_facets', '%s:%s' % (
                        field_name, field_value))
                datum['select_url'] = self.strip_pagination(url)

            clean_data[key]['results'].append(datum)

    def munge_query_facets(self, clean_data):
        for key, facet in settings.OSCAR_SEARCH_FACETS['queries'].items():
            self.munge_query_facet(key, facet, clean_data)

    def munge_query_facet(self, key, facet, clean_data):
        clean_data[key] = {
            'name': facet['name'],
            'results': []}
        # Loop over the queries in OSCAR_SEARCH_FACETS rather than the returned
        # facet information from the search backend.
        for field_value, query in facet['queries']:
            field_name = '%s_exact' % facet['field']
            is_faceted_already = field_name in self.selected_facets

            match = '%s:%s' % (field_name, query)
            if match not in self.facet_counts['queries']:
                # This query was not returned
                datum = {
                    'name': field_value,
                    'count': 0,
                    'show_count': True,
                    'disabled': True,
                }
            else:
                count = self.facet_counts['queries'][match]
                datum = {
                    'name': field_value,
                    'count': count,
                    'show_count': not is_faceted_already,
                    'disabled': count == 0 and not is_faceted_already,
                    'selected': False,
                }
                if query in self.selected_facets.get(field_name, []):
                    # Selected
                    datum['selected'] = True
                    datum['show_count'] = True
                    url = self.base_url.remove_query_param(
                        'selected_facets', match)
                    datum['deselect_url'] = self.strip_pagination(url)
                else:
                    url = self.base_url.append_query_param(
                        'selected_facets', match)
                    datum['select_url'] = self.strip_pagination(url)
            clean_data[key]['results'].append(datum)

    def strip_pagination(self, url):
        if url.has_query_param('page'):
            url = url.remove_query_param('page')
        return url.as_string()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.reports.reports:0
==oscar.apps.dashboard.reports.reports:0
==oscar.apps.dashboard.reports.reports:0
from datetime import datetime, time

from django.utils import timezone
from django.http import HttpResponse
from django.template.defaultfilters import date
from django.utils.translation import gettext_lazy as _

from oscar.core import utils
from oscar.core.compat import UnicodeCSVWriter


class ReportGenerator(object):
    """
    Top-level class that needs to be subclassed to provide a
    report generator.
    """
    filename_template = 'report-%s-to-%s.csv'
    content_type = 'text/csv'
    code = ''
    description = '<insert report description>'
    date_range_field_name = None

    def __init__(self, **kwargs):
        self.start_date = kwargs.get('start_date')
        self.end_date = kwargs.get('end_date')

        formatter_name = '%s_formatter' % kwargs['formatter']
        self.formatter = self.formatters[formatter_name]()

    def report_description(self):
        return _('%(report_filter)s between %(start_date)s and %(end_date)s') \
            % {'report_filter': self.description,
               'start_date': date(self.start_date, 'DATE_FORMAT'),
               'end_date': date(self.end_date, 'DATE_FORMAT')
               }

    def generate(self):
        pass

    def filename(self):
        """
        Returns the filename for this report
        """
        return self.formatter.filename()

    def is_available_to(self, user):
        """
        Checks whether this report is available to this user
        """
        return user.is_staff

    def filter_with_date_range(self, queryset):
        """
        Filter results based that are within a (possibly open ended) daterange
        """
        # Nothing to do if we don't have a date field
        if not self.date_range_field_name:
            return queryset

        # After the start date
        if self.start_date:
            start_datetime = timezone.make_aware(
                datetime.combine(self.start_date, time(0, 0)),
                timezone.get_default_timezone())

            filter_kwargs = {
                "%s__gt" % self.date_range_field_name: start_datetime,
            }
            queryset = queryset.filter(**filter_kwargs)

        # Before the end of the end date
        if self.end_date:
            end_of_end_date = datetime.combine(
                self.end_date,
                time(hour=23, minute=59, second=59)
            )
            end_datetime = timezone.make_aware(end_of_end_date,
                                               timezone.get_default_timezone())
            filter_kwargs = {
                "%s__lt" % self.date_range_field_name: end_datetime,
            }
            queryset = queryset.filter(**filter_kwargs)

        return queryset


class ReportFormatter(object):
    def format_datetime(self, dt):
        if not dt:
            return ''
        return utils.format_datetime(dt, 'DATETIME_FORMAT')

    def format_date(self, d):
        if not d:
            return ''
        return utils.format_datetime(d, 'DATE_FORMAT')

    def format_timedelta(self, td):
        return utils.format_timedelta(td)

    def filename(self):
        return self.filename_template


class ReportCSVFormatter(ReportFormatter):

    def get_csv_writer(self, file_handle, **kwargs):
        return UnicodeCSVWriter(open_file=file_handle, **kwargs)

    def generate_response(self, objects, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename=%s' \
            % self.filename(**kwargs)
        self.generate_csv(response, objects)
        return response


class ReportHTMLFormatter(ReportFormatter):

    def generate_response(self, objects, **kwargs):
        return objects
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.catalogue.tables:0
==oscar.apps.dashboard.catalogue.tables:0
==oscar.apps.dashboard.catalogue.tables:0
from django.conf import settings
from django.utils.safestring import mark_safe
from django.utils.translation import gettext_lazy as _
from django.utils.translation import ungettext_lazy
from django_tables2 import A, Column, LinkColumn, TemplateColumn

from oscar.core.loading import get_class, get_model

DashboardTable = get_class('dashboard.tables', 'DashboardTable')
Product = get_model('catalogue', 'Product')
Category = get_model('catalogue', 'Category')
AttributeOptionGroup = get_model('catalogue', 'AttributeOptionGroup')
Option = get_model('catalogue', 'Option')


class ProductTable(DashboardTable):
    title = TemplateColumn(
        verbose_name=_('Title'),
        template_name='oscar/dashboard/catalogue/product_row_title.html',
        order_by='title', accessor=A('title'))
    image = TemplateColumn(
        verbose_name=_('Image'),
        template_name='oscar/dashboard/catalogue/product_row_image.html',
        orderable=False)
    product_class = Column(
        verbose_name=_('Product type'),
        accessor=A('product_class'),
        order_by='product_class__name')
    variants = TemplateColumn(
        verbose_name=_("Variants"),
        template_name='oscar/dashboard/catalogue/product_row_variants.html',
        orderable=False
    )
    stock_records = TemplateColumn(
        verbose_name=_('Stock records'),
        template_name='oscar/dashboard/catalogue/product_row_stockrecords.html',
        orderable=False)
    actions = TemplateColumn(
        verbose_name=_('Actions'),
        template_name='oscar/dashboard/catalogue/product_row_actions.html',
        orderable=False)

    icon = "sitemap"

    class Meta(DashboardTable.Meta):
        model = Product
        fields = ('upc', 'date_updated')
        sequence = ('title', 'upc', 'image', 'product_class', 'variants',
                    'stock_records', '...', 'date_updated', 'actions')
        order_by = '-date_updated'


class CategoryTable(DashboardTable):
    name = LinkColumn('dashboard:catalogue-category-update', args=[A('pk')])
    description = TemplateColumn(
        template_code='{{ record.description|default:""|striptags'
                      '|cut:"&nbsp;"|truncatewords:6 }}')
    # mark_safe is needed because of
    # https://github.com/bradleyayers/django-tables2/issues/187
    num_children = LinkColumn(
        'dashboard:catalogue-category-detail-list', args=[A('pk')],
        verbose_name=mark_safe(_('Number of child categories')),
        accessor='get_num_children',
        orderable=False)
    actions = TemplateColumn(
        template_name='oscar/dashboard/catalogue/category_row_actions.html',
        orderable=False)

    icon = "sitemap"
    caption = ungettext_lazy("%s Category", "%s Categories")

    class Meta(DashboardTable.Meta):
        model = Category
        fields = ('name', 'description')


class AttributeOptionGroupTable(DashboardTable):
    name = TemplateColumn(
        verbose_name=_('Name'),
        template_name='oscar/dashboard/catalogue/attribute_option_group_row_name.html',
        order_by='name')
    option_summary = TemplateColumn(
        verbose_name=_('Option summary'),
        template_name='oscar/dashboard/catalogue/attribute_option_group_row_option_summary.html',
        orderable=False)
    actions = TemplateColumn(
        verbose_name=_('Actions'),
        template_name='oscar/dashboard/catalogue/attribute_option_group_row_actions.html',
        orderable=False)

    icon = "sitemap"
    caption = ungettext_lazy("%s Attribute Option Group", "%s Attribute Option Groups")

    class Meta(DashboardTable.Meta):
        model = AttributeOptionGroup
        fields = ('name',)
        sequence = ('name', 'option_summary', 'actions')
        per_page = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE


class OptionTable(DashboardTable):
    name = TemplateColumn(
        verbose_name=_('Name'),
        template_name='oscar/dashboard/catalogue/option_row_name.html',
        order_by='name')
    actions = TemplateColumn(
        verbose_name=_('Actions'),
        template_name='oscar/dashboard/catalogue/option_row_actions.html',
        orderable=False)

    icon = "reorder"
    caption = ungettext_lazy("%s Option", "%s Options")

    class Meta(DashboardTable.Meta):
        model = Option
        fields = ('name', 'type')
        sequence = ('name', 'type', 'actions')
        per_page = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.availability:0
==oscar.apps.partner.availability:0
from django.utils.translation import gettext_lazy as _


class Base(object):
    """
    Base availability policy.
    """

    #: Availability code.  This is used for HTML classes
    code = ''

    #: A description of the availability of a product.  This is shown on the
    #: product detail page, e.g., "In stock", "Out of stock" etc
    message = ''

    #: When this item should be dispatched
    dispatch_date = None

    @property
    def short_message(self):
        """
        A shorter version of the availability message, suitable for showing on
        browsing pages.
        """
        return self.message

    @property
    def is_available_to_buy(self):
        """
        Test if this product is available to be bought.  This is used for
        validation when a product is added to a user's basket.
        """
        # We test a purchase of a single item
        return self.is_purchase_permitted(1)[0]

    def is_purchase_permitted(self, quantity):
        """
        Test whether a proposed purchase is allowed

        Should return a boolean and a reason
        """
        return False, _("unavailable")


# Common availability policies


class Unavailable(Base):
    """
    Policy for when a product is unavailable
    """
    code = 'unavailable'
    message = _("Unavailable")


class Available(Base):
    """
    For when a product is always available, irrespective of stock level.

    This might be appropriate for digital products where stock doesn't need to
    be tracked and the product is always available to buy.
    """
    code = 'available'
    message = _("Available")

    def is_purchase_permitted(self, quantity):
        return True, ""


class StockRequired(Base):
    """
    Allow a product to be bought while there is stock.  This policy is
    instantiated with a stock number (``num_available``).  It ensures that the
    product is only available to buy while there is stock available.

    This is suitable for physical products where back orders (e.g. allowing
    purchases when there isn't stock available) are not permitted.
    """
    CODE_IN_STOCK = 'instock'
    CODE_OUT_OF_STOCK = 'outofstock'

    def __init__(self, num_available):
        self.num_available = num_available

    def is_purchase_permitted(self, quantity):
        if self.num_available <= 0:
            return False, _("no stock available")
        if quantity > self.num_available:
            msg = _("a maximum of %(max)d can be bought") % {
                'max': self.num_available}
            return False, msg
        return True, ""

    @property
    def code(self):
        """
        Code indicating availability status.
        """
        if self.num_available > 0:
            return self.CODE_IN_STOCK
        return self.CODE_OUT_OF_STOCK

    @property
    def short_message(self):
        if self.num_available > 0:
            return _("In stock")
        return _("Unavailable")

    @property
    def message(self) -> str:
        """
        Full availability text, suitable for detail pages.
        """
        if self.num_available > 0:
            return _("In stock (%d available)") % self.num_available
        return _("Unavailable")
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.abstract_models:0
==oscar.apps.analytics.abstract_models:0
from decimal import Decimal

from django.db import models
from django.utils.translation import gettext_lazy as _

from oscar.core.compat import AUTH_USER_MODEL


class AbstractProductRecord(models.Model):
    """
    A record of a how popular a product is.

    This used be auto-merchandising to display the most popular
    products.
    """

    product = models.OneToOneField(
        'catalogue.Product', verbose_name=_("Product"),
        related_name='stats', on_delete=models.CASCADE)

    # Data used for generating a score
    num_views = models.PositiveIntegerField(_('Views'), default=0)
    num_basket_additions = models.PositiveIntegerField(
        _('Basket Additions'), default=0)
    num_purchases = models.PositiveIntegerField(
        _('Purchases'), default=0, db_index=True)

    # Product score - used within search
    score = models.FloatField(_('Score'), default=0.00)

    class Meta:
        abstract = True
        app_label = 'analytics'
        ordering = ['-num_purchases']
        verbose_name = _('Product record')
        verbose_name_plural = _('Product records')

    def __str__(self):
        return _("Record for '%s'") % self.product


class AbstractUserRecord(models.Model):
    """
    A record of a user's activity.
    """

    user = models.OneToOneField(AUTH_USER_MODEL, verbose_name=_("User"),
                                on_delete=models.CASCADE)

    # Browsing stats
    num_product_views = models.PositiveIntegerField(
        _('Product Views'), default=0)
    num_basket_additions = models.PositiveIntegerField(
        _('Basket Additions'), default=0)

    # Order stats
    num_orders = models.PositiveIntegerField(
        _('Orders'), default=0, db_index=True)
    num_order_lines = models.PositiveIntegerField(
        _('Order Lines'), default=0, db_index=True)
    num_order_items = models.PositiveIntegerField(
        _('Order Items'), default=0, db_index=True)
    total_spent = models.DecimalField(_('Total Spent'), decimal_places=2,
                                      max_digits=12, default=Decimal('0.00'))
    date_last_order = models.DateTimeField(
        _('Last Order Date'), blank=True, null=True)

    class Meta:
        abstract = True
        app_label = 'analytics'
        verbose_name = _('User record')
        verbose_name_plural = _('User records')


class AbstractUserProductView(models.Model):

    user = models.ForeignKey(
        AUTH_USER_MODEL, verbose_name=_("User"),
        on_delete=models.CASCADE)
    product = models.ForeignKey(
        'catalogue.Product',
        on_delete=models.CASCADE,
        verbose_name=_("Product"))
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True)

    class Meta:
        abstract = True
        app_label = 'analytics'
        verbose_name = _('User product view')
        verbose_name_plural = _('User product views')

    def __str__(self):
        return _("%(user)s viewed '%(product)s'") % {
            'user': self.user, 'product': self.product}


class AbstractUserSearch(models.Model):

    user = models.ForeignKey(
        AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name=_("User"))
    query = models.CharField(_("Search term"), max_length=255, db_index=True)
    date_created = models.DateTimeField(_("Date Created"), auto_now_add=True)

    class Meta:
        abstract = True
        app_label = 'analytics'
        verbose_name = _("User search query")
        verbose_name_plural = _("User search queries")

    def __str__(self):
        return _("%(user)s searched for '%(query)s'") % {
            'user': self.user,
            'query': self.query}
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.migrations.0001_initial:1
==oscar.apps.partner.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
import oscar.models.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0001_initial'),
        ('address', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Code', max_length=128, editable=False, blank=True)),
                ('name', models.CharField(max_length=128, verbose_name='Name', blank=True)),
                ('users', models.ManyToManyField(related_name='partners', blank=True, verbose_name='Users', to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'verbose_name_plural': 'Fulfillment partners',
                'verbose_name': 'Fulfillment partner',
                'abstract': False,
                'permissions': (('dashboard_access', 'Can access dashboard'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PartnerAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),
                ('partner', models.ForeignKey(verbose_name='Partner', related_name='addresses', to='partner.Partner', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Partner addresses',
                'verbose_name': 'Partner address',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StockAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threshold', models.PositiveIntegerField(verbose_name='Threshold')),
                ('status', models.CharField(default='Open', max_length=128, verbose_name='Status', choices=[('Open', 'Open'), ('Closed', 'Closed')])),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_closed', models.DateTimeField(blank=True, verbose_name='Date Closed', null=True)),
            ],
            options={
                'ordering': ('-date_created',),
                'verbose_name_plural': 'Stock alerts',
                'verbose_name': 'Stock alert',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StockRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partner_sku', models.CharField(max_length=128, verbose_name='Partner SKU')),
                ('price_currency', models.CharField(default='GBP', max_length=12, verbose_name='Currency')),
                ('price_excl_tax', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Price (excl. tax)', null=True)),
                ('price_retail', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Price (retail)', null=True)),
                ('cost_price', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Cost Price', null=True)),
                ('num_in_stock', models.PositiveIntegerField(blank=True, verbose_name='Number in stock', null=True)),
                ('num_allocated', models.IntegerField(blank=True, verbose_name='Number allocated', null=True)),
                ('low_stock_threshold', models.PositiveIntegerField(blank=True, verbose_name='Low Stock Threshold', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Date updated')),
                ('partner', models.ForeignKey(verbose_name='Partner', related_name='stockrecords', to='partner.Partner', on_delete=models.CASCADE)),
                ('product', models.ForeignKey(verbose_name='Product', related_name='stockrecords', to='catalogue.Product', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Stock records',
                'verbose_name': 'Stock record',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='stockrecord',
            unique_together=set([('partner', 'partner_sku')]),
        ),
        migrations.AddField(
            model_name='stockalert',
            name='stockrecord',
            field=models.ForeignKey(verbose_name='Stock Record', related_name='alerts', to='partner.StockRecord', on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.receivers:0
==oscar.apps.analytics.receivers:0
import logging

from django.db import IntegrityError
from django.db.models import F
from django.dispatch import receiver

from oscar.apps.basket.signals import basket_addition
from oscar.apps.catalogue.signals import product_viewed
from oscar.apps.order.signals import order_placed
from oscar.apps.search.signals import user_search
from oscar.core.loading import get_classes

UserSearch, UserRecord, ProductRecord, UserProductView = get_classes(
    'analytics.models', ['UserSearch', 'UserRecord', 'ProductRecord',
                         'UserProductView'])

# Helpers

logger = logging.getLogger('oscar.analytics')


def _update_counter(model, field_name, filter_kwargs, increment=1):
    """
    Efficiently updates a counter field by a given increment. Uses Django's
    update() call to fetch and update in one query.

    TODO: This has a race condition, we should use UPSERT here

    :param model: The model class of the recording model
    :param field_name: The name of the field to update
    :param filter_kwargs: Parameters to the ORM's filter() function to get the
                          correct instance
    """
    try:
        record = model.objects.filter(**filter_kwargs)
        affected = record.update(**{field_name: F(field_name) + increment})
        if not affected:
            filter_kwargs[field_name] = increment
            model.objects.create(**filter_kwargs)
    except IntegrityError:      # pragma: no cover
        # get_or_create has a race condition (we should use upsert in supported)
        # databases. For now just ignore these errors
        logger.error(
            "IntegrityError when updating analytics counter for %s", model)


def _record_products_in_order(order):
    # surely there's a way to do this without causing a query for each line?
    for line in order.lines.all():
        _update_counter(
            ProductRecord, 'num_purchases',
            {'product': line.product}, line.quantity)


def _record_user_order(user, order):
    try:
        record = UserRecord.objects.filter(user=user)
        affected = record.update(
            num_orders=F('num_orders') + 1,
            num_order_lines=F('num_order_lines') + order.num_lines,
            num_order_items=F('num_order_items') + order.num_items,
            total_spent=F('total_spent') + order.total_incl_tax,
            date_last_order=order.date_placed)
        if not affected:
            UserRecord.objects.create(
                user=user, num_orders=1, num_order_lines=order.num_lines,
                num_order_items=order.num_items,
                total_spent=order.total_incl_tax,
                date_last_order=order.date_placed)
    except IntegrityError:      # pragma: no cover
        logger.error(
            "IntegrityError in analytics when recording a user order.")


# Receivers

@receiver(product_viewed)
def receive_product_view(sender, product, user, **kwargs):
    if kwargs.get('raw', False):
        return
    _update_counter(ProductRecord, 'num_views', {'product': product})
    if user and user.is_authenticated:
        _update_counter(UserRecord, 'num_product_views', {'user': user})
        UserProductView.objects.create(product=product, user=user)


@receiver(user_search)
def receive_product_search(sender, query, user, **kwargs):
    if user and user.is_authenticated and not kwargs.get('raw', False):
        UserSearch._default_manager.create(user=user, query=query)


@receiver(basket_addition)
def receive_basket_addition(sender, product, user, **kwargs):
    if kwargs.get('raw', False):
        return
    _update_counter(
        ProductRecord, 'num_basket_additions', {'product': product})
    if user and user.is_authenticated:
        _update_counter(UserRecord, 'num_basket_additions', {'user': user})


@receiver(order_placed)
def receive_order_placed(sender, order, user, **kwargs):
    if kwargs.get('raw', False):
        return
    _record_products_in_order(order)
    if user and user.is_authenticated:
        _record_user_order(user, order)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.search_handlers:0
==oscar.apps.catalogue.search_handlers:0
from django.conf import settings
from django.utils.module_loading import import_string
from django.views.generic.list import MultipleObjectMixin

from oscar.core.loading import get_class, get_model

BrowseCategoryForm = get_class('search.forms', 'BrowseCategoryForm')
SearchHandler = get_class('search.search_handlers', 'SearchHandler')
is_solr_supported = get_class('search.features', 'is_solr_supported')
is_elasticsearch_supported = get_class('search.features', 'is_elasticsearch_supported')
Product = get_model('catalogue', 'Product')


def get_product_search_handler_class():
    """
    Determine the search handler to use.

    Currently only Solr is supported as a search backend, so it falls
    back to rudimentary category browsing if that isn't enabled.
    """
    # Use get_class to ensure overridability
    if settings.OSCAR_PRODUCT_SEARCH_HANDLER is not None:
        return import_string(settings.OSCAR_PRODUCT_SEARCH_HANDLER)
    if is_solr_supported():
        return get_class('catalogue.search_handlers', 'SolrProductSearchHandler')
    elif is_elasticsearch_supported():
        return get_class(
            'catalogue.search_handlers', 'ESProductSearchHandler',
        )
    else:
        return get_class(
            'catalogue.search_handlers', 'SimpleProductSearchHandler')


class SolrProductSearchHandler(SearchHandler):
    """
    Search handler specialised for searching products.  Comes with optional
    category filtering. To be used with a Solr search backend.
    """
    form_class = BrowseCategoryForm
    model_whitelist = [Product]
    paginate_by = settings.OSCAR_PRODUCTS_PER_PAGE

    def __init__(self, request_data, full_path, categories=None):
        self.categories = categories
        super().__init__(request_data, full_path)

    def get_search_queryset(self):
        sqs = super().get_search_queryset()
        if self.categories:
            # We use 'narrow' API to ensure Solr's 'fq' filtering is used as
            # opposed to filtering using 'q'.
            pattern = ' OR '.join([
                '"%s"' % sqs.query.clean(c.full_name) for c in self.categories])
            sqs = sqs.narrow('category_exact:(%s)' % pattern)
        return sqs


class ESProductSearchHandler(SearchHandler):
    """
    Search handler specialised for searching products.  Comes with optional
    category filtering. To be used with an ElasticSearch search backend.
    """
    form_class = BrowseCategoryForm
    model_whitelist = [Product]
    paginate_by = settings.OSCAR_PRODUCTS_PER_PAGE

    def __init__(self, request_data, full_path, categories=None):
        self.categories = categories
        super().__init__(request_data, full_path)

    def get_search_queryset(self):
        sqs = super().get_search_queryset()
        if self.categories:
            for category in self.categories:
                sqs = sqs.filter_or(category=category.full_name)
        return sqs


class SimpleProductSearchHandler(MultipleObjectMixin):
    """
    A basic implementation of the full-featured SearchHandler that has no
    faceting support, but doesn't require a Haystack backend. It only
    supports category browsing.

    Note that is meant as a replacement search handler and not as a view
    mixin; the mixin just does most of what we need it to do.
    """
    paginate_by = settings.OSCAR_PRODUCTS_PER_PAGE

    def __init__(self, request_data, full_path, categories=None):
        self.categories = categories
        self.kwargs = {'page': request_data.get('page', 1)}
        self.object_list = self.get_queryset()

    def get_queryset(self):
        qs = Product.objects.browsable().base_queryset()
        if self.categories:
            qs = qs.filter(categories__in=self.categories).distinct()
        return qs

    def get_search_context_data(self, context_object_name):
        # Set the context_object_name instance property as it's needed
        # internally by MultipleObjectMixin
        self.context_object_name = context_object_name
        context = self.get_context_data(object_list=self.object_list)
        context[context_object_name] = context['page_obj'].object_list
        return context
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.search.search_indexes:0
==oscar.apps.search.search_indexes:0
from haystack import indexes

from oscar.core.loading import get_class, get_model

# Load default strategy (without a user/request)
is_solr_supported = get_class('search.features', 'is_solr_supported')
Selector = get_class('partner.strategy', 'Selector')


class ProductIndex(indexes.SearchIndex, indexes.Indexable):
    # Search text
    text = indexes.CharField(
        document=True, use_template=True,
        template_name='oscar/search/indexes/product/item_text.txt')

    upc = indexes.CharField(model_attr="upc", null=True)
    title = indexes.EdgeNgramField(model_attr='title', null=True)
    title_exact = indexes.CharField(model_attr='title', null=True, indexed=False)

    # Fields for faceting
    product_class = indexes.CharField(null=True, faceted=True)
    category = indexes.MultiValueField(null=True, faceted=True)
    price = indexes.FloatField(null=True, faceted=True)
    num_in_stock = indexes.IntegerField(null=True, faceted=True)
    rating = indexes.IntegerField(null=True, faceted=True)

    # Spelling suggestions
    suggestions = indexes.FacetCharField()

    date_created = indexes.DateTimeField(model_attr='date_created')
    date_updated = indexes.DateTimeField(model_attr='date_updated')

    _strategy = None

    def get_model(self):
        return get_model('catalogue', 'Product')

    def index_queryset(self, using=None):
        # Only index browsable products (not each individual child product)
        return self.get_model().browsable.order_by('-date_updated')

    def read_queryset(self, using=None):
        return self.get_model().browsable.base_queryset()

    def prepare_product_class(self, obj):
        return obj.get_product_class().name

    def prepare_category(self, obj):
        categories = obj.categories.all()
        if len(categories) > 0:
            return [category.full_name for category in categories]

    def prepare_rating(self, obj):
        if obj.rating is not None:
            return int(obj.rating)

    # Pricing and stock is tricky as it can vary per customer.  However, the
    # most common case is for customers to see the same prices and stock levels
    # and so we implement that case here.

    def get_strategy(self):
        if not self._strategy:
            self._strategy = Selector().strategy()
        return self._strategy

    def prepare_price(self, obj):
        strategy = self.get_strategy()
        result = None
        if obj.is_parent:
            result = strategy.fetch_for_parent(obj)
        elif obj.has_stockrecords:
            result = strategy.fetch_for_product(obj)

        if result:
            if result.price.is_tax_known:
                return result.price.incl_tax
            return result.price.excl_tax

    def prepare_num_in_stock(self, obj):
        strategy = self.get_strategy()
        if obj.is_parent:
            # Don't return a stock level for parent products
            return None
        elif obj.has_stockrecords:
            result = strategy.fetch_for_product(obj)
            return result.stockrecord.net_stock_level

    def prepare(self, obj):
        prepared_data = super().prepare(obj)

        # We use Haystack's dynamic fields to ensure that the title field used
        # for sorting is of type "string'.
        if is_solr_supported():
            prepared_data['title_s'] = prepared_data['title']

        # Use title to for spelling suggestions
        prepared_data['suggestions'] = prepared_data['text']

        return prepared_data

    def get_updated_field(self):
        """
        Used to specify the field used to determine if an object has been
        updated

        Can be used to filter the query set when updating the index
        """
        return 'date_updated'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.applicator:0
==oscar.apps.offer.applicator:0
import logging
from itertools import chain

from oscar.core.loading import get_class, get_model

logger = logging.getLogger('oscar.offers')
OfferApplications = get_class('offer.results', 'OfferApplications')


class OfferApplicationError(Exception):
    pass


class Applicator(object):

    def apply(self, basket, user=None, request=None):
        """
        Apply all relevant offers to the given basket.

        The request is passed too as sometimes the available offers
        are dependent on the user (eg session-based offers).
        """
        offers = self.get_offers(basket, user, request)
        self.apply_offers(basket, offers)

    def apply_offers(self, basket, offers):
        applications = OfferApplications()
        for offer in offers:
            num_applications = 0
            # Keep applying the offer until either
            # (a) We reach the max number of applications for the offer.
            # (b) The benefit can't be applied successfully.
            while num_applications < offer.get_max_applications(basket.owner):
                result = offer.apply_benefit(basket)
                num_applications += 1
                if not result.is_successful:
                    break
                applications.add(offer, result)
                if result.is_final:
                    break

        # Store this list of discounts with the basket so it can be
        # rendered in templates
        basket.offer_applications = applications

    def get_offers(self, basket, user=None, request=None):
        """
        Return all offers to apply to the basket.

        This method should be subclassed and extended to provide more
        sophisticated behaviour.  For instance, you could load extra offers
        based on the session or the user type.
        """
        site_offers = self.get_site_offers()
        basket_offers = self.get_basket_offers(basket, user)
        user_offers = self.get_user_offers(user)
        session_offers = self.get_session_offers(request)

        return list(sorted(chain(
            session_offers, basket_offers, user_offers, site_offers),
            key=lambda o: o.priority, reverse=True))

    def get_site_offers(self):
        """
        Return site offers that are available to all users
        """
        ConditionalOffer = get_model('offer', 'ConditionalOffer')
        qs = ConditionalOffer.active.filter(offer_type=ConditionalOffer.SITE)
        # Using select_related with the condition/benefit ranges doesn't seem
        # to work.  I think this is because both the related objects have the
        # FK to range with the same name.
        return qs.select_related('condition', 'benefit')

    def get_basket_offers(self, basket, user):
        """
        Return basket-linked offers such as those associated with a voucher
        code
        """
        offers = []
        if not basket.id or not user:
            return offers

        for voucher in basket.vouchers.all():
            available_to_user, __ = voucher.is_available_to_user(user=user)
            if voucher.is_active() and available_to_user:
                basket_offers = voucher.offers.all()
                for offer in basket_offers:
                    offer.set_voucher(voucher)
                offers = list(chain(offers, basket_offers))
        return offers

    def get_user_offers(self, user):
        """
        Returns offers linked to this particular user.

        Eg: student users might get 25% off
        """
        return []

    def get_session_offers(self, request):
        """
        Returns temporary offers linked to the current session.

        Eg: visitors coming from an affiliate site get a 10% discount
        """
        return []
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.notifications.views:0
==oscar.apps.customer.notifications.views:0
from django.conf import settings
from django.contrib import messages
from django.utils.html import strip_tags
from django.utils.timezone import now
from django.utils.translation import gettext_lazy as _
from django.utils.translation import ungettext
from django.views import generic

from oscar.core.loading import get_class, get_model
from oscar.core.utils import redirect_to_referrer
from oscar.views.generic import BulkEditMixin

PageTitleMixin = get_class('customer.mixins', 'PageTitleMixin')
Notification = get_model('customer', 'Notification')


class NotificationListView(PageTitleMixin, generic.ListView):
    model = Notification
    template_name = 'oscar/customer/notifications/list.html'
    context_object_name = 'notifications'
    paginate_by = settings.OSCAR_NOTIFICATIONS_PER_PAGE
    page_title = _("Notifications")
    active_tab = 'notifications'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['list_type'] = self.list_type
        return ctx


class InboxView(NotificationListView):
    list_type = 'inbox'

    def get_queryset(self):
        return self.model._default_manager.filter(
            recipient=self.request.user,
            location=self.model.INBOX)


class ArchiveView(NotificationListView):
    list_type = 'archive'

    def get_queryset(self):
        return self.model._default_manager.filter(
            recipient=self.request.user,
            location=self.model.ARCHIVE)


class DetailView(PageTitleMixin, generic.DetailView):
    model = Notification
    template_name = 'oscar/customer/notifications/detail.html'
    context_object_name = 'notification'
    active_tab = 'notifications'

    def get_object(self, queryset=None):
        obj = super().get_object()
        if not obj.date_read:
            obj.date_read = now()
            obj.save()
        return obj

    def get_page_title(self):
        """Append subject to page title"""
        title = strip_tags(self.object.subject)
        return '%s: %s' % (_('Notification'), title)

    def get_queryset(self):
        return self.model._default_manager.filter(
            recipient=self.request.user)


class UpdateView(BulkEditMixin, generic.RedirectView):
    model = Notification
    actions = ('archive', 'delete')
    checkbox_object_name = 'notification'
    permanent = False

    def get_object_dict(self, ids):
        return self.model.objects.filter(
            recipient=self.request.user).in_bulk(ids)

    def get_success_response(self):
        return redirect_to_referrer(
            self.request, 'customer:notifications-inbox')

    def archive(self, request, notifications):
        for notification in notifications:
            notification.archive()
        msg = ungettext(
            '%(count)d notification archived',
            '%(count)d notifications archived', len(notifications)) \
            % {'count': len(notifications)}
        messages.success(request, msg)
        return self.get_success_response()

    def delete(self, request, notifications):
        for notification in notifications:
            notification.delete()
        msg = ungettext(
            '%(count)d notification deleted',
            '%(count)d notifications deleted', len(notifications)) \
            % {'count': len(notifications)}
        messages.success(request, msg)
        return self.get_success_response()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.models:0
==oscar.apps.order.models:0
from oscar.apps.address.abstract_models import (
    AbstractBillingAddress, AbstractShippingAddress)
from oscar.apps.order.abstract_models import *  # noqa
from oscar.core.loading import is_model_registered

__all__ = ['PaymentEventQuantity', 'ShippingEventQuantity']


if not is_model_registered('order', 'Order'):
    class Order(AbstractOrder):
        pass

    __all__.append('Order')


if not is_model_registered('order', 'OrderNote'):
    class OrderNote(AbstractOrderNote):
        pass

    __all__.append('OrderNote')


if not is_model_registered('order', 'OrderStatusChange'):
    class OrderStatusChange(AbstractOrderStatusChange):
        pass

    __all__.append('OrderStatusChange')


if not is_model_registered('order', 'CommunicationEvent'):
    class CommunicationEvent(AbstractCommunicationEvent):
        pass

    __all__.append('CommunicationEvent')


if not is_model_registered('order', 'ShippingAddress'):
    class ShippingAddress(AbstractShippingAddress):
        pass

    __all__.append('ShippingAddress')


if not is_model_registered('order', 'BillingAddress'):
    class BillingAddress(AbstractBillingAddress):
        pass

    __all__.append('BillingAddress')


if not is_model_registered('order', 'Line'):
    class Line(AbstractLine):
        pass

    __all__.append('Line')


if not is_model_registered('order', 'LinePrice'):
    class LinePrice(AbstractLinePrice):
        pass

    __all__.append('LinePrice')


if not is_model_registered('order', 'LineAttribute'):
    class LineAttribute(AbstractLineAttribute):
        pass

    __all__.append('LineAttribute')


if not is_model_registered('order', 'ShippingEvent'):
    class ShippingEvent(AbstractShippingEvent):
        pass

    __all__.append('ShippingEvent')


if not is_model_registered('order', 'ShippingEventType'):
    class ShippingEventType(AbstractShippingEventType):
        pass

    __all__.append('ShippingEventType')


if not is_model_registered('order', 'PaymentEvent'):
    class PaymentEvent(AbstractPaymentEvent):
        pass

    __all__.append('PaymentEvent')


if not is_model_registered('order', 'PaymentEventType'):
    class PaymentEventType(AbstractPaymentEventType):
        pass

    __all__.append('PaymentEventType')


if not is_model_registered('order', 'OrderDiscount'):
    class OrderDiscount(AbstractOrderDiscount):
        pass

    __all__.append('OrderDiscount')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.reports:0
==oscar.apps.analytics.reports:0
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model

ReportGenerator = get_class('dashboard.reports.reports', 'ReportGenerator')
ReportCSVFormatter = get_class('dashboard.reports.reports',
                               'ReportCSVFormatter')
ReportHTMLFormatter = get_class('dashboard.reports.reports',
                                'ReportHTMLFormatter')
ProductRecord = get_model('analytics', 'ProductRecord')
UserRecord = get_model('analytics', 'UserRecord')


class ProductReportCSVFormatter(ReportCSVFormatter):
    filename_template = 'conditional-offer-performance.csv'

    def generate_csv(self, response, products):
        writer = self.get_csv_writer(response)
        header_row = [_('Product'),
                      _('Views'),
                      _('Basket additions'),
                      _('Purchases')]
        writer.writerow(header_row)

        for record in products:
            row = [record.product,
                   record.num_views,
                   record.num_basket_additions,
                   record.num_purchases]
            writer.writerow(row)


class ProductReportHTMLFormatter(ReportHTMLFormatter):
    filename_template = 'oscar/dashboard/reports/partials/product_report.html'


class ProductReportGenerator(ReportGenerator):
    code = 'product_analytics'
    description = _('Product analytics')

    formatters = {
        'CSV_formatter': ProductReportCSVFormatter,
        'HTML_formatter': ProductReportHTMLFormatter}

    def report_description(self):
        return self.description

    def generate(self):
        records = ProductRecord._default_manager.all()
        return self.formatter.generate_response(records)

    def is_available_to(self, user):
        return user.is_staff


class UserReportCSVFormatter(ReportCSVFormatter):
    filename_template = 'user-analytics.csv'

    def generate_csv(self, response, users):
        writer = self.get_csv_writer(response)
        header_row = [_('Name'),
                      _('Date registered'),
                      _('Product views'),
                      _('Basket additions'),
                      _('Orders'),
                      _('Order lines'),
                      _('Order items'),
                      _('Total spent'),
                      _('Date of last order')]
        writer.writerow(header_row)

        for record in users:
            row = [record.user.get_full_name(),
                   self.format_date(record.user.date_joined),
                   record.num_product_views,
                   record.num_basket_additions,
                   record.num_orders,
                   record.num_order_lines,
                   record.num_order_items,
                   record.total_spent,
                   self.format_datetime(record.date_last_order)]
            writer.writerow(row)


class UserReportHTMLFormatter(ReportHTMLFormatter):
    filename_template = 'oscar/dashboard/reports/partials/user_report.html'


class UserReportGenerator(ReportGenerator):
    code = 'user_analytics'
    description = _('User analytics')

    formatters = {
        'CSV_formatter': UserReportCSVFormatter,
        'HTML_formatter': UserReportHTMLFormatter}

    def generate(self):
        users = UserRecord._default_manager.select_related().all()
        return self.formatter.generate_response(users)

    def is_available_to(self, user):
        return user.is_staff
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.admin:0
==oscar.apps.catalogue.admin:0
from django.contrib import admin
from treebeard.admin import TreeAdmin
from treebeard.forms import movenodeform_factory

from oscar.core.loading import get_model

AttributeOption = get_model('catalogue', 'AttributeOption')
AttributeOptionGroup = get_model('catalogue', 'AttributeOptionGroup')
Category = get_model('catalogue', 'Category')
Option = get_model('catalogue', 'Option')
Product = get_model('catalogue', 'Product')
ProductAttribute = get_model('catalogue', 'ProductAttribute')
ProductAttributeValue = get_model('catalogue', 'ProductAttributeValue')
ProductCategory = get_model('catalogue', 'ProductCategory')
ProductClass = get_model('catalogue', 'ProductClass')
ProductImage = get_model('catalogue', 'ProductImage')
ProductRecommendation = get_model('catalogue', 'ProductRecommendation')


class AttributeInline(admin.TabularInline):
    model = ProductAttributeValue


class ProductRecommendationInline(admin.TabularInline):
    model = ProductRecommendation
    fk_name = 'primary'
    raw_id_fields = ['primary', 'recommendation']


class CategoryInline(admin.TabularInline):
    model = ProductCategory
    extra = 1


class ProductAttributeInline(admin.TabularInline):
    model = ProductAttribute
    extra = 2


class ProductClassAdmin(admin.ModelAdmin):
    list_display = ('name', 'requires_shipping', 'track_stock')
    inlines = [ProductAttributeInline]


class ProductAdmin(admin.ModelAdmin):
    date_hierarchy = 'date_created'
    list_display = ('get_title', 'upc', 'get_product_class', 'structure',
                    'attribute_summary', 'date_created')
    list_filter = ['structure', 'is_discountable']
    raw_id_fields = ['parent']
    inlines = [AttributeInline, CategoryInline, ProductRecommendationInline]
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ['upc', 'title']

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        return (
            qs
            .select_related('product_class', 'parent')
            .prefetch_related(
                'attribute_values',
                'attribute_values__attribute'))


class ProductAttributeAdmin(admin.ModelAdmin):
    list_display = ('name', 'code', 'product_class', 'type')
    prepopulated_fields = {"code": ("name", )}


class OptionAdmin(admin.ModelAdmin):
    pass


class ProductAttributeValueAdmin(admin.ModelAdmin):
    list_display = ('product', 'attribute', 'value')


class AttributeOptionInline(admin.TabularInline):
    model = AttributeOption


class AttributeOptionGroupAdmin(admin.ModelAdmin):
    list_display = ('name', 'option_summary')
    inlines = [AttributeOptionInline, ]


class CategoryAdmin(TreeAdmin):
    form = movenodeform_factory(Category)
    list_display = ('name', 'slug')


admin.site.register(ProductClass, ProductClassAdmin)
admin.site.register(Product, ProductAdmin)
admin.site.register(ProductAttribute, ProductAttributeAdmin)
admin.site.register(ProductAttributeValue, ProductAttributeValueAdmin)
admin.site.register(AttributeOptionGroup, AttributeOptionGroupAdmin)
admin.site.register(Option, OptionAdmin)
admin.site.register(ProductImage)
admin.site.register(Category, CategoryAdmin)
admin.site.register(ProductCategory)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.prices:0
==oscar.apps.partner.prices:0
from oscar.core import prices


class Base(object):
    """
    The interface that any pricing policy must support
    """

    #: Whether any prices exist
    exists = False

    #: Whether tax is known
    is_tax_known = False

    #: Price excluding tax
    excl_tax = None

    #: Price including tax
    incl_tax = None

    #: Price to use for offer calculations
    @property
    def effective_price(self):
        # Default to using the price excluding tax for calculations
        return self.excl_tax

    #: Price tax
    tax = None

    #: Retail price
    retail = None

    #: Price currency (3 char code)
    currency = None

    def __repr__(self):
        return "%s(%r)" % (self.__class__.__name__, self.__dict__)


class Unavailable(Base):
    """
    This should be used as a pricing policy when a product is unavailable and
    no prices are known.
    """


class FixedPrice(Base):
    """
    This should be used for when the price of a product is known in advance.

    It can work for when tax isn't known (like in the US).

    Note that this price class uses the tax-exclusive price for offers, even if
    the tax is known.  This may not be what you want.  Use the
    TaxInclusiveFixedPrice class if you want offers to use tax-inclusive
    prices.
    """
    exists = True

    def __init__(self, currency, excl_tax, tax=None):
        self.currency = currency
        self.excl_tax = excl_tax
        self.tax = tax

    @property
    def incl_tax(self):
        if self.is_tax_known:
            return self.excl_tax + self.tax
        raise prices.TaxNotKnown(
            "Can't calculate price.incl_tax as tax isn't known")

    @property
    def is_tax_known(self) -> bool:
        """
        Test whether the tax is known or not
        """
        return self.tax is not None


class TaxInclusiveFixedPrice(FixedPrice):
    """
    Specialised version of FixedPrice that must have tax passed.  It also
    specifies that offers should use the tax-inclusive price (which is the norm
    in the UK).
    """
    exists = is_tax_known = True

    def __init__(self, currency, excl_tax, tax):
        self.currency = currency
        self.excl_tax = excl_tax
        self.tax = tax

    @property
    def incl_tax(self):
        return self.excl_tax + self.tax

    @property
    def effective_price(self):
        return self.incl_tax
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.repository:0
==oscar.apps.shipping.repository:0
from decimal import Decimal as D

from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_classes

(Free, NoShippingRequired,
 TaxExclusiveOfferDiscount, TaxInclusiveOfferDiscount) \
    = get_classes('shipping.methods', ['Free', 'NoShippingRequired',
                                       'TaxExclusiveOfferDiscount', 'TaxInclusiveOfferDiscount'])


class Repository(object):
    """
    Repository class responsible for returning ShippingMethod
    objects for a given user, basket etc
    """

    # We default to just free shipping. Customise this class and override this
    # property to add your own shipping methods. This should be a list of
    # instantiated shipping methods.
    methods = (Free(),)

    # API

    def get_shipping_methods(self, basket, shipping_addr=None, **kwargs):
        """
        Return a list of all applicable shipping method instances for a given
        basket, address etc.
        """
        if not basket.is_shipping_required():
            # Special case! Baskets that don't require shipping get a special
            # shipping method.
            return [NoShippingRequired()]

        methods = self.get_available_shipping_methods(
            basket=basket, shipping_addr=shipping_addr, **kwargs)
        if basket.has_shipping_discounts:
            methods = self.apply_shipping_offers(basket, methods)
        return methods

    def get_default_shipping_method(self, basket, shipping_addr=None,
                                    **kwargs):
        """
        Return a 'default' shipping method to show on the basket page to give
        the customer an indication of what their order will cost.
        """
        shipping_methods = self.get_shipping_methods(
            basket, shipping_addr=shipping_addr, **kwargs)
        if len(shipping_methods) == 0:
            raise ImproperlyConfigured(
                _("You need to define some shipping methods"))

        # Assume first returned method is default
        return shipping_methods[0]

    # Helpers

    def get_available_shipping_methods(
            self, basket, shipping_addr=None, **kwargs):
        """
        Return a list of all applicable shipping method instances for a given
        basket, address etc. This method is intended to be overridden.
        """
        return self.methods

    def apply_shipping_offers(self, basket, methods):
        """
        Apply shipping offers to the passed set of methods
        """
        # We default to only applying the first shipping discount.
        offer = basket.shipping_discounts[0]['offer']
        return [self.apply_shipping_offer(basket, method, offer)
                for method in methods]

    def apply_shipping_offer(self, basket, method, offer):
        """
        Wrap a shipping method with an offer discount wrapper (as long as the
        shipping charge is non-zero).
        """
        # If the basket has qualified for shipping discount, wrap the shipping
        # method with a decorating class that applies the offer discount to the
        # shipping charge.
        charge = method.calculate(basket)
        if charge.excl_tax == D('0.00'):
            # No need to wrap zero shipping charges
            return method

        if charge.is_tax_known:
            return TaxInclusiveOfferDiscount(method, offer)
        else:
            # When returning a tax exclusive discount, it is assumed
            # that this will be used to calculate taxes which will then
            # be assigned directly to the method instance.
            return TaxExclusiveOfferDiscount(method, offer)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.migrations.0001_initial:1
==oscar.apps.customer.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunicationEventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Code', editable=False, separator='_', max_length=128, help_text='Code used for looking up this event programmatically', blank=True)),
                ('name', models.CharField(verbose_name='Name', max_length=255, help_text='This is just used for organisational purposes')),
                ('category', models.CharField(default='Order related', max_length=255, verbose_name='Category', choices=[('Order related', 'Order related'), ('User related', 'User related')])),
                ('email_subject_template', models.CharField(verbose_name='Email Subject Template', max_length=255, blank=True, null=True)),
                ('email_body_template', models.TextField(blank=True, verbose_name='Email Body Template', null=True)),
                ('email_body_html_template', models.TextField(verbose_name='Email Body HTML Template', blank=True, help_text='HTML template', null=True)),
                ('sms_template', models.CharField(verbose_name='SMS Template', max_length=170, help_text='SMS template', blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date Updated')),
            ],
            options={
                'verbose_name_plural': 'Communication event types',
                'verbose_name': 'Communication event type',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.TextField(max_length=255, verbose_name='Subject')),
                ('body_text', models.TextField(verbose_name='Body Text')),
                ('body_html', models.TextField(verbose_name='Body HTML', blank=True)),
                ('date_sent', models.DateTimeField(auto_now_add=True, verbose_name='Date Sent')),
                ('user', models.ForeignKey(verbose_name='User', related_name='emails', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Emails',
                'verbose_name': 'Email',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('category', models.CharField(max_length=255, blank=True)),
                ('location', models.CharField(default='Inbox', max_length=32, choices=[('Inbox', 'Inbox'), ('Archive', 'Archive')])),
                ('date_sent', models.DateTimeField(auto_now_add=True)),
                ('date_read', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(related_name='notifications', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
                ('sender', models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('-date_sent',),
                'verbose_name_plural': 'Notifications',
                'verbose_name': 'Notification',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProductAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=75, db_index=True, verbose_name='Email', blank=True)),
                ('key', models.CharField(max_length=128, db_index=True, verbose_name='Key', blank=True)),
                ('status', models.CharField(default='Active', max_length=20, verbose_name='Status', choices=[('Unconfirmed', 'Not yet confirmed'), ('Active', 'Active'), ('Cancelled', 'Cancelled'), ('Closed', 'Closed')])),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_confirmed', models.DateTimeField(blank=True, verbose_name='Date confirmed', null=True)),
                ('date_cancelled', models.DateTimeField(blank=True, verbose_name='Date cancelled', null=True)),
                ('date_closed', models.DateTimeField(blank=True, verbose_name='Date closed', null=True)),
                ('product', models.ForeignKey(to='catalogue.Product', on_delete=models.CASCADE)),
                ('user', models.ForeignKey(null=True, verbose_name='User', related_name='alerts', to=settings.AUTH_USER_MODEL, blank=True, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Product alerts',
                'verbose_name': 'Product alert',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.mixins:0
==oscar.apps.customer.mixins:0
import logging

from django.conf import settings
from django.contrib.auth import login as auth_login
from django.contrib.auth import authenticate
from django.contrib.sites.shortcuts import get_current_site

from oscar.apps.customer.signals import user_registered
from oscar.core.compat import get_user_model
from oscar.core.loading import get_class, get_model

User = get_user_model()
CommunicationEventType = get_model('customer', 'CommunicationEventType')
Dispatcher = get_class('customer.utils', 'Dispatcher')

logger = logging.getLogger('oscar.customer')


class PageTitleMixin(object):
    """
    Passes page_title and active_tab into context, which makes it quite useful
    for the accounts views.

    Dynamic page titles are possible by overriding get_page_title.
    """
    page_title = None
    active_tab = None

    # Use a method that can be overridden and customised
    def get_page_title(self):
        return self.page_title

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx.setdefault('page_title', self.get_page_title())
        ctx.setdefault('active_tab', self.active_tab)
        return ctx


class RegisterUserMixin(object):
    communication_type_code = 'REGISTRATION'

    def register_user(self, form):
        """
        Create a user instance and send a new registration email (if configured
        to).
        """
        user = form.save()

        # Raise signal robustly (we don't want exceptions to crash the request
        # handling).
        user_registered.send_robust(
            sender=self, request=self.request, user=user)

        if getattr(settings, 'OSCAR_SEND_REGISTRATION_EMAIL', True):
            self.send_registration_email(user)

        # We have to authenticate before login
        try:
            user = authenticate(
                username=user.email,
                password=form.cleaned_data['password1'])
        except User.MultipleObjectsReturned:
            # Handle race condition where the registration request is made
            # multiple times in quick succession.  This leads to both requests
            # passing the uniqueness check and creating users (as the first one
            # hasn't committed when the second one runs the check).  We retain
            # the first one and deactivate the dupes.
            logger.warning(
                'Multiple users with identical email address and password'
                'were found. Marking all but one as not active.')
            # As this section explicitly deals with the form being submitted
            # twice, this is about the only place in Oscar where we don't
            # ignore capitalisation when looking up an email address.
            # We might otherwise accidentally mark unrelated users as inactive
            users = User.objects.filter(email=user.email)
            user = users[0]
            for u in users[1:]:
                u.is_active = False
                u.save()

        auth_login(self.request, user)

        return user

    def send_registration_email(self, user):
        code = self.communication_type_code
        ctx = {'user': user,
               'site': get_current_site(self.request)}
        messages = CommunicationEventType.objects.get_and_render(
            code, ctx)
        if messages and messages['body']:
            Dispatcher().dispatch_user_messages(user, messages)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.migrations.0001_initial:1
==oscar.apps.payment.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
from django.conf import settings
from decimal import Decimal


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bankcard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_type', models.CharField(max_length=128, verbose_name='Card Type')),
                ('name', models.CharField(max_length=255, verbose_name='Name', blank=True)),
                ('number', models.CharField(max_length=32, verbose_name='Number')),
                ('expiry_date', models.DateField(verbose_name='Expiry Date')),
                ('partner_reference', models.CharField(max_length=255, verbose_name='Partner Reference', blank=True)),
                ('user', models.ForeignKey(verbose_name='User', related_name='bankcards', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Bankcards',
                'verbose_name': 'Bankcard',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(default='GBP', max_length=12, verbose_name='Currency')),
                ('amount_allocated', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Amount Allocated')),
                ('amount_debited', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Amount Debited')),
                ('amount_refunded', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Amount Refunded')),
                ('reference', models.CharField(max_length=128, verbose_name='Reference', blank=True)),
                ('label', models.CharField(max_length=128, verbose_name='Label', blank=True)),
                ('order', models.ForeignKey(verbose_name='Order', related_name='sources', to='order.Order', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Sources',
                'verbose_name': 'Source',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Code', editable=False, max_length=128, help_text='This is used within forms to identify this source type', blank=True)),
            ],
            options={
                'verbose_name_plural': 'Source Types',
                'verbose_name': 'Source Type',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('txn_type', models.CharField(max_length=128, verbose_name='Type', blank=True)),
                ('amount', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Amount')),
                ('reference', models.CharField(max_length=128, verbose_name='Reference', blank=True)),
                ('status', models.CharField(max_length=128, verbose_name='Status', blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('source', models.ForeignKey(verbose_name='Source', related_name='transactions', to='payment.Source', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['-date_created'],
                'verbose_name_plural': 'Transactions',
                'verbose_name': 'Transaction',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='source',
            name='source_type',
            field=models.ForeignKey(verbose_name='Source Type', related_name='sources', to='payment.SourceType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.dashboard.widgets:0
==oscar.apps.dashboard.widgets:0
import copy
import re

from django.forms import Widget
from django.urls import reverse


class RelatedFieldWidgetWrapper(Widget):
    """
    This class is a wrapper to a given widget to add the add icon for the
    Oscar dashboard.
    """
    template_name = 'oscar/dashboard/widgets/related_widget_wrapper.html'

    IS_POPUP_VALUE = '1'
    IS_POPUP_VAR = '_popup'
    TO_FIELD_VAR = '_to_field'

    def __init__(self, widget, rel):
        self.needs_multipart_form = widget.needs_multipart_form
        self.attrs = widget.attrs
        self.choices = widget.choices
        self.widget = widget
        self.rel = rel

    def __deepcopy__(self, memo):
        obj = copy.copy(self)
        obj.widget = copy.deepcopy(self.widget, memo)
        obj.attrs = self.widget.attrs
        memo[id(self)] = obj
        return obj

    @property
    def is_hidden(self):
        return self.widget.is_hidden

    @property
    def media(self):
        return self.widget.media

    def get_related_url(self, info, action, *args):
        app_label = info[0]
        model_object_name = info[1]
        # Convert the model's object name into lowercase, with dashes between
        # the camel-cased words
        model_object_name = '-'.join(re.sub('([a-z])([A-Z])', r'\1 \2', model_object_name).lower().split())
        # Does not specify current app
        return reverse("dashboard:%s-%s-%s" % (app_label, model_object_name, action), args=args)

    def get_context(self, name, value, attrs):
        rel_opts = self.rel.model._meta
        info = (rel_opts.app_label, rel_opts.object_name)
        self.widget.choices = self.choices
        url_params = '&'.join("%s=%s" % param for param in [
            (RelatedFieldWidgetWrapper.TO_FIELD_VAR, self.rel.get_related_field().name),
            (RelatedFieldWidgetWrapper.IS_POPUP_VAR, RelatedFieldWidgetWrapper.IS_POPUP_VALUE),
        ])
        context = {
            'rendered_widget': self.widget.render(name, value, attrs),
            'name': name,
            'url_params': url_params,
            'model': rel_opts.verbose_name,
        }
        change_related_template_url = self.get_related_url(info, 'update', '__fk__')
        context.update(
            change_related_template_url=change_related_template_url,
        )
        add_related_url = self.get_related_url(info, 'create')
        context.update(
            add_related_url=add_related_url,
        )
        delete_related_template_url = self.get_related_url(info, 'delete', '__fk__')
        context.update(
            delete_related_template_url=delete_related_template_url,
        )
        return context

    def value_from_datadict(self, data, files, name):
        return self.widget.value_from_datadict(data, files, name)

    def value_omitted_from_data(self, data, files, name):
        return self.widget.value_omitted_from_data(data, files, name)

    def id_for_label(self, id_):
        return self.widget.id_for_label(id_)


class RelatedMultipleFieldWidgetWrapper(RelatedFieldWidgetWrapper):

    template_name = 'oscar/dashboard/widgets/related_multiple_widget_wrapper.html'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.communications.forms:0
==oscar.apps.dashboard.communications.forms:0
==oscar.apps.dashboard.communications.forms:0
from django import forms
from django.template import Template, TemplateSyntaxError
from django.utils.translation import gettext_lazy as _

from oscar.apps.customer.utils import normalise_email
from oscar.core.loading import get_model

CommunicationEventType = get_model('customer', 'CommunicationEventType')
Order = get_model('order', 'Order')


class CommunicationEventTypeForm(forms.ModelForm):
    email_subject_template = forms.CharField(
        label=_("Email subject template"))
    email_body_template = forms.CharField(
        label=_("Email body text template"), required=True,
        widget=forms.widgets.Textarea(attrs={'class': 'plain'}))
    email_body_html_template = forms.CharField(
        label=_("Email body HTML template"), required=True,
        widget=forms.Textarea)

    preview_order_number = forms.CharField(
        label=_("Order number"), required=False)
    preview_email = forms.EmailField(label=_("Preview email"),
                                     required=False)

    def __init__(self, data=None, *args, **kwargs):
        self.show_preview = False
        self.send_preview = False
        if data:
            self.show_preview = 'show_preview' in data
            self.send_preview = 'send_preview' in data
        super().__init__(data, *args, **kwargs)

    def validate_template(self, value):
        try:
            Template(value)
        except TemplateSyntaxError as e:
            raise forms.ValidationError(str(e))

    def clean_email_subject_template(self):
        subject = self.cleaned_data['email_subject_template']
        self.validate_template(subject)
        return subject

    def clean_email_body_template(self):
        body = self.cleaned_data['email_body_template']
        self.validate_template(body)
        return body

    def clean_email_body_html_template(self):
        body = self.cleaned_data['email_body_html_template']
        self.validate_template(body)
        return body

    def clean_preview_order_number(self):
        number = self.cleaned_data['preview_order_number'].strip()
        if not self.instance.is_order_related():
            return number
        if not self.show_preview and not self.send_preview:
            return number
        try:
            self.preview_order = Order.objects.get(number=number)
        except Order.DoesNotExist:
            raise forms.ValidationError(_(
                "No order found with this number"))
        return number

    def clean_preview_email(self):
        email = normalise_email(self.cleaned_data['preview_email'])
        if not self.send_preview:
            return email
        if not email:
            raise forms.ValidationError(_(
                "Please enter an email address"))
        return email

    def get_preview_context(self):
        ctx = {}
        if hasattr(self, 'preview_order'):
            ctx['order'] = self.preview_order
        return ctx

    class Meta:
        model = CommunicationEventType
        fields = [
            'name', 'email_subject_template', 'email_body_template',
            'email_body_html_template', 'preview_order_number', 'preview_email'
        ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.ranges.forms:0
==oscar.apps.dashboard.ranges.forms:0
==oscar.apps.dashboard.ranges.forms:0
import re

from django import forms
from django.db.models import Q
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_model

Product = get_model('catalogue', 'Product')
Range = get_model('offer', 'Range')


class RangeForm(forms.ModelForm):

    class Meta:
        model = Range
        fields = [
            'name', 'description', 'is_public',
            'includes_all_products', 'included_categories'
        ]


class RangeProductForm(forms.Form):
    query = forms.CharField(
        max_length=1024, label=_("Product SKUs or UPCs"),
        widget=forms.Textarea, required=False,
        help_text=_("You can paste in a selection of SKUs or UPCs"))
    file_upload = forms.FileField(
        label=_("File of SKUs or UPCs"), required=False, max_length=255,
        help_text=_('Either comma-separated, or one identifier per line'))

    def __init__(self, range, *args, **kwargs):
        self.range = range
        super().__init__(*args, **kwargs)

    def clean(self):
        clean_data = super().clean()
        if not clean_data.get('query') and not clean_data.get('file_upload'):
            raise forms.ValidationError(
                _("You must submit either a list of SKU/UPCs or a file"))
        return clean_data

    def clean_query(self):
        raw = self.cleaned_data['query']
        if not raw:
            return raw

        # Check that the search matches some products
        ids = set(re.compile(r'[\w-]+').findall(raw))
        products = self.range.all_products()
        existing_skus = set(products.values_list(
            'stockrecords__partner_sku', flat=True))
        existing_upcs = set(products.values_list('upc', flat=True))
        existing_ids = existing_skus.union(existing_upcs)
        new_ids = ids - existing_ids

        if len(new_ids) == 0:
            raise forms.ValidationError(
                _("The products with SKUs or UPCs matching %s are already in"
                  " this range") % (', '.join(ids)))

        self.products = Product._default_manager.filter(
            Q(stockrecords__partner_sku__in=new_ids)
            | Q(upc__in=new_ids))
        if len(self.products) == 0:
            raise forms.ValidationError(
                _("No products exist with a SKU or UPC matching %s")
                % ", ".join(ids))

        found_skus = set(self.products.values_list(
            'stockrecords__partner_sku', flat=True))
        found_upcs = set(self.products.values_list('upc', flat=True))
        found_ids = found_skus.union(found_upcs)
        self.missing_skus = new_ids - found_ids
        self.duplicate_skus = existing_ids.intersection(ids)

        return raw

    def get_products(self):
        return self.products if hasattr(self, 'products') else []

    def get_missing_skus(self):
        return self.missing_skus

    def get_duplicate_skus(self):
        return self.duplicate_skus
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.forms:0
==oscar.apps.checkout.forms:0
from django import forms
from django.contrib.auth.forms import AuthenticationForm
from django.utils.translation import gettext_lazy as _

from oscar.apps.customer.utils import normalise_email
from oscar.core.compat import get_user_model
from oscar.core.loading import get_class, get_model
from oscar.forms.mixins import PhoneNumberMixin

User = get_user_model()
AbstractAddressForm = get_class('address.forms', 'AbstractAddressForm')
Country = get_model('address', 'Country')


class ShippingAddressForm(PhoneNumberMixin, AbstractAddressForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.adjust_country_field()

    def adjust_country_field(self):
        countries = Country._default_manager.filter(
            is_shipping_country=True)

        # No need to show country dropdown if there is only one option
        if len(countries) == 1:
            self.fields.pop('country', None)
            self.instance.country = countries[0]
        else:
            self.fields['country'].queryset = countries
            self.fields['country'].empty_label = None

    class Meta:
        model = get_model('order', 'shippingaddress')
        fields = [
            'title', 'first_name', 'last_name',
            'line1', 'line2', 'line3', 'line4',
            'state', 'postcode', 'country',
            'phone_number', 'notes',
        ]


class ShippingMethodForm(forms.Form):
    method_code = forms.ChoiceField(widget=forms.HiddenInput)

    def __init__(self, *args, **kwargs):
        methods = kwargs.pop('methods', [])
        super().__init__(*args, **kwargs)
        self.fields['method_code'].choices = ((m.code, m.name) for m in methods)


class GatewayForm(AuthenticationForm):
    username = forms.EmailField(label=_("My email address is"))
    GUEST, NEW, EXISTING = 'anonymous', 'new', 'existing'
    CHOICES = (
        (GUEST, _('I am a new customer and want to checkout as a guest')),
        (NEW, _('I am a new customer and want to create an account '
                'before checking out')),
        (EXISTING, _('I am a returning customer, and my password is')))
    options = forms.ChoiceField(widget=forms.widgets.RadioSelect,
                                choices=CHOICES, initial=GUEST)

    def clean_username(self):
        return normalise_email(self.cleaned_data['username'])

    def clean(self):
        if self.is_guest_checkout() or self.is_new_account_checkout():
            if 'password' in self.errors:
                del self.errors['password']
            if 'username' in self.cleaned_data:
                email = normalise_email(self.cleaned_data['username'])
                if User._default_manager.filter(email__iexact=email).exists():
                    msg = _("A user with that email address already exists")
                    self._errors["username"] = self.error_class([msg])
            return self.cleaned_data
        return super().clean()

    def is_guest_checkout(self):
        return self.cleaned_data.get('options', None) == self.GUEST

    def is_new_account_checkout(self):
        return self.cleaned_data.get('options', None) == self.NEW


# The BillingAddress form is in oscar.apps.payment.forms
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.communications.views:0
==oscar.apps.dashboard.communications.views:0
==oscar.apps.dashboard.communications.views:0
from django.contrib import messages
from django.contrib.sites.shortcuts import get_current_site
from django.template import TemplateSyntaxError
from django.utils.translation import gettext_lazy as _
from django.views import generic

from oscar.core.loading import get_class, get_model

CommunicationEventType = get_model('customer', 'CommunicationEventType')
CommunicationEventTypeForm = get_class('dashboard.communications.forms',
                                       'CommunicationEventTypeForm')
Dispatcher = get_class('customer.utils', 'Dispatcher')


class ListView(generic.ListView):
    model = CommunicationEventType
    template_name = 'oscar/dashboard/comms/list.html'
    context_object_name = 'commtypes'


class UpdateView(generic.UpdateView):
    model = CommunicationEventType
    form_class = CommunicationEventTypeForm
    template_name = 'oscar/dashboard/comms/detail.html'
    context_object_name = 'commtype'
    success_url = '.'
    slug_field = 'code'

    def form_invalid(self, form):
        messages.error(self.request,
                       _("The submitted form was not valid, please correct "
                         "the errors and resubmit"))
        return super().form_invalid(form)

    def form_valid(self, form):
        if 'send_preview' in self.request.POST:
            return self.send_preview(form)
        if 'show_preview' in self.request.POST:
            return self.show_preview(form)
        messages.success(self.request, _("Email saved"))
        return super().form_valid(form)

    def get_messages_context(self, form):
        ctx = {'user': self.request.user,
               'site': get_current_site(self.request)}
        ctx.update(form.get_preview_context())
        return ctx

    def show_preview(self, form):
        ctx = super().get_context_data()
        ctx['form'] = form

        commtype = form.save(commit=False)
        commtype_ctx = self.get_messages_context(form)
        try:
            msgs = commtype.get_messages(commtype_ctx)
        except TemplateSyntaxError as e:
            form.errors['__all__'] = form.error_class([str(e)])
            return self.render_to_response(ctx)

        ctx['show_preview'] = True
        ctx['preview'] = msgs
        return self.render_to_response(ctx)

    def send_preview(self, form):
        ctx = super().get_context_data()
        ctx['form'] = form

        commtype = form.save(commit=False)
        commtype_ctx = self.get_messages_context(form)
        try:
            msgs = commtype.get_messages(commtype_ctx)
        except TemplateSyntaxError as e:
            form.errors['__all__'] = form.error_class([str(e)])
            return self.render_to_response(ctx)

        email = form.cleaned_data['preview_email']
        dispatch = Dispatcher()
        dispatch.send_email_messages(email, msgs)
        messages.success(self.request,
                         _("A preview email has been sent to %s") % email)

        return self.render_to_response(ctx)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.admin:0
==oscar.apps.order.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

Order = get_model('order', 'Order')
OrderNote = get_model('order', 'OrderNote')
OrderStatusChange = get_model('order', 'OrderStatusChange')
CommunicationEvent = get_model('order', 'CommunicationEvent')
BillingAddress = get_model('order', 'BillingAddress')
ShippingAddress = get_model('order', 'ShippingAddress')
Line = get_model('order', 'Line')
LinePrice = get_model('order', 'LinePrice')
ShippingEvent = get_model('order', 'ShippingEvent')
ShippingEventType = get_model('order', 'ShippingEventType')
PaymentEvent = get_model('order', 'PaymentEvent')
PaymentEventType = get_model('order', 'PaymentEventType')
PaymentEventQuantity = get_model('order', 'PaymentEventQuantity')
LineAttribute = get_model('order', 'LineAttribute')
OrderDiscount = get_model('order', 'OrderDiscount')


class LineInline(admin.TabularInline):
    model = Line
    extra = 0


class OrderAdmin(admin.ModelAdmin):
    raw_id_fields = ['user', 'billing_address', 'shipping_address', ]
    list_display = ('number', 'total_incl_tax', 'site', 'user',
                    'billing_address', 'date_placed')
    readonly_fields = ('number', 'total_incl_tax', 'total_excl_tax',
                       'shipping_incl_tax', 'shipping_excl_tax')
    inlines = [LineInline]


class LineAdmin(admin.ModelAdmin):
    list_display = ('order', 'product', 'stockrecord', 'quantity')


class LinePriceAdmin(admin.ModelAdmin):
    list_display = ('order', 'line', 'price_incl_tax', 'quantity')


class ShippingEventTypeAdmin(admin.ModelAdmin):
    list_display = ('name', )


class PaymentEventQuantityInline(admin.TabularInline):
    model = PaymentEventQuantity
    extra = 0


class PaymentEventAdmin(admin.ModelAdmin):
    list_display = ('order', 'event_type', 'amount', 'num_affected_lines',
                    'date_created')
    inlines = [PaymentEventQuantityInline]


class PaymentEventTypeAdmin(admin.ModelAdmin):
    pass


class OrderDiscountAdmin(admin.ModelAdmin):
    readonly_fields = ('order', 'category', 'offer_id', 'offer_name',
                       'voucher_id', 'voucher_code', 'amount')
    list_display = ('order', 'category', 'offer', 'voucher',
                    'voucher_code', 'amount')


admin.site.register(Order, OrderAdmin)
admin.site.register(OrderNote)
admin.site.register(OrderStatusChange)
admin.site.register(ShippingAddress)
admin.site.register(Line, LineAdmin)
admin.site.register(LinePrice, LinePriceAdmin)
admin.site.register(ShippingEvent)
admin.site.register(ShippingEventType, ShippingEventTypeAdmin)
admin.site.register(PaymentEvent, PaymentEventAdmin)
admin.site.register(PaymentEventType, PaymentEventTypeAdmin)
admin.site.register(LineAttribute)
admin.site.register(OrderDiscount, OrderDiscountAdmin)
admin.site.register(CommunicationEvent)
admin.site.register(BillingAddress)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.models:3
==oscar.apps.catalogue.models:3
from oscar.apps.catalogue.abstract_models import *  # noqa
from oscar.core.loading import is_model_registered

__all__ = ['ProductAttributesContainer']


if not is_model_registered('catalogue', 'ProductClass'):
    class ProductClass(AbstractProductClass):
        pass

    __all__.append('ProductClass')


if not is_model_registered('catalogue', 'Category'):
    class Category(AbstractCategory):
        pass

    __all__.append('Category')


if not is_model_registered('catalogue', 'ProductCategory'):
    class ProductCategory(AbstractProductCategory):
        pass

    __all__.append('ProductCategory')


if not is_model_registered('catalogue', 'Product'):
    class Product(AbstractProduct):
        pass

    __all__.append('Product')


if not is_model_registered('catalogue', 'ProductRecommendation'):
    class ProductRecommendation(AbstractProductRecommendation):
        pass

    __all__.append('ProductRecommendation')


if not is_model_registered('catalogue', 'ProductAttribute'):
    class ProductAttribute(AbstractProductAttribute):
        pass

    __all__.append('ProductAttribute')


if not is_model_registered('catalogue', 'ProductAttributeValue'):
    class ProductAttributeValue(AbstractProductAttributeValue):
        pass

    __all__.append('ProductAttributeValue')


if not is_model_registered('catalogue', 'AttributeOptionGroup'):
    class AttributeOptionGroup(AbstractAttributeOptionGroup):
        pass

    __all__.append('AttributeOptionGroup')


if not is_model_registered('catalogue', 'AttributeOption'):
    class AttributeOption(AbstractAttributeOption):
        pass

    __all__.append('AttributeOption')


if not is_model_registered('catalogue', 'Option'):
    class Option(AbstractOption):
        pass

    __all__.append('Option')


if not is_model_registered('catalogue', 'ProductImage'):
    class ProductImage(AbstractProductImage):
        pass

    __all__.append('ProductImage')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.migrations.0001_initial:1
==oscar.apps.analytics.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings
from decimal import Decimal


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_views', models.PositiveIntegerField(default=0, verbose_name='Views')),
                ('num_basket_additions', models.PositiveIntegerField(default=0, verbose_name='Basket Additions')),
                ('num_purchases', models.PositiveIntegerField(default=0, db_index=True, verbose_name='Purchases')),
                ('score', models.FloatField(default=0.0, verbose_name='Score')),
            ],
            options={
                'ordering': ['-num_purchases'],
                'verbose_name_plural': 'Product records',
                'verbose_name': 'Product record',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserProductView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
            ],
            options={
                'verbose_name_plural': 'User product views',
                'verbose_name': 'User product view',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_product_views', models.PositiveIntegerField(default=0, verbose_name='Product Views')),
                ('num_basket_additions', models.PositiveIntegerField(default=0, verbose_name='Basket Additions')),
                ('num_orders', models.PositiveIntegerField(default=0, db_index=True, verbose_name='Orders')),
                ('num_order_lines', models.PositiveIntegerField(default=0, db_index=True, verbose_name='Order Lines')),
                ('num_order_items', models.PositiveIntegerField(default=0, db_index=True, verbose_name='Order Items')),
                ('total_spent', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Total Spent')),
                ('date_last_order', models.DateTimeField(blank=True, verbose_name='Last Order Date', null=True)),
                ('user', models.OneToOneField(verbose_name='User', to=settings.AUTH_USER_MODEL,
                                              on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'User records',
                'verbose_name': 'User record',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=255, db_index=True, verbose_name='Search term')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('user', models.ForeignKey(verbose_name='User', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'User search queries',
                'verbose_name': 'User search query',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.bankcards:0
==oscar.apps.payment.bankcards:0
VISA, VISA_ELECTRON, MASTERCARD, AMEX, MAESTRO, DISCOVER = (
    'Visa', 'Visa Electron', 'Mastercard', 'American Express',
    'Maestro', 'Discover')
DINERS_CLUB = 'Diners Club'
CHINA_UNIONPAY = 'China UnionPay'
JCB = 'JCB'
LASER = 'Laser'
SOLO = 'Solo'
SWITCH = 'Switch'

# List of (type, lengths, prefixes) tuples
# See http://en.wikipedia.org/wiki/Bank_card_number
CARD_TYPES = [
    (AMEX, (15,), ('34', '37')),
    (CHINA_UNIONPAY, (16, 17, 18, 19), ('62', '88')),
    (DINERS_CLUB, (14,), ('300', '301', '302', '303', '304', '305')),
    (DINERS_CLUB, (14,), ('36',)),
    (DISCOVER, (16,),
     list(map(str, list(range(622126, 622926))))
     + list(map(str, list(range(644, 650)))) + ['6011', '65']),
    (JCB, (16,), list(map(str, list(range(3528, 3590))))),
    (LASER, list(range(16, 20)), ('6304', '6706', '6771', '6709')),
    (MAESTRO, list(range(12, 20)), ('5018', '5020', '5038', '5893', '6304',
                                    '6759', '6761', '6762', '6763', '0604')),
    (MASTERCARD, (16,), list(map(str, list(range(51, 56))))),
    # Diners Club cards match the same pattern as Mastercard.  They are treated
    # as Mastercard normally so we put the mastercard pattern first.
    (DINERS_CLUB, (16,), ('54', '55')),
    (SOLO, list(range(16, 20)), ('6334', '6767')),
    (SWITCH, list(range(16, 20)), ('4903', '4905', '4911', '4936',
                                   '564182', '633110', '6333', '6759')),
    (VISA, (13, 16), ('4',)),
    (VISA_ELECTRON, (16,), ('4026', '417500', '4405', '4508',
                            '4844', '4913', '4917')),
]


def is_amex(number):
    return bankcard_type(number) == AMEX


def bankcard_type(card_number):
    """
    Return the type of a bankcard based on its card_number.

    Returns None is the card_number is not recognised.
    """
    def matches(card_number, lengths, prefixes):
        if len(card_number) not in lengths:
            return False
        for prefix in prefixes:
            if card_number.startswith(prefix):
                return True
        return False
    for card_type, lengths, prefixes in CARD_TYPES:
        if matches(card_number, lengths, prefixes):
            return card_type


def luhn(card_number):
    """
    Test whether a bankcard number passes the Luhn algorithm.
    """
    card_number = str(card_number)
    sum = 0
    num_digits = len(card_number)
    odd_even = num_digits & 1

    for i in range(0, num_digits):
        digit = int(card_number[i])
        if not ((i & 1) ^ odd_even):
            digit = digit * 2
        if digit > 9:
            digit = digit - 9
        sum = sum + digit

    return (sum % 10) == 0
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.views:0
==oscar.apps.offer.views:0
from django import http
from django.conf import settings
from django.shortcuts import get_object_or_404
from django.views.generic import ListView

from oscar.core.loading import get_model

ConditionalOffer = get_model('offer', 'ConditionalOffer')
Range = get_model('offer', 'Range')


class OfferListView(ListView):
    model = ConditionalOffer
    context_object_name = 'offers'
    template_name = 'oscar/offer/list.html'

    def get_queryset(self):
        """
        Return a queryset of active :py:class:`ConditionalOffer <oscar.apps.offer.abstract_models.AbstractConditionalOffer>`
        instances with an :py:attr:`offer_type <oscar.apps.offer.abstract_models.AbstractConditionalOffer.offer_type>`
        of :py:const:`ConditionalOffer.SITE <oscar.apps.offer.abstract_models.AbstractConditionalOffer.SITE>`.
        """  # noqa
        return ConditionalOffer.active.filter(
            offer_type=ConditionalOffer.SITE)


class OfferDetailView(ListView):
    context_object_name = 'products'
    template_name = 'oscar/offer/detail.html'
    paginate_by = settings.OSCAR_OFFERS_PER_PAGE

    def get(self, request, *args, **kwargs):
        try:
            self.offer = ConditionalOffer.active.select_related().get(
                slug=self.kwargs['slug'])
        except ConditionalOffer.DoesNotExist:
            raise http.Http404
        return super().get(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['offer'] = self.offer
        ctx['upsell_message'] = self.offer.get_upsell_message(
            self.request.basket)
        return ctx

    def get_queryset(self):
        """
        Return a queryset of all :py:class:`Product <oscar.apps.catalogue.abstract_models.AbstractProduct>`
        instances related to the :py:class:`ConditionalOffer <oscar.apps.offer.abstract_models.AbstractConditionalOffer>`.
        """  # noqa
        return self.offer.products()


class RangeDetailView(ListView):
    template_name = 'oscar/offer/range.html'
    context_object_name = 'products'

    def dispatch(self, request, *args, **kwargs):
        self.range = get_object_or_404(
            Range, slug=kwargs['slug'], is_public=True)
        return super().dispatch(
            request, *args, **kwargs)

    def get_queryset(self):
        """
        Return a queryset of all :py:class:`Product <oscar.apps.catalogue.abstract_models.AbstractProduct>`
        instances related to the :py:class:`Range <oscar.apps.offer.abstract_models.AbstractRange>`.
        """  # noqa
        products = self.range.all_products()
        return products.order_by('rangeproduct__display_order')

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['range'] = self.range
        return ctx
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.migrations.0001_initial:1
==oscar.apps.shipping.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
from decimal import Decimal
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrderAndItemCharges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Slug', max_length=128, editable=False, blank=True)),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description', blank=True)),
                ('price_per_order', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Price per order')),
                ('price_per_item', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Price per item')),
                ('free_shipping_threshold', models.DecimalField(max_digits=12, decimal_places=2, blank=True, verbose_name='Free Shipping', null=True)),
                ('countries', models.ManyToManyField(blank=True, verbose_name='Countries', to='address.Country', null=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Order and Item Charges',
                'verbose_name': 'Order and Item Charge',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WeightBand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upper_limit', models.DecimalField(verbose_name='Upper Limit', decimal_places=3, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], help_text='Enter upper limit of this weight band in kg. The lower limit will be determined by the other weight bands.', max_digits=12)),
                ('charge', models.DecimalField(max_digits=12, decimal_places=2, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Charge')),
            ],
            options={
                'ordering': ['method', 'upper_limit'],
                'verbose_name_plural': 'Weight Bands',
                'verbose_name': 'Weight Band',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WeightBased',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', unique=True, verbose_name='Slug', max_length=128, editable=False, blank=True)),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description', blank=True)),
                ('default_weight', models.DecimalField(validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Default Weight', default=Decimal('0.000'), max_digits=12, decimal_places=3, help_text='Default product weight in kg when no weight attribute is defined')),
                ('countries', models.ManyToManyField(blank=True, verbose_name='Countries', to='address.Country', null=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Weight-based Shipping Methods',
                'verbose_name': 'Weight-based Shipping Method',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='weightband',
            name='method',
            field=models.ForeignKey(verbose_name='Method', related_name='bands', to='shipping.WeightBased', on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.product_attributes:0
==oscar.apps.catalogue.product_attributes:0
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _


class ProductAttributesContainer(object):
    """
    Stolen liberally from django-eav, but simplified to be product-specific

    To set attributes on a product, use the `attr` attribute:

        product.attr.weight = 125
    """

    def __setstate__(self, state):
        self.__dict__ = state
        self.initialised = False

    def __init__(self, product):
        self.product = product
        self.initialised = False

    def initiate_attributes(self):
        values = self.get_values().select_related('attribute')
        for v in values:
            setattr(self, v.attribute.code, v.value)
        self.initialised = True

    def __getattr__(self, name):
        if not name.startswith('_') and not self.initialised:
            self.initiate_attributes()
            return getattr(self, name)
        raise AttributeError(
            _("%(obj)s has no attribute named '%(attr)s'") % {
                'obj': self.product.get_product_class(), 'attr': name})

    def validate_attributes(self):
        for attribute in self.get_all_attributes():
            value = getattr(self, attribute.code, None)
            if value is None:
                if attribute.required:
                    raise ValidationError(
                        _("%(attr)s attribute cannot be blank") %
                        {'attr': attribute.code})
            else:
                try:
                    attribute.validate_value(value)
                except ValidationError as e:
                    raise ValidationError(
                        _("%(attr)s attribute %(err)s") %
                        {'attr': attribute.code, 'err': e})

    def get_values(self):
        return self.product.attribute_values.all()

    def get_value_by_attribute(self, attribute):
        return self.get_values().get(attribute=attribute)

    def get_all_attributes(self):
        return self.product.get_product_class().attributes.all()

    def get_attribute_by_code(self, code):
        return self.get_all_attributes().get(code=code)

    def __iter__(self):
        return iter(self.get_values())

    def save(self):
        for attribute in self.get_all_attributes():
            if hasattr(self, attribute.code):
                value = getattr(self, attribute.code)
                attribute.save_value(self.product, value)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.reports:0
==oscar.apps.order.reports:0
import datetime

from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model

ReportGenerator = get_class('dashboard.reports.reports', 'ReportGenerator')
ReportCSVFormatter = get_class('dashboard.reports.reports',
                               'ReportCSVFormatter')
ReportHTMLFormatter = get_class('dashboard.reports.reports',
                                'ReportHTMLFormatter')
Order = get_model('order', 'Order')


class OrderReportCSVFormatter(ReportCSVFormatter):
    filename_template = 'orders-%s-to-%s.csv'

    def generate_csv(self, response, orders):
        writer = self.get_csv_writer(response)
        header_row = [_('Order number'),
                      _('Name'),
                      _('Email'),
                      _('Total incl. tax'),
                      _('Date placed')]
        writer.writerow(header_row)
        for order in orders:
            row = [
                order.number,
                '-' if order.is_anonymous else order.user.get_full_name(),
                order.email,
                order.total_incl_tax,
                self.format_datetime(order.date_placed)]
            writer.writerow(row)

    def filename(self, **kwargs):
        return self.filename_template % (
            kwargs['start_date'], kwargs['end_date'])


class OrderReportHTMLFormatter(ReportHTMLFormatter):
    filename_template = 'oscar/dashboard/reports/partials/order_report.html'


class OrderReportGenerator(ReportGenerator):
    code = 'order_report'
    description = _("Orders placed")
    date_range_field_name = 'date_placed'

    formatters = {
        'CSV_formatter': OrderReportCSVFormatter,
        'HTML_formatter': OrderReportHTMLFormatter,
    }

    def generate(self):
        qs = Order._default_manager.all()

        if self.start_date:
            qs = qs.filter(date_placed__gte=self.start_date)
        if self.end_date:
            qs = qs.filter(
                date_placed__lt=self.end_date + datetime.timedelta(days=1))

        additional_data = {
            'start_date': self.start_date,
            'end_date': self.end_date
        }

        return self.formatter.generate_response(qs, **additional_data)

    def is_available_to(self, user):
        return user.is_staff
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.migrations.0001_initial:1
==oscar.apps.address.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),
                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),
                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),
                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),
                ('name', models.CharField(max_length=128, verbose_name='Official name')),
                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),
                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),
            ],
            options={
                'ordering': ('-display_order', 'printable_name'),
                'verbose_name_plural': 'Countries',
                'verbose_name': 'Country',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),
                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),
                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),
                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),
                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),
                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),
                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['-num_orders'],
                'verbose_name_plural': 'User addresses',
                'verbose_name': 'User address',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='useraddress',
            unique_together=set([('user', 'hash')]),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.migrations.0001_initial:1
==oscar.apps.catalogue.reviews.migrations.0001_initial:1
==oscar.apps.catalogue.reviews.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion
import oscar.core.validators
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(verbose_name='Score', choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('title', models.CharField(max_length=255, verbose_name='Title', validators=[oscar.core.validators.non_whitespace])),
                ('body', models.TextField(verbose_name='Body')),
                ('name', models.CharField(max_length=255, verbose_name='Name', blank=True)),
                ('email', models.EmailField(max_length=75, verbose_name='Email', blank=True)),
                ('homepage', models.URLField(verbose_name='URL', blank=True)),
                ('status', models.SmallIntegerField(default=1, verbose_name='Status', choices=[(0, 'Requires moderation'), (1, 'Approved'), (2, 'Rejected')])),
                ('total_votes', models.IntegerField(default=0, verbose_name='Total Votes')),
                ('delta_votes', models.IntegerField(default=0, db_index=True, verbose_name='Delta Votes')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='catalogue.Product', null=True)),
                ('user', models.ForeignKey(null=True, related_name='reviews', to=settings.AUTH_USER_MODEL, blank=True, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['-delta_votes', 'id'],
                'verbose_name_plural': 'Product reviews',
                'verbose_name': 'Product review',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delta', models.SmallIntegerField(verbose_name='Delta', choices=[(1, 'Up'), (-1, 'Down')])),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(related_name='votes', to='reviews.ProductReview', on_delete=models.CASCADE)),
                ('user', models.ForeignKey(related_name='review_votes', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ['-date_created'],
                'verbose_name_plural': 'Votes',
                'verbose_name': 'Vote',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together=set([('user', 'review')]),
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together=set([('product', 'user')]),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.models:0
==oscar.apps.offer.models:0
from oscar.apps.offer.abstract_models import (
    AbstractBenefit, AbstractCondition, AbstractConditionalOffer,
    AbstractRange, AbstractRangeProduct, AbstractRangeProductFileUpload)
from oscar.apps.offer.results import (
    SHIPPING_DISCOUNT, ZERO_DISCOUNT, BasketDiscount, PostOrderAction,
    ShippingDiscount)
from oscar.core.loading import is_model_registered

__all__ = [
    'BasketDiscount', 'ShippingDiscount', 'PostOrderAction',
    'SHIPPING_DISCOUNT', 'ZERO_DISCOUNT'
]


if not is_model_registered('offer', 'ConditionalOffer'):
    class ConditionalOffer(AbstractConditionalOffer):
        pass

    __all__.append('ConditionalOffer')


if not is_model_registered('offer', 'Benefit'):
    class Benefit(AbstractBenefit):
        pass

    __all__.append('Benefit')


if not is_model_registered('offer', 'Condition'):
    class Condition(AbstractCondition):
        pass

    __all__.append('Condition')


if not is_model_registered('offer', 'Range'):
    class Range(AbstractRange):
        pass

    __all__.append('Range')


if not is_model_registered('offer', 'RangeProduct'):
    class RangeProduct(AbstractRangeProduct):
        pass

    __all__.append('RangeProduct')


if not is_model_registered('offer', 'RangeProductFileUpload'):
    class RangeProductFileUpload(AbstractRangeProductFileUpload):
        pass

    __all__.append('RangeProductFileUpload')


# Import the benefits and the conditions. Required after initializing the
# parent models to allow overriding them

from oscar.apps.offer.benefits import *  # noqa isort:skip
from oscar.apps.offer.conditions import *  # noqa isort:skip

from oscar.apps.offer.benefits import __all__ as benefit_classes  # noqa isort:skip
from oscar.apps.offer.conditions import __all__ as condition_classes  # noqa isort:skip

__all__.extend(benefit_classes)
__all__.extend(condition_classes)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.reports:0
==oscar.apps.offer.reports:0
import datetime
from decimal import Decimal as D

from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model

ReportGenerator = get_class('dashboard.reports.reports', 'ReportGenerator')
ReportCSVFormatter = get_class('dashboard.reports.reports',
                               'ReportCSVFormatter')
ReportHTMLFormatter = get_class('dashboard.reports.reports',
                                'ReportHTMLFormatter')
ConditionalOffer = get_model('offer', 'ConditionalOffer')
OrderDiscount = get_model('order', 'OrderDiscount')


class OfferReportCSVFormatter(ReportCSVFormatter):
    filename_template = 'conditional-offer-performance.csv'

    def generate_csv(self, response, offers):
        writer = self.get_csv_writer(response)
        header_row = [_('Offer'),
                      _('Total discount')
                      ]
        writer.writerow(header_row)

        for offer in offers:
            row = [offer, offer['total_discount']]
            writer.writerow(row)


class OfferReportHTMLFormatter(ReportHTMLFormatter):
    filename_template = 'oscar/dashboard/reports/partials/offer_report.html'


class OfferReportGenerator(ReportGenerator):
    code = 'conditional-offers'
    description = _('Offer performance')

    formatters = {
        'CSV_formatter': OfferReportCSVFormatter,
        'HTML_formatter': OfferReportHTMLFormatter,
    }

    def generate(self):
        qs = OrderDiscount._default_manager.all()
        if self.start_date:
            qs = qs.filter(order__date_placed__gte=self.start_date)
        if self.end_date:
            qs = qs.filter(order__date_placed__lt=self.end_date + datetime.timedelta(days=1))

        offer_discounts = {}
        for discount in qs:
            if discount.offer_id not in offer_discounts:
                try:
                    all_offers = ConditionalOffer._default_manager
                    offer = all_offers.get(id=discount.offer_id)
                except ConditionalOffer.DoesNotExist:
                    continue
                offer_discounts[discount.offer_id] = {
                    'offer': offer,
                    'total_discount': D('0.00')
                }
            offer_discounts[discount.offer_id]['total_discount'] \
                += discount.amount

        return self.formatter.generate_response(list(offer_discounts.values()))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.history:0
==oscar.apps.customer.history:0
import json

from django.conf import settings

from oscar.core.loading import get_model

Product = get_model('catalogue', 'Product')


def get(request):
    """
    Return a list of recently viewed products
    """
    ids = extract(request)

    # Reordering as the ID order gets messed up in the query
    product_dict = Product.objects.browsable().in_bulk(ids)
    ids.reverse()
    return [product_dict[id] for id in ids if id in product_dict]


def extract(request, response=None):
    """
    Extract the IDs of products in the history cookie
    """
    ids = []
    cookie_name = settings.OSCAR_RECENTLY_VIEWED_COOKIE_NAME
    if cookie_name in request.COOKIES:
        try:
            ids = json.loads(request.COOKIES[cookie_name])
        except ValueError:
            # This can occur if something messes up the cookie
            if response:
                response.delete_cookie(cookie_name)
        else:
            # Badly written web crawlers send garbage in double quotes
            if not isinstance(ids, list):
                ids = []
    return ids


def add(ids, new_id):
    """
    Add a new product ID to the list of product IDs
    """
    max_products = settings.OSCAR_RECENTLY_VIEWED_PRODUCTS
    if new_id in ids:
        ids.remove(new_id)
    ids.append(new_id)
    if (len(ids) > max_products):
        ids = ids[len(ids) - max_products:]
    return ids


def update(product, request, response):
    """
    Updates the cookies that store the recently viewed products
    removing possible duplicates.
    """
    ids = extract(request, response)
    updated_ids = add(ids, product.id)
    response.set_cookie(
        settings.OSCAR_RECENTLY_VIEWED_COOKIE_NAME,
        json.dumps(updated_ids),
        max_age=settings.OSCAR_RECENTLY_VIEWED_COOKIE_LIFETIME,
        secure=settings.OSCAR_RECENTLY_VIEWED_COOKIE_SECURE,
        httponly=True)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.apps:0
==oscar.apps.checkout.apps:0
from django.conf import settings
from django.conf.urls import url
from django.contrib.auth.decorators import login_required
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig
from oscar.core.loading import get_class


class CheckoutConfig(OscarConfig):
    label = 'checkout'
    name = 'oscar.apps.checkout'
    verbose_name = _('Checkout')

    namespace = 'checkout'

    def ready(self):
        self.index_view = get_class('checkout.views', 'IndexView')
        self.shipping_address_view = get_class('checkout.views', 'ShippingAddressView')
        self.user_address_update_view = get_class('checkout.views',
                                                  'UserAddressUpdateView')
        self.user_address_delete_view = get_class('checkout.views',
                                                  'UserAddressDeleteView')
        self.shipping_method_view = get_class('checkout.views', 'ShippingMethodView')
        self.payment_method_view = get_class('checkout.views', 'PaymentMethodView')
        self.payment_details_view = get_class('checkout.views', 'PaymentDetailsView')
        self.thankyou_view = get_class('checkout.views', 'ThankYouView')

    def get_urls(self):
        urls = [
            url(r'^$', self.index_view.as_view(), name='index'),

            # Shipping/user address views
            url(r'shipping-address/$',
                self.shipping_address_view.as_view(), name='shipping-address'),
            url(r'user-address/edit/(?P<pk>\d+)/$',
                self.user_address_update_view.as_view(),
                name='user-address-update'),
            url(r'user-address/delete/(?P<pk>\d+)/$',
                self.user_address_delete_view.as_view(),
                name='user-address-delete'),

            # Shipping method views
            url(r'shipping-method/$',
                self.shipping_method_view.as_view(), name='shipping-method'),

            # Payment views
            url(r'payment-method/$',
                self.payment_method_view.as_view(), name='payment-method'),
            url(r'payment-details/$',
                self.payment_details_view.as_view(), name='payment-details'),

            # Preview and thankyou
            url(r'preview/$',
                self.payment_details_view.as_view(preview=True),
                name='preview'),
            url(r'thank-you/$', self.thankyou_view.as_view(),
                name='thank-you'),
        ]
        return self.post_process_urls(urls)

    def get_url_decorator(self, pattern):
        if not settings.OSCAR_ALLOW_ANON_CHECKOUT:
            return login_required
        if pattern.name.startswith('user-address'):
            return login_required
        return None
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.formsets:0
==oscar.apps.basket.formsets:0
from django.forms.models import BaseModelFormSet, modelformset_factory
from django.utils.functional import cached_property

from oscar.core.loading import get_classes, get_model

Line = get_model('basket', 'line')
BasketLineForm, SavedLineForm = get_classes('basket.forms', ['BasketLineForm', 'SavedLineForm'])


class BaseBasketLineFormSet(BaseModelFormSet):

    def __init__(self, strategy, *args, **kwargs):
        self.strategy = strategy
        super().__init__(*args, **kwargs)

    def _construct_form(self, i, **kwargs):
        return super()._construct_form(
            i, strategy=self.strategy, **kwargs)

    def _should_delete_form(self, form):
        """
        Quantity of zero is treated as if the user checked the DELETE checkbox,
        which results in the basket line being deleted
        """
        if super()._should_delete_form(form):
            return True

        # If related form instance already removed, let's remove this form
        # as well.
        if not form.instance.id:
            return True
        if self.can_delete and 'quantity' in form.cleaned_data:
            return form.cleaned_data['quantity'] == 0

    @cached_property
    def forms_with_instances(self):
        return [f for f in self.forms if f.instance.id]

    def __iter__(self):
        """
        Skip forms with removed lines when iterating through the formset.
        """
        return iter(self.forms_with_instances)


BasketLineFormSet = modelformset_factory(
    Line, form=BasketLineForm, formset=BaseBasketLineFormSet, extra=0,
    can_delete=True)


class BaseSavedLineFormSet(BaseModelFormSet):

    def __init__(self, strategy, basket, *args, **kwargs):
        self.strategy = strategy
        self.basket = basket
        super().__init__(*args, **kwargs)

    def _construct_form(self, i, **kwargs):
        return super()._construct_form(
            i, strategy=self.strategy, basket=self.basket, **kwargs)


SavedLineFormSet = modelformset_factory(Line, form=SavedLineForm,
                                        formset=BaseSavedLineFormSet, extra=0,
                                        can_delete=True)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.apps:0
==oscar.apps.catalogue.apps:0
from django.apps import apps
from django.conf.urls import include, url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig
from oscar.core.loading import get_class


class CatalogueOnlyConfig(OscarConfig):
    label = 'catalogue'
    name = 'oscar.apps.catalogue'
    verbose_name = _('Catalogue')

    namespace = 'catalogue'

    def ready(self):
        from . import receivers  # noqa

        super().ready()

        self.detail_view = get_class('catalogue.views', 'ProductDetailView')
        self.catalogue_view = get_class('catalogue.views', 'CatalogueView')
        self.category_view = get_class('catalogue.views', 'ProductCategoryView')
        self.range_view = get_class('offer.views', 'RangeDetailView')

    def get_urls(self):
        urls = super().get_urls()
        urls += [
            url(r'^$', self.catalogue_view.as_view(), name='index'),
            url(r'^(?P<product_slug>[\w-]*)_(?P<pk>\d+)/$',
                self.detail_view.as_view(), name='detail'),
            url(r'^category/(?P<category_slug>[\w-]+(/[\w-]+)*)_(?P<pk>\d+)/$',
                self.category_view.as_view(), name='category'),
            url(r'^ranges/(?P<slug>[\w-]+)/$',
                self.range_view.as_view(), name='range'),
        ]
        return self.post_process_urls(urls)


class CatalogueReviewsOnlyConfig(OscarConfig):
    label = 'catalogue'
    name = 'oscar.apps.catalogue'
    verbose_name = _('Catalogue')

    def ready(self):
        from . import receivers  # noqa

        super().ready()

        self.reviews_app = apps.get_app_config('reviews')

    def get_urls(self):
        urls = super().get_urls()
        urls += [
            url(r'^(?P<product_slug>[\w-]*)_(?P<product_pk>\d+)/reviews/',
                include(self.reviews_app.urls[0])),
        ]
        return self.post_process_urls(urls)


class CatalogueConfig(CatalogueOnlyConfig, CatalogueReviewsOnlyConfig):
    """
    Composite class combining Products with Reviews
    """
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.reports.views:0
==oscar.apps.dashboard.reports.views:0
==oscar.apps.dashboard.reports.views:0
from django.conf import settings
from django.http import Http404, HttpResponseForbidden
from django.template.response import TemplateResponse
from django.utils.translation import gettext_lazy as _
from django.views.generic import ListView

from oscar.core.loading import get_class

ReportForm = get_class('dashboard.reports.forms', 'ReportForm')
GeneratorRepository = get_class('dashboard.reports.utils',
                                'GeneratorRepository')


class IndexView(ListView):
    template_name = 'oscar/dashboard/reports/index.html'
    paginate_by = settings.OSCAR_DASHBOARD_ITEMS_PER_PAGE
    context_object_name = 'objects'
    report_form_class = ReportForm
    generator_repository = GeneratorRepository

    def _get_generator(self, form):
        code = form.cleaned_data['report_type']

        repo = self.generator_repository()
        generator_cls = repo.get_generator(code)
        if not generator_cls:
            raise Http404()

        download = form.cleaned_data['download']
        formatter = 'CSV' if download else 'HTML'

        return generator_cls(start_date=form.cleaned_data['date_from'],
                             end_date=form.cleaned_data['date_to'],
                             formatter=formatter)

    def get(self, request, *args, **kwargs):
        if 'report_type' in request.GET:
            form = self.report_form_class(request.GET)
            if form.is_valid():
                generator = self._get_generator(form)
                if not generator.is_available_to(request.user):
                    return HttpResponseForbidden(_("You do not have access to"
                                                   " this report"))

                report = generator.generate()

                if form.cleaned_data['download']:
                    return report
                else:
                    self.set_list_view_attrs(generator, report)
                    context = self.get_context_data(object_list=self.queryset)
                    context['form'] = form
                    context['description'] = generator.report_description()
                    return self.render_to_response(context)
        else:
            form = self.report_form_class()
        return TemplateResponse(request, self.template_name, {'form': form})

    def set_list_view_attrs(self, generator, report):
        self.template_name = generator.filename()
        queryset = generator.filter_with_date_range(report)
        self.object_list = self.queryset = queryset
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.dashboard.apps:0
==oscar.apps.dashboard.apps:0
from django.apps import apps
from django.conf.urls import include, url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class DashboardConfig(OscarDashboardConfig):
    label = 'dashboard'
    name = 'oscar.apps.dashboard'
    verbose_name = _('Dashboard')

    namespace = 'dashboard'
    permissions_map = {
        'index': (['is_staff'], ['partner.dashboard_access']),
    }

    def ready(self):
        self.index_view = get_class('dashboard.views', 'IndexView')

        self.catalogue_app = apps.get_app_config('catalogue_dashboard')
        self.reports_app = apps.get_app_config('reports_dashboard')
        self.orders_app = apps.get_app_config('orders_dashboard')
        self.users_app = apps.get_app_config('users_dashboard')
        self.pages_app = apps.get_app_config('pages_dashboard')
        self.partners_app = apps.get_app_config('partners_dashboard')
        self.offers_app = apps.get_app_config('offers_dashboard')
        self.ranges_app = apps.get_app_config('ranges_dashboard')
        self.reviews_app = apps.get_app_config('reviews_dashboard')
        self.vouchers_app = apps.get_app_config('vouchers_dashboard')
        self.comms_app = apps.get_app_config('communications_dashboard')
        self.shipping_app = apps.get_app_config('shipping_dashboard')

    def get_urls(self):
        from django.contrib.auth import views as auth_views
        from django.contrib.auth.forms import AuthenticationForm

        urls = [
            url(r'^$', self.index_view.as_view(), name='index'),
            url(r'^catalogue/', include(self.catalogue_app.urls[0])),
            url(r'^reports/', include(self.reports_app.urls[0])),
            url(r'^orders/', include(self.orders_app.urls[0])),
            url(r'^users/', include(self.users_app.urls[0])),
            url(r'^pages/', include(self.pages_app.urls[0])),
            url(r'^partners/', include(self.partners_app.urls[0])),
            url(r'^offers/', include(self.offers_app.urls[0])),
            url(r'^ranges/', include(self.ranges_app.urls[0])),
            url(r'^reviews/', include(self.reviews_app.urls[0])),
            url(r'^vouchers/', include(self.vouchers_app.urls[0])),
            url(r'^comms/', include(self.comms_app.urls[0])),
            url(r'^shipping/', include(self.shipping_app.urls[0])),

            url(r'^login/$',
                auth_views.LoginView.as_view(template_name='oscar/dashboard/login.html',
                                             authentication_form=AuthenticationForm),
                name='login'),
            url(r'^logout/$', auth_views.LogoutView.as_view(next_page='/'), name='logout'),

        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.forms:0
==oscar.apps.catalogue.reviews.forms:0
==oscar.apps.catalogue.reviews.forms:0
from django import forms
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_model

Vote = get_model('reviews', 'vote')
ProductReview = get_model('reviews', 'productreview')


class ProductReviewForm(forms.ModelForm):
    name = forms.CharField(label=_('Name'), required=True)
    email = forms.EmailField(label=_('Email'), required=True)

    def __init__(self, product, user=None, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.product = product
        if user and user.is_authenticated:
            self.instance.user = user
            del self.fields['name']
            del self.fields['email']

    class Meta:
        model = ProductReview
        fields = ('title', 'score', 'body', 'name', 'email')


class VoteForm(forms.ModelForm):

    class Meta:
        model = Vote
        fields = ('delta',)

    def __init__(self, review, user, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.review = review
        self.instance.user = user

    @property
    def is_up_vote(self):
        return self.cleaned_data['delta'] == Vote.UP

    @property
    def is_down_vote(self):
        return self.cleaned_data['delta'] == Vote.DOWN


class SortReviewsForm(forms.Form):
    SORT_BY_SCORE = 'score'
    SORT_BY_RECENCY = 'recency'
    SORT_REVIEWS_BY_CHOICES = (
        (SORT_BY_SCORE, _('Score')),
        (SORT_BY_RECENCY, _('Recency')),
    )

    sort_by = forms.ChoiceField(
        choices=SORT_REVIEWS_BY_CHOICES,
        label=_('Sort by'),
        initial=SORT_BY_SCORE,
        required=False
    )
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0001_initial:1
==oscar.apps.basket.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='Open', max_length=128, verbose_name='Status', choices=[('Open', 'Open - currently active'), ('Merged', 'Merged - superceded by another basket'), ('Saved', 'Saved - for items to be purchased later'), ('Frozen', 'Frozen - the basket cannot be modified'), ('Submitted', 'Submitted - has been ordered at the checkout')])),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_merged', models.DateTimeField(blank=True, verbose_name='Date merged', null=True)),
                ('date_submitted', models.DateTimeField(blank=True, verbose_name='Date submitted', null=True)),
            ],
            options={
                'verbose_name_plural': 'Baskets',
                'verbose_name': 'Basket',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_reference', models.SlugField(max_length=128, verbose_name='Line Reference')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('price_currency', models.CharField(default='GBP', max_length=12, verbose_name='Currency')),
                ('price_excl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price excl. Tax', null=True)),
                ('price_incl_tax', models.DecimalField(max_digits=12, decimal_places=2, verbose_name='Price incl. Tax', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
            ],
            options={
                'verbose_name_plural': 'Basket lines',
                'verbose_name': 'Basket line',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LineAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='Value')),
                ('line', models.ForeignKey(verbose_name='Line', related_name='attributes', to='basket.Line', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Line attributes',
                'verbose_name': 'Line attribute',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.wishlists.migrations.0001_initial:1
==oscar.apps.wishlists.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('product', models.ForeignKey(null=True, verbose_name='Product', on_delete=django.db.models.deletion.SET_NULL, related_name='wishlists_lines', to='catalogue.Product', blank=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Wish list line',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WishList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default', max_length=255, verbose_name='Name')),
                ('key', models.CharField(max_length=6, unique=True, db_index=True, verbose_name='Key', editable=False)),
                ('visibility', models.CharField(default='Private', max_length=20, verbose_name='Visibility', choices=[('Private', 'Private - Only the owner can see the wish list'), ('Shared', 'Shared - Only the owner and people with access to the obfuscated link can see the wish list'), ('Public', 'Public - Everybody can see the wish list')])),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('owner', models.ForeignKey(verbose_name='Owner', related_name='wishlists', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('owner', 'date_created'),
                'abstract': False,
                'verbose_name': 'Wish List',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='line',
            name='wishlist',
            field=models.ForeignKey(verbose_name='Wish List', related_name='lines', to='wishlists.WishList', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='line',
            unique_together=set([('wishlist', 'product')]),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.offers.apps:0
==oscar.apps.dashboard.offers.apps:0
==oscar.apps.dashboard.offers.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class OffersDashboardConfig(OscarDashboardConfig):
    label = 'offers_dashboard'
    name = 'oscar.apps.dashboard.offers'
    verbose_name = _('Offers dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.list_view = get_class('dashboard.offers.views', 'OfferListView')
        self.metadata_view = get_class('dashboard.offers.views', 'OfferMetaDataView')
        self.condition_view = get_class('dashboard.offers.views', 'OfferConditionView')
        self.benefit_view = get_class('dashboard.offers.views', 'OfferBenefitView')
        self.restrictions_view = get_class('dashboard.offers.views',
                                           'OfferRestrictionsView')
        self.delete_view = get_class('dashboard.offers.views', 'OfferDeleteView')
        self.detail_view = get_class('dashboard.offers.views', 'OfferDetailView')

    def get_urls(self):
        urls = [
            url(r'^$', self.list_view.as_view(), name='offer-list'),
            # Creation
            url(r'^new/name-and-description/$', self.metadata_view.as_view(),
                name='offer-metadata'),
            url(r'^new/condition/$', self.condition_view.as_view(),
                name='offer-condition'),
            url(r'^new/incentive/$', self.benefit_view.as_view(),
                name='offer-benefit'),
            url(r'^new/restrictions/$', self.restrictions_view.as_view(),
                name='offer-restrictions'),
            # Update
            url(r'^(?P<pk>\d+)/name-and-description/$',
                self.metadata_view.as_view(update=True),
                name='offer-metadata'),
            url(r'^(?P<pk>\d+)/condition/$',
                self.condition_view.as_view(update=True),
                name='offer-condition'),
            url(r'^(?P<pk>\d+)/incentive/$',
                self.benefit_view.as_view(update=True),
                name='offer-benefit'),
            url(r'^(?P<pk>\d+)/restrictions/$',
                self.restrictions_view.as_view(update=True),
                name='offer-restrictions'),
            # Delete
            url(r'^(?P<pk>\d+)/delete/$',
                self.delete_view.as_view(), name='offer-delete'),
            # Stats
            url(r'^(?P<pk>\d+)/$', self.detail_view.as_view(),
                name='offer-detail'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.auth_backends:0
==oscar.apps.customer.auth_backends:0
from django.contrib.auth.backends import ModelBackend
from django.core.exceptions import ImproperlyConfigured

from oscar.apps.customer.utils import normalise_email
from oscar.core.compat import get_user_model

User = get_user_model()

if hasattr(User, 'REQUIRED_FIELDS'):
    if not (User.USERNAME_FIELD == 'email' or 'email' in User.REQUIRED_FIELDS):
        raise ImproperlyConfigured(
            "EmailBackend: Your User model must have an email"
            " field with blank=False")


class EmailBackend(ModelBackend):
    """
    Custom auth backend that uses an email address and password

    For this to work, the User model must have an 'email' field
    """

    def _authenticate(self, request, email=None, password=None, *args, **kwargs):
        if email is None:
            if 'username' not in kwargs or kwargs['username'] is None:
                return None
            clean_email = normalise_email(kwargs['username'])
        else:
            clean_email = normalise_email(email)

        # Check if we're dealing with an email address
        if '@' not in clean_email:
            return None

        # Since Django doesn't enforce emails to be unique, we look for all
        # matching users and try to authenticate them all. Note that we
        # intentionally allow multiple users with the same email address
        # (has been a requirement in larger system deployments),
        # we just enforce that they don't share the same password.
        # We make a case-insensitive match when looking for emails.
        matching_users = User.objects.filter(email__iexact=clean_email)
        authenticated_users = [
            user for user in matching_users if (user.check_password(password) and self.user_can_authenticate(user))]
        if len(authenticated_users) == 1:
            # Happy path
            return authenticated_users[0]
        elif len(authenticated_users) > 1:
            # This is the problem scenario where we have multiple users with
            # the same email address AND password. We can't safely authenticate
            # either.
            raise User.MultipleObjectsReturned(
                "There are multiple users with the given email address and "
                "password")
        return None

    def authenticate(self, *args, **kwargs):
        return self._authenticate(*args, **kwargs)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.pages.forms:0
==oscar.apps.dashboard.pages.forms:0
==oscar.apps.dashboard.pages.forms:0
from django import forms
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.core.loading import get_model
from oscar.core.validators import URLDoesNotExistValidator

FlatPage = get_model('flatpages', 'FlatPage')


class PageSearchForm(forms.Form):
    """
    Search form to filter pages by *title.
    """
    title = forms.CharField(
        required=False, label=pgettext_lazy("Page title", "Title"))


class PageUpdateForm(forms.ModelForm):
    """
    Update form to create/update flatpages. It provides a *title*, *url*,
    and *content* field. The specified URL will be validated and check if
    the same URL already exists in the system.
    """
    url = forms.RegexField(
        label=_("URL"),
        max_length=100,
        regex=r'^[-\w/\.~]+$',
        required=False,
        help_text=_("Example: '/about/contact/'."),
        error_messages={
            "invalid": _(
                "This value must contain only letters, numbers, dots, "
                "underscores, dashes, slashes or tildes."
            ),
        },
    )

    def clean_url(self):
        """
        Validate the input for field *url* checking if the specified
        URL already exists. If it is an actual update and the URL has
        not been changed, validation will be skipped.

        Returns cleaned URL or raises an exception.
        """
        url = self.cleaned_data['url']
        if 'url' in self.changed_data:
            if not url.endswith('/'):
                url += '/'
            URLDoesNotExistValidator()(url)
        return url

    class Meta:
        model = FlatPage
        fields = ('title', 'url', 'content')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.partners.apps:0
==oscar.apps.dashboard.partners.apps:0
==oscar.apps.dashboard.partners.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class PartnersDashboardConfig(OscarDashboardConfig):
    label = 'partners_dashboard'
    name = 'oscar.apps.dashboard.partners'
    verbose_name = _('Partners dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.list_view = get_class('dashboard.partners.views', 'PartnerListView')
        self.create_view = get_class('dashboard.partners.views', 'PartnerCreateView')
        self.manage_view = get_class('dashboard.partners.views', 'PartnerManageView')
        self.delete_view = get_class('dashboard.partners.views', 'PartnerDeleteView')

        self.user_link_view = get_class('dashboard.partners.views',
                                        'PartnerUserLinkView')
        self.user_unlink_view = get_class('dashboard.partners.views',
                                          'PartnerUserUnlinkView')
        self.user_create_view = get_class('dashboard.partners.views',
                                          'PartnerUserCreateView')
        self.user_select_view = get_class('dashboard.partners.views',
                                          'PartnerUserSelectView')
        self.user_update_view = get_class('dashboard.partners.views',
                                          'PartnerUserUpdateView')

    def get_urls(self):
        urls = [
            url(r'^$', self.list_view.as_view(), name='partner-list'),
            url(r'^create/$', self.create_view.as_view(),
                name='partner-create'),
            url(r'^(?P<pk>\d+)/$', self.manage_view.as_view(),
                name='partner-manage'),
            url(r'^(?P<pk>\d+)/delete/$', self.delete_view.as_view(),
                name='partner-delete'),

            url(r'^(?P<partner_pk>\d+)/users/add/$',
                self.user_create_view.as_view(),
                name='partner-user-create'),
            url(r'^(?P<partner_pk>\d+)/users/select/$',
                self.user_select_view.as_view(),
                name='partner-user-select'),
            url(r'^(?P<partner_pk>\d+)/users/(?P<user_pk>\d+)/link/$',
                self.user_link_view.as_view(), name='partner-user-link'),
            url(r'^(?P<partner_pk>\d+)/users/(?P<user_pk>\d+)/unlink/$',
                self.user_unlink_view.as_view(), name='partner-user-unlink'),
            url(r'^(?P<partner_pk>\d+)/users/(?P<user_pk>\d+)/update/$',
                self.user_update_view.as_view(),
                name='partner-user-update'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.vouchers.apps:0
==oscar.apps.dashboard.vouchers.apps:0
==oscar.apps.dashboard.vouchers.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class VouchersDashboardConfig(OscarDashboardConfig):
    label = 'vouchers_dashboard'
    name = 'oscar.apps.dashboard.vouchers'
    verbose_name = _('Vouchers dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.list_view = get_class('dashboard.vouchers.views', 'VoucherListView')
        self.create_view = get_class('dashboard.vouchers.views', 'VoucherCreateView')
        self.update_view = get_class('dashboard.vouchers.views', 'VoucherUpdateView')
        self.delete_view = get_class('dashboard.vouchers.views', 'VoucherDeleteView')
        self.stats_view = get_class('dashboard.vouchers.views', 'VoucherStatsView')

        self.set_list_view = get_class(
            'dashboard.vouchers.views', 'VoucherSetListView')
        self.set_create_view = get_class(
            'dashboard.vouchers.views', 'VoucherSetCreateView')
        self.set_update_view = get_class(
            'dashboard.vouchers.views', 'VoucherSetUpdateView')
        self.set_detail_view = get_class(
            'dashboard.vouchers.views', 'VoucherSetDetailView')
        self.set_download_view = get_class(
            'dashboard.vouchers.views', 'VoucherSetDownloadView')

    def get_urls(self):
        urls = [
            url(r'^$', self.list_view.as_view(), name='voucher-list'),
            url(r'^create/$', self.create_view.as_view(),
                name='voucher-create'),
            url(r'^update/(?P<pk>\d+)/$', self.update_view.as_view(),
                name='voucher-update'),
            url(r'^delete/(?P<pk>\d+)/$', self.delete_view.as_view(),
                name='voucher-delete'),
            url(r'^stats/(?P<pk>\d+)/$', self.stats_view.as_view(),
                name='voucher-stats'),

            url(r'^sets$', self.set_list_view.as_view(),
                name='voucher-set-list'),
            url(r'^sets/create/$', self.set_create_view.as_view(),
                name='voucher-set-create'),
            url(r'^sets/update/(?P<pk>\d+)/$', self.set_update_view.as_view(),
                name='voucher-set-update'),
            url(r'^sets/(?P<pk>\d+)/$', self.set_detail_view.as_view(),
                name='voucher-set'),
            url(r'^sets/(?P<pk>\d+)/download$', self.set_download_view.as_view(),
                name='voucher-set-download'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.custom:0
==oscar.apps.offer.custom:0
from django.core import exceptions
from django.db import IntegrityError

from oscar.core.loading import get_model

Benefit = get_model('offer', 'Benefit')
Condition = get_model('offer', 'Condition')
Range = get_model('offer', 'Range')


def _class_path(klass):
    return '%s.%s' % (klass.__module__, klass.__name__)


def create_range(range_class):
    """
    Create a custom range instance from the passed range class

    This function creates the appropriate database record for this custom
    range, including setting the class path for the custom proxy class.
    """
    if not hasattr(range_class, 'name'):
        raise exceptions.ValidationError(
            "A custom range must have a name attribute")

    # Ensure range name is text (not gettext wrapper)
    if range_class.name.__class__.__name__ == '__proxy__':
        raise exceptions.ValidationError(
            "Custom ranges must have text names (not gettext proxies)")

    try:
        return Range.objects.create(
            name=range_class.name, proxy_class=_class_path(range_class))
    except IntegrityError:
        raise ValueError("The passed range already exists in the database.")


def create_condition(condition_class, **kwargs):
    """
    Create a custom condition instance
    """
    return Condition.objects.create(
        proxy_class=_class_path(condition_class), **kwargs)


def create_benefit(benefit_class, **kwargs):
    """
    Create a custom benefit instance
    """
    # The custom benefit_class must override __str__ and description to
    # avoid a recursion error
    if benefit_class.description is Benefit.description:
        raise RuntimeError("Your custom benefit must implement its own "
                           "'description' property")
    return Benefit.objects.create(
        proxy_class=_class_path(benefit_class), **kwargs)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.migrations.0001_initial:1
==oscar.apps.voucher.migrations.0001_initial:1
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings
from decimal import Decimal


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0001_initial'),
        ('offer', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(verbose_name='Name', max_length=128, help_text='This will be shown in the checkout and basket once the voucher is entered')),
                ('code', models.CharField(max_length=128, verbose_name='Code', unique=True, db_index=True, help_text='Case insensitive / No spaces allowed')),
                ('usage', models.CharField(default='Multi-use', max_length=128, verbose_name='Usage', choices=[('Single use', 'Can be used once by one customer'), ('Multi-use', 'Can be used multiple times by multiple customers'), ('Once per customer', 'Can only be used once per customer')])),
                ('start_datetime', models.DateTimeField(verbose_name='Start datetime')),
                ('end_datetime', models.DateTimeField(verbose_name='End datetime')),
                ('num_basket_additions', models.PositiveIntegerField(default=0, verbose_name='Times added to basket')),
                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Times on orders')),
                ('total_discount', models.DecimalField(default=Decimal('0.00'), max_digits=12, decimal_places=2, verbose_name='Total discount')),
                ('date_created', models.DateField(auto_now_add=True)),
                ('offers', models.ManyToManyField(related_name='vouchers', verbose_name='Offers', to='offer.ConditionalOffer')),
            ],
            options={
                'verbose_name_plural': 'Vouchers',
                'get_latest_by': 'date_created',
                'verbose_name': 'Voucher',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VoucherApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now_add=True, verbose_name='Date Created')),
                ('order', models.ForeignKey(verbose_name='Order', to='order.Order', on_delete=models.CASCADE)),
                ('user', models.ForeignKey(null=True, verbose_name='User', to=settings.AUTH_USER_MODEL, blank=True, on_delete=models.CASCADE)),
                ('voucher', models.ForeignKey(verbose_name='Voucher', related_name='applications', to='voucher.Voucher', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name_plural': 'Voucher Applications',
                'verbose_name': 'Voucher Application',
                'abstract': False,
            },
            bases=(models.Model,),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.shipping.apps:0
==oscar.apps.dashboard.shipping.apps:0
==oscar.apps.dashboard.shipping.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class ShippingDashboardConfig(OscarDashboardConfig):
    label = 'shipping_dashboard'
    name = 'oscar.apps.dashboard.shipping'
    verbose_name = _('Shipping dashboard')

    default_permissions = ['is_staff']

    def ready(self):
        self.weight_method_list_view = get_class(
            'dashboard.shipping.views', 'WeightBasedListView')
        self.weight_method_create_view = get_class(
            'dashboard.shipping.views', 'WeightBasedCreateView')
        self.weight_method_edit_view = get_class(
            'dashboard.shipping.views', 'WeightBasedUpdateView')
        self.weight_method_delete_view = get_class(
            'dashboard.shipping.views', 'WeightBasedDeleteView')
        # This doubles as the weight_band create view
        self.weight_method_detail_view = get_class(
            'dashboard.shipping.views', 'WeightBasedDetailView')
        self.weight_band_edit_view = get_class(
            'dashboard.shipping.views', 'WeightBandUpdateView')
        self.weight_band_delete_view = get_class(
            'dashboard.shipping.views', 'WeightBandDeleteView')

    def get_urls(self):
        urlpatterns = [
            url(r'^weight-based/$', self.weight_method_list_view.as_view(),
                name='shipping-method-list'),
            url(r'^weight-based/create/$',
                self.weight_method_create_view.as_view(),
                name='shipping-method-create'),
            url(r'^weight-based/(?P<pk>\d+)/$',
                self.weight_method_detail_view.as_view(),
                name='shipping-method-detail'),
            url(r'^weight-based/(?P<pk>\d+)/edit/$',
                self.weight_method_edit_view.as_view(),
                name='shipping-method-edit'),
            url(r'^weight-based/(?P<pk>\d+)/delete/$',
                self.weight_method_delete_view.as_view(),
                name='shipping-method-delete'),
            url(r'^weight-based/(?P<method_pk>\d+)/bands/(?P<pk>\d+)/$',
                self.weight_band_edit_view.as_view(),
                name='shipping-method-band-edit'),
            url(r'^weight-based/(?P<method_pk>\d+)/bands/(?P<pk>\d+)/delete/$',
                self.weight_band_delete_view.as_view(),
                name='shipping-method-band-delete'),
        ]
        return self.post_process_urls(urlpatterns)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.dashboard.menu:0
==oscar.apps.dashboard.menu:0
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.utils.module_loading import import_string

from oscar.core.loading import get_class

Node = get_class('dashboard.nav', 'Node')


def get_nodes(user):
    """
    Return the visible navigation nodes for the passed user
    """
    all_nodes = create_menu(settings.OSCAR_DASHBOARD_NAVIGATION)
    visible_nodes = []
    for node in all_nodes:
        filtered_node = node.filter(user)
        # don't append headings without children
        if filtered_node and (filtered_node.has_children()
                              or not filtered_node.is_heading):
            visible_nodes.append(filtered_node)
    return visible_nodes


def create_menu(menu_items, parent=None):
    """
    Create the navigation nodes based on a passed list of dicts
    """
    nodes = []
    default_fn = import_string(
        settings.OSCAR_DASHBOARD_DEFAULT_ACCESS_FUNCTION)
    for menu_dict in menu_items:
        try:
            label = menu_dict['label']
        except KeyError:
            raise ImproperlyConfigured(
                "No label specified for menu item in dashboard")

        children = menu_dict.get('children', [])
        if children:
            node = Node(label=label, icon=menu_dict.get('icon', None),
                        access_fn=menu_dict.get('access_fn', default_fn))
            create_menu(children, parent=node)
        else:
            node = Node(label=label, icon=menu_dict.get('icon', None),
                        url_name=menu_dict.get('url_name', None),
                        url_kwargs=menu_dict.get('url_kwargs', None),
                        url_args=menu_dict.get('url_args', None),
                        access_fn=menu_dict.get('access_fn', default_fn))
        if parent is None:
            nodes.append(node)
        else:
            parent.add_child(node)
    return nodes
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.exceptions:0
==oscar.apps.payment.exceptions:0
class PaymentError(Exception):
    pass


class UserCancelled(PaymentError):
    """
    Exception for when a customer decides to cancel their payment
    after the process has started -- for example if they press a "Cancel"
    button on a third-party payment platform.
    """
    pass


class TransactionDeclined(PaymentError):
    pass


class GatewayError(PaymentError):
    pass


class InvalidGatewayRequestError(PaymentError):
    pass


class InsufficientPaymentSources(PaymentError):
    """
    Exception for when a user attempts to checkout without specifying enough
    payment sources to cover the entire order total.

    Eg. When selecting an allocation off a giftcard but not specifying a
    bankcard to take the remainder from.
    """
    pass


class RedirectRequired(PaymentError):
    """
    Exception to be used when payment processsing requires a redirect
    """

    def __init__(self, url):
        self.url = url


class UnableToTakePayment(PaymentError):
    """
    Exception to be used for ANTICIPATED payment errors (eg card number wrong,
    expiry date has passed).  The message passed here will be shown to the end
    user.
    """
    pass
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0002_auto_20140827_1705:1
==oscar.apps.basket.migrations.0002_auto_20140827_1705:1
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('partner', '0001_initial'),
        ('catalogue', '0001_initial'),
        ('basket', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='lineattribute',
            name='option',
            field=models.ForeignKey(verbose_name='Option', to='catalogue.Option', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='line',
            name='basket',
            field=models.ForeignKey(verbose_name='Basket', related_name='lines', to='basket.Basket', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='line',
            name='product',
            field=models.ForeignKey(verbose_name='Product', related_name='basket_lines', to='catalogue.Product', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='line',
            name='stockrecord',
            field=models.ForeignKey(related_name='basket_lines', to='partner.StockRecord', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='line',
            unique_together=set([('basket', 'line_reference')]),
        ),
        migrations.AddField(
            model_name='basket',
            name='owner',
            field=models.ForeignKey(verbose_name='Owner', related_name='baskets', to=settings.AUTH_USER_MODEL, null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.users.apps:0
==oscar.apps.dashboard.users.apps:0
==oscar.apps.dashboard.users.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class UsersDashboardConfig(OscarDashboardConfig):
    label = 'users_dashboard'
    name = 'oscar.apps.dashboard.users'
    verbose_name = _('Users dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.index_view = get_class('dashboard.users.views', 'IndexView')
        self.user_detail_view = get_class('dashboard.users.views', 'UserDetailView')
        self.password_reset_view = get_class('dashboard.users.views',
                                             'PasswordResetView')
        self.alert_list_view = get_class('dashboard.users.views',
                                         'ProductAlertListView')
        self.alert_update_view = get_class('dashboard.users.views',
                                           'ProductAlertUpdateView')
        self.alert_delete_view = get_class('dashboard.users.views',
                                           'ProductAlertDeleteView')

    def get_urls(self):
        urls = [
            url(r'^$', self.index_view.as_view(), name='users-index'),
            url(r'^(?P<pk>-?\d+)/$',
                self.user_detail_view.as_view(), name='user-detail'),
            url(r'^(?P<pk>-?\d+)/password-reset/$',
                self.password_reset_view.as_view(),
                name='user-password-reset'),

            # Alerts
            url(r'^alerts/$',
                self.alert_list_view.as_view(),
                name='user-alert-list'),
            url(r'^alerts/(?P<pk>-?\d+)/delete/$',
                self.alert_delete_view.as_view(),
                name='user-alert-delete'),
            url(r'^alerts/(?P<pk>-?\d+)/update/$',
                self.alert_update_view.as_view(),
                name='user-alert-update'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.reports:0
==oscar.apps.voucher.reports:0
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model

ReportGenerator = get_class('dashboard.reports.reports', 'ReportGenerator')
ReportCSVFormatter = get_class(
    'dashboard.reports.reports', 'ReportCSVFormatter')
ReportHTMLFormatter = get_class(
    'dashboard.reports.reports', 'ReportHTMLFormatter')
Voucher = get_model('voucher', 'Voucher')


class VoucherReportCSVFormatter(ReportCSVFormatter):
    filename_template = 'voucher-performance.csv'

    def generate_csv(self, response, vouchers):
        writer = self.get_csv_writer(response)
        header_row = [_('Voucher code'),
                      _('Added to a basket'),
                      _('Used in an order'),
                      _('Total discount')]
        writer.writerow(header_row)

        for voucher in vouchers:
            row = [voucher.code,
                   voucher.num_basket_additions,
                   voucher.num_orders,
                   voucher.total_discount]
            writer.writerow(row)


class VoucherReportHTMLFormatter(ReportHTMLFormatter):
    filename_template = 'oscar/dashboard/reports/partials/voucher_report.html'


class VoucherReportGenerator(ReportGenerator):

    code = 'vouchers'
    description = _('Voucher performance')

    formatters = {
        'CSV_formatter': VoucherReportCSVFormatter,
        'HTML_formatter': VoucherReportHTMLFormatter}

    def generate(self):
        vouchers = Voucher._default_manager.all()
        return self.formatter.generate_response(vouchers)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.orders.apps:0
==oscar.apps.dashboard.orders.apps:0
==oscar.apps.dashboard.orders.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class OrdersDashboardConfig(OscarDashboardConfig):
    label = 'orders_dashboard'
    name = 'oscar.apps.dashboard.orders'
    verbose_name = _('Orders dashboard')

    default_permissions = ['is_staff', ]
    permissions_map = {
        'order-list': (['is_staff'], ['partner.dashboard_access']),
        'order-stats': (['is_staff'], ['partner.dashboard_access']),
        'order-detail': (['is_staff'], ['partner.dashboard_access']),
        'order-detail-note': (['is_staff'], ['partner.dashboard_access']),
        'order-line-detail': (['is_staff'], ['partner.dashboard_access']),
        'order-shipping-address': (['is_staff'], ['partner.dashboard_access']),
    }

    def ready(self):
        self.order_list_view = get_class('dashboard.orders.views', 'OrderListView')
        self.order_detail_view = get_class('dashboard.orders.views', 'OrderDetailView')
        self.shipping_address_view = get_class('dashboard.orders.views',
                                               'ShippingAddressUpdateView')
        self.line_detail_view = get_class('dashboard.orders.views', 'LineDetailView')
        self.order_stats_view = get_class('dashboard.orders.views', 'OrderStatsView')

    def get_urls(self):
        urls = [
            url(r'^$', self.order_list_view.as_view(), name='order-list'),
            url(r'^statistics/$', self.order_stats_view.as_view(),
                name='order-stats'),
            url(r'^(?P<number>[-\w]+)/$',
                self.order_detail_view.as_view(), name='order-detail'),
            url(r'^(?P<number>[-\w]+)/notes/(?P<note_id>\d+)/$',
                self.order_detail_view.as_view(), name='order-detail-note'),
            url(r'^(?P<number>[-\w]+)/lines/(?P<line_id>\d+)/$',
                self.line_detail_view.as_view(), name='order-line-detail'),
            url(r'^(?P<number>[-\w]+)/shipping-address/$',
                self.shipping_address_view.as_view(),
                name='order-shipping-address'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.users.forms:0
==oscar.apps.dashboard.users.forms:0
==oscar.apps.dashboard.users.forms:0
from django import forms
from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy

from oscar.core.compat import get_user_model
from oscar.core.loading import get_model

User = get_user_model()
ProductAlert = get_model('customer', 'ProductAlert')


class UserSearchForm(forms.Form):
    email = forms.CharField(required=False, label=_("Email"))
    name = forms.CharField(
        required=False, label=pgettext_lazy("User's name", "Name"))


class ProductAlertUpdateForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        alert = kwargs['instance']
        if alert.user:
            # Remove 'unconfirmed' from list of available choices when editing
            # an alert for a real user
            choices = self.fields['status'].choices
            del choices[0]
            self.fields['status'].choices = choices

    class Meta:
        model = ProductAlert
        fields = [
            'status',
        ]


class ProductAlertSearchForm(forms.Form):
    STATUS_CHOICES = (
        ('', '------------'),
    ) + ProductAlert.STATUS_CHOICES

    status = forms.ChoiceField(required=False, choices=STATUS_CHOICES,
                               label=_('Status'))
    name = forms.CharField(required=False, label=_('Name'))
    email = forms.EmailField(required=False, label=_('Email'))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.categories:0
==oscar.apps.catalogue.categories:0
from oscar.core.loading import get_model

Category = get_model('catalogue', 'category')


def create_from_sequence(bits):
    """
    Create categories from an iterable
    """
    if len(bits) == 1:
        # Get or create root node
        name = bits[0]
        try:
            # Category names should be unique at the depth=1
            root = Category.objects.get(depth=1, name=name)
        except Category.DoesNotExist:
            root = Category.add_root(name=name)
        except Category.MultipleObjectsReturned:
            raise ValueError((
                "There are more than one categories with name "
                "%s at depth=1") % name)
        return [root]
    else:
        parents = create_from_sequence(bits[:-1])
        parent, name = parents[-1], bits[-1]
        try:
            child = parent.get_children().get(name=name)
        except Category.DoesNotExist:
            child = parent.add_child(name=name)
        except Category.MultipleObjectsReturned:
            raise ValueError((
                "There are more than one categories with name "
                "%s which are children of %s") % (name, parent))
        parents.append(child)
        return parents


def create_from_breadcrumbs(breadcrumb_str, separator='>'):
    """
    Create categories from a breadcrumb string
    """
    category_names = [x.strip() for x in breadcrumb_str.split(separator)]
    categories = create_from_sequence(category_names)
    return categories[-1]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0003_data_migration_slugs:1
==oscar.apps.catalogue.migrations.0003_data_migration_slugs:1
from __future__ import unicode_literals

from django.db import models, migrations

from oscar.core.loading import get_model

# Django database migrations require us to fetch the category model
# via apps.get_model to get an instance of the model at this point
# in time of migrations. That snapshot does not expose custom
# properties, only whatever is represented in the migration files.
# But because for our slug munging below, we need to know the slug
# separator, which is a custom property, we also load the actual
# ORM model. We MUST NOT use that to save data, we just fetch
# the property.

ORMCategory = get_model('catalogue', 'Category')


def remove_ancestor_slugs(apps, schema_editor):
    MigrationCategory = apps.get_model('catalogue', 'Category')
    for category in MigrationCategory.objects.all():
        category.slug = category.slug.split(ORMCategory._slug_separator)[-1]
        category.save()


def add_ancestor_slugs(apps, schema_editor):
    MigrationCategory = apps.get_model('catalogue', 'Category')
    for category in MigrationCategory.objects.all():
        orm_category = ORMCategory.objects.get(pk=category.pk)
        category.slug = orm_category.full_slug
        category.save()


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0002_auto_20150217_1221'),
    ]

    operations = [
        migrations.RunPython(remove_ancestor_slugs, add_ancestor_slugs),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.reviews.forms:0
==oscar.apps.dashboard.reviews.forms:0
==oscar.apps.dashboard.reviews.forms:0
from django import forms
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_model, get_class


ProductReview = get_model('reviews', 'productreview')
DatePickerInput = get_class('oscar.forms.widgets', 'DatePickerInput')


class DashboardProductReviewForm(forms.ModelForm):
    choices = (
        (ProductReview.APPROVED, _('Approved')),
        (ProductReview.REJECTED, _('Rejected')),
    )
    status = forms.ChoiceField(choices=choices, label=_("Status"))

    class Meta:
        model = ProductReview
        fields = ('title', 'body', 'score', 'status')


class ProductReviewSearchForm(forms.Form):
    STATUS_CHOICES = (
        ('', '------------'),
    ) + ProductReview.STATUS_CHOICES
    keyword = forms.CharField(required=False, label=_("Keyword"))
    status = forms.ChoiceField(required=False, choices=STATUS_CHOICES,
                               label=_("Status"))
    date_from = forms.DateTimeField(required=False, label=_("Date from"),
                                    widget=DatePickerInput)
    date_to = forms.DateTimeField(required=False, label=_('to'),
                                  widget=DatePickerInput)
    name = forms.CharField(required=False, label=_('Customer name'))

    def get_friendly_status(self):
        raw = int(self.cleaned_data['status'])
        for key, value in self.STATUS_CHOICES:
            if key == raw:
                return value
        return ''
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.reports.forms:0
==oscar.apps.dashboard.reports.forms:0
==oscar.apps.dashboard.reports.forms:0
from django import forms
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class
from oscar.forms.widgets import DatePickerInput

GeneratorRepository = get_class('dashboard.reports.utils',
                                'GeneratorRepository')


class ReportForm(forms.Form):
    generators = GeneratorRepository().get_report_generators()

    type_choices = []
    for generator in generators:
        type_choices.append((generator.code, generator.description))
    report_type = forms.ChoiceField(widget=forms.Select(),
                                    choices=type_choices,
                                    label=_("Report Type"),
                                    help_text=_("Only the offer and order"
                                                " reports use the selected"
                                                " date range"))

    date_from = forms.DateField(label=_("Date from"), required=False,
                                widget=DatePickerInput)
    date_to = forms.DateField(label=_("Date to"),
                              help_text=_("The report is inclusive of this"
                                          " date"),
                              required=False,
                              widget=DatePickerInput)
    download = forms.BooleanField(label=_("Download"), required=False)

    def clean(self):
        date_from = self.cleaned_data.get('date_from', None)
        date_to = self.cleaned_data.get('date_to', None)
        if (all([date_from, date_to]) and self.cleaned_data['date_from']
                > self.cleaned_data['date_to']):
            raise forms.ValidationError(_("Your start date must be before your"
                                          " end date"))
        return self.cleaned_data
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.scales:0
==oscar.apps.shipping.scales:0
from decimal import Decimal as D

from django.core.exceptions import ObjectDoesNotExist


class Scale(object):
    """
    For calculating the weight of a product or basket
    """
    def __init__(self, attribute_code='weight', default_weight=None):
        self.attribute = attribute_code
        self.default_weight = default_weight

    def weigh_product(self, product):
        weight = None
        try:
            weight = product.attribute_values.get(
                attribute__code=self.attribute).value
        except ObjectDoesNotExist:
            if product.parent:
                try:
                    weight = product.parent.attribute_values.get(
                        attribute__code=self.attribute).value
                except ObjectDoesNotExist:
                    pass

        if weight is None:
            if self.default_weight is None:
                raise ValueError(
                    "No attribute %s found for product %s" % (
                        self.attribute, product))
            weight = self.default_weight

        return D(weight) if weight is not None else D('0.0')

    def weigh_basket(self, basket):
        weight = D('0.0')
        for line in basket.lines.all():
            weight += self.weigh_product(line.product) * line.quantity
        return weight
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.migrations.0004_auto_20180228_0940:2
==oscar.apps.voucher.migrations.0004_auto_20180228_0940:2
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0007_conditionaloffer_exclusive'),
        ('voucher', '0003_auto_20171212_0411'),
    ]

    operations = [
        migrations.CreateModel(
            name='VoucherSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('count', models.IntegerField(verbose_name='Number of vouchers')),
                ('code_length', models.IntegerField(default=12, verbose_name='Length of Code')),
                ('description', models.TextField(verbose_name='Description')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('start_datetime', models.DateTimeField(verbose_name='Start datetime')),
                ('end_datetime', models.DateTimeField(verbose_name='End datetime')),
                ('offer', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voucher_set', to='offer.ConditionalOffer', verbose_name='Offer')),
            ],
            options={
                'verbose_name': 'VoucherSet',
                'verbose_name_plural': 'VoucherSets',
                'get_latest_by': 'date_created',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='voucher',
            name='voucher_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='voucher.VoucherSet'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.search.apps:0
==oscar.apps.search.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig
from oscar.core.loading import get_class


class SearchConfig(OscarConfig):
    label = 'search'
    name = 'oscar.apps.search'
    verbose_name = _('Search')

    namespace = 'search'

    def ready(self):
        self.search_view = get_class('search.views', 'FacetedSearchView')

        self.search_form = get_class('search.forms', 'SearchForm')

    def get_urls(self):
        from haystack.views import search_view_factory

        # The form class has to be passed to the __init__ method as that is how
        # Haystack works.  It's slightly different to normal CBVs.
        urlpatterns = [
            url(r'^$', search_view_factory(
                view_class=self.search_view,
                form_class=self.search_form,
                searchqueryset=self.get_sqs()),
                name='search'),
        ]
        return self.post_process_urls(urlpatterns)

    def get_sqs(self):
        """
        Return the SQS required by a the Haystack search view
        """
        from oscar.apps.search import facets

        return facets.base_sqs()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:902
==haystack.backends.solr_backend:750
        if self.date_facets:
            search_kwargs['date_facets'] = self.date_facets

        if self.distance_point:
            search_kwargs['distance_point'] = self.distance_point

        if self.dwithin:
            search_kwargs['dwithin'] = self.dwithin

        if self.end_offset is not None:
            search_kwargs['end_offset'] = self.end_offset

        if self.facets:
            search_kwargs['facets'] = self.facets

        if self.fields:
            search_kwargs['fields'] = self.fields

        if self.highlight:
            search_kwargs['highlight'] = self.highlight

        if self.models:
            search_kwargs['models'] = self.models

        if self.narrow_queries:
            search_kwargs['narrow_queries'] = self.narrow_queries

        if self.query_facets:
            search_kwargs['query_facets'] = self.query_facets

        if self.within:
            search_kwargs['within'] = self.within

        if spelling_query:
            search_kwargs['spelling_query'] = spelling_query
        elif self.spelling_query:
            search_kwargs['spelling_query'] = self.spelling_query

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0016_auto_20190327_0757:2
==oscar.apps.catalogue.migrations.0016_auto_20190327_0757:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0015_product_is_public'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productattributevalue',
            name='value_boolean',
            field=models.NullBooleanField(db_index=True, verbose_name='Boolean'),
        ),
        migrations.AlterField(
            model_name='productattributevalue',
            name='value_date',
            field=models.DateField(blank=True, db_index=True, null=True, verbose_name='Date'),
        ),
        migrations.AlterField(
            model_name='productattributevalue',
            name='value_datetime',
            field=models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='DateTime'),
        ),
        migrations.AlterField(
            model_name='productattributevalue',
            name='value_float',
            field=models.FloatField(blank=True, db_index=True, null=True, verbose_name='Float'),
        ),
        migrations.AlterField(
            model_name='productattributevalue',
            name='value_integer',
            field=models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Integer'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.admin:0
==oscar.apps.offer.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

ConditionalOffer = get_model('offer', 'ConditionalOffer')
Condition = get_model('offer', 'Condition')
Benefit = get_model('offer', 'Benefit')
Range = get_model('offer', 'Range')


class ConditionAdmin(admin.ModelAdmin):
    list_display = ('type', 'value', 'range')


class BenefitAdmin(admin.ModelAdmin):
    list_display = ('__str__', 'type', 'value', 'range')


class ConditionalOfferAdmin(admin.ModelAdmin):
    list_display = ('name', 'offer_type', 'start_datetime', 'end_datetime',
                    'condition', 'benefit', 'total_discount')
    list_filter = ('offer_type',)
    readonly_fields = ('total_discount', 'num_orders')
    fieldsets = (
        (None, {
            'fields': ('name', 'description', 'offer_type', 'condition',
                       'benefit', 'start_datetime', 'end_datetime', 'priority')
        }),
        ('Usage', {
            'fields': ('total_discount', 'num_orders')
        }),
    )


admin.site.register(ConditionalOffer, ConditionalOfferAdmin)
admin.site.register(Condition, ConditionAdmin)
admin.site.register(Benefit, BenefitAdmin)
admin.site.register(Range)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.ranges.apps:0
==oscar.apps.dashboard.ranges.apps:0
==oscar.apps.dashboard.ranges.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class RangesDashboardConfig(OscarDashboardConfig):
    label = 'ranges_dashboard'
    name = 'oscar.apps.dashboard.ranges'
    verbose_name = _('Ranges dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.list_view = get_class('dashboard.ranges.views', 'RangeListView')
        self.create_view = get_class('dashboard.ranges.views', 'RangeCreateView')
        self.update_view = get_class('dashboard.ranges.views', 'RangeUpdateView')
        self.delete_view = get_class('dashboard.ranges.views', 'RangeDeleteView')
        self.products_view = get_class('dashboard.ranges.views', 'RangeProductListView')
        self.reorder_view = get_class('dashboard.ranges.views', 'RangeReorderView')

    def get_urls(self):
        urlpatterns = [
            url(r'^$', self.list_view.as_view(), name='range-list'),
            url(r'^create/$', self.create_view.as_view(), name='range-create'),
            url(r'^(?P<pk>\d+)/$', self.update_view.as_view(),
                name='range-update'),
            url(r'^(?P<pk>\d+)/delete/$', self.delete_view.as_view(),
                name='range-delete'),
            url(r'^(?P<pk>\d+)/products/$', self.products_view.as_view(),
                name='range-products'),
            url(r'^(?P<pk>\d+)/reorder/$', self.reorder_view.as_view(),
                name='range-reorder'),
        ]
        return self.post_process_urls(urlpatterns)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.forms:0
==oscar.apps.address.forms:0
from django import forms
from django.conf import settings

from oscar.core.loading import get_model
from oscar.forms.mixins import PhoneNumberMixin

UserAddress = get_model('address', 'useraddress')


class AbstractAddressForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        """
        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.
        """
        super().__init__(*args, **kwargs)
        field_names = (set(self.fields)
                       & set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))
        for field_name in field_names:
            self.fields[field_name].required = True


class UserAddressForm(PhoneNumberMixin, AbstractAddressForm):

    class Meta:
        model = UserAddress
        fields = [
            'title', 'first_name', 'last_name',
            'line1', 'line2', 'line3', 'line4',
            'state', 'postcode', 'country',
            'phone_number', 'notes',
        ]

    def __init__(self, user, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.user = user
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.utils:0
==oscar.apps.offer.utils:0
from importlib import import_module

from django.core import exceptions
from django.urls import reverse

from oscar.apps.offer.applicator import Applicator  # backwards-compat  # noqa


def range_anchor(range):
    return '<a href="%s">%s</a>' % (
        reverse('dashboard:range-update', kwargs={'pk': range.pk}),
        range.name)


def unit_price(offer, line):
    """
    Return the relevant price for a given basket line.

    This is required so offers can apply in circumstances where tax isn't known
    """
    return line.unit_effective_price


def load_proxy(proxy_class):
    module, classname = proxy_class.rsplit('.', 1)
    try:
        mod = import_module(module)
    except ImportError as e:
        raise exceptions.ImproperlyConfigured(
            "Error importing module %s: %s" % (module, e))
    try:
        return getattr(mod, classname)
    except AttributeError:
        raise exceptions.ImproperlyConfigured(
            "Module %s does not define a %s" % (module, classname))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.utils:0
==oscar.apps.voucher.utils:0
from itertools import zip_longest

from django.db import connection
from django.utils.crypto import get_random_string


def generate_code(length, chars='ABCDEFGHJKLMNPQRSTUVWXYZ23456789',
                  group_length=4, separator='-'):
    """Create a string of 16 chars grouped by 4 chars."""
    random_string = (i for i in get_random_string(length=length, allowed_chars=chars))
    return separator.join(
        ''.join(filter(None, a))
        for a in zip_longest(*[random_string] * group_length)
    )


def get_unused_code(length=12, group_length=4, separator='-'):
    """Generate a code, check in the db if it already exists and return it.

    i.e. ASDA-QWEE-DFDF-KFGG

    :param int length: the number of characters in the code
    :param int group_length: length of character groups separated by dash '-'
    :return: voucher code
    :rtype: str

    """
    cursor = connection.cursor()
    while True:
        code = generate_code(length, group_length=group_length,
                             separator=separator)
        cursor.execute(
            "SELECT 1 FROM voucher_voucher WHERE code=%s", [code])
        if not cursor.fetchall():
            return code
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.migrations.0002_auto_20140827_1705:1
==oscar.apps.analytics.migrations.0002_auto_20140827_1705:1
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('analytics', '0001_initial'),
        ('catalogue', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='userproductview',
            name='product',
            field=models.ForeignKey(verbose_name='Product', to='catalogue.Product', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='userproductview',
            name='user',
            field=models.ForeignKey(verbose_name='User', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='productrecord',
            name='product',
            field=models.OneToOneField(verbose_name='Product', related_name='stats', to='catalogue.Product',
                                       on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.models:0
==oscar.apps.partner.models:0
from oscar.apps.address.abstract_models import AbstractPartnerAddress
from oscar.apps.partner.abstract_models import (
    AbstractPartner, AbstractStockAlert, AbstractStockRecord)
from oscar.core.loading import is_model_registered

__all__ = []


if not is_model_registered('partner', 'Partner'):
    class Partner(AbstractPartner):
        pass

    __all__.append('Partner')


if not is_model_registered('partner', 'PartnerAddress'):
    class PartnerAddress(AbstractPartnerAddress):
        pass

    __all__.append('PartnerAddress')


if not is_model_registered('partner', 'StockRecord'):
    class StockRecord(AbstractStockRecord):
        pass

    __all__.append('StockRecord')


if not is_model_registered('partner', 'StockAlert'):
    class StockAlert(AbstractStockAlert):
        pass

    __all__.append('StockAlert')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.apps:0
==oscar.apps.basket.apps:0
from django.conf.urls import url
from django.contrib.auth.decorators import login_required
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig
from oscar.core.loading import get_class


class BasketConfig(OscarConfig):
    label = 'basket'
    name = 'oscar.apps.basket'
    verbose_name = _('Basket')

    namespace = 'basket'

    def ready(self):
        self.summary_view = get_class('basket.views', 'BasketView')
        self.saved_view = get_class('basket.views', 'SavedView')
        self.add_view = get_class('basket.views', 'BasketAddView')
        self.add_voucher_view = get_class('basket.views', 'VoucherAddView')
        self.remove_voucher_view = get_class('basket.views', 'VoucherRemoveView')

    def get_urls(self):
        urls = [
            url(r'^$', self.summary_view.as_view(), name='summary'),
            url(r'^add/(?P<pk>\d+)/$', self.add_view.as_view(), name='add'),
            url(r'^vouchers/add/$', self.add_voucher_view.as_view(),
                name='vouchers-add'),
            url(r'^vouchers/(?P<pk>\d+)/remove/$',
                self.remove_voucher_view.as_view(), name='vouchers-remove'),
            url(r'^saved/$', login_required(self.saved_view.as_view()),
                name='saved'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.models:0
==oscar.apps.analytics.models:0
from oscar.apps.analytics.abstract_models import (
    AbstractProductRecord, AbstractUserProductView,
    AbstractUserRecord, AbstractUserSearch)
from oscar.core.loading import is_model_registered

__all__ = []


if not is_model_registered('analytics', 'ProductRecord'):
    class ProductRecord(AbstractProductRecord):
        pass

    __all__.append('ProductRecord')


if not is_model_registered('analytics', 'UserRecord'):
    class UserRecord(AbstractUserRecord):
        pass

    __all__.append('UserRecord')


if not is_model_registered('analytics', 'UserProductView'):
    class UserProductView(AbstractUserProductView):
        pass

    __all__.append('UserProductView')


if not is_model_registered('analytics', 'UserSearch'):
    class UserSearch(AbstractUserSearch):
        pass

    __all__.append('UserSearch')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.apps:0
==oscar.apps.catalogue.reviews.apps:0
==oscar.apps.catalogue.reviews.apps:0
from django.conf.urls import url
from django.contrib.auth.decorators import login_required
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig
from oscar.core.loading import get_class


class CatalogueReviewsConfig(OscarConfig):
    label = 'reviews'
    name = 'oscar.apps.catalogue.reviews'
    verbose_name = _('Catalogue reviews')

    hidable_feature_name = 'reviews'

    def ready(self):
        self.detail_view = get_class('catalogue.reviews.views', 'ProductReviewDetail')
        self.create_view = get_class('catalogue.reviews.views', 'CreateProductReview')
        self.vote_view = get_class('catalogue.reviews.views', 'AddVoteView')
        self.list_view = get_class('catalogue.reviews.views', 'ProductReviewList')

    def get_urls(self):
        urls = [
            url(r'^(?P<pk>\d+)/$', self.detail_view.as_view(),
                name='reviews-detail'),
            url(r'^add/$', self.create_view.as_view(),
                name='reviews-add'),
            url(r'^(?P<pk>\d+)/vote/$',
                login_required(self.vote_view.as_view()),
                name='reviews-vote'),
            url(r'^$', self.list_view.as_view(), name='reviews-list'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.pages.apps:0
==oscar.apps.dashboard.pages.apps:0
==oscar.apps.dashboard.pages.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class PagesDashboardConfig(OscarDashboardConfig):
    label = 'pages_dashboard'
    name = 'oscar.apps.dashboard.pages'
    verbose_name = _('Pages dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.list_view = get_class('dashboard.pages.views', 'PageListView')
        self.create_view = get_class('dashboard.pages.views', 'PageCreateView')
        self.update_view = get_class('dashboard.pages.views', 'PageUpdateView')
        self.delete_view = get_class('dashboard.pages.views', 'PageDeleteView')

    def get_urls(self):
        """
        Get URL patterns defined for flatpage management application.
        """
        urls = [
            url(r'^$', self.list_view.as_view(), name='page-list'),
            url(r'^create/$', self.create_view.as_view(), name='page-create'),
            url(r'^update/(?P<pk>[-\w]+)/$',
                self.update_view.as_view(), name='page-update'),
            url(r'^delete/(?P<pk>\d+)/$',
                self.delete_view.as_view(), name='page-delete')
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.models:0
==oscar.apps.customer.models:0
from oscar.apps.customer import abstract_models
from oscar.core.loading import is_model_registered

__all__ = []


if not is_model_registered('customer', 'Email'):
    class Email(abstract_models.AbstractEmail):
        pass

    __all__.append('Email')


if not is_model_registered('customer', 'CommunicationEventType'):
    class CommunicationEventType(
            abstract_models.AbstractCommunicationEventType):
        pass

    __all__.append('CommunicationEventType')


if not is_model_registered('customer', 'Notification'):
    class Notification(abstract_models.AbstractNotification):
        pass

    __all__.append('Notification')


if not is_model_registered('customer', 'ProductAlert'):
    class ProductAlert(abstract_models.AbstractProductAlert):
        pass

    __all__.append('ProductAlert')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.models:0
==oscar.apps.payment.models:0
from oscar.core.loading import is_model_registered

from . import abstract_models

__all__ = []


if not is_model_registered('payment', 'Transaction'):
    class Transaction(abstract_models.AbstractTransaction):
        pass

    __all__.append('Transaction')


if not is_model_registered('payment', 'Source'):
    class Source(abstract_models.AbstractSource):
        pass

    __all__.append('Source')


if not is_model_registered('payment', 'SourceType'):
    class SourceType(abstract_models.AbstractSourceType):
        pass

    __all__.append('SourceType')


if not is_model_registered('payment', 'Bankcard'):
    class Bankcard(abstract_models.AbstractBankcard):
        pass

    __all__.append('Bankcard')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.models:0
==oscar.apps.basket.models:0
from oscar.apps.basket.abstract_models import (
    AbstractBasket, AbstractLine, AbstractLineAttribute)
from oscar.core.loading import is_model_registered

__all__ = [
    'InvalidBasketLineError',
]


class InvalidBasketLineError(Exception):
    pass


if not is_model_registered('basket', 'Basket'):
    class Basket(AbstractBasket):
        pass

    __all__.append('Basket')


if not is_model_registered('basket', 'Line'):
    class Line(AbstractLine):
        pass

    __all__.append('Line')


if not is_model_registered('basket', 'LineAttribute'):
    class LineAttribute(AbstractLineAttribute):
        pass

    __all__.append('LineAttribute')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.admin:0
==oscar.apps.basket.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

Line = get_model('basket', 'line')


class LineInline(admin.TabularInline):
    model = Line
    readonly_fields = ('line_reference', 'product', 'price_excl_tax',
                       'price_incl_tax', 'price_currency', 'stockrecord')


class LineAdmin(admin.ModelAdmin):
    list_display = ('id', 'basket', 'product', 'stockrecord', 'quantity',
                    'price_excl_tax', 'price_currency', 'date_created')
    readonly_fields = ('basket', 'stockrecord', 'line_reference', 'product',
                       'price_currency', 'price_incl_tax', 'price_excl_tax',
                       'quantity')


class BasketAdmin(admin.ModelAdmin):
    list_display = ('id', 'owner', 'status', 'num_lines',
                    'contains_a_voucher', 'date_created', 'date_submitted',
                    'time_before_submit')
    readonly_fields = ('owner', 'date_merged', 'date_submitted')
    inlines = [LineInline]


admin.site.register(get_model('basket', 'basket'), BasketAdmin)
admin.site.register(Line, LineAdmin)
admin.site.register(get_model('basket', 'LineAttribute'))
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 6 files
==oscar.apps.dashboard.reports.utils:0
==oscar.apps.dashboard.reports.utils:0
==oscar.apps.dashboard.reports.utils:0
==oscar.apps.dashboard.reviews.utils:0
==oscar.apps.dashboard.reviews.utils:0
==oscar.apps.dashboard.reviews.utils:0
from oscar.core.loading import get_class, get_classes

OrderReportGenerator = get_class('order.reports', 'OrderReportGenerator')
ProductReportGenerator, UserReportGenerator \
    = get_classes('analytics.reports', ['ProductReportGenerator',
                                        'UserReportGenerator'])
OpenBasketReportGenerator, SubmittedBasketReportGenerator \
    = get_classes('basket.reports', ['OpenBasketReportGenerator',
                                     'SubmittedBasketReportGenerator'])
OfferReportGenerator = get_class('offer.reports', 'OfferReportGenerator')
VoucherReportGenerator = get_class('voucher.reports', 'VoucherReportGenerator')


class GeneratorRepository(object):

    generators = [OrderReportGenerator,
                  ProductReportGenerator,
                  UserReportGenerator,
                  OpenBasketReportGenerator,
                  SubmittedBasketReportGenerator,
                  VoucherReportGenerator,
                  OfferReportGenerator]

    def get_report_generators(self):
        return self.generators

    def get_generator(self, code):
        for generator in self.generators:
            if generator.code == code:
                return generator
        return None
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.admin:0
==oscar.apps.voucher.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

Voucher = get_model('voucher', 'Voucher')
VoucherApplication = get_model('voucher', 'VoucherApplication')


class VoucherAdmin(admin.ModelAdmin):
    list_display = ('name', 'code', 'usage', 'num_basket_additions',
                    'num_orders', 'total_discount')
    readonly_fields = ('num_basket_additions', 'num_orders', 'total_discount')
    fieldsets = (
        (None, {
            'fields': ('name', 'code', 'usage', 'start_datetime',
                       'end_datetime')}),
        ('Benefit', {
            'fields': ('offers',)}),
        ('Usage', {
            'fields': ('num_basket_additions', 'num_orders',
                       'total_discount')}),
    )


class VoucherApplicationAdmin(admin.ModelAdmin):
    list_display = ('voucher', 'user', 'order', 'date_created')
    readonly_fields = ('voucher', 'user', 'order')


admin.site.register(Voucher, VoucherAdmin)
admin.site.register(VoucherApplication, VoucherApplicationAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.migrations.0007_auto_20181115_1953:2
==oscar.apps.order.migrations.0007_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0006_orderstatuschange'),
    ]

    operations = [
        migrations.AlterField(
            model_name='communicationevent',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date'),
        ),
        migrations.AlterField(
            model_name='orderstatuschange',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date Created'),
        ),
        migrations.AlterField(
            model_name='paymentevent',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created'),
        ),
        migrations.AlterField(
            model_name='shippingevent',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date Created'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.managers:0
==oscar.apps.basket.managers:0
from django.db import models


class OpenBasketManager(models.Manager):
    """For searching/creating OPEN baskets only."""
    status_filter = "Open"

    def get_queryset(self):
        return super().get_queryset().filter(
            status=self.status_filter)

    def get_or_create(self, **kwargs):
        return self.get_queryset().get_or_create(
            status=self.status_filter, **kwargs)


class SavedBasketManager(models.Manager):
    """For searching/creating SAVED baskets only."""
    status_filter = "Saved"

    def get_queryset(self):
        return super().get_queryset().filter(
            status=self.status_filter)

    def create(self, **kwargs):
        return self.get_queryset().create(status=self.status_filter, **kwargs)

    def get_or_create(self, **kwargs):
        return self.get_queryset().get_or_create(
            status=self.status_filter, **kwargs)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0010_auto_20170420_0439:2
==oscar.apps.catalogue.migrations.0010_auto_20170420_0439:2
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0009_slugfield_noop'),
    ]

    operations = [
        migrations.AddField(
            model_name='productattributevalue',
            name='value_multi_option',
            field=models.ManyToManyField(blank=True, related_name='multi_valued_attribute_values', to='catalogue.AttributeOption', verbose_name='Value multi option'),
        ),
        migrations.AlterField(
            model_name='productattribute',
            name='option_group',
            field=models.ForeignKey(blank=True, help_text='Select an option group if using type "Option" or "Multi Option"', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogue.AttributeOptionGroup', verbose_name='Option Group'),
        ),
        migrations.AlterField(
            model_name='productattribute',
            name='type',
            field=models.CharField(choices=[('text', 'Text'), ('integer', 'Integer'), ('boolean', 'True / False'), ('float', 'Float'), ('richtext', 'Rich Text'), ('date', 'Date'), ('option', 'Option'), ('multi_option', 'Multi Option'), ('entity', 'Entity'), ('file', 'File'), ('image', 'Image')], default='text', max_length=20, verbose_name='Type'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.users.tables:0
==oscar.apps.dashboard.users.tables:0
==oscar.apps.dashboard.users.tables:0
from django.utils.translation import gettext_lazy as _

from django_tables2 import A, Column, LinkColumn, TemplateColumn

from oscar.core.loading import get_class

DashboardTable = get_class('dashboard.tables', 'DashboardTable')


class UserTable(DashboardTable):
    check = TemplateColumn(
        template_name='oscar/dashboard/users/user_row_checkbox.html',
        verbose_name=' ', orderable=False)
    email = LinkColumn('dashboard:user-detail', args=[A('id')],
                       accessor='email')
    name = Column(accessor='get_full_name',
                  order_by=('last_name', 'first_name'))
    active = Column(accessor='is_active')
    staff = Column(accessor='is_staff')
    date_registered = Column(accessor='date_joined')
    num_orders = Column(accessor='orders.count', orderable=False, verbose_name=_('Number of Orders'))
    actions = TemplateColumn(
        template_name='oscar/dashboard/users/user_row_actions.html',
        verbose_name=' ')

    icon = "group"

    class Meta(DashboardTable.Meta):
        template = 'oscar/dashboard/users/table.html'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.scores:0
==oscar.apps.analytics.scores:0
from django.db.models import F

from oscar.core.loading import get_model

ProductRecord = get_model('analytics', 'ProductRecord')


class Calculator(object):

    # Map of field name to weight
    weights = {
        'num_views': 1,
        'num_basket_additions': 3,
        'num_purchases': 5
    }

    def __init__(self, logger):
        self.logger = logger

    def run(self):
        self.calculate_scores()

    def calculate_scores(self):
        self.logger.info("Calculating product scores")
        total_weight = float(sum(self.weights.values()))
        weighted_fields = [
            self.weights[name] * F(name) for name in self.weights.keys()]
        ProductRecord.objects.update(
            score=sum(weighted_fields) / total_weight)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:798
==haystack.backends.solr_backend:650
        if field == 'content':
            index_fieldname = ''
        else:
            index_fieldname = u'%s:' % connections[self._using].get_unified_index().get_index_fieldname(field)

        filter_types = {
            'content': u'%s',
            'contains': u'*%s*',
            'endswith': u'*%s',
            'startswith': u'%s*',
            'exact': u'%s',
            'gt': u'{%s TO *}',
            'gte': u'[%s TO *]',
            'lt': u'{* TO %s}',
            'lte': u'[* TO %s]',
            'fuzzy': u'%s~',
        }

        if value.post_process is False:
            query_frag = prepared_value
        else:
            if filter_type in ['content', 'contains', 'startswith', 'endswith', 'fuzzy']:
                if value.input_type_name == 'exact':
                    query_frag = prepared_value
                else:
                    # Iterate over terms & incorportate the converted form of each into the query.
                    terms = []

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.receivers:0
==oscar.apps.partner.receivers:0
from django.db.models.signals import post_save
from django.dispatch import receiver

from oscar.core.loading import get_classes

StockRecord, StockAlert = get_classes('partner.models', ['StockRecord',
                                                         'StockAlert'])


@receiver(post_save, sender=StockRecord)
def update_stock_alerts(sender, instance, created, **kwargs):
    """
    Update low-stock alerts
    """
    if created or kwargs.get('raw', False):
        return
    stockrecord = instance
    try:
        alert = StockAlert.objects.get(stockrecord=stockrecord,
                                       status=StockAlert.OPEN)
    except StockAlert.DoesNotExist:
        alert = None

    if stockrecord.is_below_threshold and not alert:
        StockAlert.objects.create(stockrecord=stockrecord,
                                  threshold=stockrecord.low_stock_threshold)
    elif not stockrecord.is_below_threshold and alert:
        alert.close()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.receivers:2
==oscar.apps.catalogue.receivers:2
from django.conf import settings

if settings.OSCAR_DELETE_IMAGE_FILES:
    from django.db import models
    from django.db.models.signals import post_delete

    from oscar.core.loading import get_model
    from oscar.core.thumbnails import get_thumbnailer

    ProductImage = get_model('catalogue', 'ProductImage')
    Category = get_model('catalogue', 'Category')

    def delete_image_files(sender, instance, **kwargs):
        """
        Deletes the original image and created thumbnails.
        """
        image_fields = (models.ImageField,)
        thumbnailer = get_thumbnailer()
        for field in instance._meta.fields:
            if isinstance(field, image_fields):
                # Make Django return ImageFieldFile instead of ImageField
                field_file = getattr(instance, field.name)
                thumbnailer.delete_thumbnails(field_file)

    # Connect for all models with ImageFields - add as needed
    models_with_images = [ProductImage, Category]
    for sender in models_with_images:
        post_delete.connect(delete_image_files, sender=sender)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.reviews.apps:0
==oscar.apps.dashboard.reviews.apps:0
==oscar.apps.dashboard.reviews.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class ReviewsDashboardConfig(OscarDashboardConfig):
    label = 'reviews_dashboard'
    name = 'oscar.apps.dashboard.reviews'
    verbose_name = _('Reviews dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.list_view = get_class('dashboard.reviews.views', 'ReviewListView')
        self.update_view = get_class('dashboard.reviews.views', 'ReviewUpdateView')
        self.delete_view = get_class('dashboard.reviews.views', 'ReviewDeleteView')

    def get_urls(self):
        urls = [
            url(r'^$', self.list_view.as_view(), name='reviews-list'),
            url(r'^(?P<pk>\d+)/$', self.update_view.as_view(),
                name='reviews-update'),
            url(r'^(?P<pk>\d+)/delete/$', self.delete_view.as_view(),
                name='reviews-delete'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.offers.reports:0
==oscar.apps.dashboard.offers.reports:0
==oscar.apps.dashboard.offers.reports:0
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class

ReportCSVFormatter = get_class(
    'dashboard.reports.reports', 'ReportCSVFormatter')


class OrderDiscountCSVFormatter(ReportCSVFormatter):
    filename_template = 'order-discounts-for-offer-%s.csv'

    def generate_csv(self, response, order_discounts):
        writer = self.get_csv_writer(response)
        header_row = [_('Order number'),
                      _('Order date'),
                      _('Order total'),
                      _('Cost')]
        writer.writerow(header_row)
        for order_discount in order_discounts:
            order = order_discount.order
            row = [order.number,
                   self.format_datetime(order.date_placed),
                   order.total_incl_tax,
                   order_discount.amount]
            writer.writerow(row)

    def filename(self, offer):
        return self.filename_template % offer.id
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.migrations.0003_auto_20181115_1953:2
==oscar.apps.shipping.migrations.0003_auto_20181115_1953:2
from decimal import Decimal
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('shipping', '0002_auto_20150604_1450'),
    ]

    operations = [
        migrations.AlterField(
            model_name='orderanditemcharges',
            name='name',
            field=models.CharField(db_index=True, max_length=128, unique=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='weightband',
            name='upper_limit',
            field=models.DecimalField(db_index=True, decimal_places=3, help_text='Enter upper limit of this weight band in kg. The lower limit will be determined by the other weight bands.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Upper Limit'),
        ),
        migrations.AlterField(
            model_name='weightbased',
            name='name',
            field=models.CharField(db_index=True, max_length=128, unique=True, verbose_name='Name'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.migrations.0003_auto_20150927_1551:1
==oscar.apps.address.migrations.0003_auto_20150927_1551:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0002_auto_20150927_1547'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='useraddress',
            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',
                     'verbose_name_plural': 'User addresses'},
        ),
        migrations.AlterField(
            model_name='useraddress',
            name='num_orders_as_billing_address',
            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),
        ),
        migrations.AlterField(
            model_name='useraddress',
            name='num_orders_as_shipping_address',
            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.migrations.0006_orderstatuschange:2
==oscar.apps.order.migrations.0006_orderstatuschange:2
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0005_update_email_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrderStatusChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_status', models.CharField(blank=True, max_length=100, verbose_name='Old Status')),
                ('new_status', models.CharField(blank=True, max_length=100, verbose_name='New Status')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_changes', to='order.Order', verbose_name='Order Status Changes')),
            ],
            options={
                'verbose_name': 'Order Status Change',
                'verbose_name_plural': 'Order Status Changes',
                'ordering': ['-date_created'],
                'abstract': False,
            },
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.signals:0
==oscar.apps.offer.signals:0
from django.db.models.signals import post_delete
from django.dispatch import receiver

from oscar.core.loading import get_model

ConditionalOffer = get_model('offer', 'ConditionalOffer')
Condition = get_model('offer', 'Condition')
Benefit = get_model('offer', 'Benefit')


@receiver(post_delete, sender=ConditionalOffer)
def delete_unused_related_conditions_and_benefits(instance, **kwargs):
    offer = instance  # the object is no longer in the database

    condition_id = offer.condition_id
    condition = Condition.objects.get(id=condition_id)
    condition_is_unique = condition.offers.count() == 0
    condition_is_not_custom = condition.proxy_class == ''
    if condition_is_not_custom and condition_is_unique:
        condition.delete()

    benefit_id = offer.benefit_id
    benefit = Benefit.objects.get(id=benefit_id)
    benefit_is_unique = benefit.offers.count() == 0
    benefit_is_not_custom = benefit.proxy_class == ''
    if benefit_is_not_custom and benefit_is_unique:
        benefit.delete()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.apps:0
==oscar.apps.offer.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig
from oscar.core.loading import get_class


class OfferConfig(OscarConfig):
    label = 'offer'
    name = 'oscar.apps.offer'
    verbose_name = _('Offer')

    namespace = 'offer'

    def ready(self):
        from . import signals  # noqa

        self.detail_view = get_class('offer.views', 'OfferDetailView')
        self.list_view = get_class('offer.views', 'OfferListView')

    def get_urls(self):
        urls = [
            url(r'^$', self.list_view.as_view(), name='list'),
            url(r'^(?P<slug>[\w-]+)/$', self.detail_view.as_view(),
                name='detail'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.migrations.0005_regenerate_user_address_hashes:2
==oscar.apps.address.migrations.0005_regenerate_user_address_hashes:2
from __future__ import unicode_literals

from django.db import migrations

from oscar.core.loading import get_model


ORMUserAddress = get_model('address', 'UserAddress')


def regenerate_user_address_hashes(apps, schema_editor):
    MigrationUserAddress = apps.get_model('address', 'UserAddress')
    for user_address in MigrationUserAddress.objects.all():
        orm_user_address = ORMUserAddress.objects.get(id=user_address.id)
        user_address.hash = orm_user_address.generate_hash()
        user_address.save()


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0004_auto_20170226_1122'),
    ]

    operations = [
        migrations.RunPython(regenerate_user_address_hashes)
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.admin:0
==oscar.apps.address.admin:0
from django.contrib import admin

from oscar.core.loading import get_model


class UserAddressAdmin(admin.ModelAdmin):
    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')


class CountryAdmin(admin.ModelAdmin):
    list_display = [
        '__str__',
        'display_order'
    ]
    list_filter = [
        'is_shipping_country'
    ]
    search_fields = [
        'name',
        'printable_name',
        'iso_3166_1_a2',
        'iso_3166_1_a3'
    ]


admin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)
admin.site.register(get_model('address', 'country'), CountryAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0014_auto_20181115_1953:2
==oscar.apps.catalogue.migrations.0014_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0013_auto_20170821_1548'),
    ]

    operations = [
        migrations.AlterField(
            model_name='product',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='display_order',
            field=models.PositiveIntegerField(db_index=True, default=0, help_text='An image with a display order of zero will be the primary image for a product', verbose_name='Display order'),
        ),
        migrations.AlterField(
            model_name='productrecommendation',
            name='ranking',
            field=models.PositiveSmallIntegerField(db_index=True, default=0, help_text='Determines order of the products. A product with a higher value will appear before one with a lower ranking.', verbose_name='Ranking'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.admin:0
==oscar.apps.shipping.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

OrderAndItemCharges = get_model('shipping', 'OrderAndItemCharges')
WeightBand = get_model('shipping', 'WeightBand')
WeightBased = get_model('shipping', 'WeightBased')


class OrderChargesAdmin(admin.ModelAdmin):
    filter_horizontal = ('countries', )
    list_display = ('name', 'description', 'price_per_order', 'price_per_item',
                    'free_shipping_threshold')


class WeightBandInline(admin.TabularInline):
    model = WeightBand


class WeightBasedAdmin(admin.ModelAdmin):
    filter_horizontal = ('countries', )
    inlines = [WeightBandInline]


admin.site.register(OrderAndItemCharges, OrderChargesAdmin)
admin.site.register(WeightBased, WeightBasedAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.communications.apps:0
==oscar.apps.dashboard.communications.apps:0
==oscar.apps.dashboard.communications.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class CommunicationsDashboardConfig(OscarDashboardConfig):
    label = 'communications_dashboard'
    name = 'oscar.apps.dashboard.communications'
    verbose_name = _('Communications dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.list_view = get_class('dashboard.communications.views', 'ListView')
        self.update_view = get_class('dashboard.communications.views', 'UpdateView')

    def get_urls(self):
        urls = [
            url(r'^$', self.list_view.as_view(), name='comms-list'),
            url(r'^(?P<slug>\w+)/$', self.update_view.as_view(),
                name='comms-update'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.models:0
==oscar.apps.shipping.models:0
from oscar.apps.shipping import abstract_models
from oscar.core.loading import is_model_registered

__all__ = []


if not is_model_registered('shipping', 'OrderAndItemCharges'):
    class OrderAndItemCharges(abstract_models.AbstractOrderAndItemCharges):
        pass

    __all__.append('OrderAndItemCharges')


if not is_model_registered('shipping', 'WeightBased'):
    class WeightBased(abstract_models.AbstractWeightBased):
        pass

    __all__.append('WeightBased')


if not is_model_registered('shipping', 'WeightBand'):
    class WeightBand(abstract_models.AbstractWeightBand):
        pass

    __all__.append('WeightBand')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.models:0
==oscar.apps.voucher.models:0
from oscar.apps.voucher.abstract_models import (
    AbstractVoucher, AbstractVoucherApplication, AbstractVoucherSet)
from oscar.core.loading import is_model_registered

__all__ = []

if not is_model_registered('voucher', 'VoucherSet'):
    class VoucherSet(AbstractVoucherSet):
        pass

    __all__.append('VoucherSet')


if not is_model_registered('voucher', 'Voucher'):
    class Voucher(AbstractVoucher):
        pass

    __all__.append('Voucher')


if not is_model_registered('voucher', 'VoucherApplication'):
    class VoucherApplication(AbstractVoucherApplication):
        pass

    __all__.append('VoucherApplication')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.migrations.0004_email_save:2
==oscar.apps.customer.migrations.0004_email_save:2
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('customer', '0003_update_email_length'),
    ]

    operations = [
        migrations.AddField(
            model_name='email',
            name='email',
            field=models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email Address'),
        ),
        migrations.AlterField(
            model_name='email',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='emails', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.admin:0
==oscar.apps.analytics.admin:0
from django.contrib import admin

from oscar.core.loading import get_model


class ProductRecordAdmin(admin.ModelAdmin):
    list_display = ('product', 'num_views', 'num_basket_additions',
                    'num_purchases')


class UserProductViewAdmin(admin.ModelAdmin):
    list_display = ('user', 'product', 'date_created')


class UserRecordAdmin(admin.ModelAdmin):
    list_display = ('user', 'num_product_views', 'num_basket_additions',
                    'num_orders', 'total_spent', 'date_last_order')


admin.site.register(get_model('analytics', 'productrecord'),
                    ProductRecordAdmin)
admin.site.register(get_model('analytics', 'userrecord'), UserRecordAdmin)
admin.site.register(get_model('analytics', 'usersearch'))
admin.site.register(get_model('analytics', 'userproductview'),
                    UserProductViewAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.wishlists.forms:1
==oscar.apps.wishlists.forms:1
from django import forms

from oscar.core.loading import get_model

WishList = get_model('wishlists', 'WishList')
Line = get_model('wishlists', 'Line')


class WishListForm(forms.ModelForm):

    def __init__(self, user, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.owner = user

    class Meta:
        model = WishList
        fields = ('name', )


class WishListLineForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['quantity'].widget.attrs['class'] = 'input-mini'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0005_auto_20170423_1217:2
==oscar.apps.offer.migrations.0005_auto_20170423_1217:2
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0004_auto_20170415_1518'),
    ]

    operations = [
        migrations.AlterField(
            model_name='conditionaloffer',
            name='benefit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offers', to='offer.Benefit', verbose_name='Benefit'),
        ),
        migrations.AlterField(
            model_name='conditionaloffer',
            name='condition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offers', to='offer.Condition', verbose_name='Condition'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.calculators:0
==oscar.apps.checkout.calculators:0
from oscar.core import prices


class OrderTotalCalculator(object):
    """
    Calculator class for calculating the order total.
    """

    def __init__(self, request=None):
        # We store a reference to the request as the total may
        # depend on the user or the other checkout data in the session.
        # Further, it is very likely that it will as shipping method
        # always changes the order total.
        self.request = request

    def calculate(self, basket, shipping_charge, **kwargs):
        excl_tax = basket.total_excl_tax + shipping_charge.excl_tax
        if basket.is_tax_known and shipping_charge.is_tax_known:
            incl_tax = basket.total_incl_tax + shipping_charge.incl_tax
        else:
            incl_tax = None
        return prices.Price(
            currency=basket.currency,
            excl_tax=excl_tax, incl_tax=incl_tax)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:771
==haystack.backends.solr_backend:623
    def matching_all_fragment(self):
        return '*:*'

    def build_query_fragment(self, field, filter_type, value):
        from haystack import connections
        query_frag = ''

        if not hasattr(value, 'input_type_name'):
            # Handle when we've got a ``ValuesListQuerySet``...
            if hasattr(value, 'values_list'):
                value = list(value)

            if isinstance(value, six.string_types):
                # It's not an ``InputType``. Assume ``Clean``.
                value = Clean(value)
            else:
                value = PythonData(value)

        # Prepare the query using the InputType.
        prepared_value = value.prepare(self)

        if not isinstance(prepared_value, (set, list, tuple)):
            # Then convert whatever we get back to what pysolr wants if needed.
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0012_auto_20170609_1902:2
==oscar.apps.catalogue.migrations.0012_auto_20170609_1902:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0011_auto_20170422_1355'),
    ]

    operations = [
        migrations.AddField(
            model_name='productattributevalue',
            name='value_datetime',
            field=models.DateTimeField(blank=True, null=True, verbose_name='DateTime'),
        ),
        migrations.AlterField(
            model_name='productattribute',
            name='type',
            field=models.CharField(choices=[('text', 'Text'), ('integer', 'Integer'), ('boolean', 'True / False'), ('float', 'Float'), ('richtext', 'Rich Text'), ('date', 'Date'), ('datetime', 'Datetime'), ('option', 'Option'), ('multi_option', 'Multi Option'), ('entity', 'Entity'), ('file', 'File'), ('image', 'Image')], default='text', max_length=20, verbose_name='Type'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0006_auto_20170504_0616:2
==oscar.apps.offer.migrations.0006_auto_20170504_0616:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0005_auto_20170423_1217'),
    ]

    operations = [
        migrations.AlterField(
            model_name='conditionaloffer',
            name='end_datetime',
            field=models.DateTimeField(blank=True, help_text='Offers are active until the end date. Leave this empty if the offer has no expiry date.', null=True, verbose_name='End date'),
        ),
        migrations.AlterField(
            model_name='conditionaloffer',
            name='start_datetime',
            field=models.DateTimeField(blank=True, help_text='Offers are active from the start date. Leave this empty if the offer has no start date.', null=True, verbose_name='Start date'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.managers:0
==oscar.apps.offer.managers:0
from django.db import models
from django.utils.timezone import now


class ActiveOfferManager(models.Manager):
    """
    For searching/creating offers within their date range
    """
    def get_queryset(self):
        cutoff = now()
        return super().get_queryset().filter(
            models.Q(end_datetime__gte=cutoff) | models.Q(end_datetime=None),
            models.Q(start_datetime__lte=cutoff) | models.Q(start_datetime=None),
        ).filter(status=self.model.OPEN)


class BrowsableRangeManager(models.Manager):
    """
    For searching only ranges which have the "is_browsable" flag set to True.
    """
    def get_queryset(self):
        return super().get_queryset().filter(
            is_public=True)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.shipping.migrations.0002_auto_20150604_1450:1
==oscar.apps.shipping.migrations.0002_auto_20150604_1450:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('shipping', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='orderanditemcharges',
            name='countries',
            field=models.ManyToManyField(to='address.Country', verbose_name='Countries', blank=True),
        ),
        migrations.AlterField(
            model_name='weightbased',
            name='countries',
            field=models.ManyToManyField(to='address.Country', verbose_name='Countries', blank=True),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.migrations.0002_auto_20170418_2132:2
==oscar.apps.voucher.migrations.0002_auto_20170418_2132:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('voucher', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='voucher',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='voucherapplication',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.migrations.0004_auto_20170226_1122:2
==oscar.apps.address.migrations.0004_auto_20170226_1122:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0003_auto_20150927_1551'),
    ]

    operations = [
        migrations.AlterField(
            model_name='useraddress',
            name='num_orders_as_billing_address',
            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),
        ),
        migrations.AlterField(
            model_name='useraddress',
            name='num_orders_as_shipping_address',
            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.migrations.0002_auto_20150927_1547:1
==oscar.apps.address.migrations.0002_auto_20150927_1547:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0001_initial'),
    ]

    operations = [
        migrations.RenameField(
            model_name='useraddress',
            old_name='num_orders',
            new_name='num_orders_as_shipping_address',
        ),
        migrations.AddField(
            model_name='useraddress',
            name='num_orders_as_billing_address',
            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.admin:0
==oscar.apps.payment.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

Source = get_model('payment', 'Source')
Transaction = get_model('payment', 'Transaction')
SourceType = get_model('payment', 'SourceType')
Bankcard = get_model('payment', 'Bankcard')


class SourceAdmin(admin.ModelAdmin):
    list_display = ('order', 'source_type', 'amount_allocated',
                    'amount_debited', 'balance', 'reference')


class BankcardAdmin(admin.ModelAdmin):
    list_display = ('number', 'card_type', 'expiry_month')


admin.site.register(Source, SourceAdmin)
admin.site.register(SourceType)
admin.site.register(Transaction)
admin.site.register(Bankcard, BankcardAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:954
==haystack.backends.solr_backend:807
        self._spelling_suggestion = results.get('spelling_suggestion', None)

    def run_mlt(self, **kwargs):
        """Builds and executes the query. Returns a list of search results."""
        if self._more_like_this is False or self._mlt_instance is None:
            raise MoreLikeThisError("No instance was provided to determine 'More Like This' results.")

        additional_query_string = self.build_query()
        search_kwargs = {
            'start_offset': self.start_offset,
            'result_class': self.result_class,
            'models': self.models
        }

        if self.end_offset is not None:
            search_kwargs['end_offset'] = self.end_offset - self.start_offset

        results = self.backend.more_like_this(self._mlt_instance, additional_query_string, **search_kwargs)
        self._results = results.get('results', [])
        self._hit_count = results.get('hits', 0)


/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.reports.apps:0
==oscar.apps.dashboard.reports.apps:0
==oscar.apps.dashboard.reports.apps:0
from django.conf.urls import url
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarDashboardConfig
from oscar.core.loading import get_class


class ReportsDashboardConfig(OscarDashboardConfig):
    label = 'reports_dashboard'
    name = 'oscar.apps.dashboard.reports'
    verbose_name = _('Reports dashboard')

    default_permissions = ['is_staff', ]

    def ready(self):
        self.index_view = get_class('dashboard.reports.views', 'IndexView')

    def get_urls(self):
        urls = [
            url(r'^$', self.index_view.as_view(), name='reports-index'),
        ]
        return self.post_process_urls(urls)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.exceptions:0
==oscar.apps.order.exceptions:0
class InvalidStatus(Exception):
    pass


class InvalidOrderStatus(InvalidStatus):
    pass


class InvalidLineStatus(InvalidStatus):
    pass


class InvalidShippingEvent(Exception):
    pass


class InvalidPaymentEvent(Exception):
    pass


class UnableToPlaceOrder(Exception):
    pass
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:849
==haystack.backends.solr_backend:698
                query_frag = u'["%s" TO "%s"]' % (start, end)
            elif filter_type == 'exact':
                if value.input_type_name == 'exact':
                    query_frag = prepared_value
                else:
                    prepared_value = Exact(prepared_value).prepare(self)
                    query_frag = filter_types[filter_type] % prepared_value
            else:
                if value.input_type_name != 'exact':
                    prepared_value = Exact(prepared_value).prepare(self)

                query_frag = filter_types[filter_type] % prepared_value

        if len(query_frag) and not isinstance(value, Raw):
            if not query_frag.startswith('(') and not query_frag.endswith(')'):
                query_frag = "(%s)" % query_frag

        return u"%s%s" % (index_fieldname, query_frag)

    def build_alt_parser_query(self, parser_name, query_string='', **kwargs):
        if query_string:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.migrations.0005_auto_20181115_1953:2
==oscar.apps.partner.migrations.0005_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('partner', '0004_auto_20160107_1755'),
    ]

    operations = [
        migrations.AlterField(
            model_name='partner',
            name='name',
            field=models.CharField(blank=True, db_index=True, max_length=128, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='stockalert',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date Created'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0006_auto_20150807_1725:1
==oscar.apps.catalogue.migrations.0006_auto_20150807_1725:1
from __future__ import unicode_literals

from django.db import models, migrations
import django.core.validators
import oscar.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0005_auto_20150604_1450'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productattribute',
            name='code',
            field=models.SlugField(max_length=128, verbose_name='Code', validators=[django.core.validators.RegexValidator(regex=r'^[a-zA-Z_][0-9a-zA-Z_]*$', message="Code can only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit"), oscar.core.validators.non_python_keyword]),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0002_auto_20150217_1221:1
==oscar.apps.catalogue.migrations.0002_auto_20150217_1221:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='category',
            options={'ordering': ['path'], 'verbose_name': 'Category', 'verbose_name_plural': 'Categories'},
        ),
        migrations.RemoveField(
            model_name='category',
            name='full_name',
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.shipping.forms:0
==oscar.apps.dashboard.shipping.forms:0
==oscar.apps.dashboard.shipping.forms:0
from django import forms

from oscar.core.loading import get_model


class WeightBasedForm(forms.ModelForm):

    class Meta:
        model = get_model('shipping', 'WeightBased')
        fields = ['name', 'description', 'default_weight', 'countries']


class WeightBandForm(forms.ModelForm):

    def __init__(self, method, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.method = method

    class Meta:
        model = get_model('shipping', 'WeightBand')
        fields = ('upper_limit', 'charge')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0008_auto_20181115_1953:2
==oscar.apps.offer.migrations.0008_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0007_conditionaloffer_exclusive'),
    ]

    operations = [
        migrations.AlterField(
            model_name='conditionaloffer',
            name='priority',
            field=models.IntegerField(db_index=True, default=0, help_text='The highest priority offers are applied first', verbose_name='Priority'),
        ),
        migrations.AlterField(
            model_name='rangeproductfileupload',
            name='date_uploaded',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date Uploaded'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.migrations.0007_auto_20181115_1953:2
==oscar.apps.voucher.migrations.0007_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('voucher', '0006_auto_20180413_0911'),
    ]

    operations = [
        migrations.AlterField(
            model_name='voucher',
            name='end_datetime',
            field=models.DateTimeField(db_index=True, verbose_name='End datetime'),
        ),
        migrations.AlterField(
            model_name='voucher',
            name='start_datetime',
            field=models.DateTimeField(db_index=True, verbose_name='Start datetime'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.receivers:0
==oscar.apps.voucher.receivers:0
from django.db.models import F

from oscar.apps.basket.signals import voucher_addition, voucher_removal


def track_voucher_addition(basket, voucher, **kwargs):
    voucher.num_basket_additions += 1
    voucher.__class__._default_manager.filter(pk=voucher.pk).update(
        num_basket_additions=F('num_basket_additions') + 1,
    )


def track_voucher_removal(basket, voucher, **kwargs):
    voucher.num_basket_additions -= 1
    voucher.__class__._default_manager.filter(pk=voucher.pk).update(
        num_basket_additions=F('num_basket_additions') - 1,
    )


voucher_addition.connect(track_voucher_addition)
voucher_removal.connect(track_voucher_removal)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.migrations.0002_auto_20150807_1725:1
==oscar.apps.customer.migrations.0002_auto_20150807_1725:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields.autoslugfield
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('customer', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='communicationeventtype',
            name='code',
            field=oscar.models.fields.autoslugfield.AutoSlugField(populate_from='name', validators=[django.core.validators.RegexValidator(regex=r'^[a-zA-Z_][0-9a-zA-Z_]*$', message="Code can only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit.")], editable=False, max_length=128, separator='_', blank=True, help_text='Code used for looking up this event programmatically', unique=True, verbose_name='Code'),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.admin:0
==oscar.apps.catalogue.reviews.admin:0
==oscar.apps.catalogue.reviews.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

ProductReview = get_model('reviews', 'ProductReview')
Vote = get_model('reviews', 'Vote')


class ProductReviewAdmin(admin.ModelAdmin):
    list_display = ('product', 'title', 'score', 'status', 'total_votes',
                    'delta_votes', 'date_created')
    readonly_fields = ('total_votes', 'delta_votes')


class VoteAdmin(admin.ModelAdmin):
    list_display = ('review', 'user', 'delta', 'date_created')


admin.site.register(ProductReview, ProductReviewAdmin)
admin.site.register(Vote, VoteAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0008_auto_20160304_1652:1
==oscar.apps.catalogue.migrations.0008_auto_20160304_1652:1
from __future__ import unicode_literals

from django.db import migrations, models
import django.core.validators
import oscar.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0007_auto_20151207_1440'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productattribute',
            name='code',
            field=models.SlugField(max_length=128, verbose_name='Code', validators=[django.core.validators.RegexValidator(regex=r'^[a-zA-Z_][0-9a-zA-Z_]*$', message="Code can only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit."), oscar.core.validators.non_python_keyword]),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0002_auto_20151210_1053:1
==oscar.apps.offer.migrations.0002_auto_20151210_1053:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='benefit',
            name='proxy_class',
            field=oscar.models.fields.NullCharField(default=None, max_length=255, verbose_name='Custom class'),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0003_basket_vouchers:1
==oscar.apps.basket.migrations.0003_basket_vouchers:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('voucher', '0001_initial'),
        ('basket', '0002_auto_20140827_1705'),
    ]

    operations = [
        migrations.AddField(
            model_name='basket',
            name='vouchers',
            field=models.ManyToManyField(blank=True, verbose_name='Vouchers', to='voucher.Voucher', null=True),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:785
==haystack.backends.whoosh_backend:795
                value = Clean(value)
            else:
                value = PythonData(value)

        # Prepare the query using the InputType.
        prepared_value = value.prepare(self)

        if not isinstance(prepared_value, (set, list, tuple)):
            # Then convert whatever we get back to what pysolr wants if needed.
            prepared_value = self.backend._from_python(prepared_value)

        # 'content' is a special reserved word, much like 'pk' in
        # Django's ORM layer. It indicates 'no special field'.
        if field == 'content':
            index_fieldname = ''
        else:
            index_fieldname = u'%s:' % connections[self._using].get_unified_index().get_index_fieldname(field)

        filter_types = {
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.migrations.0002_auto_20141007_2032:1
==oscar.apps.partner.migrations.0002_auto_20141007_2032:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.core.utils


class Migration(migrations.Migration):

    dependencies = [
        ('partner', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='stockrecord',
            name='price_currency',
            field=models.CharField(default=oscar.core.utils.get_default_currency, max_length=12, verbose_name='Currency'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.migrations.0003_auto_20150604_1450:1
==oscar.apps.partner.migrations.0003_auto_20150604_1450:1
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('partner', '0002_auto_20141007_2032'),
    ]

    operations = [
        migrations.AlterField(
            model_name='partner',
            name='users',
            field=models.ManyToManyField(related_name='partners', verbose_name='Users', to=settings.AUTH_USER_MODEL, blank=True),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.wishlists.models:1
==oscar.apps.wishlists.models:1
from oscar.core.loading import is_model_registered

from .abstract_models import *  # noqa

__all__ = []


if not is_model_registered('wishlists', 'WishList'):
    class WishList(AbstractWishList):
        pass

    __all__.append('WishList')


if not is_model_registered('wishlists', 'Line'):
    class Line(AbstractLine):
        pass

    __all__.append('Line')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.migrations.0004_auto_20170429_0941:2
==oscar.apps.catalogue.reviews.migrations.0004_auto_20170429_0941:2
==oscar.apps.catalogue.reviews.migrations.0004_auto_20170429_0941:2
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('reviews', '0003_auto_20160802_1358'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productreview',
            name='product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='catalogue.Product'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.migrations.0003_auto_20160802_1358:2
==oscar.apps.catalogue.reviews.migrations.0003_auto_20160802_1358:2
==oscar.apps.catalogue.reviews.migrations.0003_auto_20160802_1358:2
from __future__ import unicode_literals

from django.db import migrations, models
import oscar.apps.catalogue.reviews.utils


class Migration(migrations.Migration):

    dependencies = [
        ('reviews', '0002_update_email_length'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productreview',
            name='status',
            field=models.SmallIntegerField(choices=[(0, 'Requires moderation'), (1, 'Approved'), (2, 'Rejected')], default=oscar.apps.catalogue.reviews.utils.get_default_review_status, verbose_name='Status'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0004_auto_20150217_1710:1
==oscar.apps.catalogue.migrations.0004_auto_20150217_1710:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0003_data_migration_slugs'),
    ]

    operations = [
        migrations.AlterField(
            model_name='category',
            name='slug',
            field=models.SlugField(max_length=255, verbose_name='Slug'),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0005_auto_20150604_1450:1
==oscar.apps.catalogue.migrations.0005_auto_20150604_1450:1
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0004_auto_20150217_1710'),
    ]

    operations = [
        migrations.AlterField(
            model_name='product',
            name='product_class',
            field=models.ForeignKey(related_name='products', on_delete=django.db.models.deletion.PROTECT, blank=True, to='catalogue.ProductClass', help_text='Choose what type of product this is', null=True, verbose_name='Product type'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0009_slugfield_noop:2
==oscar.apps.catalogue.migrations.0009_slugfield_noop:2
from __future__ import unicode_literals

from django.db import migrations
import oscar.models.fields.slugfield


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0008_auto_20160304_1652'),
    ]

    operations = [
        migrations.AlterField(
            model_name='category',
            name='slug',
            field=oscar.models.fields.slugfield.SlugField(max_length=255, verbose_name='Slug'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0013_auto_20170821_1548:2
==oscar.apps.catalogue.migrations.0013_auto_20170821_1548:2
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0012_auto_20170609_1902'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productattribute',
            name='option_group',
            field=models.ForeignKey(blank=True, help_text='Select an option group if using type "Option" or "Multi Option"', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_attributes', to='catalogue.AttributeOptionGroup', verbose_name='Option Group'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.dashboard.catalogue.widgets:0
==oscar.apps.dashboard.catalogue.widgets:0
==oscar.apps.dashboard.catalogue.widgets:0
from django.urls import reverse_lazy

from oscar.forms.widgets import MultipleRemoteSelect, RemoteSelect


class ProductSelect(RemoteSelect):
    # Implemented as separate class instead of just calling
    # AjaxSelect(data_url=...) for overridability and backwards compatibility
    lookup_url = reverse_lazy('dashboard:catalogue-product-lookup')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.attrs['class'] = 'select2 product-select'


class ProductSelectMultiple(MultipleRemoteSelect):
    # Implemented as separate class instead of just calling
    # AjaxSelect(data_url=...) for overridability and backwards compatibility
    lookup_url = reverse_lazy('dashboard:catalogue-product-lookup')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.dashboard.tables:0
==oscar.apps.dashboard.tables:0
from django.utils.translation import ungettext_lazy
from django_tables2 import Table


class DashboardTable(Table):
    caption = ungettext_lazy('%d Row', '%d Rows')

    def get_caption_display(self):
        # Allow overriding the caption with an arbitrary string that we cannot
        # interpolate the number of rows in
        try:
            return self.caption % self.paginator.count
        except TypeError:
            pass
        return self.caption

    class Meta:
        template = 'oscar/dashboard/table.html'
        attrs = {'class': 'table table-striped table-bordered'}
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0003_auto_20161120_1707:2
==oscar.apps.offer.migrations.0003_auto_20161120_1707:2
from __future__ import unicode_literals

from django.db import migrations
import oscar.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0002_auto_20151210_1053'),
    ]

    operations = [
        migrations.AlterField(
            model_name='condition',
            name='proxy_class',
            field=oscar.models.fields.NullCharField(default=None, max_length=255, verbose_name='Custom class'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0004_auto_20141007_2032:1
==oscar.apps.basket.migrations.0004_auto_20141007_2032:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.core.utils


class Migration(migrations.Migration):

    dependencies = [
        ('basket', '0003_basket_vouchers'),
    ]

    operations = [
        migrations.AlterField(
            model_name='line',
            name='price_currency',
            field=models.CharField(default=oscar.core.utils.get_default_currency, max_length=12, verbose_name='Currency'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0007_slugfield_noop:2
==oscar.apps.basket.migrations.0007_slugfield_noop:2
from __future__ import unicode_literals

from django.db import migrations
import oscar.models.fields.slugfield


class Migration(migrations.Migration):

    dependencies = [
        ('basket', '0006_auto_20160111_1108'),
    ]

    operations = [
        migrations.AlterField(
            model_name='line',
            name='line_reference',
            field=oscar.models.fields.slugfield.SlugField(max_length=128, verbose_name='Line Reference'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.models:0
==oscar.apps.address.models:0
from oscar.apps.address.abstract_models import (
    AbstractCountry, AbstractUserAddress)
from oscar.core.loading import is_model_registered

__all__ = []


if not is_model_registered('address', 'UserAddress'):
    class UserAddress(AbstractUserAddress):
        pass

    __all__.append('UserAddress')


if not is_model_registered('address', 'Country'):
    class Country(AbstractCountry):
        pass

    __all__.append('Country')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.migrations.0002_auto_20141007_2032:1
==oscar.apps.order.migrations.0002_auto_20141007_2032:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.core.utils


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='order',
            name='currency',
            field=models.CharField(default=oscar.core.utils.get_default_currency, max_length=12, verbose_name='Currency'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.migrations.0003_auto_20150113_1629:1
==oscar.apps.order.migrations.0003_auto_20150113_1629:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0002_auto_20141007_2032'),
    ]

    operations = [
        migrations.AlterField(
            model_name='order',
            name='date_placed',
            field=models.DateTimeField(db_index=True),
            preserve_default=True,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.migrations.0002_auto_20141007_2032:1
==oscar.apps.payment.migrations.0002_auto_20141007_2032:1
from __future__ import unicode_literals

from django.db import models, migrations
import oscar.core.utils


class Migration(migrations.Migration):

    dependencies = [
        ('payment', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='source',
            name='currency',
            field=models.CharField(default=oscar.core.utils.get_default_currency, max_length=12, verbose_name='Currency'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.checkout.exceptions:0
==oscar.apps.checkout.exceptions:0
class FailedPreCondition(Exception):

    def __init__(self, url, message=None, messages=None):
        self.url = url
        if message:
            self.messages = [message]
        elif messages:
            self.messages = messages
        else:
            self.messages = []


class PassedSkipCondition(Exception):
    """
    To be raised when a skip condition has been passed and the current view
    should be skipped. The passed URL dictates where to.
    """
    def __init__(self, url):
        self.url = url
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==sorl.thumbnail.engines.convert_engine:66
==sorl.thumbnail.engines.vipsthumbnail_engine:60
            thumbnail.write(fp.read())

    def cleanup(self, image):
        os.remove(image['source'])  # we should not need this now

    def get_image(self, source):
        """
        Returns the backend image objects from a ImageFile instance
        """
        with NamedTemporaryFile(mode='wb', delete=False) as fp:
            fp.write(source.read())
        return {'source': fp.name, 'options': OrderedDict(), 'size': None}

    def get_image_size(self, image):
        """
        Returns the image width and height as a tuple
        """
        if image['size'] is None:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.migrations.0002_update_email_length:2
==oscar.apps.catalogue.reviews.migrations.0002_update_email_length:2
==oscar.apps.catalogue.reviews.migrations.0002_update_email_length:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reviews', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productreview',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='Email'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0007_conditionaloffer_exclusive:2
==oscar.apps.offer.migrations.0007_conditionaloffer_exclusive:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0006_auto_20170504_0616'),
    ]

    operations = [
        migrations.AddField(
            model_name='conditionaloffer',
            name='exclusive',
            field=models.BooleanField(default=True, help_text='Exclusive offers cannot be combined on the same items', verbose_name='Exclusive offer'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0005_auto_20150604_1450:1
==oscar.apps.basket.migrations.0005_auto_20150604_1450:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('basket', '0004_auto_20141007_2032'),
    ]

    operations = [
        migrations.AlterField(
            model_name='basket',
            name='vouchers',
            field=models.ManyToManyField(to='voucher.Voucher', verbose_name='Vouchers', blank=True),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.migrations.0006_auto_20180413_0911:2
==oscar.apps.voucher.migrations.0006_auto_20180413_0911:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('voucher', '0005_auto_20180402_1425'),
    ]

    operations = [
        migrations.AlterField(
            model_name='voucherset',
            name='count',
            field=models.PositiveIntegerField(verbose_name='Number of vouchers'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.notifications.services:0
==oscar.apps.customer.notifications.services:0
from oscar.core.loading import get_model

Notification = get_model('customer', 'Notification')


def notify_user(user, subject, **kwargs):
    """
    Send a simple notification to a user
    """
    Notification.objects.create(recipient=user, subject=subject, **kwargs)


def notify_users(users, subject, **kwargs):
    """
    Send a simple notification to an iterable of users
    """
    for user in users:
        notify_user(user, subject, **kwargs)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.migrations.0003_update_email_length:2
==oscar.apps.customer.migrations.0003_update_email_length:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('customer', '0002_auto_20150807_1725'),
    ]

    operations = [
        migrations.AlterField(
            model_name='productalert',
            name='email',
            field=models.EmailField(blank=True, db_index=True, max_length=254, verbose_name='Email'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.managers:0
==oscar.apps.customer.managers:0
from django.db import models


class CommunicationTypeManager(models.Manager):

    def get_and_render(self, code, context):
        """
        Return a dictionary of rendered messages, ready for sending.

        This method wraps around whether an instance of this event-type exists
        in the database.  If not, then an instance is created on the fly and
        used to generate the message contents.
        """
        try:
            commtype = self.get(code=code)
        except self.model.DoesNotExist:
            commtype = self.model(code=code)
        return commtype.get_messages(context)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.migrations.0005_update_email_length:2
==oscar.apps.order.migrations.0005_update_email_length:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0004_auto_20160111_1108'),
    ]

    operations = [
        migrations.AlterField(
            model_name='order',
            name='guest_email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='Guest email address'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.migrations.0003_auto_20160323_1520:2
==oscar.apps.payment.migrations.0003_auto_20160323_1520:2
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('payment', '0002_auto_20141007_2032'),
    ]

    operations = [
        migrations.AlterField(
            model_name='source',
            name='reference',
            field=models.CharField(blank=True, max_length=255, verbose_name='Reference'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch2_backend:199
==haystack.backends.elasticsearch_backend:537
    def more_like_this(self, model_instance, additional_query_string=None,
                       start_offset=0, end_offset=None, models=None,
                       limit_to_registered_models=None, result_class=None, **kwargs):
        from haystack import connections

        if not self.setup_complete:
            self.setup()

        # Deferred models will have a different class ("RealClass_Deferred_fieldname")
        # which won't be in our registry:
        model_klass = model_instance._meta.concrete_model

        index = connections[self.connection_alias].get_unified_index().get_index(model_klass)
        field_name = index.get_content_field()
        params = {}

        if start_offset is not None:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.migrations.0004_auto_20160107_1755:1
==oscar.apps.partner.migrations.0004_auto_20160107_1755:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('partner', '0003_auto_20150604_1450'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='partner',
            options={'ordering': ('name', 'code'), 'verbose_name': 'Fulfillment partner', 'verbose_name_plural': 'Fulfillment partners', 'permissions': (('dashboard_access', 'Can access dashboard'),)},
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.wishlists.migrations.0002_auto_20160111_1108:1
==oscar.apps.wishlists.migrations.0002_auto_20160111_1108:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('wishlists', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='line',
            options={'ordering': ['pk'], 'verbose_name': 'Wish list line'},
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0011_auto_20170422_1355:2
==oscar.apps.catalogue.migrations.0011_auto_20170422_1355:2
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0010_auto_20170420_0439'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='productimage',
            unique_together=set([]),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0007_auto_20151207_1440:1
==oscar.apps.catalogue.migrations.0007_auto_20151207_1440:1
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0006_auto_20150807_1725'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='attributeoption',
            unique_together=set([('group', 'option')]),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.offer.migrations.0004_auto_20170415_1518:2
==oscar.apps.offer.migrations.0004_auto_20170415_1518:2
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('offer', '0003_auto_20161120_1707'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='conditionaloffer',
            options={'ordering': ['-priority', 'pk'], 'verbose_name': 'Conditional offer', 'verbose_name_plural': 'Conditional offers'},
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0006_auto_20160111_1108:1
==oscar.apps.basket.migrations.0006_auto_20160111_1108:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('basket', '0005_auto_20150604_1450'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='line',
            options={'ordering': ['date_created', 'pk'], 'verbose_name': 'Basket line', 'verbose_name_plural': 'Basket lines'},
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.migrations.0005_auto_20180402_1425:2
==oscar.apps.voucher.migrations.0005_auto_20180402_1425:2
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('voucher', '0004_auto_20180228_0940'),
    ]

    operations = [
        migrations.AlterField(
            model_name='voucherset',
            name='offer',
            field=models.OneToOneField(blank=True, limit_choices_to={'offer_type': 'Voucher'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voucher_set', to='offer.ConditionalOffer', verbose_name='Offer'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.order.migrations.0004_auto_20160111_1108:1
==oscar.apps.order.migrations.0004_auto_20160111_1108:1
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
        ('order', '0003_auto_20150113_1629'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='line',
            options={'ordering': ['pk'], 'verbose_name': 'Order Line', 'verbose_name_plural': 'Order Lines'},
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 4 files
==haystack.backends.solr_backend:250
==haystack.backends.solr_backend:335
==haystack.backends.whoosh_backend:369
==haystack.backends.whoosh_backend:491
        if limit_to_registered_models is None:
            limit_to_registered_models = getattr(settings, 'HAYSTACK_LIMIT_TO_REGISTERED_MODELS', True)

        if models and len(models):
            model_choices = sorted(get_model_ct(model) for model in models)
        elif limit_to_registered_models:
            # Using narrow queries, limit the results to only models handled
            # with the current routers.
            model_choices = self.build_models_list()
        else:
            model_choices = []

        if len(model_choices) > 0:
            if narrow_queries is None:
                narrow_queries = set()

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch2_backend:62
==haystack.backends.elasticsearch_backend:243
        except elasticsearch.TransportError as e:
            if not self.silently_fail:
                raise

            if models is not None:
                self.log.error("Failed to clear Elasticsearch index of models '%s': %s",
                               ','.join(models_to_delete), e, exc_info=True)
            else:
                self.log.error("Failed to clear Elasticsearch index: %s", e, exc_info=True)

    def build_search_kwargs(self, query_string, sort_by=None, start_offset=0, end_offset=None,
                            fields='', highlight=False, facets=None,
                            date_facets=None, query_facets=None,
                            narrow_queries=None, spelling_query=None,
                            within=None, dwithin=None, distance_point=None,
                            models=None, limit_to_registered_models=None,
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.wishlists.migrations.0003_auto_20181115_1953:2
==oscar.apps.wishlists.migrations.0003_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('wishlists', '0002_auto_20160111_1108'),
    ]

    operations = [
        migrations.AlterField(
            model_name='wishlist',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.catalogue.migrations.0015_product_is_public:2
==oscar.apps.catalogue.migrations.0015_product_is_public:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0014_auto_20181115_1953'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='is_public',
            field=models.BooleanField(default=True, help_text='Show this product in search results and catalogue listings.', verbose_name='Is public'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.migrations.0008_auto_20181115_1953:2
==oscar.apps.basket.migrations.0008_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('basket', '0007_slugfield_noop'),
    ]

    operations = [
        migrations.AlterField(
            model_name='line',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date Created'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.migrations.0003_auto_20171212_0411:2
==oscar.apps.voucher.migrations.0003_auto_20171212_0411:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('voucher', '0002_auto_20170418_2132'),
    ]

    operations = [
        migrations.AlterField(
            model_name='voucher',
            name='offers',
            field=models.ManyToManyField(limit_choices_to={'offer_type': 'Voucher'}, related_name='vouchers', to='offer.ConditionalOffer', verbose_name='Offers'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.alerts.receivers:0
==oscar.apps.customer.alerts.receivers:0
from django.conf import settings
from django.db.models.signals import post_save

from oscar.core.loading import get_model


def send_product_alerts(sender, instance, created, **kwargs):
    if kwargs.get('raw', False):
        return
    from oscar.apps.customer.alerts import utils
    utils.send_product_alerts(instance.product)


if settings.OSCAR_EAGER_ALERTS:
    StockRecord = get_model('partner', 'StockRecord')
    post_save.connect(send_product_alerts, sender=StockRecord)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.migrations.0005_auto_20181115_1953:2
==oscar.apps.customer.migrations.0005_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('customer', '0004_email_save'),
    ]

    operations = [
        migrations.AlterField(
            model_name='notification',
            name='date_sent',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.address.migrations.0006_auto_20181115_1953:2
==oscar.apps.address.migrations.0006_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('address', '0005_regenerate_user_address_hashes'),
    ]

    operations = [
        migrations.AlterField(
            model_name='country',
            name='printable_name',
            field=models.CharField(db_index=True, max_length=128, verbose_name='Country name'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.payment.migrations.0004_auto_20181115_1953:2
==oscar.apps.payment.migrations.0004_auto_20181115_1953:2
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('payment', '0003_auto_20160323_1520'),
    ]

    operations = [
        migrations.AlterField(
            model_name='transaction',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date Created'),
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==django.contrib.admin.widgets:258
==oscar.apps.dashboard.widgets:25
==oscar.apps.dashboard.widgets:25
    def __deepcopy__(self, memo):
        obj = copy.copy(self)
        obj.widget = copy.deepcopy(self.widget, memo)
        obj.attrs = self.widget.attrs
        memo[id(self)] = obj
        return obj

    @property
    def is_hidden(self):
        return self.widget.is_hidden

    @property
    def media(self):
        return self.widget.media

    def get_related_url(self, info, action, *args):
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==treebeard.mp_tree:820
==treebeard.ns_tree:594
    def get_tree(cls, parent=None):
        """
        :returns:

            A *queryset* of nodes ordered as DFS, including the parent.
            If no parent is given, all trees are returned.
        """
        cls = get_result_class(cls)

        if parent is None:
            # return the entire tree
            return cls.objects.all()
        if parent.is_leaf():
            return cls.objects.filter(pk=parent.pk)
        return cls.objects.filter(
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.admin:0
==oscar.apps.partner.admin:0
from django.contrib import admin

from oscar.core.loading import get_model

Partner = get_model('partner', 'Partner')
StockRecord = get_model('partner', 'StockRecord')


class StockRecordAdmin(admin.ModelAdmin):
    list_display = ('product', 'partner', 'partner_sku', 'price_excl_tax', 'num_in_stock')
    list_filter = ('partner',)


admin.site.register(Partner)
admin.site.register(StockRecord, StockRecordAdmin)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.search.features:0
==oscar.apps.search.features:0
from django.conf import settings


def is_solr_supported():
    try:
        return 'Solr' in settings.HAYSTACK_CONNECTIONS['default']['ENGINE']
    except (KeyError, AttributeError):
        return False


def is_elasticsearch_supported():
    try:
        return 'Elasticsearch' in settings.HAYSTACK_CONNECTIONS['default']['ENGINE']
    except (KeyError, AttributeError):
        return False
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django_jenkins.tasks.run_flake8:79
==django_jenkins.tasks.run_pep8:60
        output.close()

    def get_config_path(self, options):
        if options['pep8-rcfile']:
            return options['pep8-rcfile']

        rcfile = getattr(settings, 'PEP8_RCFILE', None)
        if rcfile:
            return rcfile

        if os.path.exists('tox.ini'):
            return 'tox.ini'

        if os.path.exists('setup.cfg'):
            return 'setup.cfg'
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==sorl.thumbnail.engines.convert_engine:86
==sorl.thumbnail.engines.vipsthumbnail_engine:80
            p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            p.wait()
            m = size_re.match(str(p.stdout.read()))
            image['size'] = int(m.group('x')), int(m.group('y'))
        return image['size']

    def is_valid_image(self, raw_data):
        """
        This is not very good for imagemagick because it will say anything is
        valid that it can use as input.
        """
        with NamedTemporaryFile(mode='wb') as fp:
            fp.write(raw_data)
            fp.flush()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==treebeard.al_tree:370
==treebeard.ns_tree:360
        if target.is_descendant_of(self):
            raise InvalidMoveToDescendant(
                _("Can't move node to a descendant."))

        if self == target and (
            (pos == 'left') or
            (pos in ('right', 'last-sibling') and
             target == target.get_last_sibling()) or
            (pos == 'first-sibling' and
             target == target.get_first_sibling())):
            # special cases, not actually moving the node so no need to UPDATE
            return

        if pos == 'sorted-sibling':
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:42
==haystack.backends.solr_backend:28
    RESERVED_WORDS = (
        'AND',
        'NOT',
        'OR',
        'TO',
    )

    # Characters reserved by Solr for special use.
    # The '\\' must come first, so as not to overwrite the other slash replacements.
    RESERVED_CHARACTERS = (
        '\\', '+', '-', '&&', '||', '!', '(', ')', '{', '}',
        '[', ']', '^', '"', '~', '*', '?', ':', '/',
    )

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:813
==haystack.backends.whoosh_backend:823
            'fuzzy': u'%s~',
        }

        if value.post_process is False:
            query_frag = prepared_value
        else:
            if filter_type in ['content', 'contains', 'startswith', 'endswith', 'fuzzy']:
                if value.input_type_name == 'exact':
                    query_frag = prepared_value
                else:
                    # Iterate over terms & incorportate the converted form of each into the query.
                    terms = []

                    if isinstance(prepared_value, six.string_types):
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 4 files
==oscar.apps.address.migrations.0001_initial:36
==oscar.apps.address.migrations.0001_initial:36
==oscar.apps.order.migrations.0001_initial:237
==oscar.apps.order.migrations.0001_initial:237
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),
                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django_jenkins.tasks.run_flake8:46
==django_jenkins.tasks.run_pep8:36
        config_file = self.get_config_path(options)
        if config_file is not None:
            pep8_options['config_file'] = config_file

        set_option(pep8_options, 'exclude', options['pep8-exclude'], config_file,
                   default=pep8.DEFAULT_EXCLUDE + ",south_migrations", split=',')

        set_option(pep8_options, 'select', options['pep8-select'], config_file, split=',')

        set_option(pep8_options, 'ignore', options['pep8-ignore'], config_file, split=',')

        set_option(pep8_options, 'max_line_length', options['pep8-max-line-length'], config_file,
                   default=pep8.MAX_LINE_LENGTH)

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.solr_backend:665
==haystack.backends.whoosh_backend:823
            'fuzzy': u'%s~',
        }

        if value.post_process is False:
            query_frag = prepared_value
        else:
            if filter_type in ['content', 'contains', 'startswith', 'endswith', 'fuzzy']:
                if value.input_type_name == 'exact':
                    query_frag = prepared_value
                else:
                    # Iterate over terms & incorportate the converted form of each into the query.
                    terms = []

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch2_backend:284
==haystack.backends.elasticsearch_backend:563
        except elasticsearch.TransportError as e:
            if not self.silently_fail:
                raise

            self.log.error("Failed to fetch More Like This from Elasticsearch for document '%s': %s",
                           doc_id, e, exc_info=True)
            raw_results = {}

        return self._process_results(raw_results, result_class=result_class)

    def _process_results(self, raw_results, highlight=False,
                         result_class=None, distance_point=None,
                         geo_sort=False):
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 6 files
==haystack.backends.elasticsearch2_backend:249
==haystack.backends.elasticsearch_backend:409
==haystack.backends.solr_backend:250
==haystack.backends.solr_backend:335
==haystack.backends.whoosh_backend:369
==haystack.backends.whoosh_backend:491
        if limit_to_registered_models is None:
            limit_to_registered_models = getattr(settings, 'HAYSTACK_LIMIT_TO_REGISTERED_MODELS', True)

        if models and len(models):
            model_choices = sorted(get_model_ct(model) for model in models)
        elif limit_to_registered_models:
            # Using narrow queries, limit the results to only models handled
            # with the current routers.
            model_choices = self.build_models_list()
        else:
            model_choices = []

        if len(model_choices) > 0:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 4 files
==oscar.apps.order.migrations.0001_initial:25
==oscar.apps.order.migrations.0001_initial:25
==oscar.apps.partner.migrations.0001_initial:36
==oscar.apps.partner.migrations.0001_initial:36
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==django.contrib.auth.models:336
==oscar.apps.customer.abstract_models:82
==oscar.apps.customer.abstract_models:82
    def clean(self):
        super().clean()
        self.email = self.__class__.objects.normalize_email(self.email)

    def get_full_name(self):
        """
        Return the first_name plus the last_name, with a space in between.
        """
        full_name = '%s %s' % (self.first_name, self.last_name)
        return full_name.strip()

    def get_short_name(self):
        """Return the short name for the user."""
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==treebeard.al_tree:282
==treebeard.ns_tree:239
        pos = self._prepare_pos_var_for_add_sibling(pos)

        if len(kwargs) == 1 and 'instance' in kwargs:
            # adding the passed (unsaved) instance to the tree
            newobj = kwargs['instance']
            if newobj.pk:
                raise NodeAlreadySaved("Attempted to add a tree node that is "\
                    "already in the database")
        else:
            # creating a new object
            newobj = get_result_class(self.__class__)(**kwargs)

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.partner.apps:0
==oscar.apps.partner.apps:0
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig


class PartnerConfig(OscarConfig):
    label = 'partner'
    name = 'oscar.apps.partner'
    verbose_name = _('Partner')

    def ready(self):
        from . import receivers  # noqa
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.wishlists.formsets:1
==oscar.apps.wishlists.formsets:1
from django.forms.models import inlineformset_factory

from oscar.core.loading import get_class, get_model

WishList = get_model('wishlists', 'WishList')
Line = get_model('wishlists', 'Line')
WishListLineForm = get_class('wishlists.forms', 'WishListLineForm')


LineFormset = inlineformset_factory(
    WishList, Line, fields=('quantity', ), form=WishListLineForm,
    extra=0, can_delete=False)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.models:0
==oscar.apps.catalogue.reviews.models:0
==oscar.apps.catalogue.reviews.models:0
from oscar.apps.catalogue.reviews.abstract_models import (
    AbstractProductReview, AbstractVote)
from oscar.core.loading import is_model_registered

if not is_model_registered('reviews', 'ProductReview'):
    class ProductReview(AbstractProductReview):
        pass


if not is_model_registered('reviews', 'Vote'):
    class Vote(AbstractVote):
        pass
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.catalogue.reviews.utils:0
==oscar.apps.catalogue.reviews.utils:0
==oscar.apps.catalogue.reviews.utils:0
from django.conf import settings

from oscar.core.loading import get_model


def get_default_review_status():
    ProductReview = get_model('reviews', 'ProductReview')

    if settings.OSCAR_MODERATE_REVIEWS:
        return ProductReview.FOR_MODERATION

    return ProductReview.APPROVED
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.voucher.apps:0
==oscar.apps.voucher.apps:0
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig


class VoucherConfig(OscarConfig):
    label = 'voucher'
    name = 'oscar.apps.voucher'
    verbose_name = _('Voucher')

    def ready(self):
        from . import receivers  # noqa
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.customer.notifications.context_processors:0
==oscar.apps.customer.notifications.context_processors:0
from oscar.core.loading import get_model

Notification = get_model('customer', 'Notification')


def notifications(request):
    ctx = {}
    if getattr(request, 'user', None) and request.user.is_authenticated:
        num_unread = Notification.objects.filter(
            recipient=request.user, date_read=None).count()
        ctx['num_unread_notifications'] = num_unread
    return ctx
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 9 files
==oscar.apps.catalogue.reviews.migrations.0001_initial:6
==oscar.apps.catalogue.reviews.migrations.0001_initial:6
==oscar.apps.catalogue.reviews.migrations.0001_initial:6
==oscar.apps.customer.migrations.0001_initial:5
==oscar.apps.customer.migrations.0001_initial:5
==oscar.apps.offer.migrations.0001_initial:7
==oscar.apps.offer.migrations.0001_initial:7
==oscar.apps.wishlists.migrations.0001_initial:5
==oscar.apps.wishlists.migrations.0001_initial:5
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.analytics.apps:0
==oscar.apps.analytics.apps:0
from django.utils.translation import gettext_lazy as _

from oscar.core.application import OscarConfig


class AnalyticsConfig(OscarConfig):
    label = 'analytics'
    name = 'oscar.apps.analytics'
    verbose_name = _('Analytics')

    def ready(self):
        from . import receivers  # noqa
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==oscar.apps.order.migrations.0001_initial:237
==oscar.apps.partner.migrations.0001_initial:36
==oscar.apps.partner.migrations.0001_initial:36
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 7 files
==oscar.apps.address.migrations.0001_initial:36
==oscar.apps.address.migrations.0001_initial:36
==oscar.apps.order.migrations.0001_initial:237
==oscar.apps.order.migrations.0001_initial:25
==oscar.apps.order.migrations.0001_initial:25
==oscar.apps.partner.migrations.0001_initial:36
==oscar.apps.partner.migrations.0001_initial:36
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),
                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),
                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),
                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),
                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),
                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),
                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),
                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),
                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django.contrib.sessions.backends.cache:13
==django.contrib.sessions.backends.cached_db:15
    cache_key_prefix = KEY_PREFIX

    def __init__(self, session_key=None):
        self._cache = caches[settings.SESSION_CACHE_ALIAS]
        super().__init__(session_key)

    @property
    def cache_key(self):
        return self.cache_key_prefix + self._get_or_create_session_key()

    def load(self):
        try:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==django.contrib.admin.widgets:303
==oscar.apps.dashboard.widgets:75
==oscar.apps.dashboard.widgets:75
        return context

    def value_from_datadict(self, data, files, name):
        return self.widget.value_from_datadict(data, files, name)

    def value_omitted_from_data(self, data, files, name):
        return self.widget.value_omitted_from_data(data, files, name)

    def id_for_label(self, id_):
        return self.widget.id_for_label(id_)


/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.__init__:552
==haystack.backends.elasticsearch_backend:947
        if kwargs:
            search_kwargs.update(kwargs)

        results = self.backend.search(final_query, **search_kwargs)
        self._results = results.get('results', [])
        self._hit_count = results.get('hits', 0)
        self._facet_counts = self.post_process_facets(results)
        self._spelling_suggestion = results.get('spelling_suggestion', None)

    def run_mlt(self, **kwargs):
        """
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:940
==haystack.backends.solr_backend:791
        return search_kwargs

    def run(self, spelling_query=None, **kwargs):
        """Builds and executes the query. Returns a list of search results."""
        final_query = self.build_query()
        search_kwargs = self.build_params(spelling_query, **kwargs)

        if kwargs:
            search_kwargs.update(kwargs)

        results = self.backend.search(final_query, **search_kwargs)
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:882
==haystack.backends.solr_backend:731
    def build_params(self, spelling_query=None, **kwargs):
        search_kwargs = {
            'start_offset': self.start_offset,
            'result_class': self.result_class
        }
        order_by_list = None

        if self.order_by:
            if order_by_list is None:
                order_by_list = []

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:832
==haystack.backends.solr_backend:681
                    if len(terms) == 1:
                        query_frag = terms[0]
                    else:
                        query_frag = u"(%s)" % " AND ".join(terms)
            elif filter_type == 'in':
                in_options = []

                if not prepared_value:
                    query_frag = u'(!*:*)'
                else:
                    for possible_value in prepared_value:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==haystack.backends.elasticsearch_backend:42
==haystack.backends.solr_backend:28
==haystack.backends.whoosh_backend:64
    RESERVED_WORDS = (
        'AND',
        'NOT',
        'OR',
        'TO',
    )

    # Characters reserved by Solr for special use.
    # The '\\' must come first, so as not to overwrite the other slash replacements.
    RESERVED_CHARACTERS = (
        '\\', '+', '-', '&&', '||', '!', '(', ')', '{', '}',
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 6 files
==oscar.apps.dashboard.reviews.views:120
==oscar.apps.dashboard.reviews.views:120
==oscar.apps.dashboard.reviews.views:120
==oscar.apps.dashboard.users.views:180
==oscar.apps.dashboard.users.views:180
==oscar.apps.dashboard.users.views:180
            if len(parts) >= 2:
                queryset = queryset.filter(
                    user__first_name__istartswith=parts[0],
                    user__last_name__istartswith=parts[1]
                ).distinct()
            else:
                queryset = queryset.filter(
                    Q(user__first_name__istartswith=parts[0])
                    | Q(user__last_name__istartswith=parts[-1])
                ).distinct()
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 6 files
==oscar.apps.dashboard.offers.views:64
==oscar.apps.dashboard.offers.views:64
==oscar.apps.dashboard.offers.views:64
==oscar.apps.dashboard.partners.views:50
==oscar.apps.dashboard.partners.views:50
==oscar.apps.dashboard.partners.views:50
        return qs

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['queryset_description'] = self.description
        ctx['form'] = self.form
        ctx['is_filtered'] = self.is_filtered
        return ctx


/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django_jenkins.tasks.run_csslint:1
==django_jenkins.tasks.run_scsslint:1
import os
import subprocess
import codecs

from django.conf import settings
from django_jenkins.tasks import static_files_iterator


class Reporter(object):
    def add_arguments(self, parser):
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 6 files
==oscar.apps.dashboard.offers.views:48
==oscar.apps.dashboard.offers.views:48
==oscar.apps.dashboard.offers.views:48
==oscar.apps.dashboard.partners.views:38
==oscar.apps.dashboard.partners.views:38
==oscar.apps.dashboard.partners.views:38
        self.is_filtered = False
        self.form = self.form_class(self.request.GET)
        if not self.form.is_valid():
            return qs

        data = self.form.cleaned_data

        if data['name']:
            qs = qs.filter(name__icontains=data['name'])
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 6 files
==oscar.apps.analytics.reports:0
==oscar.apps.analytics.reports:0
==oscar.apps.offer.reports:3
==oscar.apps.offer.reports:3
==oscar.apps.order.reports:2
==oscar.apps.order.reports:2
from django.utils.translation import gettext_lazy as _

from oscar.core.loading import get_class, get_model

ReportGenerator = get_class('dashboard.reports.reports', 'ReportGenerator')
ReportCSVFormatter = get_class('dashboard.reports.reports',
                               'ReportCSVFormatter')
ReportHTMLFormatter = get_class('dashboard.reports.reports',
                                'ReportHTMLFormatter')
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==treebeard.mp_tree:1073
==treebeard.ns_tree:654
            return
        try:
            if update:
                del self._cached_parent_obj
            else:
                return self._cached_parent_obj
        except AttributeError:
            pass
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch2_backend:37
==haystack.backends.elasticsearch_backend:225
        if models is not None:
            assert isinstance(models, (list, tuple))

        try:
            if models is None:
                self.conn.indices.delete(index=self.index_name, ignore=404)
                self.setup_complete = False
                self.existing_mapping = {}
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:493
==haystack.backends.solr_backend:126
    @log_query
    def search(self, query_string, **kwargs):
        if len(query_string) == 0:
            return {
                'results': [],
                'hits': 0,
            }

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.elasticsearch_backend:15
==haystack.backends.solr_backend:13
from haystack.exceptions import MissingDependency, MoreLikeThisError, SkipDocument
from haystack.inputs import Clean, Exact, PythonData, Raw
from haystack.models import SearchResult
from haystack.utils import log as logging
from haystack.utils import get_identifier, get_model_ct
from haystack.utils.app_loading import haystack_get_model

try:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==oscar.apps.basket.signals:0
==oscar.apps.basket.signals:0
import django.dispatch

basket_addition = django.dispatch.Signal(
    providing_args=["product", "user", "request"])
voucher_addition = django.dispatch.Signal(
    providing_args=["basket", "voucher"])
voucher_removal = django.dispatch.Signal(
    providing_args=["basket", "voucher"])
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 4 files
==oscar.apps.basket.migrations.0001_initial:42
==oscar.apps.basket.migrations.0001_initial:42
==oscar.apps.order.migrations.0001_initial:86
==oscar.apps.order.migrations.0001_initial:86
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LineAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 4 files
==oscar.apps.basket.migrations.0001_initial:24
==oscar.apps.basket.migrations.0001_initial:24
==oscar.apps.order.migrations.0001_initial:57
==oscar.apps.order.migrations.0001_initial:57
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django_jenkins.tasks.run_flake8:25
==django_jenkins.tasks.run_pep8:10
        parser.add_argument("--pep8-exclude",
                            dest="pep8-exclude",
                            help="exclude files or directories which match these "
                            "comma separated patterns (default: %s)" %
                            (pep8.DEFAULT_EXCLUDE + ",south_migrations"))
        parser.add_argument("--pep8-select", dest="pep8-select",
                            help="select errors and warnings (e.g. E,W6)")
        parser.add_argument("--pep8-ignore", dest="pep8-ignore",
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 4 files
==django.contrib.flatpages.forms:12
==oscar.apps.dashboard.pages.forms:30
==oscar.apps.dashboard.pages.forms:30
==oscar.apps.dashboard.pages.forms:30
        error_messages={
            "invalid": _(
                "This value must contain only letters, numbers, dots, "
                "underscores, dashes, slashes or tildes."
            ),
        },
    )

/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==weShop.migrations.0006_remove_order_country:9
==weShop.migrations.0009_remove_order_country:9
    ]

    operations = [
        migrations.RemoveField(
            model_name='order',
            name='country',
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django.contrib.auth.migrations.0007_alter_validators_add_error_messages:8
==django.contrib.auth.migrations.0008_alter_user_username_max_length:8
    ]

    operations = [
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(
                error_messages={'unique': 'A user with that username already exists.'},
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.management.commands.rebuild_index:14
==haystack.management.commands.update_index:163
        )
        parser.add_argument(
            '-u', '--using', action='append', default=[],
            help='Update only the named backend (can be used multiple times). '
                 'By default all backends will be updated.'
        )
        parser.add_argument(
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==haystack.backends.__init__:127
==haystack.backends.elasticsearch_backend:253
    def build_search_kwargs(self, query_string, sort_by=None, start_offset=0, end_offset=None,
                            fields='', highlight=False, facets=None,
                            date_facets=None, query_facets=None,
                            narrow_queries=None, spelling_query=None,
                            within=None, dwithin=None, distance_point=None,
                            models=None, limit_to_registered_models=None,
                            result_class=None, **extra_kwargs):
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==haystack.backends.elasticsearch_backend:850
==haystack.backends.solr_backend:699
==haystack.backends.whoosh_backend:882
            elif filter_type == 'exact':
                if value.input_type_name == 'exact':
                    query_frag = prepared_value
                else:
                    prepared_value = Exact(prepared_value).prepare(self)
                    query_frag = filter_types[filter_type] % prepared_value
            else:
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==weShop.migrations.0004_auto_20200611_1034:59
==weShop.migrations.0007_order_country:13
        migrations.AddField(
            model_name='order',
            name='country',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to='weShop.Country'),
            preserve_default=False,
        ),
    ]
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django.contrib.sessions.backends.cache:42
==django.contrib.sessions.backends.file:102
            self._session_key = self._get_new_session_key()
            try:
                self.save(must_create=True)
            except CreateError:
                continue
            self.modified = True
            return
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==django.contrib.admin.options:1251
==oscar.apps.dashboard.views:263
==oscar.apps.dashboard.views:263
        new_value = obj.serializable_value(attr)
        popup_response_data = json.dumps({
            'action': 'change',
            'value': str(value),
            'obj': str(obj),
            'new_value': str(new_value),
        })
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 3 files
==django.contrib.admin.options:1191
==oscar.apps.dashboard.views:239
==oscar.apps.dashboard.views:239
        else:
            attr = obj._meta.pk.attname
        value = obj.serializable_value(attr)
        popup_response_data = json.dumps({
            'value': str(value),
            'obj': str(obj),
        })
/home/omar/git/ecommerce/venv/lib/python3.8/site-packages/django_tables2/templatetags/__init__.py:1: [R0801(duplicate-code), ] Similar lines in 2 files
==django.contrib.admin.options:629
==django.contrib.admin.widgets:26
    @property
    def media(self):
        extra = '' if settings.DEBUG else '.min'
        js = [
            'vendor/jquery/jquery%s.js' % extra,
            'jquery.init.js',
            'core.js',

------------------------------------------------------------------
Your code has been rated at 8.74/10 (previous run: 8.74/10, +0.00)

